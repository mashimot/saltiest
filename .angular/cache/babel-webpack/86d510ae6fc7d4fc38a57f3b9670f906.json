{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport var BootstrapGridSystemService = /*#__PURE__*/(function () {\n  var BootstrapGridSystemService = /*#__PURE__*/function () {\n    function BootstrapGridSystemService(data) {\n      var grid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '4 4 4';\n\n      _classCallCheck(this, BootstrapGridSystemService);\n\n      this._data = data;\n      this._grid = grid;\n    }\n\n    _createClass(BootstrapGridSystemService, [{\n      key: \"getGrid\",\n      value: function getGrid() {\n        return of([{\n          grid: '6 6',\n          columns: []\n        }, {\n          grid: '4 4 4',\n          columns: []\n        }, {\n          grid: '3 3 3 3',\n          columns: []\n        }, {\n          grid: '2 2 4 2 2',\n          columns: []\n        }, {\n          grid: '12',\n          columns: []\n        }]);\n      }\n    }, {\n      key: \"convert\",\n      value: function convert() {\n        var groups = [];\n\n        var grid = this._grid.replace(/ +/g, ' ').trim();\n\n        var arrGrid = grid.split(' ');\n        var chunkSize = arrGrid.length;\n\n        for (var i = 0; i < this._data.length; i += chunkSize) {\n          groups.push(this._data.slice(i, i + chunkSize));\n        }\n\n        this._page = groups.reduce(function (page, group, index) {\n          if (!page.rows) {\n            page = {\n              rows: [],\n              name: 'Page ' + (index + 1)\n            };\n          }\n\n          page.rows.push({\n            grid: grid,\n            columns: []\n          });\n          group.map(function (data) {\n            return page.rows[index].columns.push({\n              contents: [data]\n            });\n          });\n          return page;\n        }, []);\n        var lastRow = this._page.rows.length;\n        var columns = this._page.rows[lastRow - 1].columns;\n\n        if (columns.length < chunkSize) {\n          for (var k = columns.length; k < chunkSize; k++) {\n            this._page.rows[lastRow - 1].columns.push({\n              contents: []\n            });\n          }\n        }\n      }\n    }, {\n      key: \"getPage\",\n      value: function getPage() {\n        return this._page;\n      }\n    }]);\n\n    return BootstrapGridSystemService;\n  }();\n\n  BootstrapGridSystemService.ɵfac = function BootstrapGridSystemService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  BootstrapGridSystemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BootstrapGridSystemService,\n    factory: BootstrapGridSystemService.ɵfac\n  });\n  return BootstrapGridSystemService;\n})();","map":null,"metadata":{},"sourceType":"module"}