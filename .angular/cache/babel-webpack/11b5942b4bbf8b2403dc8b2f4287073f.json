{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as nearley from 'nearley';\nimport * as oracle_grammar from './../_parser/create-table-oracle-to-json';\nimport * as i0 from \"@angular/core\";\n\nString.prototype.replaceAllDecimalCommaToDecimalDot = function () {\n  var regex = {\n    valueBtwParentheses: \"\\\\(([^)]*)\\\\)\",\n    onlyNumeric: \"(([0-9]+(\\\\,[0-9]+)?)(\\\\.[0-9]+)?)\"\n  };\n  return this.replace(/^\\((.+)\\)$/, '$1').replace(new RegExp(regex.valueBtwParentheses, \"g\"), function (currentString, first) {\n    var r = new RegExp(regex.onlyNumeric, 'g');\n\n    if (r.test(first)) {\n      return \"(\" + first.replace(/,/g, '.') + \")\";\n    }\n\n    return currentString;\n  });\n};\n\nexport var CreateTableToJsonService = /*#__PURE__*/(function () {\n  var CreateTableToJsonService = /*#__PURE__*/function () {\n    function CreateTableToJsonService() {\n      _classCallCheck(this, CreateTableToJsonService);\n\n      this._errors = {};\n      this.category = 'form';\n      this._customLabel = this.getCustomLabelName();\n      this._schemas = [];\n    }\n\n    _createClass(CreateTableToJsonService, [{\n      key: \"setDataBase\",\n      value: function setDataBase(database) {\n        this._database = database;\n      }\n    }, {\n      key: \"getDataBase\",\n      value: function getDataBase() {\n        return this._database;\n      }\n    }, {\n      key: \"parse\",\n      value: function parse() {\n        this._sql = this._sql.replace(/\\s+/g, \" \").toLowerCase();\n        var p = new nearley.Parser(oracle_grammar);\n        /*if(this.getDataBase() == 'mysql'){\r\n            p = new Parser('mysql');\r\n        }*/\n\n        try {\n          var options = {};\n          /*if(this.getDataBase() == 'mysql'){\r\n              const options = {};\r\n              p.feed(this._sql);\r\n              const parsedJsonFormat = p.results;\r\n              const compactJsonTablesArray = p.toCompactJson(parsedJsonFormat);\r\n              this._rawSchema = compactJsonTablesArray;\r\n              this.convertDataMysql();\r\n          }*/\n\n          if (this.getDataBase() == 'oracle') {\n            var results = p.feed(this._sql.replaceAllDecimalCommaToDecimalDot()).results;\n            this._rawSchema = results[0];\n            this.convertDataOracle();\n          }\n        } catch (error) {\n          //this._errors.push(error);\n          this._errors = this.reportError(error, p);\n        }\n      }\n    }, {\n      key: \"reportError\",\n      value: function reportError(e, parser) {\n        console.log(parser);\n\n        if (parser.table) {\n          var s = parser.lexer.buffer;\n          var i = s.lastIndexOf(\" \", parser.current);\n          var j = s.indexOf(\" \", i + 1);\n          console.log(s.substr(i, j - i)); //var afterbang = s.substring(parser.current, s.indexOf(' ', parser.current));\n          //console.log(afterbang);\n\n          var lastColumnIndex = parser.table.length - 2;\n          var lastColumn = parser.table[lastColumnIndex];\n          var token = parser.lexer.buffer[parser.current];\n          return {\n            title: \"You have an error in your SQL syntax.\",\n\n            /*msg: this.setCharAt(\r\n                parser.lexer.buffer,\r\n                parser.current,\r\n                token\r\n            )*/\n            msg: this.replaceBetween(parser.lexer.buffer, i, j, s.substr(i, j - i))\n          };\n        }\n\n        return {};\n      }\n    }, {\n      key: \"replaceBetween\",\n      value: function replaceBetween(str, start, end, what) {\n        return {\n          str: str,\n          strBegin: str.substring(0, start),\n          strMiddle: what,\n          strEnd: str.substring(end),\n          hue: str.substring(0, start) + what + str.substring(end)\n        };\n      }\n    }, {\n      key: \"convertDataMysql\",\n      value: function convertDataMysql() {\n        var _this = this;\n\n        if (this._rawSchema.length > 0) {\n          this._schemas = this._rawSchema.map(function (schema) {\n            var data = schema.columns.map(function (column) {\n              return {\n                html: {\n                  category: _this.category,\n                  tag: column.definition || 'text',\n                  label: _this.customLabelName(column.name)\n                },\n                definition: column\n              };\n            });\n            var unique_keys = schema.uniqueKeys || [];\n            var primary_key = schema.primaryKey || [];\n            return {\n              name: schema.name,\n              data: data,\n              //columns: schema.columns,\n              primary_key: primary_key.columns.map(function (item) {\n                return item.column;\n              }),\n              unique_keys: unique_keys.map(function (item) {\n                return item.columns.map(function (d) {\n                  return d.column;\n                });\n              }).map(function (item) {\n                return item[0];\n              })\n            };\n          });\n          console.log('schema', this._schemas);\n          console.log('rawSchema', this._rawSchema);\n        }\n      }\n    }, {\n      key: \"convertDataOracle\",\n      value: function convertDataOracle() {\n        var _this2 = this;\n\n        if (Array.isArray(this._rawSchema) && this._rawSchema.length > 0) {\n          this._rawSchema.forEach(function (schema) {\n            var data = [];\n            var definitions = [];\n            var primaryKey = [];\n            var create_table_statement = schema.create_table_statement;\n            var create_definition = schema.create_definition;\n            var last_create_definition = schema.last_create_definition;\n            _this2._table_name = create_table_statement.table_name;\n            create_definition.push(last_create_definition);\n            create_definition.forEach(function (column) {\n              var column_name = column.name;\n              var data_type = column.data_type;\n              var column_definition = column.column_definition;\n              var is_primary_key = false;\n              var options = {\n                nullable: true\n              };\n\n              if (column_definition instanceof Array && column_definition.length > 0) {\n                column_definition.forEach(function (c) {\n                  if (typeof c.nullable != 'undefined') {\n                    options.nullable = c.nullable;\n                  }\n\n                  if (typeof c.values != 'undefined') {\n                    data_type.values = c.values;\n                  }\n                });\n              }\n\n              if (is_primary_key) {\n                primaryKey.push({\n                  column: column_name\n                });\n              }\n\n              var content = {\n                name: column_name,\n                type: data_type,\n                options: options,\n                html: {\n                  category: _this2.category,\n                  tag: data_type.tag,\n                  label: _this2.customLabelName(column_name)\n                }\n              };\n              data.push(content);\n            });\n\n            _this2._schemas.push({\n              name: _this2._table_name,\n              data: data,\n              primaryKey: primaryKey,\n              definitions: definitions\n            });\n          });\n        }\n\n        console.log(this._schemas);\n      }\n    }, {\n      key: \"customLabelName\",\n      value: function customLabelName(column_name) {\n        var _this3 = this;\n\n        return column_name.split('_').map(function (partialName) {\n          var value = _this3._customLabel[partialName];\n          if (typeof value !== 'undefined') partialName = value;\n          return partialName.charAt(0).toUpperCase() + partialName.substr(1);\n        }).join(' ').trim();\n      }\n    }, {\n      key: \"hasError\",\n      value: function hasError() {\n        return Object.keys(this._errors).length > 0 ? true : false;\n      }\n    }, {\n      key: \"getError\",\n      value: function getError() {\n        return this._errors;\n      }\n    }, {\n      key: \"setSql\",\n      value: function setSql(sql) {\n        this._sql = sql;\n      }\n    }, {\n      key: \"getSchemas\",\n      value: function getSchemas() {\n        return this._schemas;\n      }\n    }, {\n      key: \"getRawData\",\n      value: function getRawData() {\n        return this._rawSchema;\n      }\n    }, {\n      key: \"getTableName\",\n      value: function getTableName() {\n        return this._table_name;\n      }\n    }, {\n      key: \"getCustomLabelName\",\n      value: function getCustomLabelName() {\n        return {\n          'dat': 'Data',\n          'qtd': 'Quantidade',\n          'cod': 'Código',\n          'dsc': 'Descrição',\n          'ind': '',\n          'usu': 'Usuário',\n          'tpo': 'Tipo',\n          'nom': 'Nome',\n          'est': 'Estado',\n          'acao': 'Ação',\n          'psv': 'Processo Seletivo',\n          'per': 'Porcentagem',\n          'abv': 'Abreviatura',\n          'obs': 'Observação',\n          'num': 'Número',\n          'usuario': 'Usuário',\n          'docto': 'Documento',\n          'doc': 'Documento',\n          'val': 'Valor',\n          'valor': 'Valor',\n          'sta': 'Status',\n          'config': 'Configuração',\n          'inicio': 'Ínicio',\n          'termino': 'Término',\n          'situacao': 'Situação',\n          'nivel': 'Nível'\n        };\n      }\n    }]);\n\n    return CreateTableToJsonService;\n  }();\n\n  CreateTableToJsonService.ɵfac = function CreateTableToJsonService_Factory(t) {\n    return new (t || CreateTableToJsonService)();\n  };\n\n  CreateTableToJsonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CreateTableToJsonService,\n    factory: CreateTableToJsonService.ɵfac,\n    providedIn: 'root'\n  });\n  return CreateTableToJsonService;\n})();","map":null,"metadata":{},"sourceType":"module"}