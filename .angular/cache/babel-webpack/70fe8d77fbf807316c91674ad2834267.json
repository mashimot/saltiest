{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\nimport { ContentService } from 'src/app/shared/services/content.service';\nimport { ContentChoiceItemService } from 'src/app/shared/services/content-choice-item.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { DragulaService } from 'ng2-dragula';\nimport { Location } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/content.service\";\nimport * as i2 from \"src/app/shared/services/content-choice-item.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"ng2-dragula\";\nimport * as i7 from \"@ng-bootstrap/ng-bootstrap\";\n\nfunction ConfigChoiceFormComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Please insert values \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ConfigChoiceFormComponent_div_12_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"You did not enter a field\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ConfigChoiceFormComponent_div_12_div_5_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Your field is too short\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ConfigChoiceFormComponent_div_12_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵtemplate(1, ConfigChoiceFormComponent_div_12_div_5_div_1_Template, 2, 0, \"div\", 9);\n    i0.ɵɵtemplate(2, ConfigChoiceFormComponent_div_12_div_5_div_2_Template, 2, 0, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var choice_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", choice_r3.get(\"text\").errors == null ? null : choice_r3.get(\"text\").errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", choice_r3.get(\"text\").errors == null ? null : choice_r3.get(\"text\").errors.minlength);\n  }\n}\n\nfunction ConfigChoiceFormComponent_div_12_div_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"You did not enter a field\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ConfigChoiceFormComponent_div_12_div_9_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Your field is too short\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ConfigChoiceFormComponent_div_12_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵtemplate(1, ConfigChoiceFormComponent_div_12_div_9_div_1_Template, 2, 0, \"div\", 9);\n    i0.ɵɵtemplate(2, ConfigChoiceFormComponent_div_12_div_9_div_2_Template, 2, 0, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var choice_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", choice_r3.get(\"value\").errors == null ? null : choice_r3.get(\"value\").errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", choice_r3.get(\"value\").errors == null ? null : choice_r3.get(\"value\").errors.minlength);\n  }\n}\n\nvar _c0 = function _c0(a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\n\nfunction ConfigChoiceFormComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵelementStart(2, \"div\", 22);\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵelementStart(4, \"input\", 23);\n    i0.ɵɵlistener(\"input\", function ConfigChoiceFormComponent_div_12_Template_input_input_4_listener() {\n      i0.ɵɵrestoreView(_r14);\n      var ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.choiceChanged();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, ConfigChoiceFormComponent_div_12_div_5_Template, 3, 2, \"div\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 22);\n    i0.ɵɵelementStart(7, \"div\", 17);\n    i0.ɵɵelementStart(8, \"input\", 25);\n    i0.ɵɵlistener(\"input\", function ConfigChoiceFormComponent_div_12_Template_input_input_8_listener() {\n      i0.ɵɵrestoreView(_r14);\n      var ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.choiceChanged();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, ConfigChoiceFormComponent_div_12_div_9_Template, 3, 2, \"div\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 3);\n    i0.ɵɵelementStart(11, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function ConfigChoiceFormComponent_div_12_Template_button_click_11_listener() {\n      var restoredCtx = i0.ɵɵrestoreView(_r14);\n      var i_r4 = restoredCtx.index;\n      var ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.removeContent(i_r4);\n    });\n    i0.ɵɵelement(12, \"i\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 3);\n    i0.ɵɵelementStart(14, \"span\", 28);\n    i0.ɵɵtext(15, \" move \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var choice_r3 = ctx.$implicit;\n    var i_r4 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r4);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, choice_r3.get(\"text\").invalid));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", choice_r3.get(\"text\").invalid || choice_r3.get(\"text\").touched);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, choice_r3.get(\"value\").invalid));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", choice_r3.get(\"value\").invalid || choice_r3.get(\"value\").touched);\n  }\n}\n\nfunction ConfigChoiceFormComponent_ng_container_26_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0, 16);\n    i0.ɵɵelementStart(1, \"div\", 30);\n    i0.ɵɵelementStart(2, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function ConfigChoiceFormComponent_ng_container_26_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r18);\n      var ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.cancel();\n    });\n    i0.ɵɵtext(3, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 32);\n    i0.ɵɵlistener(\"click\", function ConfigChoiceFormComponent_ng_container_26_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r18);\n      var ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.save();\n    });\n    i0.ɵɵtext(5, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.choiceForm.invalid);\n  }\n}\n\nvar _c1 = function _c1(a0) {\n  return {\n    \"alert alert-danger\": a0\n  };\n}; // Array Validators\n\n\nexport var ArrayValidators = /*#__PURE__*/function () {\n  function ArrayValidators() {\n    _classCallCheck(this, ArrayValidators);\n  }\n\n  _createClass(ArrayValidators, null, [{\n    key: \"maxLength\",\n    value: // max length\n    function maxLength(max) {\n      return function (control) {\n        if (!(control instanceof FormArray)) return;\n        return control.length > max ? {\n          arrayMaxLength: true\n        } : null;\n      };\n    } // min length\n\n  }, {\n    key: \"minLength\",\n    value: function minLength(min) {\n      return function (control) {\n        if (!(control instanceof FormArray)) return;\n        return control.length < min ? {\n          arrayMinLength: true\n        } : null;\n      };\n    }\n  }]);\n\n  return ArrayValidators;\n}();\nexport var ConfigChoiceFormComponent = /*#__PURE__*/(function () {\n  var ConfigChoiceFormComponent = /*#__PURE__*/function () {\n    function ConfigChoiceFormComponent(contentService, contentChoiceItemService, route, location, formBuilder, dragulaService, modal) {\n      _classCallCheck(this, ConfigChoiceFormComponent);\n\n      this.contentService = contentService;\n      this.contentChoiceItemService = contentChoiceItemService;\n      this.route = route;\n      this.location = location;\n      this.formBuilder = formBuilder;\n      this.dragulaService = dragulaService;\n      this.modal = modal;\n      this.contentChoiceItemIdToUpdate = null;\n      this.contentChoiceId = -1; //dbops: DBOperation;\n\n      this.text = \"\";\n      this.subs = new Subscription();\n      this.emitData = new EventEmitter();\n      dragulaService.createGroup('sortableElements', {\n        moves: function moves(el, container, handle) {\n          return handle.classList.contains('element-handle');\n        }\n      });\n    }\n\n    _createClass(ConfigChoiceFormComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        //this.dbops = DBOperation.create;\n        var choices = this.content.html.choices;\n        this.choiceForm = this.formBuilder.group({\n          'choices': this.formBuilder.array([])\n        });\n\n        if (typeof this.parentFormGroup != 'undefined') {\n          this.choiceForm = this.parentFormGroup.get('html');\n        }\n\n        this.choiceForm.get('choices').setValidators([ArrayValidators.minLength(1)]);\n        choices.forEach(function (choice) {\n          var items = _this.choiceForm.get('choices');\n\n          items.push(_this.createChoice(choice.text, choice.value));\n        });\n        this.subs.add(this.dragulaService.dropModel('sortableChoices').subscribe(function (_ref) {\n          var sourceModel = _ref.sourceModel,\n              targetModel = _ref.targetModel,\n              item = _ref.item;\n          _this.choices.controls = sourceModel;\n          _this.text = _this.elementToString();\n        }));\n        this.text = this.elementToString();\n        /*this.choiceForm = this.formBuilder.group({\r\n            'id': [''],\r\n            'content_choice_id': ['', [\r\n            ]],\r\n            'text': ['', [\r\n                Validators.required,\r\n                Validators.minLength(1),\r\n                Validators.maxLength(2000)\r\n            ]],\r\n            'value': ['', [\r\n                Validators.required,\r\n                Validators.minLength(1),\r\n                Validators.maxLength(2000)\r\n            ]]\r\n        });\r\n        this.route.params.subscribe(result => {\r\n            this.contentChoiceId = result.id;\r\n            this.choiceForm.patchValue({\r\n                'content_choice_id': this.contentChoiceId\r\n            });\r\n            this.loadChoices();\r\n        })*/\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {}\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        /*this.dragulaService.destroy('pages');\r\n        this.dragulaService.destroy('contents');\r\n        this.dragulaService.destroy('columns');\r\n        this.dragulaService.destroy('rowSortable');*/\n        this.dragulaService.destroy('sortableElements');\n      }\n      /*public loadChoices(){\r\n          if(this.contentChoiceId != -1){\r\n              let id = this.contentChoiceId;\r\n              this.contentService.getContentChoicesById(id).subscribe(result => {\r\n                  if(result.success){\r\n                      this.choices = result.data;\r\n                      console.log(this.choices);\r\n                  }\r\n              });\r\n          }\r\n      }\r\n        public onSubmit(){\r\n          switch(this.dbops){\r\n              case DBOperation.create:\r\n                  this.contentChoiceItemService.storeContentChoiceItem(this.choiceForm.value)\r\n                  .subscribe(result => {\r\n                      console.log(result);\r\n                      if(result.success){\r\n                          this.reset();\r\n                          this.contentChoiceId = result.data.contentChoiceId;\r\n                          this.choiceForm.patchValue({\r\n                              'content_choice_id': result.data.contentChoiceId\r\n                          });\r\n                          this.loadChoices();\r\n                      }\r\n                  });\r\n              break;\r\n              case DBOperation.update:\r\n                  const id = this.contentChoiceItemIdToUpdate;\r\n                  this.contentChoiceItemService.updateContentChoiceItem(id, this.choiceForm.value)\r\n                  .subscribe(result => {\r\n                      console.log(result.data);\r\n                      if(result.success){\r\n                          this.reset();\r\n                          this.loadChoices();\r\n                      }\r\n                  });\r\n              break;\r\n          }\r\n      }\r\n        public create(){\r\n          this.dbops = DBOperation.create;\r\n          this.reset();\r\n      }\r\n        public savePosition(){\r\n          let id = this.contentChoiceId;\r\n          const orderedIds = this.choices.map(item => {\r\n              return item.id;\r\n          });\r\n          this.contentService.updateContentChoicesPosition(id, orderedIds)\r\n          .subscribe(result => {\r\n              if(result.success){\r\n                  this.loadChoices();\r\n              }\r\n          });\r\n      }\r\n        public editContentChoice(id: number) {\r\n          this.contentChoiceItemService.getContentChoiceItemById(id)\r\n          .subscribe(result => {\r\n              if(result.success){\r\n                  const content = result.data;\r\n                  this.dbops = DBOperation.update;\r\n                  this.contentChoiceItemIdToUpdate = content.id;\r\n                  this.choiceForm.setValue({\r\n                      'id': content.id,\r\n                      'content_choice_id': content.content_choice_id,\r\n                      'text': content.text,\r\n                      'value': content.value,\r\n                  });\r\n              }\r\n          });\r\n      }\r\n        public deleteContentChoiceItem(id: number) {\r\n          this.contentChoiceItemService.deleteContentChoiceItem(id)\r\n          .subscribe(result => {\r\n              if(result.success){\r\n                  this.loadChoices();\r\n                  this.reset();\r\n              }\r\n          });\r\n      }\r\n        private reset() {\r\n          this.contentChoiceItemIdToUpdate = null;\r\n          const resetExcept: string[] = ['content_choice_id', 'choices', 'tag', 'category', 'label'];\r\n            Object.keys(this.choiceForm.controls).forEach(key => {\r\n              if (resetExcept.findIndex(q => q === key) === -1) {\r\n                  this.choiceForm.get(key).reset();\r\n              }\r\n          });\r\n      }*/\n\n    }, {\n      key: \"choiceChanged\",\n      value: function choiceChanged() {\n        this.text = this.elementToString();\n      }\n    }, {\n      key: \"addChoice\",\n      value: function addChoice() {\n        this.choices.push(this.createChoice());\n      }\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        this.modal.close();\n      }\n    }, {\n      key: \"save\",\n      value: function save() {\n        console.log(this.choices.value);\n        this.emitData.emit(this.choiceForm.value);\n        this.modal.close();\n      }\n    }, {\n      key: \"stringToElement\",\n      value: function stringToElement() {\n        this.choices.clear();\n\n        if (this.text.length > 0) {\n          var string = this.text.split('\\n');\n\n          for (var i = 0; i < string.length; i++) {\n            var str = string[i];\n            var firstMatch = str;\n            var secondMatch = '';\n\n            if (str.indexOf('|') !== -1) {\n              var match = str.split('|');\n              firstMatch = match[0];\n              secondMatch = str.substring(firstMatch.length + 1); //return '' if '|' was not found\n            }\n\n            var text = typeof firstMatch !== 'undefined' ? firstMatch : '';\n            var value = typeof secondMatch !== 'undefined' ? secondMatch : '';\n            this.choices.push(this.createChoice(text, value));\n          }\n        }\n      }\n    }, {\n      key: \"removeContent\",\n      value: function removeContent($index) {\n        this.choices.removeAt($index);\n        this.text = this.elementToString();\n      }\n    }, {\n      key: \"cloneThis\",\n      value: function cloneThis(name) {\n        var choicesLength = this.choices.value.length;\n\n        if (choicesLength > 0) {\n          var cloneThisObjectName = name === 'value' ? 'text' : 'value';\n\n          for (var i = 0; i < choicesLength; i++) {\n            this.choices.value[i][name] = this.choices.value[i][cloneThisObjectName];\n          }\n\n          this.text = this.elementToString();\n          this.stringToElement();\n        }\n      }\n    }, {\n      key: \"elementToString\",\n      value: function elementToString() {\n        //let string = '';\n        var string = []; //fire the `valueChanges` manually\n\n        this.choices.updateValueAndValidity({\n          onlySelf: false,\n          emitEvent: true\n        });\n        var e = this.choices.value;\n\n        if (typeof e !== 'undefined' && e.length > 0) {\n          for (var i = 0; i < e.length; i++) {\n            var str = e[i];\n            var pipe = str.value === '' ? '' : '|';\n            var element = {\n              text: typeof str.text !== 'undefined' ? str.text : '',\n              value: typeof str.value !== 'undefined' ? str.value : ''\n            };\n            string.push(\"\".concat(element.text).concat(pipe).concat(element.value));\n          }\n        }\n\n        return string.join(\"\\n\");\n      }\n    }, {\n      key: \"createChoice\",\n      value: function createChoice() {\n        var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        return this.formBuilder.group({\n          text: [text, [Validators.required, Validators.minLength(1), Validators.maxLength(2000)]],\n          value: [value, [Validators.required, Validators.minLength(1), Validators.maxLength(2000)]]\n        });\n      }\n    }, {\n      key: \"f\",\n      get: function get() {\n        return this.choiceForm;\n      }\n    }, {\n      key: \"choices\",\n      get: function get() {\n        return this.f.get('choices');\n      }\n    }]);\n\n    return ConfigChoiceFormComponent;\n  }();\n\n  ConfigChoiceFormComponent.ɵfac = function ConfigChoiceFormComponent_Factory(t) {\n    return new (t || ConfigChoiceFormComponent)(i0.ɵɵdirectiveInject(i1.ContentService), i0.ɵɵdirectiveInject(i2.ContentChoiceItemService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.Location), i0.ɵɵdirectiveInject(i5.FormBuilder), i0.ɵɵdirectiveInject(i6.DragulaService), i0.ɵɵdirectiveInject(i7.NgbActiveModal));\n  };\n\n  ConfigChoiceFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConfigChoiceFormComponent,\n    selectors: [[\"app-config-choice-form\"]],\n    inputs: {\n      content: \"content\",\n      parentFormGroup: \"parentFormGroup\"\n    },\n    outputs: {\n      emitData: \"emitData\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 27,\n    vars: 12,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"row\"], [1, \"col-md-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", \"btn-sm\", \"btn-block\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"fa\", \"fa-plus\"], [1, \"col-md-10\"], [1, \"card-body\"], [3, \"ngClass\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngClass\"], [\"dragula\", \"sortableChoices\", \"formArrayName\", \"choices\", 3, \"dragulaModel\", \"dragulaModelChange\"], [\"class\", \"sortable-item-contents\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-5\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", \"btn-block\", 3, \"click\"], [1, \"border\", \"border-bottom\", \"border-primary\", \"mt-3\"], [1, \"mt-2\"], [1, \"form-group\"], [\"for\", \"fast-entry\"], [\"id\", \"fast-entry\", 1, \"form-control\", 2, \"resize\", \"none\", \"height\", \"210px\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"mt-2\", 4, \"ngIf\"], [1, \"sortable-item-contents\", 3, \"formGroupName\"], [1, \"col-md-4\"], [\"type\", \"text\", \"formControlName\", \"text\", 1, \"form-control\", \"form-control-sm\", 3, \"ngClass\", \"input\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"value\", 1, \"form-control\", \"form-control-sm\", 3, \"ngClass\", \"input\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-danger\", \"btn-sm\", \"btn-block\", 3, \"click\"], [1, \"far\", \"fa-trash-alt\"], [1, \"element-handle\"], [1, \"invalid-feedback\"], [1, \"btn-group\", \"float-right\"], [1, \"btn\", \"btn-outline-danger\", 3, \"click\"], [1, \"btn\", \"btn-outline-primary\", 3, \"disabled\", \"click\"]],\n    template: function ConfigChoiceFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function ConfigChoiceFormComponent_Template_button_click_4_listener() {\n          return ctx.addChoice();\n        });\n        i0.ɵɵelement(5, \"i\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 7);\n        i0.ɵɵelementStart(8, \"div\", 8);\n        i0.ɵɵtemplate(9, ConfigChoiceFormComponent_div_9_Template, 2, 0, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 10);\n        i0.ɵɵelementStart(11, \"div\", 11);\n        i0.ɵɵlistener(\"dragulaModelChange\", function ConfigChoiceFormComponent_Template_div_dragulaModelChange_11_listener($event) {\n          return ctx.choices.controls = $event;\n        });\n        i0.ɵɵtemplate(12, ConfigChoiceFormComponent_div_12_Template, 16, 9, \"div\", 12);\n        i0.ɵɵelementStart(13, \"div\", 2);\n        i0.ɵɵelementStart(14, \"div\", 13);\n        i0.ɵɵelementStart(15, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function ConfigChoiceFormComponent_Template_button_click_15_listener() {\n          return ctx.cloneThis(\"value\");\n        });\n        i0.ɵɵtext(16, \" Clone Text to Values \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 13);\n        i0.ɵɵelementStart(18, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function ConfigChoiceFormComponent_Template_button_click_18_listener() {\n          return ctx.cloneThis(\"text\");\n        });\n        i0.ɵɵtext(19, \" Clone Values To Text \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"div\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"section\", 16);\n        i0.ɵɵelementStart(22, \"div\", 17);\n        i0.ɵɵelementStart(23, \"label\", 18);\n        i0.ɵɵtext(24, \"Fast Entry\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"textarea\", 19);\n        i0.ɵɵlistener(\"ngModelChange\", function ConfigChoiceFormComponent_Template_textarea_ngModelChange_25_listener($event) {\n          return ctx.text = $event;\n        })(\"ngModelChange\", function ConfigChoiceFormComponent_Template_textarea_ngModelChange_25_listener() {\n          return ctx.stringToElement();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, ConfigChoiceFormComponent_ng_container_26_Template, 6, 1, \"ng-container\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c1, ctx.choiceForm.get(\"choices\").errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.choiceForm.get(\"choices\").errors == null ? null : ctx.choiceForm.get(\"choices\").errors.arrayMinLength);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.choiceForm)(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx.choiceForm.invalid));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"dragulaModel\", ctx.choices.controls);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.choices.controls);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngModel\", ctx.text);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.parentFormGroup);\n      }\n    },\n    directives: [i4.NgClass, i4.NgIf, i5.NgControlStatusGroup, i5.FormGroupDirective, i6.DragulaDirective, i5.FormArrayName, i4.NgForOf, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i5.FormGroupName, i5.FormControlName],\n    styles: [\"\"]\n  });\n  return ConfigChoiceFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}