{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { SnakeCaseToCamelCasePipe } from '../shared/pipes/snake-case-to-camel-case.pipe';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/pipes/snake-case-to-camel-case.pipe\";\nimport * as i2 from \"../create-table-to-json/create-table-to-json.component\";\nimport * as i3 from \"@angular/common\";\n\nfunction MigrationComponent_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelementStart(1, \"div\", 7);\n    i0.ɵɵelementStart(2, \"h1\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 8);\n    i0.ɵɵelementStart(5, \"textarea\", 9);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var framework_r3 = ctx.$implicit;\n    var schema_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(framework_r3.key);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(schema_r1.framework[framework_r3.key]);\n  }\n}\n\nfunction MigrationComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, MigrationComponent_div_3_div_1_Template, 7, 2, \"div\", 5);\n    i0.ɵɵpipe(2, \"keyvalue\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var schema_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 1, schema_r1.framework));\n  }\n}\n\nexport var Laravel = /*#__PURE__*/(function () {\n  var Laravel = /*#__PURE__*/function () {\n    function Laravel() {\n      _classCallCheck(this, Laravel);\n\n      this.tableName = '';\n      this.mysql = {\n        INT: \"integer('#columnName')#unsigned\",\n        BIGINT: \"bigInteger('#columnName')#unsigned\",\n        BLOB: \"binary\",\n        BOOLEAN: \"boolean\",\n        CHAR: \"char('#columnName', #length)\",\n        DATE: \"date('#columnName')\",\n        DATETIME: \"dateTime('#columnName')\",\n        //DATETIME: dateTimeTz('created_at'),\n        DECIMAL: \"decimal('#columnName', #total_digits_comma_decimal_digits)#unsigned\",\n        DOUBLE: \"double('#columnName', #total_digits_comma_decimal_digits)\",\n        ENUM: \"enum('#columnName', #array)\",\n        FLOAT: \"float('#columnName', #total_digits_comma_decimal_digits)\",\n        GEOMETRY: \"geometry('#columnName')\",\n        GEOMETRYCOLLECTION: \"geometryCollection('#columnName')\",\n        //INTEGER: increments('id'),\n        INTEGER: \"integer('#columnName')#unsigned\",\n        IP: \"ipAddress('#columnName')\",\n        JSON: \"json('#columnName')\",\n        JSONB: \"jsonb('#columnName')\",\n        LINESTRING: \"lineString('#columnName')\",\n        LONGTEXT: \"longText('#columnName')\",\n        MAC: \"macAddress('#columnName')\",\n        MEDIUMINT: \"mediumInteger('#columnName')#unsigned\",\n        //MEDIUMINT: mediumInteger('votes')`,\n        MEDIUMTEXT: \"mediumText('#columnName')\",\n        //BIGINT: morphs('taggable')`,\n        //CHAR: uuidMorphs('taggable')`,\n        MULTILINESTRING: \"multiLineString('#columnName')\",\n        MULTIPOINT: \"multiPoint('#columnName')\",\n        MULTIPOLYGON: \"multiPolygon('#columnName')\",\n        morphs: \"nullableMorphs('#columnName')\",\n        nullable: \"nullableUuidMorphs('#columnName')\",\n        timestamps: \"nullableTimestamps()\",\n        POINT: \"point('#columnName')\",\n        POLYGON: \"polygon('#columnName')\",\n        //rememberToken(),\n        SET: \"set('#columnName', #array)\",\n        //SMALLINT: `smallIncrements('#columnName')#unsigned`,\n        SMALLINT: \"smallInteger('#columnName')#unsigned\",\n        //TIMESTAMP: `softDeletes()`,\n        //TIMESTAMP: softDeletesTz(),\n        VARCHAR: \"string('#columnName', #length)\",\n        TEXT: \"text('#columnName')\",\n        TIME: \"time('#columnName')\",\n        //TIME: `timeTz('sunrise')`,\n        TIMESTAMP: \"timestamp('#columnName')\",\n        //TIMESTAMP: timestampTz('added_on')`,\n        //TIMESTAMP: timestamps()`,\n        //TIMESTAMP: timestampsTz()`,\n        //TINYINT: `tinyIncrements('#columnName')#unsigned`,\n        TINYINT: \"tinyInteger('#columnName')#unsigned\",\n        UUID: \"uuid('#columnName')\",\n        YEAR: \"year('#columnName')\"\n      };\n      this.schema = [];\n    }\n\n    _createClass(Laravel, [{\n      key: \"setParams\",\n      value: function setParams(content) {\n        this.content = content;\n      }\n    }, {\n      key: \"setSchema\",\n      value: function setSchema(schema) {\n        this.schema = schema;\n      }\n    }, {\n      key: \"getRules\",\n      value: function getRules() {\n        var basic = {\n          radio: ['nullable'],\n          checkbox: ['nullable'],\n          select: ['nullable'],\n          number: ['nullable', 'numeric'],\n          date: ['nullable', 'date_format:\"d/m/Y\"'],\n          text: ['nullable', 'string'],\n          textarea: ['nullable', 'string']\n        };\n        var tag = this.content.html.tag.toLowerCase();\n\n        if (typeof basic[tag] != 'undefined') {\n          basic[tag][0] = this.isRequired();\n          basic[tag].push(this.size());\n          var newBasic = basic[tag].filter(function (el) {\n            return el != \"\" && el != null;\n          });\n          return [\"\\\"\".concat(this.content.name, \"\\\" => \").concat(JSON.stringify(newBasic))].join(\",\");\n        }\n\n        return [\"\".concat(this.content.name, \" => \").concat(JSON.stringify(basic[tag]))].join(\",\");\n      }\n    }, {\n      key: \"size\",\n      value: function size() {\n        if (this.content && this.content.type && this.content.type.length) {\n          var size = this.content.type.length;\n\n          if (size != null && size != '') {\n            var list = {\n              number: \"digits_between:1,\".concat(size),\n              date: 'max:' + size,\n              text: 'max:' + size,\n              radio: 'max:' + size,\n              checkbox: 'max:' + size,\n              select: 'max:' + size,\n              textarea: 'max:' + size\n            };\n            return list[this.content.html.tag];\n          }\n        }\n\n        return null;\n      }\n    }, {\n      key: \"get\",\n      value: function get() {\n        var _this = this;\n\n        this.schema.init = {\n          fillable: [],\n          rules: [],\n          attributes: [],\n          request: []\n        };\n\n        if (this.schema.data.length > 0) {\n          this.schema.data.forEach(function (current) {\n            _this.setParams(current);\n\n            _this.schema.init.fillable.push(current.definition.name);\n\n            _this.schema.init.request.push(\"\\\"\".concat(current.name, \"\\\" => $request->\").concat(current.name));\n\n            _this.schema.init.attributes.push(\"'\".concat(current.name, \"' => '\").concat(current.html.label, \"'\"));\n\n            _this.schema.init.rules.push(_this.getRules());\n          });\n        }\n\n        return {\n          framework: {\n            validator: this.validator(),\n            controller: this.controller(),\n            model: this.model(),\n            migration: this.migration()\n          }\n        };\n      }\n    }, {\n      key: \"model\",\n      value: function model() {\n        return \"\\n\\t\\t<?php\\n\\n\\t\\tnamespace App;\\n\\t\\t\\n\\t\\tuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n\\t \\n\\t\\tclass \".concat(this.schema.name, \" extends Model {\\n\\t\\t\\tprotected $table      = '\").concat(this.schema.name, \"';\\n\\t\\t\\tprotected $primaryKey = \").concat(typeof this.schema.primary_key != 'undefined' ? this.schema.primary_key.length > 1 ? \"[\" + 'this.schema.primary_key' + \"]\" : 'this.schema.primary_key[0]' : '', \";\\n\\t\\t\\tpublic $incrementing  = true; \\n\\t\\t\\t\\n\\t\\t\\tprotected $fillable = [\\n\\t\\t\\t\\t\").concat(this.schema.data.map(function (d) {\n          return \"'\".concat(d.name, \"'\");\n        }), \"\\n\\t\\t\\t];\\n\\t\\t}\\n\\t\\t\");\n      }\n    }, {\n      key: \"controller\",\n      value: function controller() {\n        return \"\\n\\t\\t<?php\\n\\n\\t\\tnamespace App\\\\Http\\\\Controllers;\\n\\t\\t\\n\\t\\tuse Illuminate\\\\Http\\\\Request;\\n\\t\\tuse App\\\\\".concat(this.schema.name, \";\\n\\t\\tuse App\\\\Http\\\\Requests\\\\\").concat(this.schema.name, \"Request;\\n\\n\\t\\tclass \").concat(this.schema.name, \"Controller extends Controller\\n\\t\\t{\\n\\t\\t\\t/**\\n\\t\\t\\t* Display a listing of the resource.\\n\\t\\t\\t*\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function index()\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$result = \").concat(this.schema.name, \"::all();\\n\\n\\t\\t\\t\\treturn view('\").concat(this.schema.name, \".index', compact('result'));\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Show the form for creating a new resource.\\n\\t\\t\\t*\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function create()\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\treturn view('\").concat(this.schema.name, \".create');\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Store a newly created resource in storage.\\n\\t\\t\\t*\\n\\t\\t\\t* @param  \\\\Illuminate\\\\Http\\\\Request  $request\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function store(\").concat(this.schema.name, \"Request $request)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$r = \").concat(this.schema.name, \"::create([\\n\\t\\t\\t\\t\\t\").concat(this.schema.init.request.join(\"\\n\"), \"\\n\\t\\t\\t\\t]);\\n\\n\\t\\t\\t\\treturn response()\\n\\t\\t\\t\\t\\t->route('\").concat(this.schema.name, \".create')\\n\\t\\t\\t\\t\\t->json([\\n\\t\\t\\t\\t\\t\\t'success' => true\\n\\t\\t\\t\\t\\t]);\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Display the specified resource.\\n\\t\\t\\t*\\n\\t\\t\\t* @param  int  $id\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function show($id)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$result = \").concat(this.schema.name, \"::find($id);\\n\\n\\t\\t\\t\\treturn view('\").concat(this.schema.name, \".show', compact('result'));\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Show the form for editing the specified resource.\\n\\t\\t\\t*\\n\\t\\t\\t* @param  int  $id\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function edit($id)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$result = \").concat(this.schema.name, \"::find($id);\\n\\n\\t\\t\\t\\treturn view('\").concat(this.schema.name, \".edit', compact('result'));\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Update the specified resource in storage.\\n\\t\\t\\t*\\n\\t\\t\\t* @param  \\\\Illuminate\\\\Http\\\\Request $request\\n\\t\\t\\t* @param  int  $id\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function update(\").concat(this.schema.name, \"Request $request, $id)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$result = \").concat(this.schema.name, \"::find($id);\\n\\t\\t\\t\\t\\t\\t->update(\\n\\t\\t\\t\\t\\t\\t\\t\").concat(this.schema.init.request.join(\"\\n\"), \"\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Remove the specified resource from storage.\\n\\t\\t\\t*\\n\\t\\t\\t* @param  int  $id\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function destroy($id)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$result = \").concat(this.schema.name, \"::find($id);\\n\\t\\t\\t\\t$result->delete();\\n\\t\\t\\n\\t\\t\\t\\treturn redirect()\\n\\t\\t\\t\\t\\t->route('\").concat(this.schema.name, \".show', $id)\\n\\t\\t\\t\\t\\t->with('success', true);\\n\\t\\t\\t}\\n\\t\\t}\\t\\t\\n\\t\\t\");\n      }\n    }, {\n      key: \"validator\",\n      value: function validator() {\n        return \"\\n\\t\\t/**\\n\\t\\t * Determine if the user is authorized to make this request.\\n\\t\\t *\\n\\t\\t * @return bool\\n\\t\\t*/\\n\\t\\tpublic function authorize(){\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\n\\t\\tpublic function rules(){\\n\\t\\t\\t$rules = [\\n\\t\\t\\t\\t\".concat(this.schema.init.rules.join(\"\\n\"), \"\\n\\t\\t\\t];\\n\\t\\t\\n\\t\\t\\treturn $rules;\\n\\t\\t}\\n\\t\\n\\t\\t/**\\n\\t\\t * Get the validation rules that apply to the request.\\n\\t\\t *\\n\\t\\t * @return array\\n\\t\\t */\\n\\t\\tpublic function attributes(){\\n\\t\\t\\t$attributes = [\\n\\t\\t\\t\\t\").concat(this.schema.init.attributes.join(\"\\n\"), \"\\n\\t\\t\\t];\\n\\t\\t\\treturn $attributes;\\n\\t\\t}\\t\\t\\n\\t\\t\");\n      }\n    }, {\n      key: \"migration\",\n      value: function migration() {\n        var _this2 = this;\n\n        var $table = [];\n        var autoIncrement = {\n          INT: \"increments('#columnName')\",\n          BIGINT: \"bigIncrements('#columnName')\",\n          MEDIUMINT: \"mediumIncrements('#columnName')\",\n          SMALLINT: \"smallIncrements('#columnName')\",\n          TINYINT: \"tinyIncrements('#columnName')\"\n        };\n        var tableName = this.schema.name;\n        var schemaCreate = '';\n        $table = this.schema.data.map(function (item) {\n          var _values = '';\n          var _nullable = '';\n          var _unsigned = '';\n          var column = item;\n\n          var _dataType = column.type.datatype.toUpperCase();\n\n          var _type = _this2.mysql[column.type.datatype.toUpperCase()];\n\n          _type = _type.replace(/#unsigned/g, '');\n\n          if (typeof _type == 'undefined') {\n            _type = \"\".concat(_dataType, \"('#columnName')\");\n          }\n\n          if (column.options && column.options.autoincrement) {\n            Object.keys(autoIncrement).forEach(function (dataType) {\n              if (_dataType == dataType) {\n                _type = autoIncrement[dataType];\n              }\n            });\n          }\n\n          if (_type) {\n            _type = _type.replace(/#columnName/g, column.name);\n          }\n\n          if (column.options) {\n            if (column.options.nullable) {\n              _nullable = '->nullable()';\n            }\n\n            if (column.options.unsigned) {\n              _unsigned = '->unsigned()';\n            }\n          }\n\n          if (column.type) {\n            if (column.type.values) {\n              _values = JSON.stringify(column.type.values);\n              _type = _type.replace(/#array/g, _values);\n            }\n\n            if (column.type.length) {\n              if (column.type.length != '') {\n                _type = _type.replace(/#length/g, column.type.length);\n              }\n            }\n\n            if (column.type.decimals || column.type.digits) {\n              var total_digits_comma_decimal_digits = column.type.digits + ', ' + column.type.decimals;\n              _type = _type.replace(/#total_digits_comma_decimal_digits/g, total_digits_comma_decimal_digits);\n            }\n          }\n\n          return \"$table->\".concat(_type).concat(_unsigned).concat(_nullable, \";\");\n        });\n\n        if (this.schema.primary_key) {\n          if (this.schema.primary_key.length > 0) {\n            var pkColumns = this.schema.primary_key.map(function (item) {\n              return item.column;\n            });\n            $table.push(\"$table->primary(\".concat(JSON.stringify(pkColumns), \")\"));\n          }\n        }\n\n        if (this.schema.unirque_keys) {\n          if (this.schema.unirque_keys.length > 0) {\n            var ukColumns = [];\n            this.schema.unirque_keys.forEach(function (schemaUk) {\n              schemaUk.columns.map(function (uk) {\n                return ukColumns.push(uk.column);\n              });\n            });\n            $table.push(\"$table->unique(\".concat(JSON.stringify(ukColumns), \");\"));\n          }\n        }\n\n        if (this.schema.foreign_keys) {\n          if (this.schema.foreign_keys.length > 0) {\n            this.schema.foreign_keys.forEach(function (fk) {\n              var foreign = '';\n              var reference = '';\n              fk.columns.forEach(function (fk) {\n                foreign = \"foreign('\".concat(fk.column, \"')\");\n              });\n              fk.reference.columns.forEach(function (ref) {\n                reference = \"references('\".concat(ref.column, \"')->on('\").concat(fk.reference.table, \"')\");\n              });\n              $table.push(\"$table->\".concat(foreign, \"->\").concat(reference));\n            });\n          }\n        }\n\n        schemaCreate = \"\\n\\t\\tSchema::create('\".concat(tableName, \"', function (Blueprint $table) {\\n\\t\\t\\t\").concat($table.join(\"\\n\"), \"\\n\\t\\t});\");\n        return \"\\n\\t\\t\\t<?php\\n\\n\\t\\t\\tuse IlluminateSupportFacadesSchema;\\n\\t\\t\\tuse IlluminateDatabaseSchemaBlueprint;\\n\\t\\t\\tuse IlluminateDatabaseMigrationsMigration;\\n\\t\\t\\t\\n\\t\\t\\tclass Create\".concat(tableName, \"Table extends Migration\\n\\t\\t\\t{\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Run the migrations.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @return void\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tpublic function up()\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\").concat(schemaCreate, \"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Reverse the migrations.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @return void\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tpublic function down()\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tSchema::drop('\").concat(tableName, \"');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\");\n      }\n    }, {\n      key: \"isRequired\",\n      value: function isRequired() {\n        if (this.content && this.content.options) {\n          return this.content.options.nullable ? 'nullable' : 'required';\n        }\n\n        return 'nullable';\n      }\n    }, {\n      key: \"setTableName\",\n      value: function setTableName(tableName) {\n        this.tableName = tableName;\n      }\n    }, {\n      key: \"getMessages\",\n      value: function getMessages() {\n        return this.messages;\n      }\n    }]);\n\n    return Laravel;\n  }();\n\n  Laravel.ɵfac = function Laravel_Factory(t) {\n    return new (t || Laravel)();\n  };\n\n  Laravel.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Laravel,\n    factory: Laravel.ɵfac,\n    providedIn: 'root'\n  });\n  return Laravel;\n})();\nexport var MigrationComponent = /*#__PURE__*/(function () {\n  var MigrationComponent = /*#__PURE__*/function () {\n    function MigrationComponent(snakeCaseToCamelCase, laravel) {\n      _classCallCheck(this, MigrationComponent);\n\n      this.snakeCaseToCamelCase = snakeCaseToCamelCase;\n      this.laravel = laravel;\n    }\n\n    _createClass(MigrationComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {}\n    }, {\n      key: \"getSchemas\",\n      value: function getSchemas($schemas) {\n        var _this3 = this;\n\n        this.schemas = $schemas;\n        this.schemas.map(function (schema) {\n          _this3.laravel.setSchema(schema);\n\n          schema.framework = _this3.laravel.get().framework;\n          return schema;\n        });\n        console.log(this.schemas);\n      }\n    }]);\n\n    return MigrationComponent;\n  }();\n\n  MigrationComponent.ɵfac = function MigrationComponent_Factory(t) {\n    return new (t || MigrationComponent)(i0.ɵɵdirectiveInject(i1.SnakeCaseToCamelCasePipe), i0.ɵɵdirectiveInject(Laravel));\n  };\n\n  MigrationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MigrationComponent,\n    selectors: [[\"app-migration\"]],\n    features: [i0.ɵɵProvidersFeature([SnakeCaseToCamelCasePipe])],\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"row\"], [1, \"col-md-8\", \"offset-md-2\"], [3, \"schemasChange\"], [\"class\", \"border mt-2\", 4, \"ngFor\", \"ngForOf\"], [1, \"border\", \"mt-2\"], [\"class\", \"card\", 4, \"ngFor\", \"ngForOf\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"cols\", \"30\", \"rows\", \"10\", 1, \"form-control\"]],\n    template: function MigrationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"app-create-table-to-json\", 2);\n        i0.ɵɵlistener(\"schemasChange\", function MigrationComponent_Template_app_create_table_to_json_schemasChange_2_listener($event) {\n          return ctx.getSchemas($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, MigrationComponent_div_3_Template, 3, 3, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.schemas);\n      }\n    },\n    directives: [i2.CreateTableToJsonComponent, i3.NgForOf],\n    pipes: [i3.KeyValuePipe],\n    styles: [\"\"]\n  });\n  return MigrationComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}