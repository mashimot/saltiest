{"ast":null,"code":"import _possibleConstructorReturn from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\possibleConstructorReturn.js\";\nimport _toArray from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toArray.js\";\nimport _construct from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\construct.js\";\nimport _slicedToArray from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _assertThisInitialized from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\assertThisInitialized.js\";\nimport _get from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _createForOfIteratorHelper from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\n/**\n * @license Angular v13.1.0\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TagContentType;\n\n(function (TagContentType) {\n  TagContentType[TagContentType[\"RAW_TEXT\"] = 0] = \"RAW_TEXT\";\n  TagContentType[TagContentType[\"ESCAPABLE_RAW_TEXT\"] = 1] = \"ESCAPABLE_RAW_TEXT\";\n  TagContentType[TagContentType[\"PARSABLE_DATA\"] = 2] = \"PARSABLE_DATA\";\n})(TagContentType || (TagContentType = {}));\n\nfunction splitNsName(elementName) {\n  if (elementName[0] != ':') {\n    return [null, elementName];\n  }\n\n  var colonIndex = elementName.indexOf(':', 1);\n\n  if (colonIndex === -1) {\n    throw new Error(\"Unsupported format \\\"\".concat(elementName, \"\\\" expecting \\\":namespace:name\\\"\"));\n  }\n\n  return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n} // `<ng-container>` tags work the same regardless the namespace\n\n\nfunction isNgContainer(tagName) {\n  return splitNsName(tagName)[1] === 'ng-container';\n} // `<ng-content>` tags work the same regardless the namespace\n\n\nfunction isNgContent(tagName) {\n  return splitNsName(tagName)[1] === 'ng-content';\n} // `<ng-template>` tags work the same regardless the namespace\n\n\nfunction isNgTemplate(tagName) {\n  return splitNsName(tagName)[1] === 'ng-template';\n}\n\nfunction getNsPrefix(fullName) {\n  return fullName === null ? null : splitNsName(fullName)[0];\n}\n\nfunction mergeNsAndName(prefix, localName) {\n  return prefix ? \":\".concat(prefix, \":\").concat(localName) : localName;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar HtmlTagDefinition = /*#__PURE__*/function () {\n  function HtmlTagDefinition() {\n    var _this = this;\n\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        closedByChildren = _ref2.closedByChildren,\n        implicitNamespacePrefix = _ref2.implicitNamespacePrefix,\n        _ref2$contentType = _ref2.contentType,\n        contentType = _ref2$contentType === void 0 ? TagContentType.PARSABLE_DATA : _ref2$contentType,\n        _ref2$closedByParent = _ref2.closedByParent,\n        closedByParent = _ref2$closedByParent === void 0 ? false : _ref2$closedByParent,\n        _ref2$isVoid = _ref2.isVoid,\n        isVoid = _ref2$isVoid === void 0 ? false : _ref2$isVoid,\n        _ref2$ignoreFirstLf = _ref2.ignoreFirstLf,\n        ignoreFirstLf = _ref2$ignoreFirstLf === void 0 ? false : _ref2$ignoreFirstLf,\n        _ref2$preventNamespac = _ref2.preventNamespaceInheritance,\n        preventNamespaceInheritance = _ref2$preventNamespac === void 0 ? false : _ref2$preventNamespac;\n\n    _classCallCheck(this, HtmlTagDefinition);\n\n    this.closedByChildren = {};\n    this.closedByParent = false;\n    this.canSelfClose = false;\n\n    if (closedByChildren && closedByChildren.length > 0) {\n      closedByChildren.forEach(function (tagName) {\n        return _this.closedByChildren[tagName] = true;\n      });\n    }\n\n    this.isVoid = isVoid;\n    this.closedByParent = closedByParent || isVoid;\n    this.implicitNamespacePrefix = implicitNamespacePrefix || null;\n    this.contentType = contentType;\n    this.ignoreFirstLf = ignoreFirstLf;\n    this.preventNamespaceInheritance = preventNamespaceInheritance;\n  }\n\n  _createClass(HtmlTagDefinition, [{\n    key: \"isClosedByChild\",\n    value: function isClosedByChild(name) {\n      return this.isVoid || name.toLowerCase() in this.closedByChildren;\n    }\n  }, {\n    key: \"getContentType\",\n    value: function getContentType(prefix) {\n      if (typeof this.contentType === 'object') {\n        var overrideType = prefix === undefined ? undefined : this.contentType[prefix];\n        return overrideType !== null && overrideType !== void 0 ? overrideType : this.contentType.default;\n      }\n\n      return this.contentType;\n    }\n  }]);\n\n  return HtmlTagDefinition;\n}();\n\nvar _DEFAULT_TAG_DEFINITION; // see https://www.w3.org/TR/html51/syntax.html#optional-tags\n// This implementation does not fully conform to the HTML5 spec.\n\n\nvar TAG_DEFINITIONS;\n\nfunction getHtmlTagDefinition(tagName) {\n  var _a, _b;\n\n  if (!TAG_DEFINITIONS) {\n    _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();\n    TAG_DEFINITIONS = {\n      'base': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'meta': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'area': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'embed': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'link': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'img': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'input': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'param': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'hr': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'br': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'source': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'track': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'wbr': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'p': new HtmlTagDefinition({\n        closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],\n        closedByParent: true\n      }),\n      'thead': new HtmlTagDefinition({\n        closedByChildren: ['tbody', 'tfoot']\n      }),\n      'tbody': new HtmlTagDefinition({\n        closedByChildren: ['tbody', 'tfoot'],\n        closedByParent: true\n      }),\n      'tfoot': new HtmlTagDefinition({\n        closedByChildren: ['tbody'],\n        closedByParent: true\n      }),\n      'tr': new HtmlTagDefinition({\n        closedByChildren: ['tr'],\n        closedByParent: true\n      }),\n      'td': new HtmlTagDefinition({\n        closedByChildren: ['td', 'th'],\n        closedByParent: true\n      }),\n      'th': new HtmlTagDefinition({\n        closedByChildren: ['td', 'th'],\n        closedByParent: true\n      }),\n      'col': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'svg': new HtmlTagDefinition({\n        implicitNamespacePrefix: 'svg'\n      }),\n      'foreignObject': new HtmlTagDefinition({\n        // Usually the implicit namespace here would be redundant since it will be inherited from\n        // the parent `svg`, but we have to do it for `foreignObject`, because the way the parser\n        // works is that the parent node of an end tag is its own start tag which means that\n        // the `preventNamespaceInheritance` on `foreignObject` would have it default to the\n        // implicit namespace which is `html`, unless specified otherwise.\n        implicitNamespacePrefix: 'svg',\n        // We want to prevent children of foreignObject from inheriting its namespace, because\n        // the point of the element is to allow nodes from other namespaces to be inserted.\n        preventNamespaceInheritance: true\n      }),\n      'math': new HtmlTagDefinition({\n        implicitNamespacePrefix: 'math'\n      }),\n      'li': new HtmlTagDefinition({\n        closedByChildren: ['li'],\n        closedByParent: true\n      }),\n      'dt': new HtmlTagDefinition({\n        closedByChildren: ['dt', 'dd']\n      }),\n      'dd': new HtmlTagDefinition({\n        closedByChildren: ['dt', 'dd'],\n        closedByParent: true\n      }),\n      'rb': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'rt': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'rtc': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'rp': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'optgroup': new HtmlTagDefinition({\n        closedByChildren: ['optgroup'],\n        closedByParent: true\n      }),\n      'option': new HtmlTagDefinition({\n        closedByChildren: ['option', 'optgroup'],\n        closedByParent: true\n      }),\n      'pre': new HtmlTagDefinition({\n        ignoreFirstLf: true\n      }),\n      'listing': new HtmlTagDefinition({\n        ignoreFirstLf: true\n      }),\n      'style': new HtmlTagDefinition({\n        contentType: TagContentType.RAW_TEXT\n      }),\n      'script': new HtmlTagDefinition({\n        contentType: TagContentType.RAW_TEXT\n      }),\n      'title': new HtmlTagDefinition({\n        // The browser supports two separate `title` tags which have to use\n        // a different content type: `HTMLTitleElement` and `SVGTitleElement`\n        contentType: {\n          default: TagContentType.ESCAPABLE_RAW_TEXT,\n          svg: TagContentType.PARSABLE_DATA\n        }\n      }),\n      'textarea': new HtmlTagDefinition({\n        contentType: TagContentType.ESCAPABLE_RAW_TEXT,\n        ignoreFirstLf: true\n      })\n    };\n  } // We have to make both a case-sensitive and a case-insesitive lookup, because\n  // HTML tag names are case insensitive, whereas some SVG tags are case sensitive.\n\n\n  return (_b = (_a = TAG_DEFINITIONS[tagName]) !== null && _a !== void 0 ? _a : TAG_DEFINITIONS[tagName.toLowerCase()]) !== null && _b !== void 0 ? _b : _DEFAULT_TAG_DEFINITION;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _SELECTOR_REGEXP = new RegExp('(\\\\:not\\\\()|' + // 1: \":not(\"\n'(([\\\\.\\\\#]?)[-\\\\w]+)|' + // 2: \"tag\"; 3: \".\"/\"#\";\n// \"-\" should appear first in the regexp below as FF31 parses \"[.-\\w]\" as a range\n// 4: attribute; 5: attribute_string; 6: attribute_value\n'(?:\\\\[([-.\\\\w*\\\\\\\\$]+)(?:=([\\\"\\']?)([^\\\\]\\\"\\']*)\\\\5)?\\\\])|' + // \"[name]\", \"[name=value]\",\n// \"[name=\"value\"]\",\n// \"[name='value']\"\n'(\\\\))|' + // 7: \")\"\n'(\\\\s*,\\\\s*)', // 8: \",\"\n'g');\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\n\n\nvar CssSelector = /*#__PURE__*/function () {\n  function CssSelector() {\n    _classCallCheck(this, CssSelector);\n\n    this.element = null;\n    this.classNames = [];\n    /**\n     * The selectors are encoded in pairs where:\n     * - even locations are attribute names\n     * - odd locations are attribute values.\n     *\n     * Example:\n     * Selector: `[key1=value1][key2]` would parse to:\n     * ```\n     * ['key1', 'value1', 'key2', '']\n     * ```\n     */\n\n    this.attrs = [];\n    this.notSelectors = [];\n  }\n\n  _createClass(CssSelector, [{\n    key: \"unescapeAttribute\",\n    value:\n    /**\n     * Unescape `\\$` sequences from the CSS attribute selector.\n     *\n     * This is needed because `$` can have a special meaning in CSS selectors,\n     * but we might want to match an attribute that contains `$`.\n     * [MDN web link for more\n     * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n     * @param attr the attribute to unescape.\n     * @returns the unescaped string.\n     */\n    function unescapeAttribute(attr) {\n      var result = '';\n      var escaping = false;\n\n      for (var i = 0; i < attr.length; i++) {\n        var char = attr.charAt(i);\n\n        if (char === '\\\\') {\n          escaping = true;\n          continue;\n        }\n\n        if (char === '$' && !escaping) {\n          throw new Error(\"Error in attribute selector \\\"\".concat(attr, \"\\\". \") + \"Unescaped \\\"$\\\" is not supported. Please escape with \\\"\\\\$\\\".\");\n        }\n\n        escaping = false;\n        result += char;\n      }\n\n      return result;\n    }\n    /**\n     * Escape `$` sequences from the CSS attribute selector.\n     *\n     * This is needed because `$` can have a special meaning in CSS selectors,\n     * with this method we are escaping `$` with `\\$'.\n     * [MDN web link for more\n     * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n     * @param attr the attribute to escape.\n     * @returns the escaped string.\n     */\n\n  }, {\n    key: \"escapeAttribute\",\n    value: function escapeAttribute(attr) {\n      return attr.replace(/\\\\/g, '\\\\\\\\').replace(/\\$/g, '\\\\$');\n    }\n  }, {\n    key: \"isElementSelector\",\n    value: function isElementSelector() {\n      return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;\n    }\n  }, {\n    key: \"hasElementSelector\",\n    value: function hasElementSelector() {\n      return !!this.element;\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement() {\n      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.element = element;\n    }\n    /** Gets a template string for an element that matches the selector. */\n\n  }, {\n    key: \"getMatchingElementTemplate\",\n    value: function getMatchingElementTemplate() {\n      var tagName = this.element || 'div';\n      var classAttr = this.classNames.length > 0 ? \" class=\\\"\".concat(this.classNames.join(' '), \"\\\"\") : '';\n      var attrs = '';\n\n      for (var i = 0; i < this.attrs.length; i += 2) {\n        var attrName = this.attrs[i];\n        var attrValue = this.attrs[i + 1] !== '' ? \"=\\\"\".concat(this.attrs[i + 1], \"\\\"\") : '';\n        attrs += \" \".concat(attrName).concat(attrValue);\n      }\n\n      return getHtmlTagDefinition(tagName).isVoid ? \"<\".concat(tagName).concat(classAttr).concat(attrs, \"/>\") : \"<\".concat(tagName).concat(classAttr).concat(attrs, \"></\").concat(tagName, \">\");\n    }\n  }, {\n    key: \"getAttrs\",\n    value: function getAttrs() {\n      var result = [];\n\n      if (this.classNames.length > 0) {\n        result.push('class', this.classNames.join(' '));\n      }\n\n      return result.concat(this.attrs);\n    }\n  }, {\n    key: \"addAttribute\",\n    value: function addAttribute(name) {\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      this.attrs.push(name, value && value.toLowerCase() || '');\n    }\n  }, {\n    key: \"addClassName\",\n    value: function addClassName(name) {\n      this.classNames.push(name.toLowerCase());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var res = this.element || '';\n\n      if (this.classNames) {\n        this.classNames.forEach(function (klass) {\n          return res += \".\".concat(klass);\n        });\n      }\n\n      if (this.attrs) {\n        for (var i = 0; i < this.attrs.length; i += 2) {\n          var name = this.escapeAttribute(this.attrs[i]);\n          var value = this.attrs[i + 1];\n          res += \"[\".concat(name).concat(value ? '=' + value : '', \"]\");\n        }\n      }\n\n      this.notSelectors.forEach(function (notSelector) {\n        return res += \":not(\".concat(notSelector, \")\");\n      });\n      return res;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(selector) {\n      var results = [];\n\n      var _addResult = function _addResult(res, cssSel) {\n        if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {\n          cssSel.element = '*';\n        }\n\n        res.push(cssSel);\n      };\n\n      var cssSelector = new CssSelector();\n      var match;\n      var current = cssSelector;\n      var inNot = false;\n      _SELECTOR_REGEXP.lastIndex = 0;\n\n      while (match = _SELECTOR_REGEXP.exec(selector)) {\n        if (match[1\n        /* NOT */\n        ]) {\n          if (inNot) {\n            throw new Error('Nesting :not in a selector is not allowed');\n          }\n\n          inNot = true;\n          current = new CssSelector();\n          cssSelector.notSelectors.push(current);\n        }\n\n        var tag = match[2\n        /* TAG */\n        ];\n\n        if (tag) {\n          var prefix = match[3\n          /* PREFIX */\n          ];\n\n          if (prefix === '#') {\n            // #hash\n            current.addAttribute('id', tag.substr(1));\n          } else if (prefix === '.') {\n            // Class\n            current.addClassName(tag.substr(1));\n          } else {\n            // Element\n            current.setElement(tag);\n          }\n        }\n\n        var attribute = match[4\n        /* ATTRIBUTE */\n        ];\n\n        if (attribute) {\n          current.addAttribute(current.unescapeAttribute(attribute), match[6\n          /* ATTRIBUTE_VALUE */\n          ]);\n        }\n\n        if (match[7\n        /* NOT_END */\n        ]) {\n          inNot = false;\n          current = cssSelector;\n        }\n\n        if (match[8\n        /* SEPARATOR */\n        ]) {\n          if (inNot) {\n            throw new Error('Multiple selectors in :not are not supported');\n          }\n\n          _addResult(results, cssSelector);\n\n          cssSelector = current = new CssSelector();\n        }\n      }\n\n      _addResult(results, cssSelector);\n\n      return results;\n    }\n  }]);\n\n  return CssSelector;\n}();\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\n\n\nvar SelectorMatcher = /*#__PURE__*/function () {\n  function SelectorMatcher() {\n    _classCallCheck(this, SelectorMatcher);\n\n    this._elementMap = new Map();\n    this._elementPartialMap = new Map();\n    this._classMap = new Map();\n    this._classPartialMap = new Map();\n    this._attrValueMap = new Map();\n    this._attrValuePartialMap = new Map();\n    this._listContexts = [];\n  }\n\n  _createClass(SelectorMatcher, [{\n    key: \"addSelectables\",\n    value: function addSelectables(cssSelectors, callbackCtxt) {\n      var listContext = null;\n\n      if (cssSelectors.length > 1) {\n        listContext = new SelectorListContext(cssSelectors);\n\n        this._listContexts.push(listContext);\n      }\n\n      for (var i = 0; i < cssSelectors.length; i++) {\n        this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n      }\n    }\n    /**\n     * Add an object that can be found later on by calling `match`.\n     * @param cssSelector A css selector\n     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\n     */\n\n  }, {\n    key: \"_addSelectable\",\n    value: function _addSelectable(cssSelector, callbackCtxt, listContext) {\n      var matcher = this;\n      var element = cssSelector.element;\n      var classNames = cssSelector.classNames;\n      var attrs = cssSelector.attrs;\n      var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n\n      if (element) {\n        var isTerminal = attrs.length === 0 && classNames.length === 0;\n\n        if (isTerminal) {\n          this._addTerminal(matcher._elementMap, element, selectable);\n        } else {\n          matcher = this._addPartial(matcher._elementPartialMap, element);\n        }\n      }\n\n      if (classNames) {\n        for (var i = 0; i < classNames.length; i++) {\n          var _isTerminal = attrs.length === 0 && i === classNames.length - 1;\n\n          var className = classNames[i];\n\n          if (_isTerminal) {\n            this._addTerminal(matcher._classMap, className, selectable);\n          } else {\n            matcher = this._addPartial(matcher._classPartialMap, className);\n          }\n        }\n      }\n\n      if (attrs) {\n        for (var _i = 0; _i < attrs.length; _i += 2) {\n          var _isTerminal2 = _i === attrs.length - 2;\n\n          var name = attrs[_i];\n          var value = attrs[_i + 1];\n\n          if (_isTerminal2) {\n            var terminalMap = matcher._attrValueMap;\n            var terminalValuesMap = terminalMap.get(name);\n\n            if (!terminalValuesMap) {\n              terminalValuesMap = new Map();\n              terminalMap.set(name, terminalValuesMap);\n            }\n\n            this._addTerminal(terminalValuesMap, value, selectable);\n          } else {\n            var partialMap = matcher._attrValuePartialMap;\n            var partialValuesMap = partialMap.get(name);\n\n            if (!partialValuesMap) {\n              partialValuesMap = new Map();\n              partialMap.set(name, partialValuesMap);\n            }\n\n            matcher = this._addPartial(partialValuesMap, value);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_addTerminal\",\n    value: function _addTerminal(map, name, selectable) {\n      var terminalList = map.get(name);\n\n      if (!terminalList) {\n        terminalList = [];\n        map.set(name, terminalList);\n      }\n\n      terminalList.push(selectable);\n    }\n  }, {\n    key: \"_addPartial\",\n    value: function _addPartial(map, name) {\n      var matcher = map.get(name);\n\n      if (!matcher) {\n        matcher = new SelectorMatcher();\n        map.set(name, matcher);\n      }\n\n      return matcher;\n    }\n    /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param cssSelector A css selector\n     * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return boolean true if a match was found\n     */\n\n  }, {\n    key: \"match\",\n    value: function match(cssSelector, matchedCallback) {\n      var result = false;\n      var element = cssSelector.element;\n      var classNames = cssSelector.classNames;\n      var attrs = cssSelector.attrs;\n\n      for (var i = 0; i < this._listContexts.length; i++) {\n        this._listContexts[i].alreadyMatched = false;\n      }\n\n      result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n      result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;\n\n      if (classNames) {\n        for (var _i2 = 0; _i2 < classNames.length; _i2++) {\n          var className = classNames[_i2];\n          result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n          result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;\n        }\n      }\n\n      if (attrs) {\n        for (var _i3 = 0; _i3 < attrs.length; _i3 += 2) {\n          var name = attrs[_i3];\n          var value = attrs[_i3 + 1];\n\n          var terminalValuesMap = this._attrValueMap.get(name);\n\n          if (value) {\n            result = this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n          }\n\n          result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n\n          var partialValuesMap = this._attrValuePartialMap.get(name);\n\n          if (value) {\n            result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n          }\n\n          result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n        }\n      }\n\n      return result;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_matchTerminal\",\n    value: function _matchTerminal(map, name, cssSelector, matchedCallback) {\n      if (!map || typeof name !== 'string') {\n        return false;\n      }\n\n      var selectables = map.get(name) || [];\n      var starSelectables = map.get('*');\n\n      if (starSelectables) {\n        selectables = selectables.concat(starSelectables);\n      }\n\n      if (selectables.length === 0) {\n        return false;\n      }\n\n      var selectable;\n      var result = false;\n\n      for (var i = 0; i < selectables.length; i++) {\n        selectable = selectables[i];\n        result = selectable.finalize(cssSelector, matchedCallback) || result;\n      }\n\n      return result;\n    }\n    /** @internal */\n\n  }, {\n    key: \"_matchPartial\",\n    value: function _matchPartial(map, name, cssSelector, matchedCallback) {\n      if (!map || typeof name !== 'string') {\n        return false;\n      }\n\n      var nestedSelector = map.get(name);\n\n      if (!nestedSelector) {\n        return false;\n      } // TODO(perf): get rid of recursion and measure again\n      // TODO(perf): don't pass the whole selector into the recursion,\n      // but only the not processed parts\n\n\n      return nestedSelector.match(cssSelector, matchedCallback);\n    }\n  }], [{\n    key: \"createNotMatcher\",\n    value: function createNotMatcher(notSelectors) {\n      var notMatcher = new SelectorMatcher();\n      notMatcher.addSelectables(notSelectors, null);\n      return notMatcher;\n    }\n  }]);\n\n  return SelectorMatcher;\n}();\n\nvar SelectorListContext = function SelectorListContext(selectors) {\n  _classCallCheck(this, SelectorListContext);\n\n  this.selectors = selectors;\n  this.alreadyMatched = false;\n}; // Store context to pass back selector and context when a selector is matched\n\n\nvar SelectorContext = /*#__PURE__*/function () {\n  function SelectorContext(selector, cbContext, listContext) {\n    _classCallCheck(this, SelectorContext);\n\n    this.selector = selector;\n    this.cbContext = cbContext;\n    this.listContext = listContext;\n    this.notSelectors = selector.notSelectors;\n  }\n\n  _createClass(SelectorContext, [{\n    key: \"finalize\",\n    value: function finalize(cssSelector, callback) {\n      var result = true;\n\n      if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n        var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n        result = !notMatcher.match(cssSelector, null);\n      }\n\n      if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n        if (this.listContext) {\n          this.listContext.alreadyMatched = true;\n        }\n\n        callback(this.selector, this.cbContext);\n      }\n\n      return result;\n    }\n  }]);\n\n  return SelectorContext;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar createInject = makeMetadataFactory('Inject', function (token) {\n  return {\n    token: token\n  };\n});\nvar createInjectionToken = makeMetadataFactory('InjectionToken', function (desc) {\n  return {\n    _desc: desc,\n    ɵprov: undefined\n  };\n});\nvar createAttribute = makeMetadataFactory('Attribute', function (attributeName) {\n  return {\n    attributeName: attributeName\n  };\n}); // Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\n\nvar emitDistinctChangesOnlyDefaultValue = true;\nvar createContentChildren = makeMetadataFactory('ContentChildren', function (selector) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.assign({\n    selector: selector,\n    first: false,\n    isViewQuery: false,\n    descendants: false,\n    emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue\n  }, data);\n});\nvar createContentChild = makeMetadataFactory('ContentChild', function (selector) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.assign({\n    selector: selector,\n    first: true,\n    isViewQuery: false,\n    descendants: true\n  }, data);\n});\nvar createViewChildren = makeMetadataFactory('ViewChildren', function (selector) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.assign({\n    selector: selector,\n    first: false,\n    isViewQuery: true,\n    descendants: true,\n    emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue\n  }, data);\n});\nvar createViewChild = makeMetadataFactory('ViewChild', function (selector, data) {\n  return Object.assign({\n    selector: selector,\n    first: true,\n    isViewQuery: true,\n    descendants: true\n  }, data);\n});\nvar createDirective = makeMetadataFactory('Directive', function () {\n  var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return dir;\n});\nvar ViewEncapsulation;\n\n(function (ViewEncapsulation) {\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\n\nvar ChangeDetectionStrategy;\n\n(function (ChangeDetectionStrategy) {\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n\nvar createComponent = makeMetadataFactory('Component', function () {\n  var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.assign({\n    changeDetection: ChangeDetectionStrategy.Default\n  }, c);\n});\nvar createPipe = makeMetadataFactory('Pipe', function (p) {\n  return Object.assign({\n    pure: true\n  }, p);\n});\nvar createInput = makeMetadataFactory('Input', function (bindingPropertyName) {\n  return {\n    bindingPropertyName: bindingPropertyName\n  };\n});\nvar createOutput = makeMetadataFactory('Output', function (bindingPropertyName) {\n  return {\n    bindingPropertyName: bindingPropertyName\n  };\n});\nvar createHostBinding = makeMetadataFactory('HostBinding', function (hostPropertyName) {\n  return {\n    hostPropertyName: hostPropertyName\n  };\n});\nvar createHostListener = makeMetadataFactory('HostListener', function (eventName, args) {\n  return {\n    eventName: eventName,\n    args: args\n  };\n});\nvar createNgModule = makeMetadataFactory('NgModule', function (ngModule) {\n  return ngModule;\n});\nvar createInjectable = makeMetadataFactory('Injectable', function () {\n  var injectable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return injectable;\n});\nvar CUSTOM_ELEMENTS_SCHEMA = {\n  name: 'custom-elements'\n};\nvar NO_ERRORS_SCHEMA = {\n  name: 'no-errors-schema'\n};\nvar createOptional = makeMetadataFactory('Optional');\nvar createSelf = makeMetadataFactory('Self');\nvar createSkipSelf = makeMetadataFactory('SkipSelf');\nvar createHost = makeMetadataFactory('Host');\nvar Type$1 = Function;\nvar SecurityContext;\n\n(function (SecurityContext) {\n  SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n  SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n  SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n  SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n  SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n\nvar MissingTranslationStrategy;\n\n(function (MissingTranslationStrategy) {\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\n\nfunction makeMetadataFactory(name, props) {\n  // This must be declared as a function, not a fat arrow, so that ES2015 devmode produces code\n  // that works with the static_reflector.ts in the ViewEngine compiler.\n  // In particular, `_registerDecoratorOrConstructor` assumes that the value returned here can be\n  // new'ed.\n  function factory() {\n    var values = props ? props.apply(void 0, arguments) : {};\n    return Object.assign({\n      ngMetadataName: name\n    }, values);\n  }\n\n  factory.isTypeOf = function (obj) {\n    return obj && obj.ngMetadataName === name;\n  };\n\n  factory.ngMetadataName = name;\n  return factory;\n}\n\nfunction parserSelectorToSimpleSelector(selector) {\n  var classes = selector.classNames && selector.classNames.length ? [8\n  /* CLASS */\n  ].concat(_toConsumableArray(selector.classNames)) : [];\n  var elementName = selector.element && selector.element !== '*' ? selector.element : '';\n  return [elementName].concat(_toConsumableArray(selector.attrs), _toConsumableArray(classes));\n}\n\nfunction parserSelectorToNegativeSelector(selector) {\n  var classes = selector.classNames && selector.classNames.length ? [8\n  /* CLASS */\n  ].concat(_toConsumableArray(selector.classNames)) : [];\n\n  if (selector.element) {\n    return [1\n    /* NOT */\n    | 4\n    /* ELEMENT */\n    , selector.element].concat(_toConsumableArray(selector.attrs), _toConsumableArray(classes));\n  } else if (selector.attrs.length) {\n    return [1\n    /* NOT */\n    | 2\n    /* ATTRIBUTE */\n    ].concat(_toConsumableArray(selector.attrs), _toConsumableArray(classes));\n  } else {\n    return selector.classNames && selector.classNames.length ? [1\n    /* NOT */\n    | 8\n    /* CLASS */\n    ].concat(_toConsumableArray(selector.classNames)) : [];\n  }\n}\n\nfunction parserSelectorToR3Selector(selector) {\n  var positive = parserSelectorToSimpleSelector(selector);\n  var negative = selector.notSelectors && selector.notSelectors.length ? selector.notSelectors.map(function (notSelector) {\n    return parserSelectorToNegativeSelector(notSelector);\n  }) : [];\n  return positive.concat.apply(positive, _toConsumableArray(negative));\n}\n\nfunction parseSelectorToR3Selector(selector) {\n  return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];\n}\n\nvar core = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createInject: createInject,\n  createInjectionToken: createInjectionToken,\n  createAttribute: createAttribute,\n  emitDistinctChangesOnlyDefaultValue: emitDistinctChangesOnlyDefaultValue,\n  createContentChildren: createContentChildren,\n  createContentChild: createContentChild,\n  createViewChildren: createViewChildren,\n  createViewChild: createViewChild,\n  createDirective: createDirective,\n\n  get ViewEncapsulation() {\n    return ViewEncapsulation;\n  },\n\n  get ChangeDetectionStrategy() {\n    return ChangeDetectionStrategy;\n  },\n\n  createComponent: createComponent,\n  createPipe: createPipe,\n  createInput: createInput,\n  createOutput: createOutput,\n  createHostBinding: createHostBinding,\n  createHostListener: createHostListener,\n  createNgModule: createNgModule,\n  createInjectable: createInjectable,\n  CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,\n  NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,\n  createOptional: createOptional,\n  createSelf: createSelf,\n  createSkipSelf: createSkipSelf,\n  createHost: createHost,\n  Type: Type$1,\n\n  get SecurityContext() {\n    return SecurityContext;\n  },\n\n  get MissingTranslationStrategy() {\n    return MissingTranslationStrategy;\n  },\n\n  parseSelectorToR3Selector: parseSelectorToR3Selector\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n\nfunction dashCaseToCamelCase(input) {\n  return input.replace(DASH_CASE_REGEXP, function () {\n    for (var _len = arguments.length, m = new Array(_len), _key = 0; _key < _len; _key++) {\n      m[_key] = arguments[_key];\n    }\n\n    return m[1].toUpperCase();\n  });\n}\n\nfunction splitAtColon(input, defaultValues) {\n  return _splitAt(input, ':', defaultValues);\n}\n\nfunction splitAtPeriod(input, defaultValues) {\n  return _splitAt(input, '.', defaultValues);\n}\n\nfunction _splitAt(input, character, defaultValues) {\n  var characterIndex = input.indexOf(character);\n  if (characterIndex == -1) return defaultValues;\n  return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\n}\n\nfunction visitValue(value, visitor, context) {\n  if (Array.isArray(value)) {\n    return visitor.visitArray(value, context);\n  }\n\n  if (isStrictStringMap(value)) {\n    return visitor.visitStringMap(value, context);\n  }\n\n  if (value == null || typeof value == 'string' || typeof value == 'number' || typeof value == 'boolean') {\n    return visitor.visitPrimitive(value, context);\n  }\n\n  return visitor.visitOther(value, context);\n}\n\nfunction isDefined(val) {\n  return val !== null && val !== undefined;\n}\n\nfunction noUndefined(val) {\n  return val === undefined ? null : val;\n}\n\nvar ValueTransformer = /*#__PURE__*/function () {\n  function ValueTransformer() {\n    _classCallCheck(this, ValueTransformer);\n  }\n\n  _createClass(ValueTransformer, [{\n    key: \"visitArray\",\n    value: function visitArray(arr, context) {\n      var _this2 = this;\n\n      return arr.map(function (value) {\n        return visitValue(value, _this2, context);\n      });\n    }\n  }, {\n    key: \"visitStringMap\",\n    value: function visitStringMap(map, context) {\n      var _this3 = this;\n\n      var result = {};\n      Object.keys(map).forEach(function (key) {\n        result[key] = visitValue(map[key], _this3, context);\n      });\n      return result;\n    }\n  }, {\n    key: \"visitPrimitive\",\n    value: function visitPrimitive(value, context) {\n      return value;\n    }\n  }, {\n    key: \"visitOther\",\n    value: function visitOther(value, context) {\n      return value;\n    }\n  }]);\n\n  return ValueTransformer;\n}();\n\nvar SyncAsync = {\n  assertSync: function assertSync(value) {\n    if (isPromise(value)) {\n      throw new Error(\"Illegal state: value cannot be a promise\");\n    }\n\n    return value;\n  },\n  then: function then(value, cb) {\n    return isPromise(value) ? value.then(cb) : cb(value);\n  },\n  all: function all(syncAsyncValues) {\n    return syncAsyncValues.some(isPromise) ? Promise.all(syncAsyncValues) : syncAsyncValues;\n  }\n};\n\nfunction error(msg) {\n  throw new Error(\"Internal Error: \".concat(msg));\n} // Escape characters that have a special meaning in Regular Expressions\n\n\nfunction escapeRegExp(s) {\n  return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\n\nvar STRING_MAP_PROTO = Object.getPrototypeOf({});\n\nfunction isStrictStringMap(obj) {\n  return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n}\n\nfunction utf8Encode(str) {\n  var encoded = [];\n\n  for (var index = 0; index < str.length; index++) {\n    var codePoint = str.charCodeAt(index); // decode surrogate\n    // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\n    if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > index + 1) {\n      var low = str.charCodeAt(index + 1);\n\n      if (low >= 0xdc00 && low <= 0xdfff) {\n        index++;\n        codePoint = (codePoint - 0xd800 << 10) + low - 0xdc00 + 0x10000;\n      }\n    }\n\n    if (codePoint <= 0x7f) {\n      encoded.push(codePoint);\n    } else if (codePoint <= 0x7ff) {\n      encoded.push(codePoint >> 6 & 0x1F | 0xc0, codePoint & 0x3f | 0x80);\n    } else if (codePoint <= 0xffff) {\n      encoded.push(codePoint >> 12 | 0xe0, codePoint >> 6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);\n    } else if (codePoint <= 0x1fffff) {\n      encoded.push(codePoint >> 18 & 0x07 | 0xf0, codePoint >> 12 & 0x3f | 0x80, codePoint >> 6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);\n    }\n  }\n\n  return encoded;\n}\n\nfunction stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return \"\".concat(token.overriddenName);\n  }\n\n  if (token.name) {\n    return \"\".concat(token.name);\n  }\n\n  if (!token.toString) {\n    return 'object';\n  } // WARNING: do not try to `JSON.stringify(token)` here\n  // see https://github.com/angular/angular/issues/23440\n\n\n  var res = token.toString();\n\n  if (res == null) {\n    return '' + res;\n  }\n\n  var newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n */\n\n\nfunction resolveForwardRef(type) {\n  if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__')) {\n    return type();\n  } else {\n    return type;\n  }\n}\n/**\n * Determine if the argument is shaped like a Promise\n */\n\n\nfunction isPromise(obj) {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n\nvar Version = function Version(full) {\n  _classCallCheck(this, Version);\n\n  this.full = full;\n  var splits = full.split('.');\n  this.major = splits[0];\n  this.minor = splits[1];\n  this.patch = splits.slice(2).join('.');\n};\n\nvar __window = typeof window !== 'undefined' && window;\n\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;\n\nvar __global = typeof global !== 'undefined' && global; // Check __global first, because in Node tests both __global and __window may be defined and _global\n// should be __global in that case.\n\n\nvar _global = __global || __window || __self;\n\nfunction newArray(size, value) {\n  var list = [];\n\n  for (var i = 0; i < size; i++) {\n    list.push(value);\n  }\n\n  return list;\n}\n/**\n * Partitions a given array into 2 arrays, based on a boolean value returned by the condition\n * function.\n *\n * @param arr Input array that should be partitioned\n * @param conditionFn Condition function that is called for each item in a given array and returns a\n * boolean value.\n */\n\n\nfunction partitionArray(arr, conditionFn) {\n  var truthy = [];\n  var falsy = [];\n\n  var _iterator = _createForOfIteratorHelper(arr),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      (conditionFn(item) ? truthy : falsy).push(item);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return [truthy, falsy];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents a big integer using a buffer of its individual digits, with the least significant\n * digit stored at the beginning of the array (little endian).\n *\n * For performance reasons, each instance is mutable. The addition operation can be done in-place\n * to reduce memory pressure of allocation for the digits array.\n */\n\n\nvar BigInteger = /*#__PURE__*/function () {\n  /**\n   * Creates a big integer using its individual digits in little endian storage.\n   */\n  function BigInteger(digits) {\n    _classCallCheck(this, BigInteger);\n\n    this.digits = digits;\n  }\n\n  _createClass(BigInteger, [{\n    key: \"clone\",\n    value:\n    /**\n     * Creates a clone of this instance.\n     */\n    function clone() {\n      return new BigInteger(this.digits.slice());\n    }\n    /**\n     * Returns a new big integer with the sum of `this` and `other` as its value. This does not mutate\n     * `this` but instead returns a new instance, unlike `addToSelf`.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      var result = this.clone();\n      result.addToSelf(other);\n      return result;\n    }\n    /**\n     * Adds `other` to the instance itself, thereby mutating its value.\n     */\n\n  }, {\n    key: \"addToSelf\",\n    value: function addToSelf(other) {\n      var maxNrOfDigits = Math.max(this.digits.length, other.digits.length);\n      var carry = 0;\n\n      for (var i = 0; i < maxNrOfDigits; i++) {\n        var digitSum = carry;\n\n        if (i < this.digits.length) {\n          digitSum += this.digits[i];\n        }\n\n        if (i < other.digits.length) {\n          digitSum += other.digits[i];\n        }\n\n        if (digitSum >= 10) {\n          this.digits[i] = digitSum - 10;\n          carry = 1;\n        } else {\n          this.digits[i] = digitSum;\n          carry = 0;\n        }\n      } // Apply a remaining carry if needed.\n\n\n      if (carry > 0) {\n        this.digits[maxNrOfDigits] = 1;\n      }\n    }\n    /**\n     * Builds the decimal string representation of the big integer. As this is stored in\n     * little endian, the digits are concatenated in reverse order.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var res = '';\n\n      for (var i = this.digits.length - 1; i >= 0; i--) {\n        res += this.digits[i];\n      }\n\n      return res;\n    }\n  }], [{\n    key: \"zero\",\n    value: function zero() {\n      return new BigInteger([0]);\n    }\n  }, {\n    key: \"one\",\n    value: function one() {\n      return new BigInteger([1]);\n    }\n  }]);\n\n  return BigInteger;\n}();\n/**\n * Represents a big integer which is optimized for multiplication operations, as its power-of-twos\n * are memoized. See `multiplyBy()` for details on the multiplication algorithm.\n */\n\n\nvar BigIntForMultiplication = /*#__PURE__*/function () {\n  function BigIntForMultiplication(value) {\n    _classCallCheck(this, BigIntForMultiplication);\n\n    this.powerOfTwos = [value];\n  }\n  /**\n   * Returns the big integer itself.\n   */\n\n\n  _createClass(BigIntForMultiplication, [{\n    key: \"getValue\",\n    value: function getValue() {\n      return this.powerOfTwos[0];\n    }\n    /**\n     * Computes the value for `num * b`, where `num` is a JS number and `b` is a big integer. The\n     * value for `b` is represented by a storage model that is optimized for this computation.\n     *\n     * This operation is implemented in N(log2(num)) by continuous halving of the number, where the\n     * least-significant bit (LSB) is tested in each iteration. If the bit is set, the bit's index is\n     * used as exponent into the power-of-two multiplication of `b`.\n     *\n     * As an example, consider the multiplication num=42, b=1337. In binary 42 is 0b00101010 and the\n     * algorithm unrolls into the following iterations:\n     *\n     *  Iteration | num        | LSB  | b * 2^iter | Add? | product\n     * -----------|------------|------|------------|------|--------\n     *  0         | 0b00101010 | 0    | 1337       | No   | 0\n     *  1         | 0b00010101 | 1    | 2674       | Yes  | 2674\n     *  2         | 0b00001010 | 0    | 5348       | No   | 2674\n     *  3         | 0b00000101 | 1    | 10696      | Yes  | 13370\n     *  4         | 0b00000010 | 0    | 21392      | No   | 13370\n     *  5         | 0b00000001 | 1    | 42784      | Yes  | 56154\n     *  6         | 0b00000000 | 0    | 85568      | No   | 56154\n     *\n     * The computed product of 56154 is indeed the correct result.\n     *\n     * The `BigIntForMultiplication` representation for a big integer provides memoized access to the\n     * power-of-two values to reduce the workload in computing those values.\n     */\n\n  }, {\n    key: \"multiplyBy\",\n    value: function multiplyBy(num) {\n      var product = BigInteger.zero();\n      this.multiplyByAndAddTo(num, product);\n      return product;\n    }\n    /**\n     * See `multiplyBy()` for details. This function allows for the computed product to be added\n     * directly to the provided result big integer.\n     */\n\n  }, {\n    key: \"multiplyByAndAddTo\",\n    value: function multiplyByAndAddTo(num, result) {\n      for (var exponent = 0; num !== 0; num = num >>> 1, exponent++) {\n        if (num & 1) {\n          var value = this.getMultipliedByPowerOfTwo(exponent);\n          result.addToSelf(value);\n        }\n      }\n    }\n    /**\n     * Computes and memoizes the big integer value for `this.number * 2^exponent`.\n     */\n\n  }, {\n    key: \"getMultipliedByPowerOfTwo\",\n    value: function getMultipliedByPowerOfTwo(exponent) {\n      // Compute the powers up until the requested exponent, where each value is computed from its\n      // predecessor. This is simple as `this.number * 2^(exponent - 1)` only has to be doubled (i.e.\n      // added to itself) to reach `this.number * 2^exponent`.\n      for (var i = this.powerOfTwos.length; i <= exponent; i++) {\n        var previousPower = this.powerOfTwos[i - 1];\n        this.powerOfTwos[i] = previousPower.add(previousPower);\n      }\n\n      return this.powerOfTwos[exponent];\n    }\n  }]);\n\n  return BigIntForMultiplication;\n}();\n/**\n * Represents an exponentiation operation for the provided base, of which exponents are computed and\n * memoized. The results are represented by a `BigIntForMultiplication` which is tailored for\n * multiplication operations by memoizing the power-of-twos. This effectively results in a matrix\n * representation that is lazily computed upon request.\n */\n\n\nvar BigIntExponentiation = /*#__PURE__*/function () {\n  function BigIntExponentiation(base) {\n    _classCallCheck(this, BigIntExponentiation);\n\n    this.base = base;\n    this.exponents = [new BigIntForMultiplication(BigInteger.one())];\n  }\n  /**\n   * Compute the value for `this.base^exponent`, resulting in a big integer that is optimized for\n   * further multiplication operations.\n   */\n\n\n  _createClass(BigIntExponentiation, [{\n    key: \"toThePowerOf\",\n    value: function toThePowerOf(exponent) {\n      // Compute the results up until the requested exponent, where every value is computed from its\n      // predecessor. This is because `this.base^(exponent - 1)` only has to be multiplied by `base`\n      // to reach `this.base^exponent`.\n      for (var i = this.exponents.length; i <= exponent; i++) {\n        var value = this.exponents[i - 1].multiplyBy(this.base);\n        this.exponents[i] = new BigIntForMultiplication(value);\n      }\n\n      return this.exponents[exponent];\n    }\n  }]);\n\n  return BigIntExponentiation;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Return the message id or compute it using the XLIFF1 digest.\n */\n\n\nfunction digest$1(message) {\n  return message.id || computeDigest(message);\n}\n/**\n * Compute the message id using the XLIFF1 digest.\n */\n\n\nfunction computeDigest(message) {\n  return sha1(serializeNodes(message.nodes).join('') + \"[\".concat(message.meaning, \"]\"));\n}\n/**\n * Return the message id or compute it using the XLIFF2/XMB/$localize digest.\n */\n\n\nfunction decimalDigest(message) {\n  return message.id || computeDecimalDigest(message);\n}\n/**\n * Compute the message id using the XLIFF2/XMB/$localize digest.\n */\n\n\nfunction computeDecimalDigest(message) {\n  var visitor = new _SerializerIgnoreIcuExpVisitor();\n  var parts = message.nodes.map(function (a) {\n    return a.visit(visitor, null);\n  });\n  return computeMsgId(parts.join(''), message.meaning);\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * @internal\n */\n\n\nvar _SerializerVisitor = /*#__PURE__*/function () {\n  function _SerializerVisitor() {\n    _classCallCheck(this, _SerializerVisitor);\n  }\n\n  _createClass(_SerializerVisitor, [{\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      return text.value;\n    }\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container, context) {\n      var _this4 = this;\n\n      return \"[\".concat(container.children.map(function (child) {\n        return child.visit(_this4);\n      }).join(', '), \"]\");\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu, context) {\n      var _this5 = this;\n\n      var strCases = Object.keys(icu.cases).map(function (k) {\n        return \"\".concat(k, \" {\").concat(icu.cases[k].visit(_this5), \"}\");\n      });\n      return \"{\".concat(icu.expression, \", \").concat(icu.type, \", \").concat(strCases.join(', '), \"}\");\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph, context) {\n      var _this6 = this;\n\n      return ph.isVoid ? \"<ph tag name=\\\"\".concat(ph.startName, \"\\\"/>\") : \"<ph tag name=\\\"\".concat(ph.startName, \"\\\">\").concat(ph.children.map(function (child) {\n        return child.visit(_this6);\n      }).join(', '), \"</ph name=\\\"\").concat(ph.closeName, \"\\\">\");\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph, context) {\n      return ph.value ? \"<ph name=\\\"\".concat(ph.name, \"\\\">\").concat(ph.value, \"</ph>\") : \"<ph name=\\\"\".concat(ph.name, \"\\\"/>\");\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, context) {\n      return \"<ph icu name=\\\"\".concat(ph.name, \"\\\">\").concat(ph.value.visit(this), \"</ph>\");\n    }\n  }]);\n\n  return _SerializerVisitor;\n}();\n\nvar serializerVisitor$1 = new _SerializerVisitor();\n\nfunction serializeNodes(nodes) {\n  return nodes.map(function (a) {\n    return a.visit(serializerVisitor$1, null);\n  });\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * @internal\n */\n\n\nvar _SerializerIgnoreIcuExpVisitor = /*#__PURE__*/function (_SerializerVisitor2) {\n  _inherits(_SerializerIgnoreIcuExpVisitor, _SerializerVisitor2);\n\n  var _super = _createSuper(_SerializerIgnoreIcuExpVisitor);\n\n  function _SerializerIgnoreIcuExpVisitor() {\n    _classCallCheck(this, _SerializerIgnoreIcuExpVisitor);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_SerializerIgnoreIcuExpVisitor, [{\n    key: \"visitIcu\",\n    value: function visitIcu(icu, context) {\n      var _this7 = this;\n\n      var strCases = Object.keys(icu.cases).map(function (k) {\n        return \"\".concat(k, \" {\").concat(icu.cases[k].visit(_this7), \"}\");\n      }); // Do not take the expression into account\n\n      return \"{\".concat(icu.type, \", \").concat(strCases.join(', '), \"}\");\n    }\n  }]);\n\n  return _SerializerIgnoreIcuExpVisitor;\n}(_SerializerVisitor);\n/**\n * Compute the SHA1 of the given string\n *\n * see https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n *\n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n */\n\n\nfunction sha1(str) {\n  var utf8 = utf8Encode(str);\n  var words32 = bytesToWords32(utf8, Endian.Big);\n  var len = utf8.length * 8;\n  var w = newArray(80);\n  var a = 0x67452301,\n      b = 0xefcdab89,\n      c = 0x98badcfe,\n      d = 0x10325476,\n      e = 0xc3d2e1f0;\n  words32[len >> 5] |= 0x80 << 24 - len % 32;\n  words32[(len + 64 >> 9 << 4) + 15] = len;\n\n  for (var i = 0; i < words32.length; i += 16) {\n    var h0 = a,\n        h1 = b,\n        h2 = c,\n        h3 = d,\n        h4 = e;\n\n    for (var j = 0; j < 80; j++) {\n      if (j < 16) {\n        w[j] = words32[i + j];\n      } else {\n        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n\n      var fkVal = fk(j, b, c, d);\n      var f = fkVal[0];\n      var k = fkVal[1];\n      var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n      e = d;\n      d = c;\n      c = rol32(b, 30);\n      b = a;\n      a = temp;\n    }\n\n    a = add32(a, h0);\n    b = add32(b, h1);\n    c = add32(c, h2);\n    d = add32(d, h3);\n    e = add32(e, h4);\n  }\n\n  return bytesToHexString(words32ToByteString([a, b, c, d, e]));\n}\n\nfunction fk(index, b, c, d) {\n  if (index < 20) {\n    return [b & c | ~b & d, 0x5a827999];\n  }\n\n  if (index < 40) {\n    return [b ^ c ^ d, 0x6ed9eba1];\n  }\n\n  if (index < 60) {\n    return [b & c | b & d | c & d, 0x8f1bbcdc];\n  }\n\n  return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\n * Compute the fingerprint of the given string\n *\n * The output is 64 bit number encoded as a decimal string\n *\n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n */\n\n\nfunction fingerprint(str) {\n  var utf8 = utf8Encode(str);\n  var hi = hash32(utf8, 0);\n  var lo = hash32(utf8, 102072);\n\n  if (hi == 0 && (lo == 0 || lo == 1)) {\n    hi = hi ^ 0x130f9bef;\n    lo = lo ^ -0x6b5f56d8;\n  }\n\n  return [hi, lo];\n}\n\nfunction computeMsgId(msg) {\n  var meaning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var msgFingerprint = fingerprint(msg);\n\n  if (meaning) {\n    var meaningFingerprint = fingerprint(meaning);\n    msgFingerprint = add64(rol64(msgFingerprint, 1), meaningFingerprint);\n  }\n\n  var hi = msgFingerprint[0];\n  var lo = msgFingerprint[1];\n  return wordsToDecimalString(hi & 0x7fffffff, lo);\n}\n\nfunction hash32(bytes, c) {\n  var a = 0x9e3779b9,\n      b = 0x9e3779b9;\n  var i;\n  var len = bytes.length;\n\n  for (i = 0; i + 12 <= len; i += 12) {\n    a = add32(a, wordAt(bytes, i, Endian.Little));\n    b = add32(b, wordAt(bytes, i + 4, Endian.Little));\n    c = add32(c, wordAt(bytes, i + 8, Endian.Little));\n    var res = mix(a, b, c);\n    a = res[0], b = res[1], c = res[2];\n  }\n\n  a = add32(a, wordAt(bytes, i, Endian.Little));\n  b = add32(b, wordAt(bytes, i + 4, Endian.Little)); // the first byte of c is reserved for the length\n\n  c = add32(c, len);\n  c = add32(c, wordAt(bytes, i + 8, Endian.Little) << 8);\n  return mix(a, b, c)[2];\n} // clang-format off\n\n\nfunction mix(a, b, c) {\n  a = sub32(a, b);\n  a = sub32(a, c);\n  a ^= c >>> 13;\n  b = sub32(b, c);\n  b = sub32(b, a);\n  b ^= a << 8;\n  c = sub32(c, a);\n  c = sub32(c, b);\n  c ^= b >>> 13;\n  a = sub32(a, b);\n  a = sub32(a, c);\n  a ^= c >>> 12;\n  b = sub32(b, c);\n  b = sub32(b, a);\n  b ^= a << 16;\n  c = sub32(c, a);\n  c = sub32(c, b);\n  c ^= b >>> 5;\n  a = sub32(a, b);\n  a = sub32(a, c);\n  a ^= c >>> 3;\n  b = sub32(b, c);\n  b = sub32(b, a);\n  b ^= a << 10;\n  c = sub32(c, a);\n  c = sub32(c, b);\n  c ^= b >>> 15;\n  return [a, b, c];\n} // clang-format on\n// Utils\n\n\nvar Endian;\n\n(function (Endian) {\n  Endian[Endian[\"Little\"] = 0] = \"Little\";\n  Endian[Endian[\"Big\"] = 1] = \"Big\";\n})(Endian || (Endian = {}));\n\nfunction add32(a, b) {\n  return add32to64(a, b)[1];\n}\n\nfunction add32to64(a, b) {\n  var low = (a & 0xffff) + (b & 0xffff);\n  var high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n  return [high >>> 16, high << 16 | low & 0xffff];\n}\n\nfunction add64(a, b) {\n  var ah = a[0],\n      al = a[1];\n  var bh = b[0],\n      bl = b[1];\n  var result = add32to64(al, bl);\n  var carry = result[0];\n  var l = result[1];\n  var h = add32(add32(ah, bh), carry);\n  return [h, l];\n}\n\nfunction sub32(a, b) {\n  var low = (a & 0xffff) - (b & 0xffff);\n  var high = (a >> 16) - (b >> 16) + (low >> 16);\n  return high << 16 | low & 0xffff;\n} // Rotate a 32b number left `count` position\n\n\nfunction rol32(a, count) {\n  return a << count | a >>> 32 - count;\n} // Rotate a 64b number left `count` position\n\n\nfunction rol64(num, count) {\n  var hi = num[0],\n      lo = num[1];\n  var h = hi << count | lo >>> 32 - count;\n  var l = lo << count | hi >>> 32 - count;\n  return [h, l];\n}\n\nfunction bytesToWords32(bytes, endian) {\n  var size = bytes.length + 3 >>> 2;\n  var words32 = [];\n\n  for (var i = 0; i < size; i++) {\n    words32[i] = wordAt(bytes, i * 4, endian);\n  }\n\n  return words32;\n}\n\nfunction byteAt(bytes, index) {\n  return index >= bytes.length ? 0 : bytes[index];\n}\n\nfunction wordAt(bytes, index, endian) {\n  var word = 0;\n\n  if (endian === Endian.Big) {\n    for (var i = 0; i < 4; i++) {\n      word += byteAt(bytes, index + i) << 24 - 8 * i;\n    }\n  } else {\n    for (var _i4 = 0; _i4 < 4; _i4++) {\n      word += byteAt(bytes, index + _i4) << 8 * _i4;\n    }\n  }\n\n  return word;\n}\n\nfunction words32ToByteString(words32) {\n  return words32.reduce(function (bytes, word) {\n    return bytes.concat(word32ToByteString(word));\n  }, []);\n}\n\nfunction word32ToByteString(word) {\n  var bytes = [];\n\n  for (var i = 0; i < 4; i++) {\n    bytes.push(word >>> 8 * (3 - i) & 0xff);\n  }\n\n  return bytes;\n}\n\nfunction bytesToHexString(bytes) {\n  var hex = '';\n\n  for (var i = 0; i < bytes.length; i++) {\n    var b = byteAt(bytes, i);\n    hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n  }\n\n  return hex.toLowerCase();\n}\n/**\n * Create a shared exponentiation pool for base-256 computations. This shared pool provides memoized\n * power-of-256 results with memoized power-of-two computations for efficient multiplication.\n *\n * For our purposes, this can be safely stored as a global without memory concerns. The reason is\n * that we encode two words, so only need the 0th (for the low word) and 4th (for the high word)\n * exponent.\n */\n\n\nvar base256 = new BigIntExponentiation(256);\n/**\n * Represents two 32-bit words as a single decimal number. This requires a big integer storage\n * model as JS numbers are not accurate enough to represent the 64-bit number.\n *\n * Based on https://www.danvk.org/hex2dec.html\n */\n\nfunction wordsToDecimalString(hi, lo) {\n  // Encode the four bytes in lo in the lower digits of the decimal number.\n  // Note: the multiplication results in lo itself but represented by a big integer using its\n  // decimal digits.\n  var decimal = base256.toThePowerOf(0).multiplyBy(lo); // Encode the four bytes in hi above the four lo bytes. lo is a maximum of (2^8)^4, which is why\n  // this multiplication factor is applied.\n\n  base256.toThePowerOf(4).multiplyByAndAddTo(hi, decimal);\n  return decimal.toString();\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n//// Types\n\n\nvar TypeModifier;\n\n(function (TypeModifier) {\n  TypeModifier[TypeModifier[\"Const\"] = 0] = \"Const\";\n})(TypeModifier || (TypeModifier = {}));\n\nvar Type = /*#__PURE__*/function () {\n  function Type() {\n    var modifiers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, Type);\n\n    this.modifiers = modifiers;\n  }\n\n  _createClass(Type, [{\n    key: \"hasModifier\",\n    value: function hasModifier(modifier) {\n      return this.modifiers.indexOf(modifier) !== -1;\n    }\n  }]);\n\n  return Type;\n}();\n\nvar BuiltinTypeName;\n\n(function (BuiltinTypeName) {\n  BuiltinTypeName[BuiltinTypeName[\"Dynamic\"] = 0] = \"Dynamic\";\n  BuiltinTypeName[BuiltinTypeName[\"Bool\"] = 1] = \"Bool\";\n  BuiltinTypeName[BuiltinTypeName[\"String\"] = 2] = \"String\";\n  BuiltinTypeName[BuiltinTypeName[\"Int\"] = 3] = \"Int\";\n  BuiltinTypeName[BuiltinTypeName[\"Number\"] = 4] = \"Number\";\n  BuiltinTypeName[BuiltinTypeName[\"Function\"] = 5] = \"Function\";\n  BuiltinTypeName[BuiltinTypeName[\"Inferred\"] = 6] = \"Inferred\";\n  BuiltinTypeName[BuiltinTypeName[\"None\"] = 7] = \"None\";\n})(BuiltinTypeName || (BuiltinTypeName = {}));\n\nvar BuiltinType = /*#__PURE__*/function (_Type) {\n  _inherits(BuiltinType, _Type);\n\n  var _super2 = _createSuper(BuiltinType);\n\n  function BuiltinType(name, modifiers) {\n    var _this8;\n\n    _classCallCheck(this, BuiltinType);\n\n    _this8 = _super2.call(this, modifiers);\n    _this8.name = name;\n    return _this8;\n  }\n\n  _createClass(BuiltinType, [{\n    key: \"visitType\",\n    value: function visitType(visitor, context) {\n      return visitor.visitBuiltinType(this, context);\n    }\n  }]);\n\n  return BuiltinType;\n}(Type);\n\nvar ExpressionType = /*#__PURE__*/function (_Type2) {\n  _inherits(ExpressionType, _Type2);\n\n  var _super3 = _createSuper(ExpressionType);\n\n  function ExpressionType(value, modifiers) {\n    var _this9;\n\n    var typeParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, ExpressionType);\n\n    _this9 = _super3.call(this, modifiers);\n    _this9.value = value;\n    _this9.typeParams = typeParams;\n    return _this9;\n  }\n\n  _createClass(ExpressionType, [{\n    key: \"visitType\",\n    value: function visitType(visitor, context) {\n      return visitor.visitExpressionType(this, context);\n    }\n  }]);\n\n  return ExpressionType;\n}(Type);\n\nvar ArrayType = /*#__PURE__*/function (_Type3) {\n  _inherits(ArrayType, _Type3);\n\n  var _super4 = _createSuper(ArrayType);\n\n  function ArrayType(of, modifiers) {\n    var _this10;\n\n    _classCallCheck(this, ArrayType);\n\n    _this10 = _super4.call(this, modifiers);\n    _this10.of = of;\n    return _this10;\n  }\n\n  _createClass(ArrayType, [{\n    key: \"visitType\",\n    value: function visitType(visitor, context) {\n      return visitor.visitArrayType(this, context);\n    }\n  }]);\n\n  return ArrayType;\n}(Type);\n\nvar MapType = /*#__PURE__*/function (_Type4) {\n  _inherits(MapType, _Type4);\n\n  var _super5 = _createSuper(MapType);\n\n  function MapType(valueType, modifiers) {\n    var _this11;\n\n    _classCallCheck(this, MapType);\n\n    _this11 = _super5.call(this, modifiers);\n    _this11.valueType = valueType || null;\n    return _this11;\n  }\n\n  _createClass(MapType, [{\n    key: \"visitType\",\n    value: function visitType(visitor, context) {\n      return visitor.visitMapType(this, context);\n    }\n  }]);\n\n  return MapType;\n}(Type);\n\nvar DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nvar INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);\nvar BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nvar INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nvar NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nvar STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nvar FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\nvar NONE_TYPE = new BuiltinType(BuiltinTypeName.None); ///// Expressions\n\nvar UnaryOperator;\n\n(function (UnaryOperator) {\n  UnaryOperator[UnaryOperator[\"Minus\"] = 0] = \"Minus\";\n  UnaryOperator[UnaryOperator[\"Plus\"] = 1] = \"Plus\";\n})(UnaryOperator || (UnaryOperator = {}));\n\nvar BinaryOperator;\n\n(function (BinaryOperator) {\n  BinaryOperator[BinaryOperator[\"Equals\"] = 0] = \"Equals\";\n  BinaryOperator[BinaryOperator[\"NotEquals\"] = 1] = \"NotEquals\";\n  BinaryOperator[BinaryOperator[\"Identical\"] = 2] = \"Identical\";\n  BinaryOperator[BinaryOperator[\"NotIdentical\"] = 3] = \"NotIdentical\";\n  BinaryOperator[BinaryOperator[\"Minus\"] = 4] = \"Minus\";\n  BinaryOperator[BinaryOperator[\"Plus\"] = 5] = \"Plus\";\n  BinaryOperator[BinaryOperator[\"Divide\"] = 6] = \"Divide\";\n  BinaryOperator[BinaryOperator[\"Multiply\"] = 7] = \"Multiply\";\n  BinaryOperator[BinaryOperator[\"Modulo\"] = 8] = \"Modulo\";\n  BinaryOperator[BinaryOperator[\"And\"] = 9] = \"And\";\n  BinaryOperator[BinaryOperator[\"Or\"] = 10] = \"Or\";\n  BinaryOperator[BinaryOperator[\"BitwiseAnd\"] = 11] = \"BitwiseAnd\";\n  BinaryOperator[BinaryOperator[\"Lower\"] = 12] = \"Lower\";\n  BinaryOperator[BinaryOperator[\"LowerEquals\"] = 13] = \"LowerEquals\";\n  BinaryOperator[BinaryOperator[\"Bigger\"] = 14] = \"Bigger\";\n  BinaryOperator[BinaryOperator[\"BiggerEquals\"] = 15] = \"BiggerEquals\";\n  BinaryOperator[BinaryOperator[\"NullishCoalesce\"] = 16] = \"NullishCoalesce\";\n})(BinaryOperator || (BinaryOperator = {}));\n\nfunction nullSafeIsEquivalent(base, other) {\n  if (base == null || other == null) {\n    return base == other;\n  }\n\n  return base.isEquivalent(other);\n}\n\nfunction areAllEquivalentPredicate(base, other, equivalentPredicate) {\n  var len = base.length;\n\n  if (len !== other.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (!equivalentPredicate(base[i], other[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction areAllEquivalent(base, other) {\n  return areAllEquivalentPredicate(base, other, function (baseElement, otherElement) {\n    return baseElement.isEquivalent(otherElement);\n  });\n}\n\nvar Expression = /*#__PURE__*/function () {\n  function Expression(type, sourceSpan) {\n    _classCallCheck(this, Expression);\n\n    this.type = type || null;\n    this.sourceSpan = sourceSpan || null;\n  }\n\n  _createClass(Expression, [{\n    key: \"prop\",\n    value: function prop(name, sourceSpan) {\n      return new ReadPropExpr(this, name, null, sourceSpan);\n    }\n  }, {\n    key: \"key\",\n    value: function key(index, type, sourceSpan) {\n      return new ReadKeyExpr(this, index, type, sourceSpan);\n    }\n  }, {\n    key: \"callFn\",\n    value: function callFn(params, sourceSpan, pure) {\n      return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);\n    }\n  }, {\n    key: \"instantiate\",\n    value: function instantiate(params, type, sourceSpan) {\n      return new InstantiateExpr(this, params, type, sourceSpan);\n    }\n  }, {\n    key: \"conditional\",\n    value: function conditional(trueCase) {\n      var falseCase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var sourceSpan = arguments.length > 2 ? arguments[2] : undefined;\n      return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"notEquals\",\n    value: function notEquals(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"identical\",\n    value: function identical(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"notIdentical\",\n    value: function notIdentical(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"minus\",\n    value: function minus(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"divide\",\n    value: function divide(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"modulo\",\n    value: function modulo(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"and\",\n    value: function and(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"bitwiseAnd\",\n    value: function bitwiseAnd(rhs, sourceSpan) {\n      var parens = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);\n    }\n  }, {\n    key: \"or\",\n    value: function or(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"lower\",\n    value: function lower(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"lowerEquals\",\n    value: function lowerEquals(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"bigger\",\n    value: function bigger(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"biggerEquals\",\n    value: function biggerEquals(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"isBlank\",\n    value: function isBlank(sourceSpan) {\n      // Note: We use equals by purpose here to compare to null and undefined in JS.\n      // We use the typed null to allow strictNullChecks to narrow types.\n      return this.equals(TYPED_NULL_EXPR, sourceSpan);\n    }\n  }, {\n    key: \"cast\",\n    value: function cast(type, sourceSpan) {\n      return new CastExpr(this, type, sourceSpan);\n    }\n  }, {\n    key: \"nullishCoalesce\",\n    value: function nullishCoalesce(rhs, sourceSpan) {\n      return new BinaryOperatorExpr(BinaryOperator.NullishCoalesce, this, rhs, null, sourceSpan);\n    }\n  }, {\n    key: \"toStmt\",\n    value: function toStmt() {\n      return new ExpressionStatement(this, null);\n    }\n  }]);\n\n  return Expression;\n}();\n\nvar BuiltinVar;\n\n(function (BuiltinVar) {\n  BuiltinVar[BuiltinVar[\"This\"] = 0] = \"This\";\n  BuiltinVar[BuiltinVar[\"Super\"] = 1] = \"Super\";\n  BuiltinVar[BuiltinVar[\"CatchError\"] = 2] = \"CatchError\";\n  BuiltinVar[BuiltinVar[\"CatchStack\"] = 3] = \"CatchStack\";\n})(BuiltinVar || (BuiltinVar = {}));\n\nvar ReadVarExpr = /*#__PURE__*/function (_Expression) {\n  _inherits(ReadVarExpr, _Expression);\n\n  var _super6 = _createSuper(ReadVarExpr);\n\n  function ReadVarExpr(name, type, sourceSpan) {\n    var _this12;\n\n    _classCallCheck(this, ReadVarExpr);\n\n    _this12 = _super6.call(this, type, sourceSpan);\n\n    if (typeof name === 'string') {\n      _this12.name = name;\n      _this12.builtin = null;\n    } else {\n      _this12.name = null;\n      _this12.builtin = name;\n    }\n\n    return _this12;\n  }\n\n  _createClass(ReadVarExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof ReadVarExpr && this.name === e.name && this.builtin === e.builtin;\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitReadVarExpr(this, context);\n    }\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      if (!this.name) {\n        throw new Error(\"Built in variable \".concat(this.builtin, \" can not be assigned to.\"));\n      }\n\n      return new WriteVarExpr(this.name, value, null, this.sourceSpan);\n    }\n  }]);\n\n  return ReadVarExpr;\n}(Expression);\n\nvar TypeofExpr = /*#__PURE__*/function (_Expression2) {\n  _inherits(TypeofExpr, _Expression2);\n\n  var _super7 = _createSuper(TypeofExpr);\n\n  function TypeofExpr(expr, type, sourceSpan) {\n    var _this13;\n\n    _classCallCheck(this, TypeofExpr);\n\n    _this13 = _super7.call(this, type, sourceSpan);\n    _this13.expr = expr;\n    return _this13;\n  }\n\n  _createClass(TypeofExpr, [{\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitTypeofExpr(this, context);\n    }\n  }, {\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return this.expr.isConstant();\n    }\n  }]);\n\n  return TypeofExpr;\n}(Expression);\n\nvar WrappedNodeExpr = /*#__PURE__*/function (_Expression3) {\n  _inherits(WrappedNodeExpr, _Expression3);\n\n  var _super8 = _createSuper(WrappedNodeExpr);\n\n  function WrappedNodeExpr(node, type, sourceSpan) {\n    var _this14;\n\n    _classCallCheck(this, WrappedNodeExpr);\n\n    _this14 = _super8.call(this, type, sourceSpan);\n    _this14.node = node;\n    return _this14;\n  }\n\n  _createClass(WrappedNodeExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof WrappedNodeExpr && this.node === e.node;\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitWrappedNodeExpr(this, context);\n    }\n  }]);\n\n  return WrappedNodeExpr;\n}(Expression);\n\nvar WriteVarExpr = /*#__PURE__*/function (_Expression4) {\n  _inherits(WriteVarExpr, _Expression4);\n\n  var _super9 = _createSuper(WriteVarExpr);\n\n  function WriteVarExpr(name, value, type, sourceSpan) {\n    var _this15;\n\n    _classCallCheck(this, WriteVarExpr);\n\n    _this15 = _super9.call(this, type || value.type, sourceSpan);\n    _this15.name = name;\n    _this15.value = value;\n    return _this15;\n  }\n\n  _createClass(WriteVarExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitWriteVarExpr(this, context);\n    }\n  }, {\n    key: \"toDeclStmt\",\n    value: function toDeclStmt(type, modifiers) {\n      return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\n    }\n  }, {\n    key: \"toConstDecl\",\n    value: function toConstDecl() {\n      return this.toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]);\n    }\n  }]);\n\n  return WriteVarExpr;\n}(Expression);\n\nvar WriteKeyExpr = /*#__PURE__*/function (_Expression5) {\n  _inherits(WriteKeyExpr, _Expression5);\n\n  var _super10 = _createSuper(WriteKeyExpr);\n\n  function WriteKeyExpr(receiver, index, value, type, sourceSpan) {\n    var _this16;\n\n    _classCallCheck(this, WriteKeyExpr);\n\n    _this16 = _super10.call(this, type || value.type, sourceSpan);\n    _this16.receiver = receiver;\n    _this16.index = index;\n    _this16.value = value;\n    return _this16;\n  }\n\n  _createClass(WriteKeyExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitWriteKeyExpr(this, context);\n    }\n  }]);\n\n  return WriteKeyExpr;\n}(Expression);\n\nvar WritePropExpr = /*#__PURE__*/function (_Expression6) {\n  _inherits(WritePropExpr, _Expression6);\n\n  var _super11 = _createSuper(WritePropExpr);\n\n  function WritePropExpr(receiver, name, value, type, sourceSpan) {\n    var _this17;\n\n    _classCallCheck(this, WritePropExpr);\n\n    _this17 = _super11.call(this, type || value.type, sourceSpan);\n    _this17.receiver = receiver;\n    _this17.name = name;\n    _this17.value = value;\n    return _this17;\n  }\n\n  _createClass(WritePropExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name && this.value.isEquivalent(e.value);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitWritePropExpr(this, context);\n    }\n  }]);\n\n  return WritePropExpr;\n}(Expression);\n\nvar BuiltinMethod;\n\n(function (BuiltinMethod) {\n  BuiltinMethod[BuiltinMethod[\"ConcatArray\"] = 0] = \"ConcatArray\";\n  BuiltinMethod[BuiltinMethod[\"SubscribeObservable\"] = 1] = \"SubscribeObservable\";\n  BuiltinMethod[BuiltinMethod[\"Bind\"] = 2] = \"Bind\";\n})(BuiltinMethod || (BuiltinMethod = {}));\n\nvar InvokeFunctionExpr = /*#__PURE__*/function (_Expression7) {\n  _inherits(InvokeFunctionExpr, _Expression7);\n\n  var _super12 = _createSuper(InvokeFunctionExpr);\n\n  function InvokeFunctionExpr(fn, args, type, sourceSpan) {\n    var _this18;\n\n    var pure = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, InvokeFunctionExpr);\n\n    _this18 = _super12.call(this, type, sourceSpan);\n    _this18.fn = fn;\n    _this18.args = args;\n    _this18.pure = pure;\n    return _this18;\n  }\n\n  _createClass(InvokeFunctionExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) && areAllEquivalent(this.args, e.args) && this.pure === e.pure;\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitInvokeFunctionExpr(this, context);\n    }\n  }]);\n\n  return InvokeFunctionExpr;\n}(Expression);\n\nvar TaggedTemplateExpr = /*#__PURE__*/function (_Expression8) {\n  _inherits(TaggedTemplateExpr, _Expression8);\n\n  var _super13 = _createSuper(TaggedTemplateExpr);\n\n  function TaggedTemplateExpr(tag, template, type, sourceSpan) {\n    var _this19;\n\n    _classCallCheck(this, TaggedTemplateExpr);\n\n    _this19 = _super13.call(this, type, sourceSpan);\n    _this19.tag = tag;\n    _this19.template = template;\n    return _this19;\n  }\n\n  _createClass(TaggedTemplateExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof TaggedTemplateExpr && this.tag.isEquivalent(e.tag) && areAllEquivalentPredicate(this.template.elements, e.template.elements, function (a, b) {\n        return a.text === b.text;\n      }) && areAllEquivalent(this.template.expressions, e.template.expressions);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitTaggedTemplateExpr(this, context);\n    }\n  }]);\n\n  return TaggedTemplateExpr;\n}(Expression);\n\nvar InstantiateExpr = /*#__PURE__*/function (_Expression9) {\n  _inherits(InstantiateExpr, _Expression9);\n\n  var _super14 = _createSuper(InstantiateExpr);\n\n  function InstantiateExpr(classExpr, args, type, sourceSpan) {\n    var _this20;\n\n    _classCallCheck(this, InstantiateExpr);\n\n    _this20 = _super14.call(this, type, sourceSpan);\n    _this20.classExpr = classExpr;\n    _this20.args = args;\n    return _this20;\n  }\n\n  _createClass(InstantiateExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) && areAllEquivalent(this.args, e.args);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitInstantiateExpr(this, context);\n    }\n  }]);\n\n  return InstantiateExpr;\n}(Expression);\n\nvar LiteralExpr = /*#__PURE__*/function (_Expression10) {\n  _inherits(LiteralExpr, _Expression10);\n\n  var _super15 = _createSuper(LiteralExpr);\n\n  function LiteralExpr(value, type, sourceSpan) {\n    var _this21;\n\n    _classCallCheck(this, LiteralExpr);\n\n    _this21 = _super15.call(this, type, sourceSpan);\n    _this21.value = value;\n    return _this21;\n  }\n\n  _createClass(LiteralExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof LiteralExpr && this.value === e.value;\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return true;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitLiteralExpr(this, context);\n    }\n  }]);\n\n  return LiteralExpr;\n}(Expression);\n\nvar TemplateLiteral = function TemplateLiteral(elements, expressions) {\n  _classCallCheck(this, TemplateLiteral);\n\n  this.elements = elements;\n  this.expressions = expressions;\n};\n\nvar TemplateLiteralElement = function TemplateLiteralElement(text, sourceSpan, rawText) {\n  _classCallCheck(this, TemplateLiteralElement);\n\n  var _a;\n\n  this.text = text;\n  this.sourceSpan = sourceSpan; // If `rawText` is not provided, try to extract the raw string from its\n  // associated `sourceSpan`. If that is also not available, \"fake\" the raw\n  // string instead by escaping the following control sequences:\n  // - \"\\\" would otherwise indicate that the next character is a control character.\n  // - \"`\" and \"${\" are template string control sequences that would otherwise prematurely\n  // indicate the end of the template literal element.\n\n  this.rawText = (_a = rawText !== null && rawText !== void 0 ? rawText : sourceSpan === null || sourceSpan === void 0 ? void 0 : sourceSpan.toString()) !== null && _a !== void 0 ? _a : escapeForTemplateLiteral(escapeSlashes(text));\n};\n\nvar LiteralPiece = function LiteralPiece(text, sourceSpan) {\n  _classCallCheck(this, LiteralPiece);\n\n  this.text = text;\n  this.sourceSpan = sourceSpan;\n};\n\nvar PlaceholderPiece =\n/**\n * Create a new instance of a `PlaceholderPiece`.\n *\n * @param text the name of this placeholder (e.g. `PH_1`).\n * @param sourceSpan the location of this placeholder in its localized message the source code.\n * @param associatedMessage reference to another message that this placeholder is associated with.\n * The `associatedMessage` is mainly used to provide a relationship to an ICU message that has\n * been extracted out from the message containing the placeholder.\n */\nfunction PlaceholderPiece(text, sourceSpan, associatedMessage) {\n  _classCallCheck(this, PlaceholderPiece);\n\n  this.text = text;\n  this.sourceSpan = sourceSpan;\n  this.associatedMessage = associatedMessage;\n};\n\nvar MEANING_SEPARATOR$1 = '|';\nvar ID_SEPARATOR$1 = '@@';\nvar LEGACY_ID_INDICATOR = '␟';\n\nvar LocalizedString = /*#__PURE__*/function (_Expression11) {\n  _inherits(LocalizedString, _Expression11);\n\n  var _super16 = _createSuper(LocalizedString);\n\n  function LocalizedString(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {\n    var _this22;\n\n    _classCallCheck(this, LocalizedString);\n\n    _this22 = _super16.call(this, STRING_TYPE, sourceSpan);\n    _this22.metaBlock = metaBlock;\n    _this22.messageParts = messageParts;\n    _this22.placeHolderNames = placeHolderNames;\n    _this22.expressions = expressions;\n    return _this22;\n  }\n\n  _createClass(LocalizedString, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      // return e instanceof LocalizedString && this.message === e.message;\n      return false;\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitLocalizedString(this, context);\n    }\n    /**\n     * Serialize the given `meta` and `messagePart` into \"cooked\" and \"raw\" strings that can be used\n     * in a `$localize` tagged string. The format of the metadata is the same as that parsed by\n     * `parseI18nMeta()`.\n     *\n     * @param meta The metadata to serialize\n     * @param messagePart The first part of the tagged string\n     */\n\n  }, {\n    key: \"serializeI18nHead\",\n    value: function serializeI18nHead() {\n      var metaBlock = this.metaBlock.description || '';\n\n      if (this.metaBlock.meaning) {\n        metaBlock = \"\".concat(this.metaBlock.meaning).concat(MEANING_SEPARATOR$1).concat(metaBlock);\n      }\n\n      if (this.metaBlock.customId) {\n        metaBlock = \"\".concat(metaBlock).concat(ID_SEPARATOR$1).concat(this.metaBlock.customId);\n      }\n\n      if (this.metaBlock.legacyIds) {\n        this.metaBlock.legacyIds.forEach(function (legacyId) {\n          metaBlock = \"\".concat(metaBlock).concat(LEGACY_ID_INDICATOR).concat(legacyId);\n        });\n      }\n\n      return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));\n    }\n  }, {\n    key: \"getMessagePartSourceSpan\",\n    value: function getMessagePartSourceSpan(i) {\n      var _a, _b;\n\n      return (_b = (_a = this.messageParts[i]) === null || _a === void 0 ? void 0 : _a.sourceSpan) !== null && _b !== void 0 ? _b : this.sourceSpan;\n    }\n  }, {\n    key: \"getPlaceholderSourceSpan\",\n    value: function getPlaceholderSourceSpan(i) {\n      var _a, _b, _c, _d;\n\n      return (_d = (_b = (_a = this.placeHolderNames[i]) === null || _a === void 0 ? void 0 : _a.sourceSpan) !== null && _b !== void 0 ? _b : (_c = this.expressions[i]) === null || _c === void 0 ? void 0 : _c.sourceSpan) !== null && _d !== void 0 ? _d : this.sourceSpan;\n    }\n    /**\n     * Serialize the given `placeholderName` and `messagePart` into \"cooked\" and \"raw\" strings that\n     * can be used in a `$localize` tagged string.\n     *\n     * The format is `:<placeholder-name>[@@<associated-id>]:`.\n     *\n     * The `associated-id` is the message id of the (usually an ICU) message to which this placeholder\n     * refers.\n     *\n     * @param partIndex The index of the message part to serialize.\n     */\n\n  }, {\n    key: \"serializeI18nTemplatePart\",\n    value: function serializeI18nTemplatePart(partIndex) {\n      var _a;\n\n      var placeholder = this.placeHolderNames[partIndex - 1];\n      var messagePart = this.messageParts[partIndex];\n      var metaBlock = placeholder.text;\n\n      if (((_a = placeholder.associatedMessage) === null || _a === void 0 ? void 0 : _a.legacyIds.length) === 0) {\n        metaBlock += \"\".concat(ID_SEPARATOR$1).concat(computeMsgId(placeholder.associatedMessage.messageString, placeholder.associatedMessage.meaning));\n      }\n\n      return createCookedRawString(metaBlock, messagePart.text, this.getMessagePartSourceSpan(partIndex));\n    }\n  }]);\n\n  return LocalizedString;\n}(Expression);\n\nvar escapeSlashes = function escapeSlashes(str) {\n  return str.replace(/\\\\/g, '\\\\\\\\');\n};\n\nvar escapeStartingColon = function escapeStartingColon(str) {\n  return str.replace(/^:/, '\\\\:');\n};\n\nvar escapeColons = function escapeColons(str) {\n  return str.replace(/:/g, '\\\\:');\n};\n\nvar escapeForTemplateLiteral = function escapeForTemplateLiteral(str) {\n  return str.replace(/`/g, '\\\\`').replace(/\\${/g, '$\\\\{');\n};\n/**\n * Creates a `{cooked, raw}` object from the `metaBlock` and `messagePart`.\n *\n * The `raw` text must have various character sequences escaped:\n * * \"\\\" would otherwise indicate that the next character is a control character.\n * * \"`\" and \"${\" are template string control sequences that would otherwise prematurely indicate\n *   the end of a message part.\n * * \":\" inside a metablock would prematurely indicate the end of the metablock.\n * * \":\" at the start of a messagePart with no metablock would erroneously indicate the start of a\n *   metablock.\n *\n * @param metaBlock Any metadata that should be prepended to the string\n * @param messagePart The message part of the string\n */\n\n\nfunction createCookedRawString(metaBlock, messagePart, range) {\n  if (metaBlock === '') {\n    return {\n      cooked: messagePart,\n      raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),\n      range: range\n    };\n  } else {\n    return {\n      cooked: \":\".concat(metaBlock, \":\").concat(messagePart),\n      raw: escapeForTemplateLiteral(\":\".concat(escapeColons(escapeSlashes(metaBlock)), \":\").concat(escapeSlashes(messagePart))),\n      range: range\n    };\n  }\n}\n\nvar ExternalExpr = /*#__PURE__*/function (_Expression12) {\n  _inherits(ExternalExpr, _Expression12);\n\n  var _super17 = _createSuper(ExternalExpr);\n\n  function ExternalExpr(value, type) {\n    var _this23;\n\n    var typeParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var sourceSpan = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, ExternalExpr);\n\n    _this23 = _super17.call(this, type, sourceSpan);\n    _this23.value = value;\n    _this23.typeParams = typeParams;\n    return _this23;\n  }\n\n  _createClass(ExternalExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof ExternalExpr && this.value.name === e.value.name && this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitExternalExpr(this, context);\n    }\n  }]);\n\n  return ExternalExpr;\n}(Expression);\n\nvar ExternalReference = function ExternalReference(moduleName, name, runtime) {\n  _classCallCheck(this, ExternalReference);\n\n  this.moduleName = moduleName;\n  this.name = name;\n  this.runtime = runtime;\n};\n\nvar ConditionalExpr = /*#__PURE__*/function (_Expression13) {\n  _inherits(ConditionalExpr, _Expression13);\n\n  var _super18 = _createSuper(ConditionalExpr);\n\n  function ConditionalExpr(condition, trueCase) {\n    var _this24;\n\n    var falseCase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var type = arguments.length > 3 ? arguments[3] : undefined;\n    var sourceSpan = arguments.length > 4 ? arguments[4] : undefined;\n\n    _classCallCheck(this, ConditionalExpr);\n\n    _this24 = _super18.call(this, type || trueCase.type, sourceSpan);\n    _this24.condition = condition;\n    _this24.falseCase = falseCase;\n    _this24.trueCase = trueCase;\n    return _this24;\n  }\n\n  _createClass(ConditionalExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) && this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitConditionalExpr(this, context);\n    }\n  }]);\n\n  return ConditionalExpr;\n}(Expression);\n\nvar NotExpr = /*#__PURE__*/function (_Expression14) {\n  _inherits(NotExpr, _Expression14);\n\n  var _super19 = _createSuper(NotExpr);\n\n  function NotExpr(condition, sourceSpan) {\n    var _this25;\n\n    _classCallCheck(this, NotExpr);\n\n    _this25 = _super19.call(this, BOOL_TYPE, sourceSpan);\n    _this25.condition = condition;\n    return _this25;\n  }\n\n  _createClass(NotExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof NotExpr && this.condition.isEquivalent(e.condition);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitNotExpr(this, context);\n    }\n  }]);\n\n  return NotExpr;\n}(Expression);\n\nvar AssertNotNull = /*#__PURE__*/function (_Expression15) {\n  _inherits(AssertNotNull, _Expression15);\n\n  var _super20 = _createSuper(AssertNotNull);\n\n  function AssertNotNull(condition, sourceSpan) {\n    var _this26;\n\n    _classCallCheck(this, AssertNotNull);\n\n    _this26 = _super20.call(this, condition.type, sourceSpan);\n    _this26.condition = condition;\n    return _this26;\n  }\n\n  _createClass(AssertNotNull, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof AssertNotNull && this.condition.isEquivalent(e.condition);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitAssertNotNullExpr(this, context);\n    }\n  }]);\n\n  return AssertNotNull;\n}(Expression);\n\nvar CastExpr = /*#__PURE__*/function (_Expression16) {\n  _inherits(CastExpr, _Expression16);\n\n  var _super21 = _createSuper(CastExpr);\n\n  function CastExpr(value, type, sourceSpan) {\n    var _this27;\n\n    _classCallCheck(this, CastExpr);\n\n    _this27 = _super21.call(this, type, sourceSpan);\n    _this27.value = value;\n    return _this27;\n  }\n\n  _createClass(CastExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof CastExpr && this.value.isEquivalent(e.value);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitCastExpr(this, context);\n    }\n  }]);\n\n  return CastExpr;\n}(Expression);\n\nvar FnParam = /*#__PURE__*/function () {\n  function FnParam(name) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, FnParam);\n\n    this.name = name;\n    this.type = type;\n  }\n\n  _createClass(FnParam, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(param) {\n      return this.name === param.name;\n    }\n  }]);\n\n  return FnParam;\n}();\n\nvar FunctionExpr = /*#__PURE__*/function (_Expression17) {\n  _inherits(FunctionExpr, _Expression17);\n\n  var _super22 = _createSuper(FunctionExpr);\n\n  function FunctionExpr(params, statements, type, sourceSpan, name) {\n    var _this28;\n\n    _classCallCheck(this, FunctionExpr);\n\n    _this28 = _super22.call(this, type, sourceSpan);\n    _this28.params = params;\n    _this28.statements = statements;\n    _this28.name = name;\n    return _this28;\n  }\n\n  _createClass(FunctionExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) && areAllEquivalent(this.statements, e.statements);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitFunctionExpr(this, context);\n    }\n  }, {\n    key: \"toDeclStmt\",\n    value: function toDeclStmt(name, modifiers) {\n      return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\n    }\n  }]);\n\n  return FunctionExpr;\n}(Expression);\n\nvar UnaryOperatorExpr = /*#__PURE__*/function (_Expression18) {\n  _inherits(UnaryOperatorExpr, _Expression18);\n\n  var _super23 = _createSuper(UnaryOperatorExpr);\n\n  function UnaryOperatorExpr(operator, expr, type, sourceSpan) {\n    var _this29;\n\n    var parens = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n    _classCallCheck(this, UnaryOperatorExpr);\n\n    _this29 = _super23.call(this, type || NUMBER_TYPE, sourceSpan);\n    _this29.operator = operator;\n    _this29.expr = expr;\n    _this29.parens = parens;\n    return _this29;\n  }\n\n  _createClass(UnaryOperatorExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof UnaryOperatorExpr && this.operator === e.operator && this.expr.isEquivalent(e.expr);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitUnaryOperatorExpr(this, context);\n    }\n  }]);\n\n  return UnaryOperatorExpr;\n}(Expression);\n\nvar BinaryOperatorExpr = /*#__PURE__*/function (_Expression19) {\n  _inherits(BinaryOperatorExpr, _Expression19);\n\n  var _super24 = _createSuper(BinaryOperatorExpr);\n\n  function BinaryOperatorExpr(operator, lhs, rhs, type, sourceSpan) {\n    var _this30;\n\n    var parens = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\n    _classCallCheck(this, BinaryOperatorExpr);\n\n    _this30 = _super24.call(this, type || lhs.type, sourceSpan);\n    _this30.operator = operator;\n    _this30.rhs = rhs;\n    _this30.parens = parens;\n    _this30.lhs = lhs;\n    return _this30;\n  }\n\n  _createClass(BinaryOperatorExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof BinaryOperatorExpr && this.operator === e.operator && this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitBinaryOperatorExpr(this, context);\n    }\n  }]);\n\n  return BinaryOperatorExpr;\n}(Expression);\n\nvar ReadPropExpr = /*#__PURE__*/function (_Expression20) {\n  _inherits(ReadPropExpr, _Expression20);\n\n  var _super25 = _createSuper(ReadPropExpr);\n\n  function ReadPropExpr(receiver, name, type, sourceSpan) {\n    var _this31;\n\n    _classCallCheck(this, ReadPropExpr);\n\n    _this31 = _super25.call(this, type, sourceSpan);\n    _this31.receiver = receiver;\n    _this31.name = name;\n    return _this31;\n  }\n\n  _createClass(ReadPropExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name;\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitReadPropExpr(this, context);\n    }\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\n    }\n  }]);\n\n  return ReadPropExpr;\n}(Expression);\n\nvar ReadKeyExpr = /*#__PURE__*/function (_Expression21) {\n  _inherits(ReadKeyExpr, _Expression21);\n\n  var _super26 = _createSuper(ReadKeyExpr);\n\n  function ReadKeyExpr(receiver, index, type, sourceSpan) {\n    var _this32;\n\n    _classCallCheck(this, ReadKeyExpr);\n\n    _this32 = _super26.call(this, type, sourceSpan);\n    _this32.receiver = receiver;\n    _this32.index = index;\n    return _this32;\n  }\n\n  _createClass(ReadKeyExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitReadKeyExpr(this, context);\n    }\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\n    }\n  }]);\n\n  return ReadKeyExpr;\n}(Expression);\n\nvar LiteralArrayExpr = /*#__PURE__*/function (_Expression22) {\n  _inherits(LiteralArrayExpr, _Expression22);\n\n  var _super27 = _createSuper(LiteralArrayExpr);\n\n  function LiteralArrayExpr(entries, type, sourceSpan) {\n    var _this33;\n\n    _classCallCheck(this, LiteralArrayExpr);\n\n    _this33 = _super27.call(this, type, sourceSpan);\n    _this33.entries = entries;\n    return _this33;\n  }\n\n  _createClass(LiteralArrayExpr, [{\n    key: \"isConstant\",\n    value: function isConstant() {\n      return this.entries.every(function (e) {\n        return e.isConstant();\n      });\n    }\n  }, {\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitLiteralArrayExpr(this, context);\n    }\n  }]);\n\n  return LiteralArrayExpr;\n}(Expression);\n\nvar LiteralMapEntry = /*#__PURE__*/function () {\n  function LiteralMapEntry(key, value, quoted) {\n    _classCallCheck(this, LiteralMapEntry);\n\n    this.key = key;\n    this.value = value;\n    this.quoted = quoted;\n  }\n\n  _createClass(LiteralMapEntry, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return this.key === e.key && this.value.isEquivalent(e.value);\n    }\n  }]);\n\n  return LiteralMapEntry;\n}();\n\nvar LiteralMapExpr = /*#__PURE__*/function (_Expression23) {\n  _inherits(LiteralMapExpr, _Expression23);\n\n  var _super28 = _createSuper(LiteralMapExpr);\n\n  function LiteralMapExpr(entries, type, sourceSpan) {\n    var _this34;\n\n    _classCallCheck(this, LiteralMapExpr);\n\n    _this34 = _super28.call(this, type, sourceSpan);\n    _this34.entries = entries;\n    _this34.valueType = null;\n\n    if (type) {\n      _this34.valueType = type.valueType;\n    }\n\n    return _this34;\n  }\n\n  _createClass(LiteralMapExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return this.entries.every(function (e) {\n        return e.value.isConstant();\n      });\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitLiteralMapExpr(this, context);\n    }\n  }]);\n\n  return LiteralMapExpr;\n}(Expression);\n\nvar CommaExpr = /*#__PURE__*/function (_Expression24) {\n  _inherits(CommaExpr, _Expression24);\n\n  var _super29 = _createSuper(CommaExpr);\n\n  function CommaExpr(parts, sourceSpan) {\n    var _this35;\n\n    _classCallCheck(this, CommaExpr);\n\n    _this35 = _super29.call(this, parts[parts.length - 1].type, sourceSpan);\n    _this35.parts = parts;\n    return _this35;\n  }\n\n  _createClass(CommaExpr, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return false;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      return visitor.visitCommaExpr(this, context);\n    }\n  }]);\n\n  return CommaExpr;\n}(Expression);\n\nvar THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);\nvar SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);\nvar CATCH_ERROR_VAR$1 = new ReadVarExpr(BuiltinVar.CatchError, null, null);\nvar CATCH_STACK_VAR$1 = new ReadVarExpr(BuiltinVar.CatchStack, null, null);\nvar NULL_EXPR = new LiteralExpr(null, null, null);\nvar TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null); //// Statements\n\nvar StmtModifier;\n\n(function (StmtModifier) {\n  StmtModifier[StmtModifier[\"Final\"] = 0] = \"Final\";\n  StmtModifier[StmtModifier[\"Private\"] = 1] = \"Private\";\n  StmtModifier[StmtModifier[\"Exported\"] = 2] = \"Exported\";\n  StmtModifier[StmtModifier[\"Static\"] = 3] = \"Static\";\n})(StmtModifier || (StmtModifier = {}));\n\nvar LeadingComment = /*#__PURE__*/function () {\n  function LeadingComment(text, multiline, trailingNewline) {\n    _classCallCheck(this, LeadingComment);\n\n    this.text = text;\n    this.multiline = multiline;\n    this.trailingNewline = trailingNewline;\n  }\n\n  _createClass(LeadingComment, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.multiline ? \" \".concat(this.text, \" \") : this.text;\n    }\n  }]);\n\n  return LeadingComment;\n}();\n\nvar JSDocComment = /*#__PURE__*/function (_LeadingComment) {\n  _inherits(JSDocComment, _LeadingComment);\n\n  var _super30 = _createSuper(JSDocComment);\n\n  function JSDocComment(tags) {\n    var _this36;\n\n    _classCallCheck(this, JSDocComment);\n\n    _this36 = _super30.call(this, '',\n    /* multiline */\n    true,\n    /* trailingNewline */\n    true);\n    _this36.tags = tags;\n    return _this36;\n  }\n\n  _createClass(JSDocComment, [{\n    key: \"toString\",\n    value: function toString() {\n      return serializeTags(this.tags);\n    }\n  }]);\n\n  return JSDocComment;\n}(LeadingComment);\n\nvar Statement = /*#__PURE__*/function () {\n  function Statement() {\n    var modifiers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var sourceSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var leadingComments = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Statement);\n\n    this.modifiers = modifiers;\n    this.sourceSpan = sourceSpan;\n    this.leadingComments = leadingComments;\n  }\n\n  _createClass(Statement, [{\n    key: \"hasModifier\",\n    value: function hasModifier(modifier) {\n      return this.modifiers.indexOf(modifier) !== -1;\n    }\n  }, {\n    key: \"addLeadingComment\",\n    value: function addLeadingComment(leadingComment) {\n      var _a;\n\n      this.leadingComments = (_a = this.leadingComments) !== null && _a !== void 0 ? _a : [];\n      this.leadingComments.push(leadingComment);\n    }\n  }]);\n\n  return Statement;\n}();\n\nvar DeclareVarStmt = /*#__PURE__*/function (_Statement) {\n  _inherits(DeclareVarStmt, _Statement);\n\n  var _super31 = _createSuper(DeclareVarStmt);\n\n  function DeclareVarStmt(name, value, type, modifiers, sourceSpan, leadingComments) {\n    var _this37;\n\n    _classCallCheck(this, DeclareVarStmt);\n\n    _this37 = _super31.call(this, modifiers, sourceSpan, leadingComments);\n    _this37.name = name;\n    _this37.value = value;\n    _this37.type = type || value && value.type || null;\n    return _this37;\n  }\n\n  _createClass(DeclareVarStmt, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(stmt) {\n      return stmt instanceof DeclareVarStmt && this.name === stmt.name && (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);\n    }\n  }, {\n    key: \"visitStatement\",\n    value: function visitStatement(visitor, context) {\n      return visitor.visitDeclareVarStmt(this, context);\n    }\n  }]);\n\n  return DeclareVarStmt;\n}(Statement);\n\nvar DeclareFunctionStmt = /*#__PURE__*/function (_Statement2) {\n  _inherits(DeclareFunctionStmt, _Statement2);\n\n  var _super32 = _createSuper(DeclareFunctionStmt);\n\n  function DeclareFunctionStmt(name, params, statements, type, modifiers, sourceSpan, leadingComments) {\n    var _this38;\n\n    _classCallCheck(this, DeclareFunctionStmt);\n\n    _this38 = _super32.call(this, modifiers, sourceSpan, leadingComments);\n    _this38.name = name;\n    _this38.params = params;\n    _this38.statements = statements;\n    _this38.type = type || null;\n    return _this38;\n  }\n\n  _createClass(DeclareFunctionStmt, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(stmt) {\n      return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) && areAllEquivalent(this.statements, stmt.statements);\n    }\n  }, {\n    key: \"visitStatement\",\n    value: function visitStatement(visitor, context) {\n      return visitor.visitDeclareFunctionStmt(this, context);\n    }\n  }]);\n\n  return DeclareFunctionStmt;\n}(Statement);\n\nvar ExpressionStatement = /*#__PURE__*/function (_Statement3) {\n  _inherits(ExpressionStatement, _Statement3);\n\n  var _super33 = _createSuper(ExpressionStatement);\n\n  function ExpressionStatement(expr, sourceSpan, leadingComments) {\n    var _this39;\n\n    _classCallCheck(this, ExpressionStatement);\n\n    _this39 = _super33.call(this, [], sourceSpan, leadingComments);\n    _this39.expr = expr;\n    return _this39;\n  }\n\n  _createClass(ExpressionStatement, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(stmt) {\n      return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);\n    }\n  }, {\n    key: \"visitStatement\",\n    value: function visitStatement(visitor, context) {\n      return visitor.visitExpressionStmt(this, context);\n    }\n  }]);\n\n  return ExpressionStatement;\n}(Statement);\n\nvar ReturnStatement = /*#__PURE__*/function (_Statement4) {\n  _inherits(ReturnStatement, _Statement4);\n\n  var _super34 = _createSuper(ReturnStatement);\n\n  function ReturnStatement(value) {\n    var _this40;\n\n    var sourceSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var leadingComments = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, ReturnStatement);\n\n    _this40 = _super34.call(this, [], sourceSpan, leadingComments);\n    _this40.value = value;\n    return _this40;\n  }\n\n  _createClass(ReturnStatement, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(stmt) {\n      return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);\n    }\n  }, {\n    key: \"visitStatement\",\n    value: function visitStatement(visitor, context) {\n      return visitor.visitReturnStmt(this, context);\n    }\n  }]);\n\n  return ReturnStatement;\n}(Statement);\n\nvar AbstractClassPart = /*#__PURE__*/function () {\n  function AbstractClassPart() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, AbstractClassPart);\n\n    this.type = type;\n    this.modifiers = modifiers;\n  }\n\n  _createClass(AbstractClassPart, [{\n    key: \"hasModifier\",\n    value: function hasModifier(modifier) {\n      return this.modifiers.indexOf(modifier) !== -1;\n    }\n  }]);\n\n  return AbstractClassPart;\n}();\n\nvar ClassField = /*#__PURE__*/function (_AbstractClassPart) {\n  _inherits(ClassField, _AbstractClassPart);\n\n  var _super35 = _createSuper(ClassField);\n\n  function ClassField(name, type, modifiers, initializer) {\n    var _this41;\n\n    _classCallCheck(this, ClassField);\n\n    _this41 = _super35.call(this, type, modifiers);\n    _this41.name = name;\n    _this41.initializer = initializer;\n    return _this41;\n  }\n\n  _createClass(ClassField, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(f) {\n      return this.name === f.name;\n    }\n  }]);\n\n  return ClassField;\n}(AbstractClassPart);\n\nvar ClassMethod = /*#__PURE__*/function (_AbstractClassPart2) {\n  _inherits(ClassMethod, _AbstractClassPart2);\n\n  var _super36 = _createSuper(ClassMethod);\n\n  function ClassMethod(name, params, body, type, modifiers) {\n    var _this42;\n\n    _classCallCheck(this, ClassMethod);\n\n    _this42 = _super36.call(this, type, modifiers);\n    _this42.name = name;\n    _this42.params = params;\n    _this42.body = body;\n    return _this42;\n  }\n\n  _createClass(ClassMethod, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(m) {\n      return this.name === m.name && areAllEquivalent(this.body, m.body);\n    }\n  }]);\n\n  return ClassMethod;\n}(AbstractClassPart);\n\nvar ClassGetter = /*#__PURE__*/function (_AbstractClassPart3) {\n  _inherits(ClassGetter, _AbstractClassPart3);\n\n  var _super37 = _createSuper(ClassGetter);\n\n  function ClassGetter(name, body, type, modifiers) {\n    var _this43;\n\n    _classCallCheck(this, ClassGetter);\n\n    _this43 = _super37.call(this, type, modifiers);\n    _this43.name = name;\n    _this43.body = body;\n    return _this43;\n  }\n\n  _createClass(ClassGetter, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(m) {\n      return this.name === m.name && areAllEquivalent(this.body, m.body);\n    }\n  }]);\n\n  return ClassGetter;\n}(AbstractClassPart);\n\nvar ClassStmt = /*#__PURE__*/function (_Statement5) {\n  _inherits(ClassStmt, _Statement5);\n\n  var _super38 = _createSuper(ClassStmt);\n\n  function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan, leadingComments) {\n    var _this44;\n\n    _classCallCheck(this, ClassStmt);\n\n    _this44 = _super38.call(this, modifiers, sourceSpan, leadingComments);\n    _this44.name = name;\n    _this44.parent = parent;\n    _this44.fields = fields;\n    _this44.getters = getters;\n    _this44.constructorMethod = constructorMethod;\n    _this44.methods = methods;\n    return _this44;\n  }\n\n  _createClass(ClassStmt, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(stmt) {\n      return stmt instanceof ClassStmt && this.name === stmt.name && nullSafeIsEquivalent(this.parent, stmt.parent) && areAllEquivalent(this.fields, stmt.fields) && areAllEquivalent(this.getters, stmt.getters) && this.constructorMethod.isEquivalent(stmt.constructorMethod) && areAllEquivalent(this.methods, stmt.methods);\n    }\n  }, {\n    key: \"visitStatement\",\n    value: function visitStatement(visitor, context) {\n      return visitor.visitDeclareClassStmt(this, context);\n    }\n  }]);\n\n  return ClassStmt;\n}(Statement);\n\nvar IfStmt = /*#__PURE__*/function (_Statement6) {\n  _inherits(IfStmt, _Statement6);\n\n  var _super39 = _createSuper(IfStmt);\n\n  function IfStmt(condition, trueCase) {\n    var _this45;\n\n    var falseCase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var sourceSpan = arguments.length > 3 ? arguments[3] : undefined;\n    var leadingComments = arguments.length > 4 ? arguments[4] : undefined;\n\n    _classCallCheck(this, IfStmt);\n\n    _this45 = _super39.call(this, [], sourceSpan, leadingComments);\n    _this45.condition = condition;\n    _this45.trueCase = trueCase;\n    _this45.falseCase = falseCase;\n    return _this45;\n  }\n\n  _createClass(IfStmt, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(stmt) {\n      return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) && areAllEquivalent(this.trueCase, stmt.trueCase) && areAllEquivalent(this.falseCase, stmt.falseCase);\n    }\n  }, {\n    key: \"visitStatement\",\n    value: function visitStatement(visitor, context) {\n      return visitor.visitIfStmt(this, context);\n    }\n  }]);\n\n  return IfStmt;\n}(Statement);\n\nvar TryCatchStmt = /*#__PURE__*/function (_Statement7) {\n  _inherits(TryCatchStmt, _Statement7);\n\n  var _super40 = _createSuper(TryCatchStmt);\n\n  function TryCatchStmt(bodyStmts, catchStmts) {\n    var _this46;\n\n    var sourceSpan = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var leadingComments = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, TryCatchStmt);\n\n    _this46 = _super40.call(this, [], sourceSpan, leadingComments);\n    _this46.bodyStmts = bodyStmts;\n    _this46.catchStmts = catchStmts;\n    return _this46;\n  }\n\n  _createClass(TryCatchStmt, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(stmt) {\n      return stmt instanceof TryCatchStmt && areAllEquivalent(this.bodyStmts, stmt.bodyStmts) && areAllEquivalent(this.catchStmts, stmt.catchStmts);\n    }\n  }, {\n    key: \"visitStatement\",\n    value: function visitStatement(visitor, context) {\n      return visitor.visitTryCatchStmt(this, context);\n    }\n  }]);\n\n  return TryCatchStmt;\n}(Statement);\n\nvar ThrowStmt = /*#__PURE__*/function (_Statement8) {\n  _inherits(ThrowStmt, _Statement8);\n\n  var _super41 = _createSuper(ThrowStmt);\n\n  function ThrowStmt(error) {\n    var _this47;\n\n    var sourceSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var leadingComments = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, ThrowStmt);\n\n    _this47 = _super41.call(this, [], sourceSpan, leadingComments);\n    _this47.error = error;\n    return _this47;\n  }\n\n  _createClass(ThrowStmt, [{\n    key: \"isEquivalent\",\n    value: function isEquivalent(stmt) {\n      return stmt instanceof TryCatchStmt && this.error.isEquivalent(stmt.error);\n    }\n  }, {\n    key: \"visitStatement\",\n    value: function visitStatement(visitor, context) {\n      return visitor.visitThrowStmt(this, context);\n    }\n  }]);\n\n  return ThrowStmt;\n}(Statement);\n\nvar AstTransformer$1 = /*#__PURE__*/function () {\n  function AstTransformer$1() {\n    _classCallCheck(this, AstTransformer$1);\n  }\n\n  _createClass(AstTransformer$1, [{\n    key: \"transformExpr\",\n    value: function transformExpr(expr, context) {\n      return expr;\n    }\n  }, {\n    key: \"transformStmt\",\n    value: function transformStmt(stmt, context) {\n      return stmt;\n    }\n  }, {\n    key: \"visitReadVarExpr\",\n    value: function visitReadVarExpr(ast, context) {\n      return this.transformExpr(ast, context);\n    }\n  }, {\n    key: \"visitWrappedNodeExpr\",\n    value: function visitWrappedNodeExpr(ast, context) {\n      return this.transformExpr(ast, context);\n    }\n  }, {\n    key: \"visitTypeofExpr\",\n    value: function visitTypeofExpr(expr, context) {\n      return this.transformExpr(new TypeofExpr(expr.expr.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n  }, {\n    key: \"visitWriteVarExpr\",\n    value: function visitWriteVarExpr(expr, context) {\n      return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n  }, {\n    key: \"visitWriteKeyExpr\",\n    value: function visitWriteKeyExpr(expr, context) {\n      return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n  }, {\n    key: \"visitWritePropExpr\",\n    value: function visitWritePropExpr(expr, context) {\n      return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n  }, {\n    key: \"visitInvokeFunctionExpr\",\n    value: function visitInvokeFunctionExpr(ast, context) {\n      return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitTaggedTemplateExpr\",\n    value: function visitTaggedTemplateExpr(ast, context) {\n      var _this48 = this;\n\n      return this.transformExpr(new TaggedTemplateExpr(ast.tag.visitExpression(this, context), new TemplateLiteral(ast.template.elements, ast.template.expressions.map(function (e) {\n        return e.visitExpression(_this48, context);\n      })), ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitInstantiateExpr\",\n    value: function visitInstantiateExpr(ast, context) {\n      return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitLiteralExpr\",\n    value: function visitLiteralExpr(ast, context) {\n      return this.transformExpr(ast, context);\n    }\n  }, {\n    key: \"visitLocalizedString\",\n    value: function visitLocalizedString(ast, context) {\n      return this.transformExpr(new LocalizedString(ast.metaBlock, ast.messageParts, ast.placeHolderNames, this.visitAllExpressions(ast.expressions, context), ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitExternalExpr\",\n    value: function visitExternalExpr(ast, context) {\n      return this.transformExpr(ast, context);\n    }\n  }, {\n    key: \"visitConditionalExpr\",\n    value: function visitConditionalExpr(ast, context) {\n      return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitNotExpr\",\n    value: function visitNotExpr(ast, context) {\n      return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitAssertNotNullExpr\",\n    value: function visitAssertNotNullExpr(ast, context) {\n      return this.transformExpr(new AssertNotNull(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitCastExpr\",\n    value: function visitCastExpr(ast, context) {\n      return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitFunctionExpr\",\n    value: function visitFunctionExpr(ast, context) {\n      return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitUnaryOperatorExpr\",\n    value: function visitUnaryOperatorExpr(ast, context) {\n      return this.transformExpr(new UnaryOperatorExpr(ast.operator, ast.expr.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitBinaryOperatorExpr\",\n    value: function visitBinaryOperatorExpr(ast, context) {\n      return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitReadPropExpr\",\n    value: function visitReadPropExpr(ast, context) {\n      return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitReadKeyExpr\",\n    value: function visitReadKeyExpr(ast, context) {\n      return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitLiteralArrayExpr\",\n    value: function visitLiteralArrayExpr(ast, context) {\n      return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitLiteralMapExpr\",\n    value: function visitLiteralMapExpr(ast, context) {\n      var _this49 = this;\n\n      var entries = ast.entries.map(function (entry) {\n        return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this49, context), entry.quoted);\n      });\n      var mapType = new MapType(ast.valueType);\n      return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitCommaExpr\",\n    value: function visitCommaExpr(ast, context) {\n      return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);\n    }\n  }, {\n    key: \"visitAllExpressions\",\n    value: function visitAllExpressions(exprs, context) {\n      var _this50 = this;\n\n      return exprs.map(function (expr) {\n        return expr.visitExpression(_this50, context);\n      });\n    }\n  }, {\n    key: \"visitDeclareVarStmt\",\n    value: function visitDeclareVarStmt(stmt, context) {\n      var value = stmt.value && stmt.value.visitExpression(this, context);\n      return this.transformStmt(new DeclareVarStmt(stmt.name, value, stmt.type, stmt.modifiers, stmt.sourceSpan, stmt.leadingComments), context);\n    }\n  }, {\n    key: \"visitDeclareFunctionStmt\",\n    value: function visitDeclareFunctionStmt(stmt, context) {\n      return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan, stmt.leadingComments), context);\n    }\n  }, {\n    key: \"visitExpressionStmt\",\n    value: function visitExpressionStmt(stmt, context) {\n      return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);\n    }\n  }, {\n    key: \"visitReturnStmt\",\n    value: function visitReturnStmt(stmt, context) {\n      return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);\n    }\n  }, {\n    key: \"visitDeclareClassStmt\",\n    value: function visitDeclareClassStmt(stmt, context) {\n      var _this51 = this;\n\n      var parent = stmt.parent.visitExpression(this, context);\n      var getters = stmt.getters.map(function (getter) {\n        return new ClassGetter(getter.name, _this51.visitAllStatements(getter.body, context), getter.type, getter.modifiers);\n      });\n      var ctorMethod = stmt.constructorMethod && new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);\n      var methods = stmt.methods.map(function (method) {\n        return new ClassMethod(method.name, method.params, _this51.visitAllStatements(method.body, context), method.type, method.modifiers);\n      });\n      return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);\n    }\n  }, {\n    key: \"visitIfStmt\",\n    value: function visitIfStmt(stmt, context) {\n      return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan, stmt.leadingComments), context);\n    }\n  }, {\n    key: \"visitTryCatchStmt\",\n    value: function visitTryCatchStmt(stmt, context) {\n      return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan, stmt.leadingComments), context);\n    }\n  }, {\n    key: \"visitThrowStmt\",\n    value: function visitThrowStmt(stmt, context) {\n      return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);\n    }\n  }, {\n    key: \"visitAllStatements\",\n    value: function visitAllStatements(stmts, context) {\n      var _this52 = this;\n\n      return stmts.map(function (stmt) {\n        return stmt.visitStatement(_this52, context);\n      });\n    }\n  }]);\n\n  return AstTransformer$1;\n}();\n\nvar RecursiveAstVisitor$1 = /*#__PURE__*/function () {\n  function RecursiveAstVisitor$1() {\n    _classCallCheck(this, RecursiveAstVisitor$1);\n  }\n\n  _createClass(RecursiveAstVisitor$1, [{\n    key: \"visitType\",\n    value: function visitType(ast, context) {\n      return ast;\n    }\n  }, {\n    key: \"visitExpression\",\n    value: function visitExpression(ast, context) {\n      if (ast.type) {\n        ast.type.visitType(this, context);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitBuiltinType\",\n    value: function visitBuiltinType(type, context) {\n      return this.visitType(type, context);\n    }\n  }, {\n    key: \"visitExpressionType\",\n    value: function visitExpressionType(type, context) {\n      var _this53 = this;\n\n      type.value.visitExpression(this, context);\n\n      if (type.typeParams !== null) {\n        type.typeParams.forEach(function (param) {\n          return _this53.visitType(param, context);\n        });\n      }\n\n      return this.visitType(type, context);\n    }\n  }, {\n    key: \"visitArrayType\",\n    value: function visitArrayType(type, context) {\n      return this.visitType(type, context);\n    }\n  }, {\n    key: \"visitMapType\",\n    value: function visitMapType(type, context) {\n      return this.visitType(type, context);\n    }\n  }, {\n    key: \"visitWrappedNodeExpr\",\n    value: function visitWrappedNodeExpr(ast, context) {\n      return ast;\n    }\n  }, {\n    key: \"visitTypeofExpr\",\n    value: function visitTypeofExpr(ast, context) {\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitReadVarExpr\",\n    value: function visitReadVarExpr(ast, context) {\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitWriteVarExpr\",\n    value: function visitWriteVarExpr(ast, context) {\n      ast.value.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitWriteKeyExpr\",\n    value: function visitWriteKeyExpr(ast, context) {\n      ast.receiver.visitExpression(this, context);\n      ast.index.visitExpression(this, context);\n      ast.value.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitWritePropExpr\",\n    value: function visitWritePropExpr(ast, context) {\n      ast.receiver.visitExpression(this, context);\n      ast.value.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitInvokeFunctionExpr\",\n    value: function visitInvokeFunctionExpr(ast, context) {\n      ast.fn.visitExpression(this, context);\n      this.visitAllExpressions(ast.args, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitTaggedTemplateExpr\",\n    value: function visitTaggedTemplateExpr(ast, context) {\n      ast.tag.visitExpression(this, context);\n      this.visitAllExpressions(ast.template.expressions, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitInstantiateExpr\",\n    value: function visitInstantiateExpr(ast, context) {\n      ast.classExpr.visitExpression(this, context);\n      this.visitAllExpressions(ast.args, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitLiteralExpr\",\n    value: function visitLiteralExpr(ast, context) {\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitLocalizedString\",\n    value: function visitLocalizedString(ast, context) {\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitExternalExpr\",\n    value: function visitExternalExpr(ast, context) {\n      var _this54 = this;\n\n      if (ast.typeParams) {\n        ast.typeParams.forEach(function (type) {\n          return type.visitType(_this54, context);\n        });\n      }\n\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitConditionalExpr\",\n    value: function visitConditionalExpr(ast, context) {\n      ast.condition.visitExpression(this, context);\n      ast.trueCase.visitExpression(this, context);\n      ast.falseCase.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitNotExpr\",\n    value: function visitNotExpr(ast, context) {\n      ast.condition.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitAssertNotNullExpr\",\n    value: function visitAssertNotNullExpr(ast, context) {\n      ast.condition.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitCastExpr\",\n    value: function visitCastExpr(ast, context) {\n      ast.value.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitFunctionExpr\",\n    value: function visitFunctionExpr(ast, context) {\n      this.visitAllStatements(ast.statements, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitUnaryOperatorExpr\",\n    value: function visitUnaryOperatorExpr(ast, context) {\n      ast.expr.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitBinaryOperatorExpr\",\n    value: function visitBinaryOperatorExpr(ast, context) {\n      ast.lhs.visitExpression(this, context);\n      ast.rhs.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitReadPropExpr\",\n    value: function visitReadPropExpr(ast, context) {\n      ast.receiver.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitReadKeyExpr\",\n    value: function visitReadKeyExpr(ast, context) {\n      ast.receiver.visitExpression(this, context);\n      ast.index.visitExpression(this, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitLiteralArrayExpr\",\n    value: function visitLiteralArrayExpr(ast, context) {\n      this.visitAllExpressions(ast.entries, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitLiteralMapExpr\",\n    value: function visitLiteralMapExpr(ast, context) {\n      var _this55 = this;\n\n      ast.entries.forEach(function (entry) {\n        return entry.value.visitExpression(_this55, context);\n      });\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitCommaExpr\",\n    value: function visitCommaExpr(ast, context) {\n      this.visitAllExpressions(ast.parts, context);\n      return this.visitExpression(ast, context);\n    }\n  }, {\n    key: \"visitAllExpressions\",\n    value: function visitAllExpressions(exprs, context) {\n      var _this56 = this;\n\n      exprs.forEach(function (expr) {\n        return expr.visitExpression(_this56, context);\n      });\n    }\n  }, {\n    key: \"visitDeclareVarStmt\",\n    value: function visitDeclareVarStmt(stmt, context) {\n      if (stmt.value) {\n        stmt.value.visitExpression(this, context);\n      }\n\n      if (stmt.type) {\n        stmt.type.visitType(this, context);\n      }\n\n      return stmt;\n    }\n  }, {\n    key: \"visitDeclareFunctionStmt\",\n    value: function visitDeclareFunctionStmt(stmt, context) {\n      this.visitAllStatements(stmt.statements, context);\n\n      if (stmt.type) {\n        stmt.type.visitType(this, context);\n      }\n\n      return stmt;\n    }\n  }, {\n    key: \"visitExpressionStmt\",\n    value: function visitExpressionStmt(stmt, context) {\n      stmt.expr.visitExpression(this, context);\n      return stmt;\n    }\n  }, {\n    key: \"visitReturnStmt\",\n    value: function visitReturnStmt(stmt, context) {\n      stmt.value.visitExpression(this, context);\n      return stmt;\n    }\n  }, {\n    key: \"visitDeclareClassStmt\",\n    value: function visitDeclareClassStmt(stmt, context) {\n      var _this57 = this;\n\n      stmt.parent.visitExpression(this, context);\n      stmt.getters.forEach(function (getter) {\n        return _this57.visitAllStatements(getter.body, context);\n      });\n\n      if (stmt.constructorMethod) {\n        this.visitAllStatements(stmt.constructorMethod.body, context);\n      }\n\n      stmt.methods.forEach(function (method) {\n        return _this57.visitAllStatements(method.body, context);\n      });\n      return stmt;\n    }\n  }, {\n    key: \"visitIfStmt\",\n    value: function visitIfStmt(stmt, context) {\n      stmt.condition.visitExpression(this, context);\n      this.visitAllStatements(stmt.trueCase, context);\n      this.visitAllStatements(stmt.falseCase, context);\n      return stmt;\n    }\n  }, {\n    key: \"visitTryCatchStmt\",\n    value: function visitTryCatchStmt(stmt, context) {\n      this.visitAllStatements(stmt.bodyStmts, context);\n      this.visitAllStatements(stmt.catchStmts, context);\n      return stmt;\n    }\n  }, {\n    key: \"visitThrowStmt\",\n    value: function visitThrowStmt(stmt, context) {\n      stmt.error.visitExpression(this, context);\n      return stmt;\n    }\n  }, {\n    key: \"visitAllStatements\",\n    value: function visitAllStatements(stmts, context) {\n      var _this58 = this;\n\n      stmts.forEach(function (stmt) {\n        return stmt.visitStatement(_this58, context);\n      });\n    }\n  }]);\n\n  return RecursiveAstVisitor$1;\n}();\n\nfunction findReadVarNames(stmts) {\n  var visitor = new _ReadVarVisitor();\n  visitor.visitAllStatements(stmts, null);\n  return visitor.varNames;\n}\n\nvar _ReadVarVisitor = /*#__PURE__*/function (_RecursiveAstVisitor$) {\n  _inherits(_ReadVarVisitor, _RecursiveAstVisitor$);\n\n  var _super42 = _createSuper(_ReadVarVisitor);\n\n  function _ReadVarVisitor() {\n    var _this59;\n\n    _classCallCheck(this, _ReadVarVisitor);\n\n    _this59 = _super42.apply(this, arguments);\n    _this59.varNames = new Set();\n    return _this59;\n  }\n\n  _createClass(_ReadVarVisitor, [{\n    key: \"visitDeclareFunctionStmt\",\n    value: function visitDeclareFunctionStmt(stmt, context) {\n      // Don't descend into nested functions\n      return stmt;\n    }\n  }, {\n    key: \"visitDeclareClassStmt\",\n    value: function visitDeclareClassStmt(stmt, context) {\n      // Don't descend into nested classes\n      return stmt;\n    }\n  }, {\n    key: \"visitReadVarExpr\",\n    value: function visitReadVarExpr(ast, context) {\n      if (ast.name) {\n        this.varNames.add(ast.name);\n      }\n\n      return null;\n    }\n  }]);\n\n  return _ReadVarVisitor;\n}(RecursiveAstVisitor$1);\n\nfunction collectExternalReferences(stmts) {\n  var visitor = new _FindExternalReferencesVisitor();\n  visitor.visitAllStatements(stmts, null);\n  return visitor.externalReferences;\n}\n\nvar _FindExternalReferencesVisitor = /*#__PURE__*/function (_RecursiveAstVisitor$2) {\n  _inherits(_FindExternalReferencesVisitor, _RecursiveAstVisitor$2);\n\n  var _super43 = _createSuper(_FindExternalReferencesVisitor);\n\n  function _FindExternalReferencesVisitor() {\n    var _this60;\n\n    _classCallCheck(this, _FindExternalReferencesVisitor);\n\n    _this60 = _super43.apply(this, arguments);\n    _this60.externalReferences = [];\n    return _this60;\n  }\n\n  _createClass(_FindExternalReferencesVisitor, [{\n    key: \"visitExternalExpr\",\n    value: function visitExternalExpr(e, context) {\n      this.externalReferences.push(e.value);\n      return _get(_getPrototypeOf(_FindExternalReferencesVisitor.prototype), \"visitExternalExpr\", this).call(this, e, context);\n    }\n  }]);\n\n  return _FindExternalReferencesVisitor;\n}(RecursiveAstVisitor$1);\n\nfunction applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {\n  if (!sourceSpan) {\n    return stmt;\n  }\n\n  var transformer = new _ApplySourceSpanTransformer(sourceSpan);\n  return stmt.visitStatement(transformer, null);\n}\n\nfunction applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {\n  if (!sourceSpan) {\n    return expr;\n  }\n\n  var transformer = new _ApplySourceSpanTransformer(sourceSpan);\n  return expr.visitExpression(transformer, null);\n}\n\nvar _ApplySourceSpanTransformer = /*#__PURE__*/function (_AstTransformer$) {\n  _inherits(_ApplySourceSpanTransformer, _AstTransformer$);\n\n  var _super44 = _createSuper(_ApplySourceSpanTransformer);\n\n  function _ApplySourceSpanTransformer(sourceSpan) {\n    var _this61;\n\n    _classCallCheck(this, _ApplySourceSpanTransformer);\n\n    _this61 = _super44.call(this);\n    _this61.sourceSpan = sourceSpan;\n    return _this61;\n  }\n\n  _createClass(_ApplySourceSpanTransformer, [{\n    key: \"_clone\",\n    value: function _clone(obj) {\n      var clone = Object.create(obj.constructor.prototype);\n\n      for (var _i5 = 0, _Object$keys = Object.keys(obj); _i5 < _Object$keys.length; _i5++) {\n        var prop = _Object$keys[_i5];\n        clone[prop] = obj[prop];\n      }\n\n      return clone;\n    }\n  }, {\n    key: \"transformExpr\",\n    value: function transformExpr(expr, context) {\n      if (!expr.sourceSpan) {\n        expr = this._clone(expr);\n        expr.sourceSpan = this.sourceSpan;\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"transformStmt\",\n    value: function transformStmt(stmt, context) {\n      if (!stmt.sourceSpan) {\n        stmt = this._clone(stmt);\n        stmt.sourceSpan = this.sourceSpan;\n      }\n\n      return stmt;\n    }\n  }]);\n\n  return _ApplySourceSpanTransformer;\n}(AstTransformer$1);\n\nfunction leadingComment(text) {\n  var multiline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var trailingNewline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return new LeadingComment(text, multiline, trailingNewline);\n}\n\nfunction jsDocComment() {\n  var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return new JSDocComment(tags);\n}\n\nfunction variable(name, type, sourceSpan) {\n  return new ReadVarExpr(name, type, sourceSpan);\n}\n\nfunction importExpr(id) {\n  var typeParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var sourceSpan = arguments.length > 2 ? arguments[2] : undefined;\n  return new ExternalExpr(id, null, typeParams, sourceSpan);\n}\n\nfunction importType(id, typeParams, typeModifiers) {\n  return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;\n}\n\nfunction expressionType(expr, typeModifiers, typeParams) {\n  return new ExpressionType(expr, typeModifiers, typeParams);\n}\n\nfunction typeofExpr(expr) {\n  return new TypeofExpr(expr);\n}\n\nfunction literalArr(values, type, sourceSpan) {\n  return new LiteralArrayExpr(values, type, sourceSpan);\n}\n\nfunction literalMap(values) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return new LiteralMapExpr(values.map(function (e) {\n    return new LiteralMapEntry(e.key, e.value, e.quoted);\n  }), type, null);\n}\n\nfunction unary(operator, expr, type, sourceSpan) {\n  return new UnaryOperatorExpr(operator, expr, type, sourceSpan);\n}\n\nfunction not(expr, sourceSpan) {\n  return new NotExpr(expr, sourceSpan);\n}\n\nfunction assertNotNull(expr, sourceSpan) {\n  return new AssertNotNull(expr, sourceSpan);\n}\n\nfunction fn(params, body, type, sourceSpan, name) {\n  return new FunctionExpr(params, body, type, sourceSpan, name);\n}\n\nfunction ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {\n  return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);\n}\n\nfunction taggedTemplate(tag, template, type, sourceSpan) {\n  return new TaggedTemplateExpr(tag, template, type, sourceSpan);\n}\n\nfunction literal(value, type, sourceSpan) {\n  return new LiteralExpr(value, type, sourceSpan);\n}\n\nfunction localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {\n  return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);\n}\n\nfunction isNull(exp) {\n  return exp instanceof LiteralExpr && exp.value === null;\n}\n/*\n * Serializes a `Tag` into a string.\n * Returns a string like \" @foo {bar} baz\" (note the leading whitespace before `@foo`).\n */\n\n\nfunction tagToString(tag) {\n  var out = '';\n\n  if (tag.tagName) {\n    out += \" @\".concat(tag.tagName);\n  }\n\n  if (tag.text) {\n    if (tag.text.match(/\\/\\*|\\*\\//)) {\n      throw new Error('JSDoc text cannot contain \"/*\" and \"*/\"');\n    }\n\n    out += ' ' + tag.text.replace(/@/g, '\\\\@');\n  }\n\n  return out;\n}\n\nfunction serializeTags(tags) {\n  if (tags.length === 0) return '';\n\n  if (tags.length === 1 && tags[0].tagName && !tags[0].text) {\n    // The JSDOC comment is a single simple tag: e.g `/** @tagname */`.\n    return \"*\".concat(tagToString(tags[0]), \" \");\n  }\n\n  var out = '*\\n';\n\n  var _iterator2 = _createForOfIteratorHelper(tags),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var tag = _step2.value;\n      out += ' *'; // If the tagToString is multi-line, insert \" * \" prefixes on lines.\n\n      out += tagToString(tag).replace(/\\n/g, '\\n * ');\n      out += '\\n';\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  out += ' ';\n  return out;\n}\n\nvar output_ast = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n\n  get TypeModifier() {\n    return TypeModifier;\n  },\n\n  Type: Type,\n\n  get BuiltinTypeName() {\n    return BuiltinTypeName;\n  },\n\n  BuiltinType: BuiltinType,\n  ExpressionType: ExpressionType,\n  ArrayType: ArrayType,\n  MapType: MapType,\n  DYNAMIC_TYPE: DYNAMIC_TYPE,\n  INFERRED_TYPE: INFERRED_TYPE,\n  BOOL_TYPE: BOOL_TYPE,\n  INT_TYPE: INT_TYPE,\n  NUMBER_TYPE: NUMBER_TYPE,\n  STRING_TYPE: STRING_TYPE,\n  FUNCTION_TYPE: FUNCTION_TYPE,\n  NONE_TYPE: NONE_TYPE,\n\n  get UnaryOperator() {\n    return UnaryOperator;\n  },\n\n  get BinaryOperator() {\n    return BinaryOperator;\n  },\n\n  nullSafeIsEquivalent: nullSafeIsEquivalent,\n  areAllEquivalent: areAllEquivalent,\n  Expression: Expression,\n\n  get BuiltinVar() {\n    return BuiltinVar;\n  },\n\n  ReadVarExpr: ReadVarExpr,\n  TypeofExpr: TypeofExpr,\n  WrappedNodeExpr: WrappedNodeExpr,\n  WriteVarExpr: WriteVarExpr,\n  WriteKeyExpr: WriteKeyExpr,\n  WritePropExpr: WritePropExpr,\n\n  get BuiltinMethod() {\n    return BuiltinMethod;\n  },\n\n  InvokeFunctionExpr: InvokeFunctionExpr,\n  TaggedTemplateExpr: TaggedTemplateExpr,\n  InstantiateExpr: InstantiateExpr,\n  LiteralExpr: LiteralExpr,\n  TemplateLiteral: TemplateLiteral,\n  TemplateLiteralElement: TemplateLiteralElement,\n  LiteralPiece: LiteralPiece,\n  PlaceholderPiece: PlaceholderPiece,\n  LocalizedString: LocalizedString,\n  ExternalExpr: ExternalExpr,\n  ExternalReference: ExternalReference,\n  ConditionalExpr: ConditionalExpr,\n  NotExpr: NotExpr,\n  AssertNotNull: AssertNotNull,\n  CastExpr: CastExpr,\n  FnParam: FnParam,\n  FunctionExpr: FunctionExpr,\n  UnaryOperatorExpr: UnaryOperatorExpr,\n  BinaryOperatorExpr: BinaryOperatorExpr,\n  ReadPropExpr: ReadPropExpr,\n  ReadKeyExpr: ReadKeyExpr,\n  LiteralArrayExpr: LiteralArrayExpr,\n  LiteralMapEntry: LiteralMapEntry,\n  LiteralMapExpr: LiteralMapExpr,\n  CommaExpr: CommaExpr,\n  THIS_EXPR: THIS_EXPR,\n  SUPER_EXPR: SUPER_EXPR,\n  CATCH_ERROR_VAR: CATCH_ERROR_VAR$1,\n  CATCH_STACK_VAR: CATCH_STACK_VAR$1,\n  NULL_EXPR: NULL_EXPR,\n  TYPED_NULL_EXPR: TYPED_NULL_EXPR,\n\n  get StmtModifier() {\n    return StmtModifier;\n  },\n\n  LeadingComment: LeadingComment,\n  JSDocComment: JSDocComment,\n  Statement: Statement,\n  DeclareVarStmt: DeclareVarStmt,\n  DeclareFunctionStmt: DeclareFunctionStmt,\n  ExpressionStatement: ExpressionStatement,\n  ReturnStatement: ReturnStatement,\n  AbstractClassPart: AbstractClassPart,\n  ClassField: ClassField,\n  ClassMethod: ClassMethod,\n  ClassGetter: ClassGetter,\n  ClassStmt: ClassStmt,\n  IfStmt: IfStmt,\n  TryCatchStmt: TryCatchStmt,\n  ThrowStmt: ThrowStmt,\n  AstTransformer: AstTransformer$1,\n  RecursiveAstVisitor: RecursiveAstVisitor$1,\n  findReadVarNames: findReadVarNames,\n  collectExternalReferences: collectExternalReferences,\n  applySourceSpanToStatementIfNeeded: applySourceSpanToStatementIfNeeded,\n  applySourceSpanToExpressionIfNeeded: applySourceSpanToExpressionIfNeeded,\n  leadingComment: leadingComment,\n  jsDocComment: jsDocComment,\n  variable: variable,\n  importExpr: importExpr,\n  importType: importType,\n  expressionType: expressionType,\n  typeofExpr: typeofExpr,\n  literalArr: literalArr,\n  literalMap: literalMap,\n  unary: unary,\n  not: not,\n  assertNotNull: assertNotNull,\n  fn: fn,\n  ifStmt: ifStmt,\n  taggedTemplate: taggedTemplate,\n  literal: literal,\n  localizedString: localizedString,\n  isNull: isNull\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar CONSTANT_PREFIX = '_c';\n/**\n * `ConstantPool` tries to reuse literal factories when two or more literals are identical.\n * We determine whether literals are identical by creating a key out of their AST using the\n * `KeyVisitor`. This constant is used to replace dynamic expressions which can't be safely\n * converted into a key. E.g. given an expression `{foo: bar()}`, since we don't know what\n * the result of `bar` will be, we create a key that looks like `{foo: <unknown>}`. Note\n * that we use a variable, rather than something like `null` in order to avoid collisions.\n */\n\nvar UNKNOWN_VALUE_KEY = variable('<unknown>');\n/**\n * Context to use when producing a key.\n *\n * This ensures we see the constant not the reference variable when producing\n * a key.\n */\n\nvar KEY_CONTEXT = {};\n/**\n * Generally all primitive values are excluded from the `ConstantPool`, but there is an exclusion\n * for strings that reach a certain length threshold. This constant defines the length threshold for\n * strings.\n */\n\nvar POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;\n/**\n * A node that is a place-holder that allows the node to be replaced when the actual\n * node is known.\n *\n * This allows the constant pool to change an expression from a direct reference to\n * a constant to a shared constant. It returns a fix-up node that is later allowed to\n * change the referenced expression.\n */\n\nvar FixupExpression = /*#__PURE__*/function (_Expression25) {\n  _inherits(FixupExpression, _Expression25);\n\n  var _super45 = _createSuper(FixupExpression);\n\n  function FixupExpression(resolved) {\n    var _this62;\n\n    _classCallCheck(this, FixupExpression);\n\n    _this62 = _super45.call(this, resolved.type);\n    _this62.resolved = resolved;\n    _this62.original = resolved;\n    return _this62;\n  }\n\n  _createClass(FixupExpression, [{\n    key: \"visitExpression\",\n    value: function visitExpression(visitor, context) {\n      if (context === KEY_CONTEXT) {\n        // When producing a key we want to traverse the constant not the\n        // variable used to refer to it.\n        return this.original.visitExpression(visitor, context);\n      } else {\n        return this.resolved.visitExpression(visitor, context);\n      }\n    }\n  }, {\n    key: \"isEquivalent\",\n    value: function isEquivalent(e) {\n      return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);\n    }\n  }, {\n    key: \"isConstant\",\n    value: function isConstant() {\n      return true;\n    }\n  }, {\n    key: \"fixup\",\n    value: function fixup(expression) {\n      this.resolved = expression;\n      this.shared = true;\n    }\n  }]);\n\n  return FixupExpression;\n}(Expression);\n/**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\n\n\nvar ConstantPool = /*#__PURE__*/function () {\n  function ConstantPool() {\n    var isClosureCompilerEnabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    _classCallCheck(this, ConstantPool);\n\n    this.isClosureCompilerEnabled = isClosureCompilerEnabled;\n    this.statements = [];\n    this.literals = new Map();\n    this.literalFactories = new Map();\n    this.injectorDefinitions = new Map();\n    this.directiveDefinitions = new Map();\n    this.componentDefinitions = new Map();\n    this.pipeDefinitions = new Map();\n    this.nextNameIndex = 0;\n  }\n\n  _createClass(ConstantPool, [{\n    key: \"getConstLiteral\",\n    value: function getConstLiteral(literal, forceShared) {\n      if (literal instanceof LiteralExpr && !isLongStringLiteral(literal) || literal instanceof FixupExpression) {\n        // Do no put simple literals into the constant pool or try to produce a constant for a\n        // reference to a constant.\n        return literal;\n      }\n\n      var key = this.keyOf(literal);\n      var fixup = this.literals.get(key);\n      var newValue = false;\n\n      if (!fixup) {\n        fixup = new FixupExpression(literal);\n        this.literals.set(key, fixup);\n        newValue = true;\n      }\n\n      if (!newValue && !fixup.shared || newValue && forceShared) {\n        // Replace the expression with a variable\n        var name = this.freshName();\n        var definition;\n        var usage;\n\n        if (this.isClosureCompilerEnabled && isLongStringLiteral(literal)) {\n          // For string literals, Closure will **always** inline the string at\n          // **all** usages, duplicating it each time. For large strings, this\n          // unnecessarily bloats bundle size. To work around this restriction, we\n          // wrap the string in a function, and call that function for each usage.\n          // This tricks Closure into using inline logic for functions instead of\n          // string literals. Function calls are only inlined if the body is small\n          // enough to be worth it. By doing this, very large strings will be\n          // shared across multiple usages, rather than duplicating the string at\n          // each usage site.\n          //\n          // const myStr = function() { return \"very very very long string\"; };\n          // const usage1 = myStr();\n          // const usage2 = myStr();\n          definition = variable(name).set(new FunctionExpr([], // Params.\n          [// Statements.\n          new ReturnStatement(literal)]));\n          usage = variable(name).callFn([]);\n        } else {\n          // Just declare and use the variable directly, without a function call\n          // indirection. This saves a few bytes and avoids an unncessary call.\n          definition = variable(name).set(literal);\n          usage = variable(name);\n        }\n\n        this.statements.push(definition.toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));\n        fixup.fixup(usage);\n      }\n\n      return fixup;\n    }\n  }, {\n    key: \"getDefinition\",\n    value: function getDefinition(type, kind, ctx) {\n      var forceShared = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var definitions = this.definitionsOf(kind);\n      var fixup = definitions.get(type);\n      var newValue = false;\n\n      if (!fixup) {\n        var property = this.propertyNameOf(kind);\n        fixup = new FixupExpression(ctx.importExpr(type).prop(property));\n        definitions.set(type, fixup);\n        newValue = true;\n      }\n\n      if (!newValue && !fixup.shared || newValue && forceShared) {\n        var name = this.freshName();\n        this.statements.push(variable(name).set(fixup.resolved).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));\n        fixup.fixup(variable(name));\n      }\n\n      return fixup;\n    }\n  }, {\n    key: \"getLiteralFactory\",\n    value: function getLiteralFactory(literal) {\n      // Create a pure function that builds an array of a mix of constant and variable expressions\n      if (literal instanceof LiteralArrayExpr) {\n        var argumentsForKey = literal.entries.map(function (e) {\n          return e.isConstant() ? e : UNKNOWN_VALUE_KEY;\n        });\n        var key = this.keyOf(literalArr(argumentsForKey));\n        return this._getLiteralFactory(key, literal.entries, function (entries) {\n          return literalArr(entries);\n        });\n      } else {\n        var expressionForKey = literalMap(literal.entries.map(function (e) {\n          return {\n            key: e.key,\n            value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,\n            quoted: e.quoted\n          };\n        }));\n\n        var _key2 = this.keyOf(expressionForKey);\n\n        return this._getLiteralFactory(_key2, literal.entries.map(function (e) {\n          return e.value;\n        }), function (entries) {\n          return literalMap(entries.map(function (value, index) {\n            return {\n              key: literal.entries[index].key,\n              value: value,\n              quoted: literal.entries[index].quoted\n            };\n          }));\n        });\n      }\n    }\n  }, {\n    key: \"_getLiteralFactory\",\n    value: function _getLiteralFactory(key, values, resultMap) {\n      var _this63 = this;\n\n      var literalFactory = this.literalFactories.get(key);\n      var literalFactoryArguments = values.filter(function (e) {\n        return !e.isConstant();\n      });\n\n      if (!literalFactory) {\n        var resultExpressions = values.map(function (e, index) {\n          return e.isConstant() ? _this63.getConstLiteral(e, true) : variable(\"a\".concat(index));\n        });\n        var parameters = resultExpressions.filter(isVariable).map(function (e) {\n          return new FnParam(e.name, DYNAMIC_TYPE);\n        });\n        var pureFunctionDeclaration = fn(parameters, [new ReturnStatement(resultMap(resultExpressions))], INFERRED_TYPE);\n        var name = this.freshName();\n        this.statements.push(variable(name).set(pureFunctionDeclaration).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));\n        literalFactory = variable(name);\n        this.literalFactories.set(key, literalFactory);\n      }\n\n      return {\n        literalFactory: literalFactory,\n        literalFactoryArguments: literalFactoryArguments\n      };\n    }\n    /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     */\n\n  }, {\n    key: \"uniqueName\",\n    value: function uniqueName(prefix) {\n      return \"\".concat(prefix).concat(this.nextNameIndex++);\n    }\n  }, {\n    key: \"definitionsOf\",\n    value: function definitionsOf(kind) {\n      switch (kind) {\n        case 2\n        /* Component */\n        :\n          return this.componentDefinitions;\n\n        case 1\n        /* Directive */\n        :\n          return this.directiveDefinitions;\n\n        case 0\n        /* Injector */\n        :\n          return this.injectorDefinitions;\n\n        case 3\n        /* Pipe */\n        :\n          return this.pipeDefinitions;\n      }\n    }\n  }, {\n    key: \"propertyNameOf\",\n    value: function propertyNameOf(kind) {\n      switch (kind) {\n        case 2\n        /* Component */\n        :\n          return 'ɵcmp';\n\n        case 1\n        /* Directive */\n        :\n          return 'ɵdir';\n\n        case 0\n        /* Injector */\n        :\n          return 'ɵinj';\n\n        case 3\n        /* Pipe */\n        :\n          return 'ɵpipe';\n      }\n    }\n  }, {\n    key: \"freshName\",\n    value: function freshName() {\n      return this.uniqueName(CONSTANT_PREFIX);\n    }\n  }, {\n    key: \"keyOf\",\n    value: function keyOf(expression) {\n      return expression.visitExpression(new KeyVisitor(), KEY_CONTEXT);\n    }\n  }]);\n\n  return ConstantPool;\n}();\n/**\n * Visitor used to determine if 2 expressions are equivalent and can be shared in the\n * `ConstantPool`.\n *\n * When the id (string) generated by the visitor is equal, expressions are considered equivalent.\n */\n\n\nvar KeyVisitor = /*#__PURE__*/function () {\n  function KeyVisitor() {\n    _classCallCheck(this, KeyVisitor);\n\n    this.visitWrappedNodeExpr = invalid$1;\n    this.visitWriteVarExpr = invalid$1;\n    this.visitWriteKeyExpr = invalid$1;\n    this.visitWritePropExpr = invalid$1;\n    this.visitInvokeFunctionExpr = invalid$1;\n    this.visitTaggedTemplateExpr = invalid$1;\n    this.visitInstantiateExpr = invalid$1;\n    this.visitConditionalExpr = invalid$1;\n    this.visitNotExpr = invalid$1;\n    this.visitAssertNotNullExpr = invalid$1;\n    this.visitCastExpr = invalid$1;\n    this.visitFunctionExpr = invalid$1;\n    this.visitUnaryOperatorExpr = invalid$1;\n    this.visitBinaryOperatorExpr = invalid$1;\n    this.visitReadPropExpr = invalid$1;\n    this.visitReadKeyExpr = invalid$1;\n    this.visitCommaExpr = invalid$1;\n    this.visitLocalizedString = invalid$1;\n  }\n\n  _createClass(KeyVisitor, [{\n    key: \"visitLiteralExpr\",\n    value: function visitLiteralExpr(ast) {\n      return \"\".concat(typeof ast.value === 'string' ? '\"' + ast.value + '\"' : ast.value);\n    }\n  }, {\n    key: \"visitLiteralArrayExpr\",\n    value: function visitLiteralArrayExpr(ast, context) {\n      var _this64 = this;\n\n      return \"[\".concat(ast.entries.map(function (entry) {\n        return entry.visitExpression(_this64, context);\n      }).join(','), \"]\");\n    }\n  }, {\n    key: \"visitLiteralMapExpr\",\n    value: function visitLiteralMapExpr(ast, context) {\n      var _this65 = this;\n\n      var mapKey = function mapKey(entry) {\n        var quote = entry.quoted ? '\"' : '';\n        return \"\".concat(quote).concat(entry.key).concat(quote);\n      };\n\n      var mapEntry = function mapEntry(entry) {\n        return \"\".concat(mapKey(entry), \":\").concat(entry.value.visitExpression(_this65, context));\n      };\n\n      return \"{\".concat(ast.entries.map(mapEntry).join(','));\n    }\n  }, {\n    key: \"visitExternalExpr\",\n    value: function visitExternalExpr(ast) {\n      return ast.value.moduleName ? \"EX:\".concat(ast.value.moduleName, \":\").concat(ast.value.name) : \"EX:\".concat(ast.value.runtime.name);\n    }\n  }, {\n    key: \"visitReadVarExpr\",\n    value: function visitReadVarExpr(node) {\n      return \"VAR:\".concat(node.name);\n    }\n  }, {\n    key: \"visitTypeofExpr\",\n    value: function visitTypeofExpr(node, context) {\n      return \"TYPEOF:\".concat(node.expr.visitExpression(this, context));\n    }\n  }]);\n\n  return KeyVisitor;\n}();\n\nfunction invalid$1(arg) {\n  throw new Error(\"Invalid state: Visitor \".concat(this.constructor.name, \" doesn't handle \").concat(arg.constructor.name));\n}\n\nfunction isVariable(e) {\n  return e instanceof ReadVarExpr;\n}\n\nfunction isLongStringLiteral(expr) {\n  return expr instanceof LiteralExpr && typeof expr.value === 'string' && expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CORE$1 = '@angular/core';\n\nvar Identifiers$1 = function Identifiers$1() {\n  _classCallCheck(this, Identifiers$1);\n};\n/* Methods */\n\n\nIdentifiers$1.NEW_METHOD = 'factory';\nIdentifiers$1.TRANSFORM_METHOD = 'transform';\nIdentifiers$1.PATCH_DEPS = 'patchedDeps';\nIdentifiers$1.core = {\n  name: null,\n  moduleName: CORE$1\n};\n/* Instructions */\n\nIdentifiers$1.namespaceHTML = {\n  name: 'ɵɵnamespaceHTML',\n  moduleName: CORE$1\n};\nIdentifiers$1.namespaceMathML = {\n  name: 'ɵɵnamespaceMathML',\n  moduleName: CORE$1\n};\nIdentifiers$1.namespaceSVG = {\n  name: 'ɵɵnamespaceSVG',\n  moduleName: CORE$1\n};\nIdentifiers$1.element = {\n  name: 'ɵɵelement',\n  moduleName: CORE$1\n};\nIdentifiers$1.elementStart = {\n  name: 'ɵɵelementStart',\n  moduleName: CORE$1\n};\nIdentifiers$1.elementEnd = {\n  name: 'ɵɵelementEnd',\n  moduleName: CORE$1\n};\nIdentifiers$1.advance = {\n  name: 'ɵɵadvance',\n  moduleName: CORE$1\n};\nIdentifiers$1.syntheticHostProperty = {\n  name: 'ɵɵsyntheticHostProperty',\n  moduleName: CORE$1\n};\nIdentifiers$1.syntheticHostListener = {\n  name: 'ɵɵsyntheticHostListener',\n  moduleName: CORE$1\n};\nIdentifiers$1.attribute = {\n  name: 'ɵɵattribute',\n  moduleName: CORE$1\n};\nIdentifiers$1.attributeInterpolate1 = {\n  name: 'ɵɵattributeInterpolate1',\n  moduleName: CORE$1\n};\nIdentifiers$1.attributeInterpolate2 = {\n  name: 'ɵɵattributeInterpolate2',\n  moduleName: CORE$1\n};\nIdentifiers$1.attributeInterpolate3 = {\n  name: 'ɵɵattributeInterpolate3',\n  moduleName: CORE$1\n};\nIdentifiers$1.attributeInterpolate4 = {\n  name: 'ɵɵattributeInterpolate4',\n  moduleName: CORE$1\n};\nIdentifiers$1.attributeInterpolate5 = {\n  name: 'ɵɵattributeInterpolate5',\n  moduleName: CORE$1\n};\nIdentifiers$1.attributeInterpolate6 = {\n  name: 'ɵɵattributeInterpolate6',\n  moduleName: CORE$1\n};\nIdentifiers$1.attributeInterpolate7 = {\n  name: 'ɵɵattributeInterpolate7',\n  moduleName: CORE$1\n};\nIdentifiers$1.attributeInterpolate8 = {\n  name: 'ɵɵattributeInterpolate8',\n  moduleName: CORE$1\n};\nIdentifiers$1.attributeInterpolateV = {\n  name: 'ɵɵattributeInterpolateV',\n  moduleName: CORE$1\n};\nIdentifiers$1.classProp = {\n  name: 'ɵɵclassProp',\n  moduleName: CORE$1\n};\nIdentifiers$1.elementContainerStart = {\n  name: 'ɵɵelementContainerStart',\n  moduleName: CORE$1\n};\nIdentifiers$1.elementContainerEnd = {\n  name: 'ɵɵelementContainerEnd',\n  moduleName: CORE$1\n};\nIdentifiers$1.elementContainer = {\n  name: 'ɵɵelementContainer',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleMap = {\n  name: 'ɵɵstyleMap',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleMapInterpolate1 = {\n  name: 'ɵɵstyleMapInterpolate1',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleMapInterpolate2 = {\n  name: 'ɵɵstyleMapInterpolate2',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleMapInterpolate3 = {\n  name: 'ɵɵstyleMapInterpolate3',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleMapInterpolate4 = {\n  name: 'ɵɵstyleMapInterpolate4',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleMapInterpolate5 = {\n  name: 'ɵɵstyleMapInterpolate5',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleMapInterpolate6 = {\n  name: 'ɵɵstyleMapInterpolate6',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleMapInterpolate7 = {\n  name: 'ɵɵstyleMapInterpolate7',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleMapInterpolate8 = {\n  name: 'ɵɵstyleMapInterpolate8',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleMapInterpolateV = {\n  name: 'ɵɵstyleMapInterpolateV',\n  moduleName: CORE$1\n};\nIdentifiers$1.classMap = {\n  name: 'ɵɵclassMap',\n  moduleName: CORE$1\n};\nIdentifiers$1.classMapInterpolate1 = {\n  name: 'ɵɵclassMapInterpolate1',\n  moduleName: CORE$1\n};\nIdentifiers$1.classMapInterpolate2 = {\n  name: 'ɵɵclassMapInterpolate2',\n  moduleName: CORE$1\n};\nIdentifiers$1.classMapInterpolate3 = {\n  name: 'ɵɵclassMapInterpolate3',\n  moduleName: CORE$1\n};\nIdentifiers$1.classMapInterpolate4 = {\n  name: 'ɵɵclassMapInterpolate4',\n  moduleName: CORE$1\n};\nIdentifiers$1.classMapInterpolate5 = {\n  name: 'ɵɵclassMapInterpolate5',\n  moduleName: CORE$1\n};\nIdentifiers$1.classMapInterpolate6 = {\n  name: 'ɵɵclassMapInterpolate6',\n  moduleName: CORE$1\n};\nIdentifiers$1.classMapInterpolate7 = {\n  name: 'ɵɵclassMapInterpolate7',\n  moduleName: CORE$1\n};\nIdentifiers$1.classMapInterpolate8 = {\n  name: 'ɵɵclassMapInterpolate8',\n  moduleName: CORE$1\n};\nIdentifiers$1.classMapInterpolateV = {\n  name: 'ɵɵclassMapInterpolateV',\n  moduleName: CORE$1\n};\nIdentifiers$1.styleProp = {\n  name: 'ɵɵstyleProp',\n  moduleName: CORE$1\n};\nIdentifiers$1.stylePropInterpolate1 = {\n  name: 'ɵɵstylePropInterpolate1',\n  moduleName: CORE$1\n};\nIdentifiers$1.stylePropInterpolate2 = {\n  name: 'ɵɵstylePropInterpolate2',\n  moduleName: CORE$1\n};\nIdentifiers$1.stylePropInterpolate3 = {\n  name: 'ɵɵstylePropInterpolate3',\n  moduleName: CORE$1\n};\nIdentifiers$1.stylePropInterpolate4 = {\n  name: 'ɵɵstylePropInterpolate4',\n  moduleName: CORE$1\n};\nIdentifiers$1.stylePropInterpolate5 = {\n  name: 'ɵɵstylePropInterpolate5',\n  moduleName: CORE$1\n};\nIdentifiers$1.stylePropInterpolate6 = {\n  name: 'ɵɵstylePropInterpolate6',\n  moduleName: CORE$1\n};\nIdentifiers$1.stylePropInterpolate7 = {\n  name: 'ɵɵstylePropInterpolate7',\n  moduleName: CORE$1\n};\nIdentifiers$1.stylePropInterpolate8 = {\n  name: 'ɵɵstylePropInterpolate8',\n  moduleName: CORE$1\n};\nIdentifiers$1.stylePropInterpolateV = {\n  name: 'ɵɵstylePropInterpolateV',\n  moduleName: CORE$1\n};\nIdentifiers$1.nextContext = {\n  name: 'ɵɵnextContext',\n  moduleName: CORE$1\n};\nIdentifiers$1.templateCreate = {\n  name: 'ɵɵtemplate',\n  moduleName: CORE$1\n};\nIdentifiers$1.text = {\n  name: 'ɵɵtext',\n  moduleName: CORE$1\n};\nIdentifiers$1.enableBindings = {\n  name: 'ɵɵenableBindings',\n  moduleName: CORE$1\n};\nIdentifiers$1.disableBindings = {\n  name: 'ɵɵdisableBindings',\n  moduleName: CORE$1\n};\nIdentifiers$1.getCurrentView = {\n  name: 'ɵɵgetCurrentView',\n  moduleName: CORE$1\n};\nIdentifiers$1.textInterpolate = {\n  name: 'ɵɵtextInterpolate',\n  moduleName: CORE$1\n};\nIdentifiers$1.textInterpolate1 = {\n  name: 'ɵɵtextInterpolate1',\n  moduleName: CORE$1\n};\nIdentifiers$1.textInterpolate2 = {\n  name: 'ɵɵtextInterpolate2',\n  moduleName: CORE$1\n};\nIdentifiers$1.textInterpolate3 = {\n  name: 'ɵɵtextInterpolate3',\n  moduleName: CORE$1\n};\nIdentifiers$1.textInterpolate4 = {\n  name: 'ɵɵtextInterpolate4',\n  moduleName: CORE$1\n};\nIdentifiers$1.textInterpolate5 = {\n  name: 'ɵɵtextInterpolate5',\n  moduleName: CORE$1\n};\nIdentifiers$1.textInterpolate6 = {\n  name: 'ɵɵtextInterpolate6',\n  moduleName: CORE$1\n};\nIdentifiers$1.textInterpolate7 = {\n  name: 'ɵɵtextInterpolate7',\n  moduleName: CORE$1\n};\nIdentifiers$1.textInterpolate8 = {\n  name: 'ɵɵtextInterpolate8',\n  moduleName: CORE$1\n};\nIdentifiers$1.textInterpolateV = {\n  name: 'ɵɵtextInterpolateV',\n  moduleName: CORE$1\n};\nIdentifiers$1.restoreView = {\n  name: 'ɵɵrestoreView',\n  moduleName: CORE$1\n};\nIdentifiers$1.pureFunction0 = {\n  name: 'ɵɵpureFunction0',\n  moduleName: CORE$1\n};\nIdentifiers$1.pureFunction1 = {\n  name: 'ɵɵpureFunction1',\n  moduleName: CORE$1\n};\nIdentifiers$1.pureFunction2 = {\n  name: 'ɵɵpureFunction2',\n  moduleName: CORE$1\n};\nIdentifiers$1.pureFunction3 = {\n  name: 'ɵɵpureFunction3',\n  moduleName: CORE$1\n};\nIdentifiers$1.pureFunction4 = {\n  name: 'ɵɵpureFunction4',\n  moduleName: CORE$1\n};\nIdentifiers$1.pureFunction5 = {\n  name: 'ɵɵpureFunction5',\n  moduleName: CORE$1\n};\nIdentifiers$1.pureFunction6 = {\n  name: 'ɵɵpureFunction6',\n  moduleName: CORE$1\n};\nIdentifiers$1.pureFunction7 = {\n  name: 'ɵɵpureFunction7',\n  moduleName: CORE$1\n};\nIdentifiers$1.pureFunction8 = {\n  name: 'ɵɵpureFunction8',\n  moduleName: CORE$1\n};\nIdentifiers$1.pureFunctionV = {\n  name: 'ɵɵpureFunctionV',\n  moduleName: CORE$1\n};\nIdentifiers$1.pipeBind1 = {\n  name: 'ɵɵpipeBind1',\n  moduleName: CORE$1\n};\nIdentifiers$1.pipeBind2 = {\n  name: 'ɵɵpipeBind2',\n  moduleName: CORE$1\n};\nIdentifiers$1.pipeBind3 = {\n  name: 'ɵɵpipeBind3',\n  moduleName: CORE$1\n};\nIdentifiers$1.pipeBind4 = {\n  name: 'ɵɵpipeBind4',\n  moduleName: CORE$1\n};\nIdentifiers$1.pipeBindV = {\n  name: 'ɵɵpipeBindV',\n  moduleName: CORE$1\n};\nIdentifiers$1.hostProperty = {\n  name: 'ɵɵhostProperty',\n  moduleName: CORE$1\n};\nIdentifiers$1.property = {\n  name: 'ɵɵproperty',\n  moduleName: CORE$1\n};\nIdentifiers$1.propertyInterpolate = {\n  name: 'ɵɵpropertyInterpolate',\n  moduleName: CORE$1\n};\nIdentifiers$1.propertyInterpolate1 = {\n  name: 'ɵɵpropertyInterpolate1',\n  moduleName: CORE$1\n};\nIdentifiers$1.propertyInterpolate2 = {\n  name: 'ɵɵpropertyInterpolate2',\n  moduleName: CORE$1\n};\nIdentifiers$1.propertyInterpolate3 = {\n  name: 'ɵɵpropertyInterpolate3',\n  moduleName: CORE$1\n};\nIdentifiers$1.propertyInterpolate4 = {\n  name: 'ɵɵpropertyInterpolate4',\n  moduleName: CORE$1\n};\nIdentifiers$1.propertyInterpolate5 = {\n  name: 'ɵɵpropertyInterpolate5',\n  moduleName: CORE$1\n};\nIdentifiers$1.propertyInterpolate6 = {\n  name: 'ɵɵpropertyInterpolate6',\n  moduleName: CORE$1\n};\nIdentifiers$1.propertyInterpolate7 = {\n  name: 'ɵɵpropertyInterpolate7',\n  moduleName: CORE$1\n};\nIdentifiers$1.propertyInterpolate8 = {\n  name: 'ɵɵpropertyInterpolate8',\n  moduleName: CORE$1\n};\nIdentifiers$1.propertyInterpolateV = {\n  name: 'ɵɵpropertyInterpolateV',\n  moduleName: CORE$1\n};\nIdentifiers$1.i18n = {\n  name: 'ɵɵi18n',\n  moduleName: CORE$1\n};\nIdentifiers$1.i18nAttributes = {\n  name: 'ɵɵi18nAttributes',\n  moduleName: CORE$1\n};\nIdentifiers$1.i18nExp = {\n  name: 'ɵɵi18nExp',\n  moduleName: CORE$1\n};\nIdentifiers$1.i18nStart = {\n  name: 'ɵɵi18nStart',\n  moduleName: CORE$1\n};\nIdentifiers$1.i18nEnd = {\n  name: 'ɵɵi18nEnd',\n  moduleName: CORE$1\n};\nIdentifiers$1.i18nApply = {\n  name: 'ɵɵi18nApply',\n  moduleName: CORE$1\n};\nIdentifiers$1.i18nPostprocess = {\n  name: 'ɵɵi18nPostprocess',\n  moduleName: CORE$1\n};\nIdentifiers$1.pipe = {\n  name: 'ɵɵpipe',\n  moduleName: CORE$1\n};\nIdentifiers$1.projection = {\n  name: 'ɵɵprojection',\n  moduleName: CORE$1\n};\nIdentifiers$1.projectionDef = {\n  name: 'ɵɵprojectionDef',\n  moduleName: CORE$1\n};\nIdentifiers$1.reference = {\n  name: 'ɵɵreference',\n  moduleName: CORE$1\n};\nIdentifiers$1.inject = {\n  name: 'ɵɵinject',\n  moduleName: CORE$1\n};\nIdentifiers$1.injectAttribute = {\n  name: 'ɵɵinjectAttribute',\n  moduleName: CORE$1\n};\nIdentifiers$1.directiveInject = {\n  name: 'ɵɵdirectiveInject',\n  moduleName: CORE$1\n};\nIdentifiers$1.invalidFactory = {\n  name: 'ɵɵinvalidFactory',\n  moduleName: CORE$1\n};\nIdentifiers$1.invalidFactoryDep = {\n  name: 'ɵɵinvalidFactoryDep',\n  moduleName: CORE$1\n};\nIdentifiers$1.templateRefExtractor = {\n  name: 'ɵɵtemplateRefExtractor',\n  moduleName: CORE$1\n};\nIdentifiers$1.forwardRef = {\n  name: 'forwardRef',\n  moduleName: CORE$1\n};\nIdentifiers$1.resolveForwardRef = {\n  name: 'resolveForwardRef',\n  moduleName: CORE$1\n};\nIdentifiers$1.ɵɵdefineInjectable = {\n  name: 'ɵɵdefineInjectable',\n  moduleName: CORE$1\n};\nIdentifiers$1.declareInjectable = {\n  name: 'ɵɵngDeclareInjectable',\n  moduleName: CORE$1\n};\nIdentifiers$1.InjectableDeclaration = {\n  name: 'ɵɵInjectableDeclaration',\n  moduleName: CORE$1\n};\nIdentifiers$1.resolveWindow = {\n  name: 'ɵɵresolveWindow',\n  moduleName: CORE$1\n};\nIdentifiers$1.resolveDocument = {\n  name: 'ɵɵresolveDocument',\n  moduleName: CORE$1\n};\nIdentifiers$1.resolveBody = {\n  name: 'ɵɵresolveBody',\n  moduleName: CORE$1\n};\nIdentifiers$1.defineComponent = {\n  name: 'ɵɵdefineComponent',\n  moduleName: CORE$1\n};\nIdentifiers$1.declareComponent = {\n  name: 'ɵɵngDeclareComponent',\n  moduleName: CORE$1\n};\nIdentifiers$1.setComponentScope = {\n  name: 'ɵɵsetComponentScope',\n  moduleName: CORE$1\n};\nIdentifiers$1.ChangeDetectionStrategy = {\n  name: 'ChangeDetectionStrategy',\n  moduleName: CORE$1\n};\nIdentifiers$1.ViewEncapsulation = {\n  name: 'ViewEncapsulation',\n  moduleName: CORE$1\n};\nIdentifiers$1.ComponentDeclaration = {\n  name: 'ɵɵComponentDeclaration',\n  moduleName: CORE$1\n};\nIdentifiers$1.FactoryDeclaration = {\n  name: 'ɵɵFactoryDeclaration',\n  moduleName: CORE$1\n};\nIdentifiers$1.declareFactory = {\n  name: 'ɵɵngDeclareFactory',\n  moduleName: CORE$1\n};\nIdentifiers$1.FactoryTarget = {\n  name: 'ɵɵFactoryTarget',\n  moduleName: CORE$1\n};\nIdentifiers$1.defineDirective = {\n  name: 'ɵɵdefineDirective',\n  moduleName: CORE$1\n};\nIdentifiers$1.declareDirective = {\n  name: 'ɵɵngDeclareDirective',\n  moduleName: CORE$1\n};\nIdentifiers$1.DirectiveDeclaration = {\n  name: 'ɵɵDirectiveDeclaration',\n  moduleName: CORE$1\n};\nIdentifiers$1.InjectorDef = {\n  name: 'ɵɵInjectorDef',\n  moduleName: CORE$1\n};\nIdentifiers$1.InjectorDeclaration = {\n  name: 'ɵɵInjectorDeclaration',\n  moduleName: CORE$1\n};\nIdentifiers$1.defineInjector = {\n  name: 'ɵɵdefineInjector',\n  moduleName: CORE$1\n};\nIdentifiers$1.declareInjector = {\n  name: 'ɵɵngDeclareInjector',\n  moduleName: CORE$1\n};\nIdentifiers$1.NgModuleDeclaration = {\n  name: 'ɵɵNgModuleDeclaration',\n  moduleName: CORE$1\n};\nIdentifiers$1.ModuleWithProviders = {\n  name: 'ModuleWithProviders',\n  moduleName: CORE$1\n};\nIdentifiers$1.defineNgModule = {\n  name: 'ɵɵdefineNgModule',\n  moduleName: CORE$1\n};\nIdentifiers$1.declareNgModule = {\n  name: 'ɵɵngDeclareNgModule',\n  moduleName: CORE$1\n};\nIdentifiers$1.setNgModuleScope = {\n  name: 'ɵɵsetNgModuleScope',\n  moduleName: CORE$1\n};\nIdentifiers$1.PipeDeclaration = {\n  name: 'ɵɵPipeDeclaration',\n  moduleName: CORE$1\n};\nIdentifiers$1.definePipe = {\n  name: 'ɵɵdefinePipe',\n  moduleName: CORE$1\n};\nIdentifiers$1.declarePipe = {\n  name: 'ɵɵngDeclarePipe',\n  moduleName: CORE$1\n};\nIdentifiers$1.declareClassMetadata = {\n  name: 'ɵɵngDeclareClassMetadata',\n  moduleName: CORE$1\n};\nIdentifiers$1.setClassMetadata = {\n  name: 'ɵsetClassMetadata',\n  moduleName: CORE$1\n};\nIdentifiers$1.queryRefresh = {\n  name: 'ɵɵqueryRefresh',\n  moduleName: CORE$1\n};\nIdentifiers$1.viewQuery = {\n  name: 'ɵɵviewQuery',\n  moduleName: CORE$1\n};\nIdentifiers$1.loadQuery = {\n  name: 'ɵɵloadQuery',\n  moduleName: CORE$1\n};\nIdentifiers$1.contentQuery = {\n  name: 'ɵɵcontentQuery',\n  moduleName: CORE$1\n};\nIdentifiers$1.NgOnChangesFeature = {\n  name: 'ɵɵNgOnChangesFeature',\n  moduleName: CORE$1\n};\nIdentifiers$1.InheritDefinitionFeature = {\n  name: 'ɵɵInheritDefinitionFeature',\n  moduleName: CORE$1\n};\nIdentifiers$1.CopyDefinitionFeature = {\n  name: 'ɵɵCopyDefinitionFeature',\n  moduleName: CORE$1\n};\nIdentifiers$1.ProvidersFeature = {\n  name: 'ɵɵProvidersFeature',\n  moduleName: CORE$1\n};\nIdentifiers$1.listener = {\n  name: 'ɵɵlistener',\n  moduleName: CORE$1\n};\nIdentifiers$1.getInheritedFactory = {\n  name: 'ɵɵgetInheritedFactory',\n  moduleName: CORE$1\n}; // sanitization-related functions\n\nIdentifiers$1.sanitizeHtml = {\n  name: 'ɵɵsanitizeHtml',\n  moduleName: CORE$1\n};\nIdentifiers$1.sanitizeStyle = {\n  name: 'ɵɵsanitizeStyle',\n  moduleName: CORE$1\n};\nIdentifiers$1.sanitizeResourceUrl = {\n  name: 'ɵɵsanitizeResourceUrl',\n  moduleName: CORE$1\n};\nIdentifiers$1.sanitizeScript = {\n  name: 'ɵɵsanitizeScript',\n  moduleName: CORE$1\n};\nIdentifiers$1.sanitizeUrl = {\n  name: 'ɵɵsanitizeUrl',\n  moduleName: CORE$1\n};\nIdentifiers$1.sanitizeUrlOrResourceUrl = {\n  name: 'ɵɵsanitizeUrlOrResourceUrl',\n  moduleName: CORE$1\n};\nIdentifiers$1.trustConstantHtml = {\n  name: 'ɵɵtrustConstantHtml',\n  moduleName: CORE$1\n};\nIdentifiers$1.trustConstantResourceUrl = {\n  name: 'ɵɵtrustConstantResourceUrl',\n  moduleName: CORE$1\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n\nvar VERSION$1 = 3;\nvar JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\n\nvar SourceMapGenerator = /*#__PURE__*/function () {\n  function SourceMapGenerator() {\n    var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, SourceMapGenerator);\n\n    this.file = file;\n    this.sourcesContent = new Map();\n    this.lines = [];\n    this.lastCol0 = 0;\n    this.hasMappings = false;\n  } // The content is `null` when the content is expected to be loaded using the URL\n\n\n  _createClass(SourceMapGenerator, [{\n    key: \"addSource\",\n    value: function addSource(url) {\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (!this.sourcesContent.has(url)) {\n        this.sourcesContent.set(url, content);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"addLine\",\n    value: function addLine() {\n      this.lines.push([]);\n      this.lastCol0 = 0;\n      return this;\n    }\n  }, {\n    key: \"addMapping\",\n    value: function addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {\n      if (!this.currentLine) {\n        throw new Error(\"A line must be added before mappings can be added\");\n      }\n\n      if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n        throw new Error(\"Unknown source file \\\"\".concat(sourceUrl, \"\\\"\"));\n      }\n\n      if (col0 == null) {\n        throw new Error(\"The column in the generated code must be provided\");\n      }\n\n      if (col0 < this.lastCol0) {\n        throw new Error(\"Mapping should be added in output order\");\n      }\n\n      if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n        throw new Error(\"The source location must be provided when a source url is provided\");\n      }\n\n      this.hasMappings = true;\n      this.lastCol0 = col0;\n      this.currentLine.push({\n        col0: col0,\n        sourceUrl: sourceUrl,\n        sourceLine0: sourceLine0,\n        sourceCol0: sourceCol0\n      });\n      return this;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n\n  }, {\n    key: \"currentLine\",\n    get: function get() {\n      return this.lines.slice(-1)[0];\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _this66 = this;\n\n      if (!this.hasMappings) {\n        return null;\n      }\n\n      var sourcesIndex = new Map();\n      var sources = [];\n      var sourcesContent = [];\n      Array.from(this.sourcesContent.keys()).forEach(function (url, i) {\n        sourcesIndex.set(url, i);\n        sources.push(url);\n        sourcesContent.push(_this66.sourcesContent.get(url) || null);\n      });\n      var mappings = '';\n      var lastCol0 = 0;\n      var lastSourceIndex = 0;\n      var lastSourceLine0 = 0;\n      var lastSourceCol0 = 0;\n      this.lines.forEach(function (segments) {\n        lastCol0 = 0;\n        mappings += segments.map(function (segment) {\n          // zero-based starting column of the line in the generated code\n          var segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n          lastCol0 = segment.col0;\n\n          if (segment.sourceUrl != null) {\n            // zero-based index into the “sources” list\n            segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);\n            lastSourceIndex = sourcesIndex.get(segment.sourceUrl); // the zero-based starting line in the original source\n\n            segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);\n            lastSourceLine0 = segment.sourceLine0; // the zero-based starting column in the original source\n\n            segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);\n            lastSourceCol0 = segment.sourceCol0;\n          }\n\n          return segAsStr;\n        }).join(',');\n        mappings += ';';\n      });\n      mappings = mappings.slice(0, -1);\n      return {\n        'file': this.file || '',\n        'version': VERSION$1,\n        'sourceRoot': '',\n        'sources': sources,\n        'sourcesContent': sourcesContent,\n        'mappings': mappings\n      };\n    }\n  }, {\n    key: \"toJsComment\",\n    value: function toJsComment() {\n      return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : '';\n    }\n  }]);\n\n  return SourceMapGenerator;\n}();\n\nfunction toBase64String(value) {\n  var b64 = '';\n  var encoded = utf8Encode(value);\n\n  for (var i = 0; i < encoded.length;) {\n    var i1 = encoded[i++];\n    var i2 = i < encoded.length ? encoded[i++] : null;\n    var i3 = i < encoded.length ? encoded[i++] : null;\n    b64 += toBase64Digit(i1 >> 2);\n    b64 += toBase64Digit((i1 & 3) << 4 | (i2 === null ? 0 : i2 >> 4));\n    b64 += i2 === null ? '=' : toBase64Digit((i2 & 15) << 2 | (i3 === null ? 0 : i3 >> 6));\n    b64 += i2 === null || i3 === null ? '=' : toBase64Digit(i3 & 63);\n  }\n\n  return b64;\n}\n\nfunction toBase64VLQ(value) {\n  value = value < 0 ? (-value << 1) + 1 : value << 1;\n  var out = '';\n\n  do {\n    var digit = value & 31;\n    value = value >> 5;\n\n    if (value > 0) {\n      digit = digit | 32;\n    }\n\n    out += toBase64Digit(digit);\n  } while (value > 0);\n\n  return out;\n}\n\nvar B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfunction toBase64Digit(value) {\n  if (value < 0 || value >= 64) {\n    throw new Error(\"Can only encode value in the range [0, 63]\");\n  }\n\n  return B64_DIGITS[value];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nvar _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nvar _INDENT_WITH = '  ';\nvar CATCH_ERROR_VAR = variable('error', null, null);\nvar CATCH_STACK_VAR = variable('stack', null, null);\n\nvar _EmittedLine = function _EmittedLine(indent) {\n  _classCallCheck(this, _EmittedLine);\n\n  this.indent = indent;\n  this.partsLength = 0;\n  this.parts = [];\n  this.srcSpans = [];\n};\n\nvar EmitterVisitorContext = /*#__PURE__*/function () {\n  function EmitterVisitorContext(_indent) {\n    _classCallCheck(this, EmitterVisitorContext);\n\n    this._indent = _indent;\n    this._classes = [];\n    this._preambleLineCount = 0;\n    this._lines = [new _EmittedLine(_indent)];\n  }\n\n  _createClass(EmitterVisitorContext, [{\n    key: \"_currentLine\",\n    get:\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    function get() {\n      return this._lines[this._lines.length - 1];\n    }\n  }, {\n    key: \"println\",\n    value: function println(from) {\n      var lastPart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      this.print(from || null, lastPart, true);\n    }\n  }, {\n    key: \"lineIsEmpty\",\n    value: function lineIsEmpty() {\n      return this._currentLine.parts.length === 0;\n    }\n  }, {\n    key: \"lineLength\",\n    value: function lineLength() {\n      return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;\n    }\n  }, {\n    key: \"print\",\n    value: function print(from, part) {\n      var newLine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (part.length > 0) {\n        this._currentLine.parts.push(part);\n\n        this._currentLine.partsLength += part.length;\n\n        this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n      }\n\n      if (newLine) {\n        this._lines.push(new _EmittedLine(this._indent));\n      }\n    }\n  }, {\n    key: \"removeEmptyLastLine\",\n    value: function removeEmptyLastLine() {\n      if (this.lineIsEmpty()) {\n        this._lines.pop();\n      }\n    }\n  }, {\n    key: \"incIndent\",\n    value: function incIndent() {\n      this._indent++;\n\n      if (this.lineIsEmpty()) {\n        this._currentLine.indent = this._indent;\n      }\n    }\n  }, {\n    key: \"decIndent\",\n    value: function decIndent() {\n      this._indent--;\n\n      if (this.lineIsEmpty()) {\n        this._currentLine.indent = this._indent;\n      }\n    }\n  }, {\n    key: \"pushClass\",\n    value: function pushClass(clazz) {\n      this._classes.push(clazz);\n    }\n  }, {\n    key: \"popClass\",\n    value: function popClass() {\n      return this._classes.pop();\n    }\n  }, {\n    key: \"currentClass\",\n    get: function get() {\n      return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n    }\n  }, {\n    key: \"toSource\",\n    value: function toSource() {\n      return this.sourceLines.map(function (l) {\n        return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '';\n      }).join('\\n');\n    }\n  }, {\n    key: \"toSourceMapGenerator\",\n    value: function toSourceMapGenerator(genFilePath) {\n      var startsAtLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var map = new SourceMapGenerator(genFilePath);\n      var firstOffsetMapped = false;\n\n      var mapFirstOffsetIfNeeded = function mapFirstOffsetIfNeeded() {\n        if (!firstOffsetMapped) {\n          // Add a single space so that tools won't try to load the file from disk.\n          // Note: We are using virtual urls like `ng:///`, so we have to\n          // provide a content here.\n          map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);\n          firstOffsetMapped = true;\n        }\n      };\n\n      for (var i = 0; i < startsAtLine; i++) {\n        map.addLine();\n        mapFirstOffsetIfNeeded();\n      }\n\n      this.sourceLines.forEach(function (line, lineIdx) {\n        map.addLine();\n        var spans = line.srcSpans;\n        var parts = line.parts;\n        var col0 = line.indent * _INDENT_WITH.length;\n        var spanIdx = 0; // skip leading parts without source spans\n\n        while (spanIdx < spans.length && !spans[spanIdx]) {\n          col0 += parts[spanIdx].length;\n          spanIdx++;\n        }\n\n        if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {\n          firstOffsetMapped = true;\n        } else {\n          mapFirstOffsetIfNeeded();\n        }\n\n        while (spanIdx < spans.length) {\n          var span = spans[spanIdx];\n          var source = span.start.file;\n          var sourceLine = span.start.line;\n          var sourceCol = span.start.col;\n          map.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol);\n          col0 += parts[spanIdx].length;\n          spanIdx++; // assign parts without span or the same span to the previous segment\n\n          while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n            col0 += parts[spanIdx].length;\n            spanIdx++;\n          }\n        }\n      });\n      return map;\n    }\n  }, {\n    key: \"setPreambleLineCount\",\n    value: function setPreambleLineCount(count) {\n      return this._preambleLineCount = count;\n    }\n  }, {\n    key: \"spanOf\",\n    value: function spanOf(line, column) {\n      var emittedLine = this._lines[line - this._preambleLineCount];\n\n      if (emittedLine) {\n        var columnsLeft = column - _createIndent(emittedLine.indent).length;\n\n        for (var partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {\n          var part = emittedLine.parts[partIndex];\n\n          if (part.length > columnsLeft) {\n            return emittedLine.srcSpans[partIndex];\n          }\n\n          columnsLeft -= part.length;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n\n  }, {\n    key: \"sourceLines\",\n    get: function get() {\n      if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n        return this._lines.slice(0, -1);\n      }\n\n      return this._lines;\n    }\n  }], [{\n    key: \"createRoot\",\n    value: function createRoot() {\n      return new EmitterVisitorContext(0);\n    }\n  }]);\n\n  return EmitterVisitorContext;\n}();\n\nvar AbstractEmitterVisitor = /*#__PURE__*/function () {\n  function AbstractEmitterVisitor(_escapeDollarInStrings) {\n    _classCallCheck(this, AbstractEmitterVisitor);\n\n    this._escapeDollarInStrings = _escapeDollarInStrings;\n  }\n\n  _createClass(AbstractEmitterVisitor, [{\n    key: \"printLeadingComments\",\n    value: function printLeadingComments(stmt, ctx) {\n      if (stmt.leadingComments === undefined) {\n        return;\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(stmt.leadingComments),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var comment = _step3.value;\n\n          if (comment instanceof JSDocComment) {\n            ctx.print(stmt, \"/*\".concat(comment.toString(), \"*/\"), comment.trailingNewline);\n          } else {\n            if (comment.multiline) {\n              ctx.print(stmt, \"/* \".concat(comment.text, \" */\"), comment.trailingNewline);\n            } else {\n              comment.text.split('\\n').forEach(function (line) {\n                ctx.println(stmt, \"// \".concat(line));\n              });\n            }\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"visitExpressionStmt\",\n    value: function visitExpressionStmt(stmt, ctx) {\n      this.printLeadingComments(stmt, ctx);\n      stmt.expr.visitExpression(this, ctx);\n      ctx.println(stmt, ';');\n      return null;\n    }\n  }, {\n    key: \"visitReturnStmt\",\n    value: function visitReturnStmt(stmt, ctx) {\n      this.printLeadingComments(stmt, ctx);\n      ctx.print(stmt, \"return \");\n      stmt.value.visitExpression(this, ctx);\n      ctx.println(stmt, ';');\n      return null;\n    }\n  }, {\n    key: \"visitIfStmt\",\n    value: function visitIfStmt(stmt, ctx) {\n      this.printLeadingComments(stmt, ctx);\n      ctx.print(stmt, \"if (\");\n      stmt.condition.visitExpression(this, ctx);\n      ctx.print(stmt, \") {\");\n      var hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;\n\n      if (stmt.trueCase.length <= 1 && !hasElseCase) {\n        ctx.print(stmt, \" \");\n        this.visitAllStatements(stmt.trueCase, ctx);\n        ctx.removeEmptyLastLine();\n        ctx.print(stmt, \" \");\n      } else {\n        ctx.println();\n        ctx.incIndent();\n        this.visitAllStatements(stmt.trueCase, ctx);\n        ctx.decIndent();\n\n        if (hasElseCase) {\n          ctx.println(stmt, \"} else {\");\n          ctx.incIndent();\n          this.visitAllStatements(stmt.falseCase, ctx);\n          ctx.decIndent();\n        }\n      }\n\n      ctx.println(stmt, \"}\");\n      return null;\n    }\n  }, {\n    key: \"visitThrowStmt\",\n    value: function visitThrowStmt(stmt, ctx) {\n      this.printLeadingComments(stmt, ctx);\n      ctx.print(stmt, \"throw \");\n      stmt.error.visitExpression(this, ctx);\n      ctx.println(stmt, \";\");\n      return null;\n    }\n  }, {\n    key: \"visitWriteVarExpr\",\n    value: function visitWriteVarExpr(expr, ctx) {\n      var lineWasEmpty = ctx.lineIsEmpty();\n\n      if (!lineWasEmpty) {\n        ctx.print(expr, '(');\n      }\n\n      ctx.print(expr, \"\".concat(expr.name, \" = \"));\n      expr.value.visitExpression(this, ctx);\n\n      if (!lineWasEmpty) {\n        ctx.print(expr, ')');\n      }\n\n      return null;\n    }\n  }, {\n    key: \"visitWriteKeyExpr\",\n    value: function visitWriteKeyExpr(expr, ctx) {\n      var lineWasEmpty = ctx.lineIsEmpty();\n\n      if (!lineWasEmpty) {\n        ctx.print(expr, '(');\n      }\n\n      expr.receiver.visitExpression(this, ctx);\n      ctx.print(expr, \"[\");\n      expr.index.visitExpression(this, ctx);\n      ctx.print(expr, \"] = \");\n      expr.value.visitExpression(this, ctx);\n\n      if (!lineWasEmpty) {\n        ctx.print(expr, ')');\n      }\n\n      return null;\n    }\n  }, {\n    key: \"visitWritePropExpr\",\n    value: function visitWritePropExpr(expr, ctx) {\n      var lineWasEmpty = ctx.lineIsEmpty();\n\n      if (!lineWasEmpty) {\n        ctx.print(expr, '(');\n      }\n\n      expr.receiver.visitExpression(this, ctx);\n      ctx.print(expr, \".\".concat(expr.name, \" = \"));\n      expr.value.visitExpression(this, ctx);\n\n      if (!lineWasEmpty) {\n        ctx.print(expr, ')');\n      }\n\n      return null;\n    }\n  }, {\n    key: \"visitInvokeFunctionExpr\",\n    value: function visitInvokeFunctionExpr(expr, ctx) {\n      expr.fn.visitExpression(this, ctx);\n      ctx.print(expr, \"(\");\n      this.visitAllExpressions(expr.args, ctx, ',');\n      ctx.print(expr, \")\");\n      return null;\n    }\n  }, {\n    key: \"visitTaggedTemplateExpr\",\n    value: function visitTaggedTemplateExpr(expr, ctx) {\n      expr.tag.visitExpression(this, ctx);\n      ctx.print(expr, '`' + expr.template.elements[0].rawText);\n\n      for (var i = 1; i < expr.template.elements.length; i++) {\n        ctx.print(expr, '${');\n        expr.template.expressions[i - 1].visitExpression(this, ctx);\n        ctx.print(expr, \"}\".concat(expr.template.elements[i].rawText));\n      }\n\n      ctx.print(expr, '`');\n      return null;\n    }\n  }, {\n    key: \"visitWrappedNodeExpr\",\n    value: function visitWrappedNodeExpr(ast, ctx) {\n      throw new Error('Abstract emitter cannot visit WrappedNodeExpr.');\n    }\n  }, {\n    key: \"visitTypeofExpr\",\n    value: function visitTypeofExpr(expr, ctx) {\n      ctx.print(expr, 'typeof ');\n      expr.expr.visitExpression(this, ctx);\n    }\n  }, {\n    key: \"visitReadVarExpr\",\n    value: function visitReadVarExpr(ast, ctx) {\n      var varName = ast.name;\n\n      if (ast.builtin != null) {\n        switch (ast.builtin) {\n          case BuiltinVar.Super:\n            varName = 'super';\n            break;\n\n          case BuiltinVar.This:\n            varName = 'this';\n            break;\n\n          case BuiltinVar.CatchError:\n            varName = CATCH_ERROR_VAR.name;\n            break;\n\n          case BuiltinVar.CatchStack:\n            varName = CATCH_STACK_VAR.name;\n            break;\n\n          default:\n            throw new Error(\"Unknown builtin variable \".concat(ast.builtin));\n        }\n      }\n\n      ctx.print(ast, varName);\n      return null;\n    }\n  }, {\n    key: \"visitInstantiateExpr\",\n    value: function visitInstantiateExpr(ast, ctx) {\n      ctx.print(ast, \"new \");\n      ast.classExpr.visitExpression(this, ctx);\n      ctx.print(ast, \"(\");\n      this.visitAllExpressions(ast.args, ctx, ',');\n      ctx.print(ast, \")\");\n      return null;\n    }\n  }, {\n    key: \"visitLiteralExpr\",\n    value: function visitLiteralExpr(ast, ctx) {\n      var value = ast.value;\n\n      if (typeof value === 'string') {\n        ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n      } else {\n        ctx.print(ast, \"\".concat(value));\n      }\n\n      return null;\n    }\n  }, {\n    key: \"visitLocalizedString\",\n    value: function visitLocalizedString(ast, ctx) {\n      var head = ast.serializeI18nHead();\n      ctx.print(ast, '$localize `' + head.raw);\n\n      for (var i = 1; i < ast.messageParts.length; i++) {\n        ctx.print(ast, '${');\n        ast.expressions[i - 1].visitExpression(this, ctx);\n        ctx.print(ast, \"}\".concat(ast.serializeI18nTemplatePart(i).raw));\n      }\n\n      ctx.print(ast, '`');\n      return null;\n    }\n  }, {\n    key: \"visitConditionalExpr\",\n    value: function visitConditionalExpr(ast, ctx) {\n      ctx.print(ast, \"(\");\n      ast.condition.visitExpression(this, ctx);\n      ctx.print(ast, '? ');\n      ast.trueCase.visitExpression(this, ctx);\n      ctx.print(ast, ': ');\n      ast.falseCase.visitExpression(this, ctx);\n      ctx.print(ast, \")\");\n      return null;\n    }\n  }, {\n    key: \"visitNotExpr\",\n    value: function visitNotExpr(ast, ctx) {\n      ctx.print(ast, '!');\n      ast.condition.visitExpression(this, ctx);\n      return null;\n    }\n  }, {\n    key: \"visitAssertNotNullExpr\",\n    value: function visitAssertNotNullExpr(ast, ctx) {\n      ast.condition.visitExpression(this, ctx);\n      return null;\n    }\n  }, {\n    key: \"visitUnaryOperatorExpr\",\n    value: function visitUnaryOperatorExpr(ast, ctx) {\n      var opStr;\n\n      switch (ast.operator) {\n        case UnaryOperator.Plus:\n          opStr = '+';\n          break;\n\n        case UnaryOperator.Minus:\n          opStr = '-';\n          break;\n\n        default:\n          throw new Error(\"Unknown operator \".concat(ast.operator));\n      }\n\n      if (ast.parens) ctx.print(ast, \"(\");\n      ctx.print(ast, opStr);\n      ast.expr.visitExpression(this, ctx);\n      if (ast.parens) ctx.print(ast, \")\");\n      return null;\n    }\n  }, {\n    key: \"visitBinaryOperatorExpr\",\n    value: function visitBinaryOperatorExpr(ast, ctx) {\n      var opStr;\n\n      switch (ast.operator) {\n        case BinaryOperator.Equals:\n          opStr = '==';\n          break;\n\n        case BinaryOperator.Identical:\n          opStr = '===';\n          break;\n\n        case BinaryOperator.NotEquals:\n          opStr = '!=';\n          break;\n\n        case BinaryOperator.NotIdentical:\n          opStr = '!==';\n          break;\n\n        case BinaryOperator.And:\n          opStr = '&&';\n          break;\n\n        case BinaryOperator.BitwiseAnd:\n          opStr = '&';\n          break;\n\n        case BinaryOperator.Or:\n          opStr = '||';\n          break;\n\n        case BinaryOperator.Plus:\n          opStr = '+';\n          break;\n\n        case BinaryOperator.Minus:\n          opStr = '-';\n          break;\n\n        case BinaryOperator.Divide:\n          opStr = '/';\n          break;\n\n        case BinaryOperator.Multiply:\n          opStr = '*';\n          break;\n\n        case BinaryOperator.Modulo:\n          opStr = '%';\n          break;\n\n        case BinaryOperator.Lower:\n          opStr = '<';\n          break;\n\n        case BinaryOperator.LowerEquals:\n          opStr = '<=';\n          break;\n\n        case BinaryOperator.Bigger:\n          opStr = '>';\n          break;\n\n        case BinaryOperator.BiggerEquals:\n          opStr = '>=';\n          break;\n\n        case BinaryOperator.NullishCoalesce:\n          opStr = '??';\n          break;\n\n        default:\n          throw new Error(\"Unknown operator \".concat(ast.operator));\n      }\n\n      if (ast.parens) ctx.print(ast, \"(\");\n      ast.lhs.visitExpression(this, ctx);\n      ctx.print(ast, \" \".concat(opStr, \" \"));\n      ast.rhs.visitExpression(this, ctx);\n      if (ast.parens) ctx.print(ast, \")\");\n      return null;\n    }\n  }, {\n    key: \"visitReadPropExpr\",\n    value: function visitReadPropExpr(ast, ctx) {\n      ast.receiver.visitExpression(this, ctx);\n      ctx.print(ast, \".\");\n      ctx.print(ast, ast.name);\n      return null;\n    }\n  }, {\n    key: \"visitReadKeyExpr\",\n    value: function visitReadKeyExpr(ast, ctx) {\n      ast.receiver.visitExpression(this, ctx);\n      ctx.print(ast, \"[\");\n      ast.index.visitExpression(this, ctx);\n      ctx.print(ast, \"]\");\n      return null;\n    }\n  }, {\n    key: \"visitLiteralArrayExpr\",\n    value: function visitLiteralArrayExpr(ast, ctx) {\n      ctx.print(ast, \"[\");\n      this.visitAllExpressions(ast.entries, ctx, ',');\n      ctx.print(ast, \"]\");\n      return null;\n    }\n  }, {\n    key: \"visitLiteralMapExpr\",\n    value: function visitLiteralMapExpr(ast, ctx) {\n      var _this67 = this;\n\n      ctx.print(ast, \"{\");\n      this.visitAllObjects(function (entry) {\n        ctx.print(ast, \"\".concat(escapeIdentifier(entry.key, _this67._escapeDollarInStrings, entry.quoted), \":\"));\n        entry.value.visitExpression(_this67, ctx);\n      }, ast.entries, ctx, ',');\n      ctx.print(ast, \"}\");\n      return null;\n    }\n  }, {\n    key: \"visitCommaExpr\",\n    value: function visitCommaExpr(ast, ctx) {\n      ctx.print(ast, '(');\n      this.visitAllExpressions(ast.parts, ctx, ',');\n      ctx.print(ast, ')');\n      return null;\n    }\n  }, {\n    key: \"visitAllExpressions\",\n    value: function visitAllExpressions(expressions, ctx, separator) {\n      var _this68 = this;\n\n      this.visitAllObjects(function (expr) {\n        return expr.visitExpression(_this68, ctx);\n      }, expressions, ctx, separator);\n    }\n  }, {\n    key: \"visitAllObjects\",\n    value: function visitAllObjects(handler, expressions, ctx, separator) {\n      var incrementedIndent = false;\n\n      for (var i = 0; i < expressions.length; i++) {\n        if (i > 0) {\n          if (ctx.lineLength() > 80) {\n            ctx.print(null, separator, true);\n\n            if (!incrementedIndent) {\n              // continuation are marked with double indent.\n              ctx.incIndent();\n              ctx.incIndent();\n              incrementedIndent = true;\n            }\n          } else {\n            ctx.print(null, separator, false);\n          }\n        }\n\n        handler(expressions[i]);\n      }\n\n      if (incrementedIndent) {\n        // continuation are marked with double indent.\n        ctx.decIndent();\n        ctx.decIndent();\n      }\n    }\n  }, {\n    key: \"visitAllStatements\",\n    value: function visitAllStatements(statements, ctx) {\n      var _this69 = this;\n\n      statements.forEach(function (stmt) {\n        return stmt.visitStatement(_this69, ctx);\n      });\n    }\n  }]);\n\n  return AbstractEmitterVisitor;\n}();\n\nfunction escapeIdentifier(input, escapeDollar) {\n  var alwaysQuote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (input == null) {\n    return null;\n  }\n\n  var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {\n    if ((arguments.length <= 0 ? undefined : arguments[0]) == '$') {\n      return escapeDollar ? '\\\\$' : '$';\n    } else if ((arguments.length <= 0 ? undefined : arguments[0]) == '\\n') {\n      return '\\\\n';\n    } else if ((arguments.length <= 0 ? undefined : arguments[0]) == '\\r') {\n      return '\\\\r';\n    } else {\n      return \"\\\\\".concat(arguments.length <= 0 ? undefined : arguments[0]);\n    }\n  });\n  var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n  return requiresQuotes ? \"'\".concat(body, \"'\") : body;\n}\n\nfunction _createIndent(count) {\n  var res = '';\n\n  for (var i = 0; i < count; i++) {\n    res += _INDENT_WITH;\n  }\n\n  return res;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction typeWithParameters(type, numParams) {\n  if (numParams === 0) {\n    return expressionType(type);\n  }\n\n  var params = [];\n\n  for (var i = 0; i < numParams; i++) {\n    params.push(DYNAMIC_TYPE);\n  }\n\n  return expressionType(type, undefined, params);\n}\n\nvar ANIMATE_SYMBOL_PREFIX = '@';\n\nfunction prepareSyntheticPropertyName(name) {\n  return \"\".concat(ANIMATE_SYMBOL_PREFIX).concat(name);\n}\n\nfunction prepareSyntheticListenerName(name, phase) {\n  return \"\".concat(ANIMATE_SYMBOL_PREFIX).concat(name, \".\").concat(phase);\n}\n\nfunction getSafePropertyAccessString(accessor, name) {\n  var escapedName = escapeIdentifier(name, false, false);\n  return escapedName !== name ? \"\".concat(accessor, \"[\").concat(escapedName, \"]\") : \"\".concat(accessor, \".\").concat(name);\n}\n\nfunction prepareSyntheticListenerFunctionName(name, phase) {\n  return \"animation_\".concat(name, \"_\").concat(phase);\n}\n\nfunction jitOnlyGuardedExpression(expr) {\n  return guardedExpression('ngJitMode', expr);\n}\n\nfunction devOnlyGuardedExpression(expr) {\n  return guardedExpression('ngDevMode', expr);\n}\n\nfunction guardedExpression(guard, expr) {\n  var guardExpr = new ExternalExpr({\n    name: guard,\n    moduleName: null\n  });\n  var guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal('undefined'));\n  var guardUndefinedOrTrue = new BinaryOperatorExpr(BinaryOperator.Or, guardNotDefined, guardExpr,\n  /* type */\n  undefined,\n  /* sourceSpan */\n  undefined, true);\n  return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);\n}\n\nfunction wrapReference(value) {\n  var wrapped = new WrappedNodeExpr(value);\n  return {\n    value: wrapped,\n    type: wrapped\n  };\n}\n\nfunction refsToArray(refs, shouldForwardDeclare) {\n  var values = literalArr(refs.map(function (ref) {\n    return ref.value;\n  }));\n  return shouldForwardDeclare ? fn([], [new ReturnStatement(values)]) : values;\n}\n\nfunction createMayBeForwardRefExpression(expression, forwardRef) {\n  return {\n    expression: expression,\n    forwardRef: forwardRef\n  };\n}\n/**\n * Convert a `MaybeForwardRefExpression` to an `Expression`, possibly wrapping its expression in a\n * `forwardRef()` call.\n *\n * If `MaybeForwardRefExpression.forwardRef` is `ForwardRefHandling.Unwrapped` then the expression\n * was originally wrapped in a `forwardRef()` call to prevent the value from being eagerly evaluated\n * in the code.\n *\n * See `packages/compiler-cli/src/ngtsc/annotations/src/injectable.ts` and\n * `packages/compiler/src/jit_compiler_facade.ts` for more information.\n */\n\n\nfunction convertFromMaybeForwardRefExpression(_ref3) {\n  var expression = _ref3.expression,\n      forwardRef = _ref3.forwardRef;\n\n  switch (forwardRef) {\n    case 0\n    /* None */\n    :\n    case 1\n    /* Wrapped */\n    :\n      return expression;\n\n    case 2\n    /* Unwrapped */\n    :\n      return generateForwardRef(expression);\n  }\n}\n/**\n * Generate an expression that has the given `expr` wrapped in the following form:\n *\n * ```\n * forwardRef(() => expr)\n * ```\n */\n\n\nfunction generateForwardRef(expr) {\n  return importExpr(Identifiers$1.forwardRef).callFn([fn([], [new ReturnStatement(expr)])]);\n}\n\nvar R3FactoryDelegateType;\n\n(function (R3FactoryDelegateType) {\n  R3FactoryDelegateType[R3FactoryDelegateType[\"Class\"] = 0] = \"Class\";\n  R3FactoryDelegateType[R3FactoryDelegateType[\"Function\"] = 1] = \"Function\";\n})(R3FactoryDelegateType || (R3FactoryDelegateType = {}));\n\nvar FactoryTarget$1;\n\n(function (FactoryTarget) {\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget$1 || (FactoryTarget$1 = {}));\n/**\n * Construct a factory function expression for the given `R3FactoryMetadata`.\n */\n\n\nfunction compileFactoryFunction(meta) {\n  var t = variable('t');\n  var baseFactoryVar = null; // The type to instantiate via constructor invocation. If there is no delegated factory, meaning\n  // this type is always created by constructor invocation, then this is the type-to-create\n  // parameter provided by the user (t) if specified, or the current type if not. If there is a\n  // delegated factory (which is used to create the current type) then this is only the type-to-\n  // create parameter (t).\n\n  var typeForCtor = !isDelegatedFactoryMetadata(meta) ? new BinaryOperatorExpr(BinaryOperator.Or, t, meta.internalType) : t;\n  var ctorExpr = null;\n\n  if (meta.deps !== null) {\n    // There is a constructor (either explicitly or implicitly defined).\n    if (meta.deps !== 'invalid') {\n      ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.target));\n    }\n  } else {\n    // There is no constructor, use the base class' factory to construct typeForCtor.\n    baseFactoryVar = variable(\"\\u0275\".concat(meta.name, \"_BaseFactory\"));\n    ctorExpr = baseFactoryVar.callFn([typeForCtor]);\n  }\n\n  var body = [];\n  var retExpr = null;\n\n  function makeConditionalFactory(nonCtorExpr) {\n    var r = variable('r');\n    body.push(r.set(NULL_EXPR).toDeclStmt());\n    var ctorStmt = ctorExpr !== null ? r.set(ctorExpr).toStmt() : importExpr(Identifiers$1.invalidFactory).callFn([]).toStmt();\n    body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));\n    return r;\n  }\n\n  if (isDelegatedFactoryMetadata(meta)) {\n    // This type is created with a delegated factory. If a type parameter is not specified, call\n    // the factory instead.\n    var delegateArgs = injectDependencies(meta.delegateDeps, meta.target); // Either call `new delegate(...)` or `delegate(...)` depending on meta.delegateType.\n\n    var factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ? InstantiateExpr : InvokeFunctionExpr)(meta.delegate, delegateArgs);\n    retExpr = makeConditionalFactory(factoryExpr);\n  } else if (isExpressionFactoryMetadata(meta)) {\n    // TODO(alxhub): decide whether to lower the value here or in the caller\n    retExpr = makeConditionalFactory(meta.expression);\n  } else {\n    retExpr = ctorExpr;\n  }\n\n  if (retExpr === null) {\n    // The expression cannot be formed so render an `ɵɵinvalidFactory()` call.\n    body.push(importExpr(Identifiers$1.invalidFactory).callFn([]).toStmt());\n  } else if (baseFactoryVar !== null) {\n    // This factory uses a base factory, so call `ɵɵgetInheritedFactory()` to compute it.\n    var getInheritedFactoryCall = importExpr(Identifiers$1.getInheritedFactory).callFn([meta.internalType]); // Memoize the base factoryFn: `baseFactory || (baseFactory = ɵɵgetInheritedFactory(...))`\n\n    var baseFactory = new BinaryOperatorExpr(BinaryOperator.Or, baseFactoryVar, baseFactoryVar.set(getInheritedFactoryCall));\n    body.push(new ReturnStatement(baseFactory.callFn([typeForCtor])));\n  } else {\n    // This is straightforward factory, just return it.\n    body.push(new ReturnStatement(retExpr));\n  }\n\n  var factoryFn = fn([new FnParam('t', DYNAMIC_TYPE)], body, INFERRED_TYPE, undefined, \"\".concat(meta.name, \"_Factory\"));\n\n  if (baseFactoryVar !== null) {\n    // There is a base factory variable so wrap its declaration along with the factory function into\n    // an IIFE.\n    factoryFn = fn([], [new DeclareVarStmt(baseFactoryVar.name), new ReturnStatement(factoryFn)]).callFn([],\n    /* sourceSpan */\n    undefined,\n    /* pure */\n    true);\n  }\n\n  return {\n    expression: factoryFn,\n    statements: [],\n    type: createFactoryType(meta)\n  };\n}\n\nfunction createFactoryType(meta) {\n  var ctorDepsType = meta.deps !== null && meta.deps !== 'invalid' ? createCtorDepsType(meta.deps) : NONE_TYPE;\n  return expressionType(importExpr(Identifiers$1.FactoryDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount), ctorDepsType]));\n}\n\nfunction injectDependencies(deps, target) {\n  return deps.map(function (dep, index) {\n    return compileInjectDependency(dep, target, index);\n  });\n}\n\nfunction compileInjectDependency(dep, target, index) {\n  // Interpret the dependency according to its resolved type.\n  if (dep.token === null) {\n    return importExpr(Identifiers$1.invalidFactoryDep).callFn([literal(index)]);\n  } else if (dep.attributeNameType === null) {\n    // Build up the injection flags according to the metadata.\n    var flags = 0\n    /* Default */\n    | (dep.self ? 2\n    /* Self */\n    : 0) | (dep.skipSelf ? 4\n    /* SkipSelf */\n    : 0) | (dep.host ? 1\n    /* Host */\n    : 0) | (dep.optional ? 8\n    /* Optional */\n    : 0) | (target === FactoryTarget$1.Pipe ? 16\n    /* ForPipe */\n    : 0); // If this dependency is optional or otherwise has non-default flags, then additional\n    // parameters describing how to inject the dependency must be passed to the inject function\n    // that's being used.\n\n    var flagsParam = flags !== 0\n    /* Default */\n    || dep.optional ? literal(flags) : null; // Build up the arguments to the injectFn call.\n\n    var injectArgs = [dep.token];\n\n    if (flagsParam) {\n      injectArgs.push(flagsParam);\n    }\n\n    var injectFn = getInjectFn(target);\n    return importExpr(injectFn).callFn(injectArgs);\n  } else {\n    // The `dep.attributeTypeName` value is defined, which indicates that this is an `@Attribute()`\n    // type dependency. For the generated JS we still want to use the `dep.token` value in case the\n    // name given for the attribute is not a string literal. For example given `@Attribute(foo())`,\n    // we want to generate `ɵɵinjectAttribute(foo())`.\n    //\n    // The `dep.attributeTypeName` is only actually used (in `createCtorDepType()`) to generate\n    // typings.\n    return importExpr(Identifiers$1.injectAttribute).callFn([dep.token]);\n  }\n}\n\nfunction createCtorDepsType(deps) {\n  var hasTypes = false;\n  var attributeTypes = deps.map(function (dep) {\n    var type = createCtorDepType(dep);\n\n    if (type !== null) {\n      hasTypes = true;\n      return type;\n    } else {\n      return literal(null);\n    }\n  });\n\n  if (hasTypes) {\n    return expressionType(literalArr(attributeTypes));\n  } else {\n    return NONE_TYPE;\n  }\n}\n\nfunction createCtorDepType(dep) {\n  var entries = [];\n\n  if (dep.attributeNameType !== null) {\n    entries.push({\n      key: 'attribute',\n      value: dep.attributeNameType,\n      quoted: false\n    });\n  }\n\n  if (dep.optional) {\n    entries.push({\n      key: 'optional',\n      value: literal(true),\n      quoted: false\n    });\n  }\n\n  if (dep.host) {\n    entries.push({\n      key: 'host',\n      value: literal(true),\n      quoted: false\n    });\n  }\n\n  if (dep.self) {\n    entries.push({\n      key: 'self',\n      value: literal(true),\n      quoted: false\n    });\n  }\n\n  if (dep.skipSelf) {\n    entries.push({\n      key: 'skipSelf',\n      value: literal(true),\n      quoted: false\n    });\n  }\n\n  return entries.length > 0 ? literalMap(entries) : null;\n}\n\nfunction isDelegatedFactoryMetadata(meta) {\n  return meta.delegateType !== undefined;\n}\n\nfunction isExpressionFactoryMetadata(meta) {\n  return meta.expression !== undefined;\n}\n\nfunction getInjectFn(target) {\n  switch (target) {\n    case FactoryTarget$1.Component:\n    case FactoryTarget$1.Directive:\n    case FactoryTarget$1.Pipe:\n      return Identifiers$1.directiveInject;\n\n    case FactoryTarget$1.NgModule:\n    case FactoryTarget$1.Injectable:\n    default:\n      return Identifiers$1.inject;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This is an R3 `Node`-like wrapper for a raw `html.Comment` node. We do not currently\n * require the implementation of a visitor for Comments as they are only collected at\n * the top-level of the R3 AST, and only if `Render3ParseOptions['collectCommentNodes']`\n * is true.\n */\n\n\nvar Comment$1 = /*#__PURE__*/function () {\n  function Comment$1(value, sourceSpan) {\n    _classCallCheck(this, Comment$1);\n\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n\n  _createClass(Comment$1, [{\n    key: \"visit\",\n    value: function visit(_visitor) {\n      throw new Error('visit() not implemented for Comment');\n    }\n  }]);\n\n  return Comment$1;\n}();\n\nvar Text$3 = /*#__PURE__*/function () {\n  function Text$3(value, sourceSpan) {\n    _classCallCheck(this, Text$3);\n\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n\n  _createClass(Text$3, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitText(this);\n    }\n  }]);\n\n  return Text$3;\n}();\n\nvar BoundText = /*#__PURE__*/function () {\n  function BoundText(value, sourceSpan, i18n) {\n    _classCallCheck(this, BoundText);\n\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n  }\n\n  _createClass(BoundText, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitBoundText(this);\n    }\n  }]);\n\n  return BoundText;\n}();\n/**\n * Represents a text attribute in the template.\n *\n * `valueSpan` may not be present in cases where there is no value `<div a></div>`.\n * `keySpan` may also not be present for synthetic attributes from ICU expansions.\n */\n\n\nvar TextAttribute = /*#__PURE__*/function () {\n  function TextAttribute(name, value, sourceSpan, keySpan, valueSpan, i18n) {\n    _classCallCheck(this, TextAttribute);\n\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n    this.i18n = i18n;\n  }\n\n  _createClass(TextAttribute, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitTextAttribute(this);\n    }\n  }]);\n\n  return TextAttribute;\n}();\n\nvar BoundAttribute = /*#__PURE__*/function () {\n  function BoundAttribute(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n) {\n    _classCallCheck(this, BoundAttribute);\n\n    this.name = name;\n    this.type = type;\n    this.securityContext = securityContext;\n    this.value = value;\n    this.unit = unit;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n    this.i18n = i18n;\n  }\n\n  _createClass(BoundAttribute, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitBoundAttribute(this);\n    }\n  }], [{\n    key: \"fromBoundElementProperty\",\n    value: function fromBoundElementProperty(prop, i18n) {\n      if (prop.keySpan === undefined) {\n        throw new Error(\"Unexpected state: keySpan must be defined for bound attributes but was not for \".concat(prop.name, \": \").concat(prop.sourceSpan));\n      }\n\n      return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n);\n    }\n  }]);\n\n  return BoundAttribute;\n}();\n\nvar BoundEvent = /*#__PURE__*/function () {\n  function BoundEvent(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {\n    _classCallCheck(this, BoundEvent);\n\n    this.name = name;\n    this.type = type;\n    this.handler = handler;\n    this.target = target;\n    this.phase = phase;\n    this.sourceSpan = sourceSpan;\n    this.handlerSpan = handlerSpan;\n    this.keySpan = keySpan;\n  }\n\n  _createClass(BoundEvent, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitBoundEvent(this);\n    }\n  }], [{\n    key: \"fromParsedEvent\",\n    value: function fromParsedEvent(event) {\n      var target = event.type === 0\n      /* Regular */\n      ? event.targetOrPhase : null;\n      var phase = event.type === 1\n      /* Animation */\n      ? event.targetOrPhase : null;\n\n      if (event.keySpan === undefined) {\n        throw new Error(\"Unexpected state: keySpan must be defined for bound event but was not for \".concat(event.name, \": \").concat(event.sourceSpan));\n      }\n\n      return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);\n    }\n  }]);\n\n  return BoundEvent;\n}();\n\nvar Element$1 = /*#__PURE__*/function () {\n  function Element$1(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n    _classCallCheck(this, Element$1);\n\n    this.name = name;\n    this.attributes = attributes;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.children = children;\n    this.references = references;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n    this.i18n = i18n;\n  }\n\n  _createClass(Element$1, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitElement(this);\n    }\n  }]);\n\n  return Element$1;\n}();\n\nvar Template = /*#__PURE__*/function () {\n  function Template(tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n    _classCallCheck(this, Template);\n\n    this.tagName = tagName;\n    this.attributes = attributes;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.templateAttrs = templateAttrs;\n    this.children = children;\n    this.references = references;\n    this.variables = variables;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n    this.i18n = i18n;\n  }\n\n  _createClass(Template, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitTemplate(this);\n    }\n  }]);\n\n  return Template;\n}();\n\nvar Content = /*#__PURE__*/function () {\n  function Content(selector, attributes, sourceSpan, i18n) {\n    _classCallCheck(this, Content);\n\n    this.selector = selector;\n    this.attributes = attributes;\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n    this.name = 'ng-content';\n  }\n\n  _createClass(Content, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitContent(this);\n    }\n  }]);\n\n  return Content;\n}();\n\nvar Variable = /*#__PURE__*/function () {\n  function Variable(name, value, sourceSpan, keySpan, valueSpan) {\n    _classCallCheck(this, Variable);\n\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n  }\n\n  _createClass(Variable, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitVariable(this);\n    }\n  }]);\n\n  return Variable;\n}();\n\nvar Reference = /*#__PURE__*/function () {\n  function Reference(name, value, sourceSpan, keySpan, valueSpan) {\n    _classCallCheck(this, Reference);\n\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n  }\n\n  _createClass(Reference, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitReference(this);\n    }\n  }]);\n\n  return Reference;\n}();\n\nvar Icu$1 = /*#__PURE__*/function () {\n  function Icu$1(vars, placeholders, sourceSpan, i18n) {\n    _classCallCheck(this, Icu$1);\n\n    this.vars = vars;\n    this.placeholders = placeholders;\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n  }\n\n  _createClass(Icu$1, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitIcu(this);\n    }\n  }]);\n\n  return Icu$1;\n}();\n\nvar NullVisitor = /*#__PURE__*/function () {\n  function NullVisitor() {\n    _classCallCheck(this, NullVisitor);\n  }\n\n  _createClass(NullVisitor, [{\n    key: \"visitElement\",\n    value: function visitElement(element) {}\n  }, {\n    key: \"visitTemplate\",\n    value: function visitTemplate(template) {}\n  }, {\n    key: \"visitContent\",\n    value: function visitContent(content) {}\n  }, {\n    key: \"visitVariable\",\n    value: function visitVariable(variable) {}\n  }, {\n    key: \"visitReference\",\n    value: function visitReference(reference) {}\n  }, {\n    key: \"visitTextAttribute\",\n    value: function visitTextAttribute(attribute) {}\n  }, {\n    key: \"visitBoundAttribute\",\n    value: function visitBoundAttribute(attribute) {}\n  }, {\n    key: \"visitBoundEvent\",\n    value: function visitBoundEvent(attribute) {}\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {}\n  }, {\n    key: \"visitBoundText\",\n    value: function visitBoundText(text) {}\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {}\n  }]);\n\n  return NullVisitor;\n}();\n\nvar RecursiveVisitor$1 = /*#__PURE__*/function () {\n  function RecursiveVisitor$1() {\n    _classCallCheck(this, RecursiveVisitor$1);\n  }\n\n  _createClass(RecursiveVisitor$1, [{\n    key: \"visitElement\",\n    value: function visitElement(element) {\n      visitAll$1(this, element.attributes);\n      visitAll$1(this, element.inputs);\n      visitAll$1(this, element.outputs);\n      visitAll$1(this, element.children);\n      visitAll$1(this, element.references);\n    }\n  }, {\n    key: \"visitTemplate\",\n    value: function visitTemplate(template) {\n      visitAll$1(this, template.attributes);\n      visitAll$1(this, template.inputs);\n      visitAll$1(this, template.outputs);\n      visitAll$1(this, template.children);\n      visitAll$1(this, template.references);\n      visitAll$1(this, template.variables);\n    }\n  }, {\n    key: \"visitContent\",\n    value: function visitContent(content) {}\n  }, {\n    key: \"visitVariable\",\n    value: function visitVariable(variable) {}\n  }, {\n    key: \"visitReference\",\n    value: function visitReference(reference) {}\n  }, {\n    key: \"visitTextAttribute\",\n    value: function visitTextAttribute(attribute) {}\n  }, {\n    key: \"visitBoundAttribute\",\n    value: function visitBoundAttribute(attribute) {}\n  }, {\n    key: \"visitBoundEvent\",\n    value: function visitBoundEvent(attribute) {}\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {}\n  }, {\n    key: \"visitBoundText\",\n    value: function visitBoundText(text) {}\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {}\n  }]);\n\n  return RecursiveVisitor$1;\n}();\n\nvar TransformVisitor = /*#__PURE__*/function () {\n  function TransformVisitor() {\n    _classCallCheck(this, TransformVisitor);\n  }\n\n  _createClass(TransformVisitor, [{\n    key: \"visitElement\",\n    value: function visitElement(element) {\n      var newAttributes = transformAll(this, element.attributes);\n      var newInputs = transformAll(this, element.inputs);\n      var newOutputs = transformAll(this, element.outputs);\n      var newChildren = transformAll(this, element.children);\n      var newReferences = transformAll(this, element.references);\n\n      if (newAttributes != element.attributes || newInputs != element.inputs || newOutputs != element.outputs || newChildren != element.children || newReferences != element.references) {\n        return new Element$1(element.name, newAttributes, newInputs, newOutputs, newChildren, newReferences, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n      }\n\n      return element;\n    }\n  }, {\n    key: \"visitTemplate\",\n    value: function visitTemplate(template) {\n      var newAttributes = transformAll(this, template.attributes);\n      var newInputs = transformAll(this, template.inputs);\n      var newOutputs = transformAll(this, template.outputs);\n      var newTemplateAttrs = transformAll(this, template.templateAttrs);\n      var newChildren = transformAll(this, template.children);\n      var newReferences = transformAll(this, template.references);\n      var newVariables = transformAll(this, template.variables);\n\n      if (newAttributes != template.attributes || newInputs != template.inputs || newOutputs != template.outputs || newTemplateAttrs != template.templateAttrs || newChildren != template.children || newReferences != template.references || newVariables != template.variables) {\n        return new Template(template.tagName, newAttributes, newInputs, newOutputs, newTemplateAttrs, newChildren, newReferences, newVariables, template.sourceSpan, template.startSourceSpan, template.endSourceSpan);\n      }\n\n      return template;\n    }\n  }, {\n    key: \"visitContent\",\n    value: function visitContent(content) {\n      return content;\n    }\n  }, {\n    key: \"visitVariable\",\n    value: function visitVariable(variable) {\n      return variable;\n    }\n  }, {\n    key: \"visitReference\",\n    value: function visitReference(reference) {\n      return reference;\n    }\n  }, {\n    key: \"visitTextAttribute\",\n    value: function visitTextAttribute(attribute) {\n      return attribute;\n    }\n  }, {\n    key: \"visitBoundAttribute\",\n    value: function visitBoundAttribute(attribute) {\n      return attribute;\n    }\n  }, {\n    key: \"visitBoundEvent\",\n    value: function visitBoundEvent(attribute) {\n      return attribute;\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {\n      return text;\n    }\n  }, {\n    key: \"visitBoundText\",\n    value: function visitBoundText(text) {\n      return text;\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {\n      return icu;\n    }\n  }]);\n\n  return TransformVisitor;\n}();\n\nfunction visitAll$1(visitor, nodes) {\n  var result = [];\n\n  if (visitor.visit) {\n    var _iterator4 = _createForOfIteratorHelper(nodes),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var node = _step4.value;\n        var newNode = visitor.visit(node) || node.visit(visitor);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  } else {\n    var _iterator5 = _createForOfIteratorHelper(nodes),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _node = _step5.value;\n\n        var _newNode = _node.visit(visitor);\n\n        if (_newNode) {\n          result.push(_newNode);\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  }\n\n  return result;\n}\n\nfunction transformAll(visitor, nodes) {\n  var result = [];\n  var changed = false;\n\n  var _iterator6 = _createForOfIteratorHelper(nodes),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var node = _step6.value;\n      var newNode = node.visit(visitor);\n\n      if (newNode) {\n        result.push(newNode);\n      }\n\n      changed = changed || newNode != node;\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return changed ? result : nodes;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar Message =\n/**\n * @param nodes message AST\n * @param placeholders maps placeholder names to static content and their source spans\n * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n * @param meaning\n * @param description\n * @param customId\n */\nfunction Message(nodes, placeholders, placeholderToMessage, meaning, description, customId) {\n  _classCallCheck(this, Message);\n\n  this.nodes = nodes;\n  this.placeholders = placeholders;\n  this.placeholderToMessage = placeholderToMessage;\n  this.meaning = meaning;\n  this.description = description;\n  this.customId = customId;\n  this.id = this.customId;\n  /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */\n\n  this.legacyIds = [];\n  this.messageString = serializeMessage(this.nodes);\n\n  if (nodes.length) {\n    this.sources = [{\n      filePath: nodes[0].sourceSpan.start.file.url,\n      startLine: nodes[0].sourceSpan.start.line + 1,\n      startCol: nodes[0].sourceSpan.start.col + 1,\n      endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\n      endCol: nodes[0].sourceSpan.start.col + 1\n    }];\n  } else {\n    this.sources = [];\n  }\n};\n\nvar Text$2 = /*#__PURE__*/function () {\n  function Text$2(value, sourceSpan) {\n    _classCallCheck(this, Text$2);\n\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n\n  _createClass(Text$2, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitText(this, context);\n    }\n  }]);\n\n  return Text$2;\n}(); // TODO(vicb): do we really need this node (vs an array) ?\n\n\nvar Container = /*#__PURE__*/function () {\n  function Container(children, sourceSpan) {\n    _classCallCheck(this, Container);\n\n    this.children = children;\n    this.sourceSpan = sourceSpan;\n  }\n\n  _createClass(Container, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitContainer(this, context);\n    }\n  }]);\n\n  return Container;\n}();\n\nvar Icu = /*#__PURE__*/function () {\n  function Icu(expression, type, cases, sourceSpan) {\n    _classCallCheck(this, Icu);\n\n    this.expression = expression;\n    this.type = type;\n    this.cases = cases;\n    this.sourceSpan = sourceSpan;\n  }\n\n  _createClass(Icu, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitIcu(this, context);\n    }\n  }]);\n\n  return Icu;\n}();\n\nvar TagPlaceholder = /*#__PURE__*/function () {\n  function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, // TODO sourceSpan should cover all (we need a startSourceSpan and endSourceSpan)\n  sourceSpan, startSourceSpan, endSourceSpan) {\n    _classCallCheck(this, TagPlaceholder);\n\n    this.tag = tag;\n    this.attrs = attrs;\n    this.startName = startName;\n    this.closeName = closeName;\n    this.children = children;\n    this.isVoid = isVoid;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n  }\n\n  _createClass(TagPlaceholder, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitTagPlaceholder(this, context);\n    }\n  }]);\n\n  return TagPlaceholder;\n}();\n\nvar Placeholder = /*#__PURE__*/function () {\n  function Placeholder(value, name, sourceSpan) {\n    _classCallCheck(this, Placeholder);\n\n    this.value = value;\n    this.name = name;\n    this.sourceSpan = sourceSpan;\n  }\n\n  _createClass(Placeholder, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitPlaceholder(this, context);\n    }\n  }]);\n\n  return Placeholder;\n}();\n\nvar IcuPlaceholder = /*#__PURE__*/function () {\n  function IcuPlaceholder(value, name, sourceSpan) {\n    _classCallCheck(this, IcuPlaceholder);\n\n    this.value = value;\n    this.name = name;\n    this.sourceSpan = sourceSpan;\n  }\n\n  _createClass(IcuPlaceholder, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitIcuPlaceholder(this, context);\n    }\n  }]);\n\n  return IcuPlaceholder;\n}(); // Clone the AST\n\n\nvar CloneVisitor = /*#__PURE__*/function () {\n  function CloneVisitor() {\n    _classCallCheck(this, CloneVisitor);\n  }\n\n  _createClass(CloneVisitor, [{\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      return new Text$2(text.value, text.sourceSpan);\n    }\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container, context) {\n      var _this70 = this;\n\n      var children = container.children.map(function (n) {\n        return n.visit(_this70, context);\n      });\n      return new Container(children, container.sourceSpan);\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu, context) {\n      var _this71 = this;\n\n      var cases = {};\n      Object.keys(icu.cases).forEach(function (key) {\n        return cases[key] = icu.cases[key].visit(_this71, context);\n      });\n      var msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);\n      msg.expressionPlaceholder = icu.expressionPlaceholder;\n      return msg;\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph, context) {\n      var _this72 = this;\n\n      var children = ph.children.map(function (n) {\n        return n.visit(_this72, context);\n      });\n      return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph, context) {\n      return new Placeholder(ph.value, ph.name, ph.sourceSpan);\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, context) {\n      return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\n    }\n  }]);\n\n  return CloneVisitor;\n}(); // Visit all the nodes recursively\n\n\nvar RecurseVisitor = /*#__PURE__*/function () {\n  function RecurseVisitor() {\n    _classCallCheck(this, RecurseVisitor);\n  }\n\n  _createClass(RecurseVisitor, [{\n    key: \"visitText\",\n    value: function visitText(text, context) {}\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container, context) {\n      var _this73 = this;\n\n      container.children.forEach(function (child) {\n        return child.visit(_this73);\n      });\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu, context) {\n      var _this74 = this;\n\n      Object.keys(icu.cases).forEach(function (k) {\n        icu.cases[k].visit(_this74);\n      });\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph, context) {\n      var _this75 = this;\n\n      ph.children.forEach(function (child) {\n        return child.visit(_this75);\n      });\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph, context) {}\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, context) {}\n  }]);\n\n  return RecurseVisitor;\n}();\n/**\n * Serialize the message to the Localize backtick string format that would appear in compiled code.\n */\n\n\nfunction serializeMessage(messageNodes) {\n  var visitor = new LocalizeMessageStringVisitor();\n  var str = messageNodes.map(function (n) {\n    return n.visit(visitor);\n  }).join('');\n  return str;\n}\n\nvar LocalizeMessageStringVisitor = /*#__PURE__*/function () {\n  function LocalizeMessageStringVisitor() {\n    _classCallCheck(this, LocalizeMessageStringVisitor);\n  }\n\n  _createClass(LocalizeMessageStringVisitor, [{\n    key: \"visitText\",\n    value: function visitText(text) {\n      return text.value;\n    }\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container) {\n      var _this76 = this;\n\n      return container.children.map(function (child) {\n        return child.visit(_this76);\n      }).join('');\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {\n      var _this77 = this;\n\n      var strCases = Object.keys(icu.cases).map(function (k) {\n        return \"\".concat(k, \" {\").concat(icu.cases[k].visit(_this77), \"}\");\n      });\n      return \"{\".concat(icu.expressionPlaceholder, \", \").concat(icu.type, \", \").concat(strCases.join(' '), \"}\");\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph) {\n      var _this78 = this;\n\n      var children = ph.children.map(function (child) {\n        return child.visit(_this78);\n      }).join('');\n      return \"{$\".concat(ph.startName, \"}\").concat(children, \"{$\").concat(ph.closeName, \"}\");\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph) {\n      return \"{$\".concat(ph.name, \"}\");\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph) {\n      return \"{$\".concat(ph.name, \"}\");\n    }\n  }]);\n\n  return LocalizeMessageStringVisitor;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar Serializer = /*#__PURE__*/function () {\n  function Serializer() {\n    _classCallCheck(this, Serializer);\n  }\n\n  _createClass(Serializer, [{\n    key: \"createNameMapper\",\n    value: // Creates a name mapper, see `PlaceholderMapper`\n    // Returning `null` means that no name mapping is used.\n    function createNameMapper(message) {\n      return null;\n    }\n  }]);\n\n  return Serializer;\n}();\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\n\n\nvar SimplePlaceholderMapper = /*#__PURE__*/function (_RecurseVisitor) {\n  _inherits(SimplePlaceholderMapper, _RecurseVisitor);\n\n  var _super46 = _createSuper(SimplePlaceholderMapper);\n\n  // create a mapping from the message\n  function SimplePlaceholderMapper(message, mapName) {\n    var _this79;\n\n    _classCallCheck(this, SimplePlaceholderMapper);\n\n    _this79 = _super46.call(this);\n    _this79.mapName = mapName;\n    _this79.internalToPublic = {};\n    _this79.publicToNextId = {};\n    _this79.publicToInternal = {};\n    message.nodes.forEach(function (node) {\n      return node.visit(_assertThisInitialized(_this79));\n    });\n    return _this79;\n  }\n\n  _createClass(SimplePlaceholderMapper, [{\n    key: \"toPublicName\",\n    value: function toPublicName(internalName) {\n      return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;\n    }\n  }, {\n    key: \"toInternalName\",\n    value: function toInternalName(publicName) {\n      return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      return null;\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph, context) {\n      this.visitPlaceholderName(ph.startName);\n\n      _get(_getPrototypeOf(SimplePlaceholderMapper.prototype), \"visitTagPlaceholder\", this).call(this, ph, context);\n\n      this.visitPlaceholderName(ph.closeName);\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph, context) {\n      this.visitPlaceholderName(ph.name);\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, context) {\n      this.visitPlaceholderName(ph.name);\n    } // XMB placeholders could only contains A-Z, 0-9 and _\n\n  }, {\n    key: \"visitPlaceholderName\",\n    value: function visitPlaceholderName(internalName) {\n      if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n        return;\n      }\n\n      var publicName = this.mapName(internalName);\n\n      if (this.publicToInternal.hasOwnProperty(publicName)) {\n        // Create a new XMB when it has already been used\n        var nextId = this.publicToNextId[publicName];\n        this.publicToNextId[publicName] = nextId + 1;\n        publicName = \"\".concat(publicName, \"_\").concat(nextId);\n      } else {\n        this.publicToNextId[publicName] = 1;\n      }\n\n      this.internalToPublic[internalName] = publicName;\n      this.publicToInternal[publicName] = internalName;\n    }\n  }]);\n\n  return SimplePlaceholderMapper;\n}(RecurseVisitor);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _Visitor$2 = /*#__PURE__*/function () {\n  function _Visitor$2() {\n    _classCallCheck(this, _Visitor$2);\n  }\n\n  _createClass(_Visitor$2, [{\n    key: \"visitTag\",\n    value: function visitTag(tag) {\n      var _this80 = this;\n\n      var strAttrs = this._serializeAttributes(tag.attrs);\n\n      if (tag.children.length == 0) {\n        return \"<\".concat(tag.name).concat(strAttrs, \"/>\");\n      }\n\n      var strChildren = tag.children.map(function (node) {\n        return node.visit(_this80);\n      });\n      return \"<\".concat(tag.name).concat(strAttrs, \">\").concat(strChildren.join(''), \"</\").concat(tag.name, \">\");\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {\n      return text.value;\n    }\n  }, {\n    key: \"visitDeclaration\",\n    value: function visitDeclaration(decl) {\n      return \"<?xml\".concat(this._serializeAttributes(decl.attrs), \" ?>\");\n    }\n  }, {\n    key: \"_serializeAttributes\",\n    value: function _serializeAttributes(attrs) {\n      var strAttrs = Object.keys(attrs).map(function (name) {\n        return \"\".concat(name, \"=\\\"\").concat(attrs[name], \"\\\"\");\n      }).join(' ');\n      return strAttrs.length > 0 ? ' ' + strAttrs : '';\n    }\n  }, {\n    key: \"visitDoctype\",\n    value: function visitDoctype(doctype) {\n      return \"<!DOCTYPE \".concat(doctype.rootTag, \" [\\n\").concat(doctype.dtd, \"\\n]>\");\n    }\n  }]);\n\n  return _Visitor$2;\n}();\n\nvar _visitor = new _Visitor$2();\n\nfunction serialize(nodes) {\n  return nodes.map(function (node) {\n    return node.visit(_visitor);\n  }).join('');\n}\n\nvar Declaration = /*#__PURE__*/function () {\n  function Declaration(unescapedAttrs) {\n    var _this81 = this;\n\n    _classCallCheck(this, Declaration);\n\n    this.attrs = {};\n    Object.keys(unescapedAttrs).forEach(function (k) {\n      _this81.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n\n  _createClass(Declaration, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitDeclaration(this);\n    }\n  }]);\n\n  return Declaration;\n}();\n\nvar Doctype = /*#__PURE__*/function () {\n  function Doctype(rootTag, dtd) {\n    _classCallCheck(this, Doctype);\n\n    this.rootTag = rootTag;\n    this.dtd = dtd;\n  }\n\n  _createClass(Doctype, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitDoctype(this);\n    }\n  }]);\n\n  return Doctype;\n}();\n\nvar Tag = /*#__PURE__*/function () {\n  function Tag(name) {\n    var _this82 = this;\n\n    var unescapedAttrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, Tag);\n\n    this.name = name;\n    this.children = children;\n    this.attrs = {};\n    Object.keys(unescapedAttrs).forEach(function (k) {\n      _this82.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n\n  _createClass(Tag, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitTag(this);\n    }\n  }]);\n\n  return Tag;\n}();\n\nvar Text$1 = /*#__PURE__*/function () {\n  function Text$1(unescapedValue) {\n    _classCallCheck(this, Text$1);\n\n    this.value = escapeXml(unescapedValue);\n  }\n\n  _createClass(Text$1, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      return visitor.visitText(this);\n    }\n  }]);\n\n  return Text$1;\n}();\n\nvar CR = /*#__PURE__*/function (_Text$) {\n  _inherits(CR, _Text$);\n\n  var _super47 = _createSuper(CR);\n\n  function CR() {\n    var ws = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    _classCallCheck(this, CR);\n\n    return _super47.call(this, \"\\n\".concat(new Array(ws + 1).join(' ')));\n  }\n\n  return CR;\n}(Text$1);\n\nvar _ESCAPED_CHARS = [[/&/g, '&amp;'], [/\"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']]; // Escape `_ESCAPED_CHARS` characters in the given text with encoded entities\n\nfunction escapeXml(text) {\n  return _ESCAPED_CHARS.reduce(function (text, entry) {\n    return text.replace(entry[0], entry[1]);\n  }, text);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _MESSAGES_TAG = 'messagebundle';\nvar _MESSAGE_TAG = 'msg';\nvar _PLACEHOLDER_TAG$3 = 'ph';\nvar _EXAMPLE_TAG = 'ex';\nvar _SOURCE_TAG$2 = 'source';\nvar _DOCTYPE = \"<!ELEMENT messagebundle (msg)*>\\n<!ATTLIST messagebundle class CDATA #IMPLIED>\\n\\n<!ELEMENT msg (#PCDATA|ph|source)*>\\n<!ATTLIST msg id CDATA #IMPLIED>\\n<!ATTLIST msg seq CDATA #IMPLIED>\\n<!ATTLIST msg name CDATA #IMPLIED>\\n<!ATTLIST msg desc CDATA #IMPLIED>\\n<!ATTLIST msg meaning CDATA #IMPLIED>\\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\\n<!ATTLIST msg xml:space (default|preserve) \\\"default\\\">\\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\\n\\n<!ELEMENT source (#PCDATA)>\\n\\n<!ELEMENT ph (#PCDATA|ex)*>\\n<!ATTLIST ph name CDATA #REQUIRED>\\n\\n<!ELEMENT ex (#PCDATA)>\";\n\nvar Xmb = /*#__PURE__*/function (_Serializer) {\n  _inherits(Xmb, _Serializer);\n\n  var _super48 = _createSuper(Xmb);\n\n  function Xmb() {\n    _classCallCheck(this, Xmb);\n\n    return _super48.apply(this, arguments);\n  }\n\n  _createClass(Xmb, [{\n    key: \"write\",\n    value: function write(messages, locale) {\n      var exampleVisitor = new ExampleVisitor();\n      var visitor = new _Visitor$1();\n      var rootNode = new Tag(_MESSAGES_TAG);\n      messages.forEach(function (message) {\n        var attrs = {\n          id: message.id\n        };\n\n        if (message.description) {\n          attrs['desc'] = message.description;\n        }\n\n        if (message.meaning) {\n          attrs['meaning'] = message.meaning;\n        }\n\n        var sourceTags = [];\n        message.sources.forEach(function (source) {\n          sourceTags.push(new Tag(_SOURCE_TAG$2, {}, [new Text$1(\"\".concat(source.filePath, \":\").concat(source.startLine).concat(source.endLine !== source.startLine ? ',' + source.endLine : ''))]));\n        });\n        rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, [].concat(sourceTags, _toConsumableArray(visitor.serialize(message.nodes)))));\n      });\n      rootNode.children.push(new CR());\n      return serialize([new Declaration({\n        version: '1.0',\n        encoding: 'UTF-8'\n      }), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), exampleVisitor.addDefaultExamples(rootNode), new CR()]);\n    }\n  }, {\n    key: \"load\",\n    value: function load(content, url) {\n      throw new Error('Unsupported');\n    }\n  }, {\n    key: \"digest\",\n    value: function digest(message) {\n      return _digest2(message);\n    }\n  }, {\n    key: \"createNameMapper\",\n    value: function createNameMapper(message) {\n      return new SimplePlaceholderMapper(message, toPublicName);\n    }\n  }]);\n\n  return Xmb;\n}(Serializer);\n\nvar _Visitor$1 = /*#__PURE__*/function () {\n  function _Visitor$1() {\n    _classCallCheck(this, _Visitor$1);\n  }\n\n  _createClass(_Visitor$1, [{\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      return [new Text$1(text.value)];\n    }\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container, context) {\n      var _this83 = this;\n\n      var nodes = [];\n      container.children.forEach(function (node) {\n        return nodes.push.apply(nodes, _toConsumableArray(node.visit(_this83)));\n      });\n      return nodes;\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu, context) {\n      var _this84 = this;\n\n      var nodes = [new Text$1(\"{\".concat(icu.expressionPlaceholder, \", \").concat(icu.type, \", \"))];\n      Object.keys(icu.cases).forEach(function (c) {\n        nodes.push.apply(nodes, [new Text$1(\"\".concat(c, \" {\"))].concat(_toConsumableArray(icu.cases[c].visit(_this84)), [new Text$1(\"} \")]));\n      });\n      nodes.push(new Text$1(\"}\"));\n      return nodes;\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph, context) {\n      var startTagAsText = new Text$1(\"<\".concat(ph.tag, \">\"));\n      var startEx = new Tag(_EXAMPLE_TAG, {}, [startTagAsText]); // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n\n      var startTagPh = new Tag(_PLACEHOLDER_TAG$3, {\n        name: ph.startName\n      }, [startEx, startTagAsText]);\n\n      if (ph.isVoid) {\n        // void tags have no children nor closing tags\n        return [startTagPh];\n      }\n\n      var closeTagAsText = new Text$1(\"</\".concat(ph.tag, \">\"));\n      var closeEx = new Tag(_EXAMPLE_TAG, {}, [closeTagAsText]); // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n\n      var closeTagPh = new Tag(_PLACEHOLDER_TAG$3, {\n        name: ph.closeName\n      }, [closeEx, closeTagAsText]);\n      return [startTagPh].concat(_toConsumableArray(this.serialize(ph.children)), [closeTagPh]);\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph, context) {\n      var interpolationAsText = new Text$1(\"{{\".concat(ph.value, \"}}\")); // Example tag needs to be not-empty for TC.\n\n      var exTag = new Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);\n      return [// TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n      new Tag(_PLACEHOLDER_TAG$3, {\n        name: ph.name\n      }, [exTag, interpolationAsText])];\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, context) {\n      var icuExpression = ph.value.expression;\n      var icuType = ph.value.type;\n      var icuCases = Object.keys(ph.value.cases).map(function (value) {\n        return value + ' {...}';\n      }).join(' ');\n      var icuAsText = new Text$1(\"{\".concat(icuExpression, \", \").concat(icuType, \", \").concat(icuCases, \"}\"));\n      var exTag = new Tag(_EXAMPLE_TAG, {}, [icuAsText]);\n      return [// TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n      new Tag(_PLACEHOLDER_TAG$3, {\n        name: ph.name\n      }, [exTag, icuAsText])];\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(nodes) {\n      var _ref4,\n          _this85 = this;\n\n      return (_ref4 = []).concat.apply(_ref4, _toConsumableArray(nodes.map(function (node) {\n        return node.visit(_this85);\n      })));\n    }\n  }]);\n\n  return _Visitor$1;\n}();\n\nfunction _digest2(message) {\n  return decimalDigest(message);\n} // TC requires at least one non-empty example on placeholders\n\n\nvar ExampleVisitor = /*#__PURE__*/function () {\n  function ExampleVisitor() {\n    _classCallCheck(this, ExampleVisitor);\n  }\n\n  _createClass(ExampleVisitor, [{\n    key: \"addDefaultExamples\",\n    value: function addDefaultExamples(node) {\n      node.visit(this);\n      return node;\n    }\n  }, {\n    key: \"visitTag\",\n    value: function visitTag(tag) {\n      var _this86 = this;\n\n      if (tag.name === _PLACEHOLDER_TAG$3) {\n        if (!tag.children || tag.children.length == 0) {\n          var exText = new Text$1(tag.attrs['name'] || '...');\n          tag.children = [new Tag(_EXAMPLE_TAG, {}, [exText])];\n        }\n      } else if (tag.children) {\n        tag.children.forEach(function (node) {\n          return node.visit(_this86);\n        });\n      }\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {}\n  }, {\n    key: \"visitDeclaration\",\n    value: function visitDeclaration(decl) {}\n  }, {\n    key: \"visitDoctype\",\n    value: function visitDoctype(doctype) {}\n  }]);\n\n  return ExampleVisitor;\n}(); // XMB/XTB placeholders can only contain A-Z, 0-9 and _\n\n\nfunction toPublicName(internalName) {\n  return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* Closure variables holding messages must be named `MSG_[A-Z0-9]+` */\n\n\nvar CLOSURE_TRANSLATION_VAR_PREFIX = 'MSG_';\n/**\n * Prefix for non-`goog.getMsg` i18n-related vars.\n * Note: the prefix uses lowercase characters intentionally due to a Closure behavior that\n * considers variables like `I18N_0` as constants and throws an error when their value changes.\n */\n\nvar TRANSLATION_VAR_PREFIX = 'i18n_';\n/** Name of the i18n attributes **/\n\nvar I18N_ATTR = 'i18n';\nvar I18N_ATTR_PREFIX = 'i18n-';\n/** Prefix of var expressions used in ICUs */\n\nvar I18N_ICU_VAR_PREFIX = 'VAR_';\n/** Prefix of ICU expressions for post processing */\n\nvar I18N_ICU_MAPPING_PREFIX = 'I18N_EXP_';\n/** Placeholder wrapper for i18n expressions **/\n\nvar I18N_PLACEHOLDER_SYMBOL = '�';\n\nfunction isI18nAttribute(name) {\n  return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);\n}\n\nfunction isI18nRootNode(meta) {\n  return meta instanceof Message;\n}\n\nfunction isSingleI18nIcu(meta) {\n  return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu;\n}\n\nfunction hasI18nMeta(node) {\n  return !!node.i18n;\n}\n\nfunction hasI18nAttrs(element) {\n  return element.attrs.some(function (attr) {\n    return isI18nAttribute(attr.name);\n  });\n}\n\nfunction icuFromI18nMessage(message) {\n  return message.nodes[0];\n}\n\nfunction wrapI18nPlaceholder(content) {\n  var contextId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var blockId = contextId > 0 ? \":\".concat(contextId) : '';\n  return \"\".concat(I18N_PLACEHOLDER_SYMBOL).concat(content).concat(blockId).concat(I18N_PLACEHOLDER_SYMBOL);\n}\n\nfunction assembleI18nBoundString(strings) {\n  var bindingStartIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var contextId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (!strings.length) return '';\n  var acc = '';\n  var lastIdx = strings.length - 1;\n\n  for (var i = 0; i < lastIdx; i++) {\n    acc += \"\".concat(strings[i]).concat(wrapI18nPlaceholder(bindingStartIndex + i, contextId));\n  }\n\n  acc += strings[lastIdx];\n  return acc;\n}\n\nfunction getSeqNumberGenerator() {\n  var startsAt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var current = startsAt;\n  return function () {\n    return current++;\n  };\n}\n\nfunction placeholdersToParams(placeholders) {\n  var params = {};\n  placeholders.forEach(function (values, key) {\n    params[key] = literal(values.length > 1 ? \"[\".concat(values.join('|'), \"]\") : values[0]);\n  });\n  return params;\n}\n\nfunction updatePlaceholderMap(map, name) {\n  var current = map.get(name) || [];\n\n  for (var _len2 = arguments.length, values = new Array(_len2 > 2 ? _len2 - 2 : 0), _key3 = 2; _key3 < _len2; _key3++) {\n    values[_key3 - 2] = arguments[_key3];\n  }\n\n  current.push.apply(current, values);\n  map.set(name, current);\n}\n\nfunction assembleBoundTextPlaceholders(meta) {\n  var bindingStartIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var contextId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var startIdx = bindingStartIndex;\n  var placeholders = new Map();\n  var node = meta instanceof Message ? meta.nodes.find(function (node) {\n    return node instanceof Container;\n  }) : meta;\n\n  if (node) {\n    node.children.filter(function (child) {\n      return child instanceof Placeholder;\n    }).forEach(function (child, idx) {\n      var content = wrapI18nPlaceholder(startIdx + idx, contextId);\n      updatePlaceholderMap(placeholders, child.name, content);\n    });\n  }\n\n  return placeholders;\n}\n/**\n * Format the placeholder names in a map of placeholders to expressions.\n *\n * The placeholder names are converted from \"internal\" format (e.g. `START_TAG_DIV_1`) to \"external\"\n * format (e.g. `startTagDiv_1`).\n *\n * @param params A map of placeholder names to expressions.\n * @param useCamelCase whether to camelCase the placeholder name when formatting.\n * @returns A new map of formatted placeholder names to expressions.\n */\n\n\nfunction i18nFormatPlaceholderNames() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var useCamelCase = arguments.length > 1 ? arguments[1] : undefined;\n  var _params = {};\n\n  if (params && Object.keys(params).length) {\n    Object.keys(params).forEach(function (key) {\n      return _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key];\n    });\n  }\n\n  return _params;\n}\n/**\n * Converts internal placeholder names to public-facing format\n * (for example to use in goog.getMsg call).\n * Example: `START_TAG_DIV_1` is converted to `startTagDiv_1`.\n *\n * @param name The placeholder name that should be formatted\n * @returns Formatted placeholder name\n */\n\n\nfunction formatI18nPlaceholderName(name) {\n  var useCamelCase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var publicName = toPublicName(name);\n\n  if (!useCamelCase) {\n    return publicName;\n  }\n\n  var chunks = publicName.split('_');\n\n  if (chunks.length === 1) {\n    // if no \"_\" found - just lowercase the value\n    return name.toLowerCase();\n  }\n\n  var postfix; // eject last element if it's a number\n\n  if (/^\\d+$/.test(chunks[chunks.length - 1])) {\n    postfix = chunks.pop();\n  }\n\n  var raw = chunks.shift().toLowerCase();\n\n  if (chunks.length) {\n    raw += chunks.map(function (c) {\n      return c.charAt(0).toUpperCase() + c.slice(1).toLowerCase();\n    }).join('');\n  }\n\n  return postfix ? \"\".concat(raw, \"_\").concat(postfix) : raw;\n}\n/**\n * Generates a prefix for translation const name.\n *\n * @param extra Additional local prefix that should be injected into translation var name\n * @returns Complete translation const prefix\n */\n\n\nfunction getTranslationConstPrefix(extra) {\n  return \"\".concat(CLOSURE_TRANSLATION_VAR_PREFIX).concat(extra).toUpperCase();\n}\n/**\n * Generate AST to declare a variable. E.g. `var I18N_1;`.\n * @param variable the name of the variable to declare.\n */\n\n\nfunction declareI18nVariable(variable) {\n  return new DeclareVarStmt(variable.name, undefined, INFERRED_TYPE, undefined, variable.sourceSpan);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Checks whether an object key contains potentially unsafe chars, thus the key should be wrapped in\n * quotes. Note: we do not wrap all keys into quotes, as it may have impact on minification and may\n * bot work in some cases when object keys are mangled by minifier.\n *\n * TODO(FW-1136): this is a temporary solution, we need to come up with a better way of working with\n * inputs that contain potentially unsafe chars.\n */\n\n\nvar UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;\n/** Name of the temporary to use during data binding */\n\nvar TEMPORARY_NAME = '_t';\n/** Name of the context parameter passed into a template function */\n\nvar CONTEXT_NAME = 'ctx';\n/** Name of the RenderFlag passed into a template function */\n\nvar RENDER_FLAGS = 'rf';\n/** The prefix reference variables */\n\nvar REFERENCE_PREFIX = '_r';\n/** The name of the implicit context reference */\n\nvar IMPLICIT_REFERENCE = '$implicit';\n/** Non bindable attribute name **/\n\nvar NON_BINDABLE_ATTR = 'ngNonBindable';\n/** Name for the variable keeping track of the context returned by `ɵɵrestoreView`. */\n\nvar RESTORED_VIEW_CONTEXT_NAME = 'restoredCtx';\n/**\n * Creates an allocator for a temporary variable.\n *\n * A variable declaration is added to the statements the first time the allocator is invoked.\n */\n\nfunction temporaryAllocator(statements, name) {\n  var temp = null;\n  return function () {\n    if (!temp) {\n      statements.push(new DeclareVarStmt(TEMPORARY_NAME, undefined, DYNAMIC_TYPE));\n      temp = variable(name);\n    }\n\n    return temp;\n  };\n}\n\nfunction unsupported(feature) {\n  if (this) {\n    throw new Error(\"Builder \".concat(this.constructor.name, \" doesn't support \").concat(feature, \" yet\"));\n  }\n\n  throw new Error(\"Feature \".concat(feature, \" is not supported yet\"));\n}\n\nfunction invalid(arg) {\n  throw new Error(\"Invalid state: Visitor \".concat(this.constructor.name, \" doesn't handle \").concat(arg.constructor.name));\n}\n\nfunction asLiteral(value) {\n  if (Array.isArray(value)) {\n    return literalArr(value.map(asLiteral));\n  }\n\n  return literal(value, INFERRED_TYPE);\n}\n\nfunction conditionallyCreateMapObjectLiteral(keys, keepDeclared) {\n  if (Object.getOwnPropertyNames(keys).length > 0) {\n    return mapToExpression(keys, keepDeclared);\n  }\n\n  return null;\n}\n\nfunction mapToExpression(map, keepDeclared) {\n  return literalMap(Object.getOwnPropertyNames(map).map(function (key) {\n    // canonical syntax: `dirProp: publicProp`\n    // if there is no `:`, use dirProp = elProp\n    var value = map[key];\n    var declaredName;\n    var publicName;\n    var minifiedName;\n    var needsDeclaredName;\n\n    if (Array.isArray(value)) {\n      var _value = _slicedToArray(value, 2);\n\n      publicName = _value[0];\n      declaredName = _value[1];\n      minifiedName = key;\n      needsDeclaredName = publicName !== declaredName;\n    } else {\n      var _splitAtColon = splitAtColon(key, [key, value]);\n\n      var _splitAtColon2 = _slicedToArray(_splitAtColon, 2);\n\n      declaredName = _splitAtColon2[0];\n      publicName = _splitAtColon2[1];\n      minifiedName = declaredName; // Only include the declared name if extracted from the key, i.e. the key contains a colon.\n      // Otherwise the declared name should be omitted even if it is different from the public name,\n      // as it may have already been minified.\n\n      needsDeclaredName = publicName !== declaredName && key.includes(':');\n    }\n\n    return {\n      key: minifiedName,\n      // put quotes around keys that contain potentially unsafe characters\n      quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),\n      value: keepDeclared && needsDeclaredName ? literalArr([asLiteral(publicName), asLiteral(declaredName)]) : asLiteral(publicName)\n    };\n  }));\n}\n/**\n *  Remove trailing null nodes as they are implied.\n */\n\n\nfunction trimTrailingNulls(parameters) {\n  while (isNull(parameters[parameters.length - 1])) {\n    parameters.pop();\n  }\n\n  return parameters;\n}\n\nfunction getQueryPredicate(query, constantPool) {\n  if (Array.isArray(query.predicate)) {\n    var predicate = [];\n    query.predicate.forEach(function (selector) {\n      // Each item in predicates array may contain strings with comma-separated refs\n      // (for ex. 'ref, ref1, ..., refN'), thus we extract individual refs and store them\n      // as separate array entities\n      var selectors = selector.split(',').map(function (token) {\n        return literal(token.trim());\n      });\n      predicate.push.apply(predicate, _toConsumableArray(selectors));\n    });\n    return constantPool.getConstLiteral(literalArr(predicate), true);\n  } else {\n    // The original predicate may have been wrapped in a `forwardRef()` call.\n    switch (query.predicate.forwardRef) {\n      case 0\n      /* None */\n      :\n      case 2\n      /* Unwrapped */\n      :\n        return query.predicate.expression;\n\n      case 1\n      /* Wrapped */\n      :\n        return importExpr(Identifiers$1.resolveForwardRef).callFn([query.predicate.expression]);\n    }\n  }\n}\n/**\n * A representation for an object literal used during codegen of definition objects. The generic\n * type `T` allows to reference a documented type of the generated structure, such that the\n * property names that are set can be resolved to their documented declaration.\n */\n\n\nvar DefinitionMap = /*#__PURE__*/function () {\n  function DefinitionMap() {\n    _classCallCheck(this, DefinitionMap);\n\n    this.values = [];\n  }\n\n  _createClass(DefinitionMap, [{\n    key: \"set\",\n    value: function set(key, value) {\n      if (value) {\n        this.values.push({\n          key: key,\n          value: value,\n          quoted: false\n        });\n      }\n    }\n  }, {\n    key: \"toLiteralMap\",\n    value: function toLiteralMap() {\n      return literalMap(this.values);\n    }\n  }]);\n\n  return DefinitionMap;\n}();\n/**\n * Extract a map of properties to values for a given element or template node, which can be used\n * by the directive matching machinery.\n *\n * @param elOrTpl the element or template in question\n * @return an object set up for directive matching. For attributes on the element/template, this\n * object maps a property name to its (static) value. For any bindings, this map simply maps the\n * property name to an empty string.\n */\n\n\nfunction getAttrsForDirectiveMatching(elOrTpl) {\n  var attributesMap = {};\n\n  if (elOrTpl instanceof Template && elOrTpl.tagName !== 'ng-template') {\n    elOrTpl.templateAttrs.forEach(function (a) {\n      return attributesMap[a.name] = '';\n    });\n  } else {\n    elOrTpl.attributes.forEach(function (a) {\n      if (!isI18nAttribute(a.name)) {\n        attributesMap[a.name] = a.value;\n      }\n    });\n    elOrTpl.inputs.forEach(function (i) {\n      attributesMap[i.name] = '';\n    });\n    elOrTpl.outputs.forEach(function (o) {\n      attributesMap[o.name] = '';\n    });\n  }\n\n  return attributesMap;\n}\n/** Returns a call expression to a chained instruction, e.g. `property(params[0])(params[1])`. */\n\n\nfunction chainedInstruction(reference, calls, span) {\n  var expression = importExpr(reference, null, span);\n\n  if (calls.length > 0) {\n    for (var i = 0; i < calls.length; i++) {\n      expression = expression.callFn(calls[i], span);\n    }\n  } else {\n    // Add a blank invocation, in case the `calls` array is empty.\n    expression = expression.callFn([], span);\n  }\n\n  return expression;\n}\n/**\n * Gets the number of arguments expected to be passed to a generated instruction in the case of\n * interpolation instructions.\n * @param interpolation An interpolation ast\n */\n\n\nfunction getInterpolationArgsLength(interpolation) {\n  var expressions = interpolation.expressions,\n      strings = interpolation.strings;\n\n  if (expressions.length === 1 && strings.length === 2 && strings[0] === '' && strings[1] === '') {\n    // If the interpolation has one interpolated value, but the prefix and suffix are both empty\n    // strings, we only pass one argument, to a special instruction like `propertyInterpolate` or\n    // `textInterpolate`.\n    return 1;\n  } else {\n    return expressions.length + strings.length;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction _compileInjectable(meta, resolveForwardRefs) {\n  var result = null;\n  var factoryMeta = {\n    name: meta.name,\n    type: meta.type,\n    internalType: meta.internalType,\n    typeArgumentCount: meta.typeArgumentCount,\n    deps: [],\n    target: FactoryTarget$1.Injectable\n  };\n\n  if (meta.useClass !== undefined) {\n    // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is\n    // used to instantiate the class with dependencies injected, or deps are not specified and\n    // the factory of the class is used to instantiate it.\n    //\n    // A special case exists for useClass: Type where Type is the injectable type itself and no\n    // deps are specified, in which case 'useClass' is effectively ignored.\n    var useClassOnSelf = meta.useClass.expression.isEquivalent(meta.internalType);\n    var deps = undefined;\n\n    if (meta.deps !== undefined) {\n      deps = meta.deps;\n    }\n\n    if (deps !== undefined) {\n      // factory: () => new meta.useClass(...deps)\n      result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {\n        delegate: meta.useClass.expression,\n        delegateDeps: deps,\n        delegateType: R3FactoryDelegateType.Class\n      }));\n    } else if (useClassOnSelf) {\n      result = compileFactoryFunction(factoryMeta);\n    } else {\n      result = {\n        statements: [],\n        expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs)\n      };\n    }\n  } else if (meta.useFactory !== undefined) {\n    if (meta.deps !== undefined) {\n      result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {\n        delegate: meta.useFactory,\n        delegateDeps: meta.deps || [],\n        delegateType: R3FactoryDelegateType.Function\n      }));\n    } else {\n      result = {\n        statements: [],\n        expression: fn([], [new ReturnStatement(meta.useFactory.callFn([]))])\n      };\n    }\n  } else if (meta.useValue !== undefined) {\n    // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for\n    // client code because meta.useValue is an Expression which will be defined even if the actual\n    // value is undefined.\n    result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {\n      expression: meta.useValue.expression\n    }));\n  } else if (meta.useExisting !== undefined) {\n    // useExisting is an `inject` call on the existing token.\n    result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {\n      expression: importExpr(Identifiers$1.inject).callFn([meta.useExisting.expression])\n    }));\n  } else {\n    result = {\n      statements: [],\n      expression: delegateToFactory(meta.type.value, meta.internalType, resolveForwardRefs)\n    };\n  }\n\n  var token = meta.internalType;\n  var injectableProps = new DefinitionMap();\n  injectableProps.set('token', token);\n  injectableProps.set('factory', result.expression); // Only generate providedIn property if it has a non-null value\n\n  if (meta.providedIn.expression.value !== null) {\n    injectableProps.set('providedIn', convertFromMaybeForwardRefExpression(meta.providedIn));\n  }\n\n  var expression = importExpr(Identifiers$1.ɵɵdefineInjectable).callFn([injectableProps.toLiteralMap()], undefined, true);\n  return {\n    expression: expression,\n    type: createInjectableType(meta),\n    statements: result.statements\n  };\n}\n\nfunction createInjectableType(meta) {\n  return new ExpressionType(importExpr(Identifiers$1.InjectableDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount)]));\n}\n\nfunction delegateToFactory(type, internalType, unwrapForwardRefs) {\n  if (type.node === internalType.node) {\n    // The types are the same, so we can simply delegate directly to the type's factory.\n    // ```\n    // factory: type.ɵfac\n    // ```\n    return internalType.prop('ɵfac');\n  }\n\n  if (!unwrapForwardRefs) {\n    // The type is not wrapped in a `forwardRef()`, so we create a simple factory function that\n    // accepts a sub-type as an argument.\n    // ```\n    // factory: function(t) { return internalType.ɵfac(t); }\n    // ```\n    return createFactoryFunction(internalType);\n  } // The internalType is actually wrapped in a `forwardRef()` so we need to resolve that before\n  // calling its factory.\n  // ```\n  // factory: function(t) { return core.resolveForwardRef(type).ɵfac(t); }\n  // ```\n\n\n  var unwrappedType = importExpr(Identifiers$1.resolveForwardRef).callFn([internalType]);\n  return createFactoryFunction(unwrappedType);\n}\n\nfunction createFactoryFunction(type) {\n  return fn([new FnParam('t', DYNAMIC_TYPE)], [new ReturnStatement(type.prop('ɵfac').callFn([variable('t')]))]);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction assertArrayOfStrings(identifier, value) {\n  if (value == null) {\n    return;\n  }\n\n  if (!Array.isArray(value)) {\n    throw new Error(\"Expected '\".concat(identifier, \"' to be an array of strings.\"));\n  }\n\n  for (var i = 0; i < value.length; i += 1) {\n    if (typeof value[i] !== 'string') {\n      throw new Error(\"Expected '\".concat(identifier, \"' to be an array of strings.\"));\n    }\n  }\n}\n\nvar UNUSABLE_INTERPOLATION_REGEXPS = [/^\\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\\/\\// // comment\n];\n\nfunction assertInterpolationSymbols(identifier, value) {\n  if (value != null && !(Array.isArray(value) && value.length == 2)) {\n    throw new Error(\"Expected '\".concat(identifier, \"' to be an array, [start, end].\"));\n  } else if (value != null) {\n    var start = value[0];\n    var end = value[1]; // Check for unusable interpolation symbols\n\n    UNUSABLE_INTERPOLATION_REGEXPS.forEach(function (regexp) {\n      if (regexp.test(start) || regexp.test(end)) {\n        throw new Error(\"['\".concat(start, \"', '\").concat(end, \"'] contains unusable interpolation symbol.\"));\n      }\n    });\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar InterpolationConfig = /*#__PURE__*/function () {\n  function InterpolationConfig(start, end) {\n    _classCallCheck(this, InterpolationConfig);\n\n    this.start = start;\n    this.end = end;\n  }\n\n  _createClass(InterpolationConfig, null, [{\n    key: \"fromArray\",\n    value: function fromArray(markers) {\n      if (!markers) {\n        return DEFAULT_INTERPOLATION_CONFIG;\n      }\n\n      assertInterpolationSymbols('interpolation', markers);\n      return new InterpolationConfig(markers[0], markers[1]);\n    }\n  }]);\n\n  return InterpolationConfig;\n}();\n\nvar DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar $EOF = 0;\nvar $BSPACE = 8;\nvar $TAB = 9;\nvar $LF = 10;\nvar $VTAB = 11;\nvar $FF = 12;\nvar $CR = 13;\nvar $SPACE = 32;\nvar $BANG = 33;\nvar $DQ = 34;\nvar $HASH = 35;\nvar $$ = 36;\nvar $PERCENT = 37;\nvar $AMPERSAND = 38;\nvar $SQ = 39;\nvar $LPAREN = 40;\nvar $RPAREN = 41;\nvar $STAR = 42;\nvar $PLUS = 43;\nvar $COMMA = 44;\nvar $MINUS = 45;\nvar $PERIOD = 46;\nvar $SLASH = 47;\nvar $COLON = 58;\nvar $SEMICOLON = 59;\nvar $LT = 60;\nvar $EQ = 61;\nvar $GT = 62;\nvar $QUESTION = 63;\nvar $0 = 48;\nvar $7 = 55;\nvar $9 = 57;\nvar $A = 65;\nvar $E = 69;\nvar $F = 70;\nvar $X = 88;\nvar $Z = 90;\nvar $LBRACKET = 91;\nvar $BACKSLASH = 92;\nvar $RBRACKET = 93;\nvar $CARET = 94;\nvar $_ = 95;\nvar $a = 97;\nvar $b = 98;\nvar $e = 101;\nvar $f = 102;\nvar $n = 110;\nvar $r = 114;\nvar $t = 116;\nvar $u = 117;\nvar $v = 118;\nvar $x = 120;\nvar $z = 122;\nvar $LBRACE = 123;\nvar $BAR = 124;\nvar $RBRACE = 125;\nvar $NBSP = 160;\nvar $PIPE = 124;\nvar $TILDA = 126;\nvar $AT = 64;\nvar $BT = 96;\n\nfunction isWhitespace(code) {\n  return code >= $TAB && code <= $SPACE || code == $NBSP;\n}\n\nfunction isDigit(code) {\n  return $0 <= code && code <= $9;\n}\n\nfunction isAsciiLetter(code) {\n  return code >= $a && code <= $z || code >= $A && code <= $Z;\n}\n\nfunction isAsciiHexDigit(code) {\n  return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n}\n\nfunction isNewLine(code) {\n  return code === $LF || code === $CR;\n}\n\nfunction isOctalDigit(code) {\n  return $0 <= code && code <= $7;\n}\n\nfunction isQuote(code) {\n  return code === $SQ || code === $DQ || code === $BT;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar ParseLocation = /*#__PURE__*/function () {\n  function ParseLocation(file, offset, line, col) {\n    _classCallCheck(this, ParseLocation);\n\n    this.file = file;\n    this.offset = offset;\n    this.line = line;\n    this.col = col;\n  }\n\n  _createClass(ParseLocation, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.offset != null ? \"\".concat(this.file.url, \"@\").concat(this.line, \":\").concat(this.col) : this.file.url;\n    }\n  }, {\n    key: \"moveBy\",\n    value: function moveBy(delta) {\n      var source = this.file.content;\n      var len = source.length;\n      var offset = this.offset;\n      var line = this.line;\n      var col = this.col;\n\n      while (offset > 0 && delta < 0) {\n        offset--;\n        delta++;\n        var ch = source.charCodeAt(offset);\n\n        if (ch == $LF) {\n          line--;\n          var priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));\n          col = priorLine > 0 ? offset - priorLine : offset;\n        } else {\n          col--;\n        }\n      }\n\n      while (offset < len && delta > 0) {\n        var _ch = source.charCodeAt(offset);\n\n        offset++;\n        delta--;\n\n        if (_ch == $LF) {\n          line++;\n          col = 0;\n        } else {\n          col++;\n        }\n      }\n\n      return new ParseLocation(this.file, offset, line, col);\n    } // Return the source around the location\n    // Up to `maxChars` or `maxLines` on each side of the location\n\n  }, {\n    key: \"getContext\",\n    value: function getContext(maxChars, maxLines) {\n      var content = this.file.content;\n      var startOffset = this.offset;\n\n      if (startOffset != null) {\n        if (startOffset > content.length - 1) {\n          startOffset = content.length - 1;\n        }\n\n        var endOffset = startOffset;\n        var ctxChars = 0;\n        var ctxLines = 0;\n\n        while (ctxChars < maxChars && startOffset > 0) {\n          startOffset--;\n          ctxChars++;\n\n          if (content[startOffset] == '\\n') {\n            if (++ctxLines == maxLines) {\n              break;\n            }\n          }\n        }\n\n        ctxChars = 0;\n        ctxLines = 0;\n\n        while (ctxChars < maxChars && endOffset < content.length - 1) {\n          endOffset++;\n          ctxChars++;\n\n          if (content[endOffset] == '\\n') {\n            if (++ctxLines == maxLines) {\n              break;\n            }\n          }\n        }\n\n        return {\n          before: content.substring(startOffset, this.offset),\n          after: content.substring(this.offset, endOffset + 1)\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return ParseLocation;\n}();\n\nvar ParseSourceFile = function ParseSourceFile(content, url) {\n  _classCallCheck(this, ParseSourceFile);\n\n  this.content = content;\n  this.url = url;\n};\n\nvar ParseSourceSpan = /*#__PURE__*/function () {\n  /**\n   * Create an object that holds information about spans of tokens/nodes captured during\n   * lexing/parsing of text.\n   *\n   * @param start\n   * The location of the start of the span (having skipped leading trivia).\n   * Skipping leading trivia makes source-spans more \"user friendly\", since things like HTML\n   * elements will appear to begin at the start of the opening tag, rather than at the start of any\n   * leading trivia, which could include newlines.\n   *\n   * @param end\n   * The location of the end of the span.\n   *\n   * @param fullStart\n   * The start of the token without skipping the leading trivia.\n   * This is used by tooling that splits tokens further, such as extracting Angular interpolations\n   * from text tokens. Such tooling creates new source-spans relative to the original token's\n   * source-span. If leading trivia characters have been skipped then the new source-spans may be\n   * incorrectly offset.\n   *\n   * @param details\n   * Additional information (such as identifier names) that should be associated with the span.\n   */\n  function ParseSourceSpan(start, end) {\n    var fullStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : start;\n    var details = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    _classCallCheck(this, ParseSourceSpan);\n\n    this.start = start;\n    this.end = end;\n    this.fullStart = fullStart;\n    this.details = details;\n  }\n\n  _createClass(ParseSourceSpan, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.start.file.content.substring(this.start.offset, this.end.offset);\n    }\n  }]);\n\n  return ParseSourceSpan;\n}();\n\nvar ParseErrorLevel;\n\n(function (ParseErrorLevel) {\n  ParseErrorLevel[ParseErrorLevel[\"WARNING\"] = 0] = \"WARNING\";\n  ParseErrorLevel[ParseErrorLevel[\"ERROR\"] = 1] = \"ERROR\";\n})(ParseErrorLevel || (ParseErrorLevel = {}));\n\nvar ParseError = /*#__PURE__*/function () {\n  function ParseError(span, msg) {\n    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseErrorLevel.ERROR;\n\n    _classCallCheck(this, ParseError);\n\n    this.span = span;\n    this.msg = msg;\n    this.level = level;\n  }\n\n  _createClass(ParseError, [{\n    key: \"contextualMessage\",\n    value: function contextualMessage() {\n      var ctx = this.span.start.getContext(100, 3);\n      return ctx ? \"\".concat(this.msg, \" (\\\"\").concat(ctx.before, \"[\").concat(ParseErrorLevel[this.level], \" ->]\").concat(ctx.after, \"\\\")\") : this.msg;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var details = this.span.details ? \", \".concat(this.span.details) : '';\n      return \"\".concat(this.contextualMessage(), \": \").concat(this.span.start).concat(details);\n    }\n  }]);\n\n  return ParseError;\n}();\n/**\n * Generates Source Span object for a given R3 Type for JIT mode.\n *\n * @param kind Component or Directive.\n * @param typeName name of the Component or Directive.\n * @param sourceUrl reference to Component or Directive source.\n * @returns instance of ParseSourceSpan that represent a given Component or Directive.\n */\n\n\nfunction r3JitTypeSourceSpan(kind, typeName, sourceUrl) {\n  var sourceFileName = \"in \".concat(kind, \" \").concat(typeName, \" in \").concat(sourceUrl);\n  var sourceFile = new ParseSourceFile('', sourceFileName);\n  return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\n\nfunction syntaxError(msg, parseErrors) {\n  var error = Error(msg);\n  error[ERROR_SYNTAX_ERROR] = true;\n  if (parseErrors) error[ERROR_PARSE_ERRORS] = parseErrors;\n  return error;\n}\n\nvar ERROR_SYNTAX_ERROR = 'ngSyntaxError';\nvar ERROR_PARSE_ERRORS = 'ngParseErrors';\n\nfunction isSyntaxError(error) {\n  return error[ERROR_SYNTAX_ERROR];\n}\n\nfunction getParseErrors(error) {\n  return error[ERROR_PARSE_ERRORS] || [];\n}\n\nvar _anonymousTypeIndex = 0;\n\nfunction identifierName(compileIdentifier) {\n  if (!compileIdentifier || !compileIdentifier.reference) {\n    return null;\n  }\n\n  var ref = compileIdentifier.reference;\n\n  if (ref['__anonymousType']) {\n    return ref['__anonymousType'];\n  }\n\n  if (ref['__forward_ref__']) {\n    // We do not want to try to stringify a `forwardRef()` function because that would cause the\n    // inner function to be evaluated too early, defeating the whole point of the `forwardRef`.\n    return '__forward_ref__';\n  }\n\n  var identifier = stringify(ref);\n\n  if (identifier.indexOf('(') >= 0) {\n    // case: anonymous functions!\n    identifier = \"anonymous_\".concat(_anonymousTypeIndex++);\n    ref['__anonymousType'] = identifier;\n  } else {\n    identifier = sanitizeIdentifier(identifier);\n  }\n\n  return identifier;\n}\n\nfunction sanitizeIdentifier(name) {\n  return name.replace(/\\W/g, '_');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * In TypeScript, tagged template functions expect a \"template object\", which is an array of\n * \"cooked\" strings plus a `raw` property that contains an array of \"raw\" strings. This is\n * typically constructed with a function called `__makeTemplateObject(cooked, raw)`, but it may not\n * be available in all environments.\n *\n * This is a JavaScript polyfill that uses __makeTemplateObject when it's available, but otherwise\n * creates an inline helper with the same functionality.\n *\n * In the inline function, if `Object.defineProperty` is available we use that to attach the `raw`\n * array.\n */\n\n\nvar makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,\"raw\",{value:t}):e.raw=t,e})';\n\nvar AbstractJsEmitterVisitor = /*#__PURE__*/function (_AbstractEmitterVisit) {\n  _inherits(AbstractJsEmitterVisitor, _AbstractEmitterVisit);\n\n  var _super49 = _createSuper(AbstractJsEmitterVisitor);\n\n  function AbstractJsEmitterVisitor() {\n    _classCallCheck(this, AbstractJsEmitterVisitor);\n\n    return _super49.call(this, false);\n  }\n\n  _createClass(AbstractJsEmitterVisitor, [{\n    key: \"visitDeclareClassStmt\",\n    value: function visitDeclareClassStmt(stmt, ctx) {\n      var _this87 = this;\n\n      ctx.pushClass(stmt);\n\n      this._visitClassConstructor(stmt, ctx);\n\n      if (stmt.parent != null) {\n        ctx.print(stmt, \"\".concat(stmt.name, \".prototype = Object.create(\"));\n        stmt.parent.visitExpression(this, ctx);\n        ctx.println(stmt, \".prototype);\");\n      }\n\n      stmt.getters.forEach(function (getter) {\n        return _this87._visitClassGetter(stmt, getter, ctx);\n      });\n      stmt.methods.forEach(function (method) {\n        return _this87._visitClassMethod(stmt, method, ctx);\n      });\n      ctx.popClass();\n      return null;\n    }\n  }, {\n    key: \"_visitClassConstructor\",\n    value: function _visitClassConstructor(stmt, ctx) {\n      ctx.print(stmt, \"function \".concat(stmt.name, \"(\"));\n\n      if (stmt.constructorMethod != null) {\n        this._visitParams(stmt.constructorMethod.params, ctx);\n      }\n\n      ctx.println(stmt, \") {\");\n      ctx.incIndent();\n\n      if (stmt.constructorMethod != null) {\n        if (stmt.constructorMethod.body.length > 0) {\n          ctx.println(stmt, \"var self = this;\");\n          this.visitAllStatements(stmt.constructorMethod.body, ctx);\n        }\n      }\n\n      ctx.decIndent();\n      ctx.println(stmt, \"}\");\n    }\n  }, {\n    key: \"_visitClassGetter\",\n    value: function _visitClassGetter(stmt, getter, ctx) {\n      ctx.println(stmt, \"Object.defineProperty(\".concat(stmt.name, \".prototype, '\").concat(getter.name, \"', { get: function() {\"));\n      ctx.incIndent();\n\n      if (getter.body.length > 0) {\n        ctx.println(stmt, \"var self = this;\");\n        this.visitAllStatements(getter.body, ctx);\n      }\n\n      ctx.decIndent();\n      ctx.println(stmt, \"}});\");\n    }\n  }, {\n    key: \"_visitClassMethod\",\n    value: function _visitClassMethod(stmt, method, ctx) {\n      ctx.print(stmt, \"\".concat(stmt.name, \".prototype.\").concat(method.name, \" = function(\"));\n\n      this._visitParams(method.params, ctx);\n\n      ctx.println(stmt, \") {\");\n      ctx.incIndent();\n\n      if (method.body.length > 0) {\n        ctx.println(stmt, \"var self = this;\");\n        this.visitAllStatements(method.body, ctx);\n      }\n\n      ctx.decIndent();\n      ctx.println(stmt, \"};\");\n    }\n  }, {\n    key: \"visitWrappedNodeExpr\",\n    value: function visitWrappedNodeExpr(ast, ctx) {\n      throw new Error('Cannot emit a WrappedNodeExpr in Javascript.');\n    }\n  }, {\n    key: \"visitReadVarExpr\",\n    value: function visitReadVarExpr(ast, ctx) {\n      if (ast.builtin === BuiltinVar.This) {\n        ctx.print(ast, 'self');\n      } else if (ast.builtin === BuiltinVar.Super) {\n        throw new Error(\"'super' needs to be handled at a parent ast node, not at the variable level!\");\n      } else {\n        _get(_getPrototypeOf(AbstractJsEmitterVisitor.prototype), \"visitReadVarExpr\", this).call(this, ast, ctx);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"visitDeclareVarStmt\",\n    value: function visitDeclareVarStmt(stmt, ctx) {\n      ctx.print(stmt, \"var \".concat(stmt.name));\n\n      if (stmt.value) {\n        ctx.print(stmt, ' = ');\n        stmt.value.visitExpression(this, ctx);\n      }\n\n      ctx.println(stmt, \";\");\n      return null;\n    }\n  }, {\n    key: \"visitCastExpr\",\n    value: function visitCastExpr(ast, ctx) {\n      ast.value.visitExpression(this, ctx);\n      return null;\n    }\n  }, {\n    key: \"visitInvokeFunctionExpr\",\n    value: function visitInvokeFunctionExpr(expr, ctx) {\n      var fnExpr = expr.fn;\n\n      if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\n        ctx.currentClass.parent.visitExpression(this, ctx);\n        ctx.print(expr, \".call(this\");\n\n        if (expr.args.length > 0) {\n          ctx.print(expr, \", \");\n          this.visitAllExpressions(expr.args, ctx, ',');\n        }\n\n        ctx.print(expr, \")\");\n      } else {\n        _get(_getPrototypeOf(AbstractJsEmitterVisitor.prototype), \"visitInvokeFunctionExpr\", this).call(this, expr, ctx);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"visitTaggedTemplateExpr\",\n    value: function visitTaggedTemplateExpr(ast, ctx) {\n      var _this88 = this;\n\n      // The following convoluted piece of code is effectively the downlevelled equivalent of\n      // ```\n      // tag`...`\n      // ```\n      // which is effectively like:\n      // ```\n      // tag(__makeTemplateObject(cooked, raw), expression1, expression2, ...);\n      // ```\n      var elements = ast.template.elements;\n      ast.tag.visitExpression(this, ctx);\n      ctx.print(ast, \"(\".concat(makeTemplateObjectPolyfill, \"(\"));\n      ctx.print(ast, \"[\".concat(elements.map(function (part) {\n        return escapeIdentifier(part.text, false);\n      }).join(', '), \"], \"));\n      ctx.print(ast, \"[\".concat(elements.map(function (part) {\n        return escapeIdentifier(part.rawText, false);\n      }).join(', '), \"])\"));\n      ast.template.expressions.forEach(function (expression) {\n        ctx.print(ast, ', ');\n        expression.visitExpression(_this88, ctx);\n      });\n      ctx.print(ast, ')');\n      return null;\n    }\n  }, {\n    key: \"visitFunctionExpr\",\n    value: function visitFunctionExpr(ast, ctx) {\n      ctx.print(ast, \"function\".concat(ast.name ? ' ' + ast.name : '', \"(\"));\n\n      this._visitParams(ast.params, ctx);\n\n      ctx.println(ast, \") {\");\n      ctx.incIndent();\n      this.visitAllStatements(ast.statements, ctx);\n      ctx.decIndent();\n      ctx.print(ast, \"}\");\n      return null;\n    }\n  }, {\n    key: \"visitDeclareFunctionStmt\",\n    value: function visitDeclareFunctionStmt(stmt, ctx) {\n      ctx.print(stmt, \"function \".concat(stmt.name, \"(\"));\n\n      this._visitParams(stmt.params, ctx);\n\n      ctx.println(stmt, \") {\");\n      ctx.incIndent();\n      this.visitAllStatements(stmt.statements, ctx);\n      ctx.decIndent();\n      ctx.println(stmt, \"}\");\n      return null;\n    }\n  }, {\n    key: \"visitTryCatchStmt\",\n    value: function visitTryCatchStmt(stmt, ctx) {\n      ctx.println(stmt, \"try {\");\n      ctx.incIndent();\n      this.visitAllStatements(stmt.bodyStmts, ctx);\n      ctx.decIndent();\n      ctx.println(stmt, \"} catch (\".concat(CATCH_ERROR_VAR.name, \") {\"));\n      ctx.incIndent();\n      var catchStmts = [CATCH_STACK_VAR.set(CATCH_ERROR_VAR.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);\n      this.visitAllStatements(catchStmts, ctx);\n      ctx.decIndent();\n      ctx.println(stmt, \"}\");\n      return null;\n    }\n  }, {\n    key: \"visitLocalizedString\",\n    value: function visitLocalizedString(ast, ctx) {\n      var _this89 = this;\n\n      // The following convoluted piece of code is effectively the downlevelled equivalent of\n      // ```\n      // $localize `...`\n      // ```\n      // which is effectively like:\n      // ```\n      // $localize(__makeTemplateObject(cooked, raw), expression1, expression2, ...);\n      // ```\n      ctx.print(ast, \"$localize(\".concat(makeTemplateObjectPolyfill, \"(\"));\n      var parts = [ast.serializeI18nHead()];\n\n      for (var i = 1; i < ast.messageParts.length; i++) {\n        parts.push(ast.serializeI18nTemplatePart(i));\n      }\n\n      ctx.print(ast, \"[\".concat(parts.map(function (part) {\n        return escapeIdentifier(part.cooked, false);\n      }).join(', '), \"], \"));\n      ctx.print(ast, \"[\".concat(parts.map(function (part) {\n        return escapeIdentifier(part.raw, false);\n      }).join(', '), \"])\"));\n      ast.expressions.forEach(function (expression) {\n        ctx.print(ast, ', ');\n        expression.visitExpression(_this89, ctx);\n      });\n      ctx.print(ast, ')');\n      return null;\n    }\n  }, {\n    key: \"_visitParams\",\n    value: function _visitParams(params, ctx) {\n      this.visitAllObjects(function (param) {\n        return ctx.print(null, param.name);\n      }, params, ctx, ',');\n    }\n  }, {\n    key: \"getBuiltinMethodName\",\n    value: function getBuiltinMethodName(method) {\n      var name;\n\n      switch (method) {\n        case BuiltinMethod.ConcatArray:\n          name = 'concat';\n          break;\n\n        case BuiltinMethod.SubscribeObservable:\n          name = 'subscribe';\n          break;\n\n        case BuiltinMethod.Bind:\n          name = 'bind';\n          break;\n\n        default:\n          throw new Error(\"Unknown builtin method: \".concat(method));\n      }\n\n      return name;\n    }\n  }]);\n\n  return AbstractJsEmitterVisitor;\n}(AbstractEmitterVisitor);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\n\n\nvar policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\n\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n\n    if (_global.trustedTypes) {\n      try {\n        policy = _global.trustedTypes.createPolicy('angular#unsafe-jit', {\n          createScript: function createScript(s) {\n            return s;\n          }\n        });\n      } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n\n  return policy;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\n\n\nfunction trustedScriptFromString(script) {\n  var _a;\n\n  return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from the JIT compiler, as use in other code can lead to XSS\n * vulnerabilities.\n */\n\n\nfunction newTrustedFunctionForJIT() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  if (!_global.trustedTypes) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return _construct(Function, args);\n  } // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n\n\n  var fnArgs = args.slice(0, -1).join(',');\n  var fnBody = args[args.length - 1];\n  var body = \"(function anonymous(\".concat(fnArgs, \"\\n) { \").concat(fnBody, \"\\n})\"); // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n\n  var fn = _global['eval'](trustedScriptFromString(body));\n\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return _construct(Function, args);\n  } // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n\n\n  fn.toString = function () {\n    return body;\n  }; // 2. When calling the resulting function, `this` should refer to `global`\n\n\n  return fn.bind(_global); // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A helper class to manage the evaluation of JIT generated code.\n */\n\n\nvar JitEvaluator = /*#__PURE__*/function () {\n  function JitEvaluator() {\n    _classCallCheck(this, JitEvaluator);\n  }\n\n  _createClass(JitEvaluator, [{\n    key: \"evaluateStatements\",\n    value:\n    /**\n     *\n     * @param sourceUrl The URL of the generated code.\n     * @param statements An array of Angular statement AST nodes to be evaluated.\n     * @param refResolver Resolves `o.ExternalReference`s into values.\n     * @param createSourceMaps If true then create a source-map for the generated code and include it\n     * inline as a source-map comment.\n     * @returns A map of all the variables in the generated code.\n     */\n    function evaluateStatements(sourceUrl, statements, refResolver, createSourceMaps) {\n      var converter = new JitEmitterVisitor(refResolver);\n      var ctx = EmitterVisitorContext.createRoot(); // Ensure generated code is in strict mode\n\n      if (statements.length > 0 && !isUseStrictStatement(statements[0])) {\n        statements = [literal('use strict').toStmt()].concat(_toConsumableArray(statements));\n      }\n\n      converter.visitAllStatements(statements, ctx);\n      converter.createReturnStmt(ctx);\n      return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\n    }\n    /**\n     * Evaluate a piece of JIT generated code.\n     * @param sourceUrl The URL of this generated code.\n     * @param ctx A context object that contains an AST of the code to be evaluated.\n     * @param vars A map containing the names and values of variables that the evaluated code might\n     * reference.\n     * @param createSourceMap If true then create a source-map for the generated code and include it\n     * inline as a source-map comment.\n     * @returns The result of evaluating the code.\n     */\n\n  }, {\n    key: \"evaluateCode\",\n    value: function evaluateCode(sourceUrl, ctx, vars, createSourceMap) {\n      var fnBody = \"\\\"use strict\\\";\".concat(ctx.toSource(), \"\\n//# sourceURL=\").concat(sourceUrl);\n      var fnArgNames = [];\n      var fnArgValues = [];\n\n      for (var argName in vars) {\n        fnArgValues.push(vars[argName]);\n        fnArgNames.push(argName);\n      }\n\n      if (createSourceMap) {\n        // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\n        // E.g. ```\n        // function anonymous(a,b,c\n        // /**/) { ... }```\n        // We don't want to hard code this fact, so we auto detect it via an empty function first.\n        var emptyFn = newTrustedFunctionForJIT.apply(void 0, _toConsumableArray(fnArgNames.concat('return null;'))).toString();\n        var headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\n        fnBody += \"\\n\".concat(ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment());\n      }\n\n      var fn = newTrustedFunctionForJIT.apply(void 0, _toConsumableArray(fnArgNames.concat(fnBody)));\n      return this.executeFunction(fn, fnArgValues);\n    }\n    /**\n     * Execute a JIT generated function by calling it.\n     *\n     * This method can be overridden in tests to capture the functions that are generated\n     * by this `JitEvaluator` class.\n     *\n     * @param fn A function to execute.\n     * @param args The arguments to pass to the function being executed.\n     * @returns The return value of the executed function.\n     */\n\n  }, {\n    key: \"executeFunction\",\n    value: function executeFunction(fn, args) {\n      return fn.apply(void 0, _toConsumableArray(args));\n    }\n  }]);\n\n  return JitEvaluator;\n}();\n/**\n * An Angular AST visitor that converts AST nodes into executable JavaScript code.\n */\n\n\nvar JitEmitterVisitor = /*#__PURE__*/function (_AbstractJsEmitterVis) {\n  _inherits(JitEmitterVisitor, _AbstractJsEmitterVis);\n\n  var _super50 = _createSuper(JitEmitterVisitor);\n\n  function JitEmitterVisitor(refResolver) {\n    var _this90;\n\n    _classCallCheck(this, JitEmitterVisitor);\n\n    _this90 = _super50.call(this);\n    _this90.refResolver = refResolver;\n    _this90._evalArgNames = [];\n    _this90._evalArgValues = [];\n    _this90._evalExportedVars = [];\n    return _this90;\n  }\n\n  _createClass(JitEmitterVisitor, [{\n    key: \"createReturnStmt\",\n    value: function createReturnStmt(ctx) {\n      var stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map(function (resultVar) {\n        return new LiteralMapEntry(resultVar, variable(resultVar), false);\n      })));\n      stmt.visitStatement(this, ctx);\n    }\n  }, {\n    key: \"getArgs\",\n    value: function getArgs() {\n      var result = {};\n\n      for (var i = 0; i < this._evalArgNames.length; i++) {\n        result[this._evalArgNames[i]] = this._evalArgValues[i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"visitExternalExpr\",\n    value: function visitExternalExpr(ast, ctx) {\n      this._emitReferenceToExternal(ast, this.refResolver.resolveExternalReference(ast.value), ctx);\n\n      return null;\n    }\n  }, {\n    key: \"visitWrappedNodeExpr\",\n    value: function visitWrappedNodeExpr(ast, ctx) {\n      this._emitReferenceToExternal(ast, ast.node, ctx);\n\n      return null;\n    }\n  }, {\n    key: \"visitDeclareVarStmt\",\n    value: function visitDeclareVarStmt(stmt, ctx) {\n      if (stmt.hasModifier(StmtModifier.Exported)) {\n        this._evalExportedVars.push(stmt.name);\n      }\n\n      return _get(_getPrototypeOf(JitEmitterVisitor.prototype), \"visitDeclareVarStmt\", this).call(this, stmt, ctx);\n    }\n  }, {\n    key: \"visitDeclareFunctionStmt\",\n    value: function visitDeclareFunctionStmt(stmt, ctx) {\n      if (stmt.hasModifier(StmtModifier.Exported)) {\n        this._evalExportedVars.push(stmt.name);\n      }\n\n      return _get(_getPrototypeOf(JitEmitterVisitor.prototype), \"visitDeclareFunctionStmt\", this).call(this, stmt, ctx);\n    }\n  }, {\n    key: \"visitDeclareClassStmt\",\n    value: function visitDeclareClassStmt(stmt, ctx) {\n      if (stmt.hasModifier(StmtModifier.Exported)) {\n        this._evalExportedVars.push(stmt.name);\n      }\n\n      return _get(_getPrototypeOf(JitEmitterVisitor.prototype), \"visitDeclareClassStmt\", this).call(this, stmt, ctx);\n    }\n  }, {\n    key: \"_emitReferenceToExternal\",\n    value: function _emitReferenceToExternal(ast, value, ctx) {\n      var id = this._evalArgValues.indexOf(value);\n\n      if (id === -1) {\n        id = this._evalArgValues.length;\n\n        this._evalArgValues.push(value);\n\n        var name = identifierName({\n          reference: value\n        }) || 'val';\n\n        this._evalArgNames.push(\"jit_\".concat(name, \"_\").concat(id));\n      }\n\n      ctx.print(ast, this._evalArgNames[id]);\n    }\n  }]);\n\n  return JitEmitterVisitor;\n}(AbstractJsEmitterVisitor);\n\nfunction isUseStrictStatement(statement) {\n  return statement.isEquivalent(literal('use strict').toStmt());\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction _compileInjector(meta) {\n  var definitionMap = new DefinitionMap();\n\n  if (meta.providers !== null) {\n    definitionMap.set('providers', meta.providers);\n  }\n\n  if (meta.imports.length > 0) {\n    definitionMap.set('imports', literalArr(meta.imports));\n  }\n\n  var expression = importExpr(Identifiers$1.defineInjector).callFn([definitionMap.toLiteralMap()], undefined, true);\n  var type = createInjectorType(meta);\n  return {\n    expression: expression,\n    type: type,\n    statements: []\n  };\n}\n\nfunction createInjectorType(meta) {\n  return new ExpressionType(importExpr(Identifiers$1.InjectorDeclaration, [new ExpressionType(meta.type.type)]));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Implementation of `CompileReflector` which resolves references to @angular/core\n * symbols at runtime, according to a consumer-provided mapping.\n *\n * Only supports `resolveExternalReference`, all other methods throw.\n */\n\n\nvar R3JitReflector = /*#__PURE__*/function () {\n  function R3JitReflector(context) {\n    _classCallCheck(this, R3JitReflector);\n\n    this.context = context;\n  }\n\n  _createClass(R3JitReflector, [{\n    key: \"resolveExternalReference\",\n    value: function resolveExternalReference(ref) {\n      // This reflector only handles @angular/core imports.\n      if (ref.moduleName !== '@angular/core') {\n        throw new Error(\"Cannot resolve external reference to \".concat(ref.moduleName, \", only references to @angular/core are supported.\"));\n      }\n\n      if (!this.context.hasOwnProperty(ref.name)) {\n        throw new Error(\"No value provided for @angular/core symbol '\".concat(ref.name, \"'.\"));\n      }\n\n      return this.context[ref.name];\n    }\n  }]);\n\n  return R3JitReflector;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.\n */\n\n\nfunction _compileNgModule(meta) {\n  var internalType = meta.internalType,\n      bootstrap = meta.bootstrap,\n      declarations = meta.declarations,\n      imports = meta.imports,\n      exports = meta.exports,\n      schemas = meta.schemas,\n      containsForwardDecls = meta.containsForwardDecls,\n      emitInline = meta.emitInline,\n      id = meta.id;\n  var statements = [];\n  var definitionMap = new DefinitionMap();\n  definitionMap.set('type', internalType);\n\n  if (bootstrap.length > 0) {\n    definitionMap.set('bootstrap', refsToArray(bootstrap, containsForwardDecls));\n  } // If requested to emit scope information inline, pass the `declarations`, `imports` and `exports`\n  // to the `ɵɵdefineNgModule()` call. The JIT compilation uses this.\n\n\n  if (emitInline) {\n    if (declarations.length > 0) {\n      definitionMap.set('declarations', refsToArray(declarations, containsForwardDecls));\n    }\n\n    if (imports.length > 0) {\n      definitionMap.set('imports', refsToArray(imports, containsForwardDecls));\n    }\n\n    if (exports.length > 0) {\n      definitionMap.set('exports', refsToArray(exports, containsForwardDecls));\n    }\n  } // If not emitting inline, the scope information is not passed into `ɵɵdefineNgModule` as it would\n  // prevent tree-shaking of the declarations, imports and exports references.\n  else {\n    var setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);\n\n    if (setNgModuleScopeCall !== null) {\n      statements.push(setNgModuleScopeCall);\n    }\n  }\n\n  if (schemas !== null && schemas.length > 0) {\n    definitionMap.set('schemas', literalArr(schemas.map(function (ref) {\n      return ref.value;\n    })));\n  }\n\n  if (id !== null) {\n    definitionMap.set('id', id);\n  }\n\n  var expression = importExpr(Identifiers$1.defineNgModule).callFn([definitionMap.toLiteralMap()], undefined, true);\n  var type = createNgModuleType(meta);\n  return {\n    expression: expression,\n    type: type,\n    statements: statements\n  };\n}\n/**\n * This function is used in JIT mode to generate the call to `ɵɵdefineNgModule()` from a call to\n * `ɵɵngDeclareNgModule()`.\n */\n\n\nfunction compileNgModuleDeclarationExpression(meta) {\n  var definitionMap = new DefinitionMap();\n  definitionMap.set('type', new WrappedNodeExpr(meta.type));\n\n  if (meta.bootstrap !== undefined) {\n    definitionMap.set('bootstrap', new WrappedNodeExpr(meta.bootstrap));\n  }\n\n  if (meta.declarations !== undefined) {\n    definitionMap.set('declarations', new WrappedNodeExpr(meta.declarations));\n  }\n\n  if (meta.imports !== undefined) {\n    definitionMap.set('imports', new WrappedNodeExpr(meta.imports));\n  }\n\n  if (meta.exports !== undefined) {\n    definitionMap.set('exports', new WrappedNodeExpr(meta.exports));\n  }\n\n  if (meta.schemas !== undefined) {\n    definitionMap.set('schemas', new WrappedNodeExpr(meta.schemas));\n  }\n\n  if (meta.id !== undefined) {\n    definitionMap.set('id', new WrappedNodeExpr(meta.id));\n  }\n\n  return importExpr(Identifiers$1.defineNgModule).callFn([definitionMap.toLiteralMap()]);\n}\n\nfunction createNgModuleType(_ref5) {\n  var moduleType = _ref5.type,\n      declarations = _ref5.declarations,\n      imports = _ref5.imports,\n      exports = _ref5.exports;\n  return new ExpressionType(importExpr(Identifiers$1.NgModuleDeclaration, [new ExpressionType(moduleType.type), tupleTypeOf(declarations), tupleTypeOf(imports), tupleTypeOf(exports)]));\n}\n/**\n * Generates a function call to `ɵɵsetNgModuleScope` with all necessary information so that the\n * transitive module scope can be computed during runtime in JIT mode. This call is marked pure\n * such that the references to declarations, imports and exports may be elided causing these\n * symbols to become tree-shakeable.\n */\n\n\nfunction generateSetNgModuleScopeCall(meta) {\n  var moduleType = meta.adjacentType,\n      declarations = meta.declarations,\n      imports = meta.imports,\n      exports = meta.exports,\n      containsForwardDecls = meta.containsForwardDecls;\n  var scopeMap = new DefinitionMap();\n\n  if (declarations.length > 0) {\n    scopeMap.set('declarations', refsToArray(declarations, containsForwardDecls));\n  }\n\n  if (imports.length > 0) {\n    scopeMap.set('imports', refsToArray(imports, containsForwardDecls));\n  }\n\n  if (exports.length > 0) {\n    scopeMap.set('exports', refsToArray(exports, containsForwardDecls));\n  }\n\n  if (Object.keys(scopeMap.values).length === 0) {\n    return null;\n  } // setNgModuleScope(...)\n\n\n  var fnCall = new InvokeFunctionExpr(\n  /* fn */\n  importExpr(Identifiers$1.setNgModuleScope),\n  /* args */\n  [moduleType, scopeMap.toLiteralMap()]); // (ngJitMode guard) && setNgModuleScope(...)\n\n  var guardedCall = jitOnlyGuardedExpression(fnCall); // function() { (ngJitMode guard) && setNgModuleScope(...); }\n\n  var iife = new FunctionExpr(\n  /* params */\n  [],\n  /* statements */\n  [guardedCall.toStmt()]); // (function() { (ngJitMode guard) && setNgModuleScope(...); })()\n\n  var iifeCall = new InvokeFunctionExpr(\n  /* fn */\n  iife,\n  /* args */\n  []);\n  return iifeCall.toStmt();\n}\n\nfunction tupleTypeOf(exp) {\n  var types = exp.map(function (ref) {\n    return typeofExpr(ref.type);\n  });\n  return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction compilePipeFromMetadata(metadata) {\n  var definitionMapValues = []; // e.g. `name: 'myPipe'`\n\n  definitionMapValues.push({\n    key: 'name',\n    value: literal(metadata.pipeName),\n    quoted: false\n  }); // e.g. `type: MyPipe`\n\n  definitionMapValues.push({\n    key: 'type',\n    value: metadata.type.value,\n    quoted: false\n  }); // e.g. `pure: true`\n\n  definitionMapValues.push({\n    key: 'pure',\n    value: literal(metadata.pure),\n    quoted: false\n  });\n  var expression = importExpr(Identifiers$1.definePipe).callFn([literalMap(definitionMapValues)], undefined, true);\n  var type = createPipeType(metadata);\n  return {\n    expression: expression,\n    type: type,\n    statements: []\n  };\n}\n\nfunction createPipeType(metadata) {\n  return new ExpressionType(importExpr(Identifiers$1.PipeDeclaration, [typeWithParameters(metadata.type.type, metadata.typeArgumentCount), new ExpressionType(new LiteralExpr(metadata.pipeName))]));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar ParserError = function ParserError(message, input, errLocation, ctxLocation) {\n  _classCallCheck(this, ParserError);\n\n  this.input = input;\n  this.errLocation = errLocation;\n  this.ctxLocation = ctxLocation;\n  this.message = \"Parser Error: \".concat(message, \" \").concat(errLocation, \" [\").concat(input, \"] in \").concat(ctxLocation);\n};\n\nvar ParseSpan = /*#__PURE__*/function () {\n  function ParseSpan(start, end) {\n    _classCallCheck(this, ParseSpan);\n\n    this.start = start;\n    this.end = end;\n  }\n\n  _createClass(ParseSpan, [{\n    key: \"toAbsolute\",\n    value: function toAbsolute(absoluteOffset) {\n      return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);\n    }\n  }]);\n\n  return ParseSpan;\n}();\n\nvar AST = /*#__PURE__*/function () {\n  function AST(span,\n  /**\n   * Absolute location of the expression AST in a source code file.\n   */\n  sourceSpan) {\n    _classCallCheck(this, AST);\n\n    this.span = span;\n    this.sourceSpan = sourceSpan;\n  }\n\n  _createClass(AST, [{\n    key: \"toString\",\n    value: function toString() {\n      return 'AST';\n    }\n  }]);\n\n  return AST;\n}();\n\nvar ASTWithName = /*#__PURE__*/function (_AST) {\n  _inherits(ASTWithName, _AST);\n\n  var _super51 = _createSuper(ASTWithName);\n\n  function ASTWithName(span, sourceSpan, nameSpan) {\n    var _this91;\n\n    _classCallCheck(this, ASTWithName);\n\n    _this91 = _super51.call(this, span, sourceSpan);\n    _this91.nameSpan = nameSpan;\n    return _this91;\n  }\n\n  return ASTWithName;\n}(AST);\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\n\n\nvar Quote = /*#__PURE__*/function (_AST2) {\n  _inherits(Quote, _AST2);\n\n  var _super52 = _createSuper(Quote);\n\n  function Quote(span, sourceSpan, prefix, uninterpretedExpression, location) {\n    var _this92;\n\n    _classCallCheck(this, Quote);\n\n    _this92 = _super52.call(this, span, sourceSpan);\n    _this92.prefix = prefix;\n    _this92.uninterpretedExpression = uninterpretedExpression;\n    _this92.location = location;\n    return _this92;\n  }\n\n  _createClass(Quote, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitQuote(this, context);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return 'Quote';\n    }\n  }]);\n\n  return Quote;\n}(AST);\n\nvar EmptyExpr = /*#__PURE__*/function (_AST3) {\n  _inherits(EmptyExpr, _AST3);\n\n  var _super53 = _createSuper(EmptyExpr);\n\n  function EmptyExpr() {\n    _classCallCheck(this, EmptyExpr);\n\n    return _super53.apply(this, arguments);\n  }\n\n  _createClass(EmptyExpr, [{\n    key: \"visit\",\n    value: function visit(visitor) {// do nothing\n\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    }\n  }]);\n\n  return EmptyExpr;\n}(AST);\n\nvar ImplicitReceiver = /*#__PURE__*/function (_AST4) {\n  _inherits(ImplicitReceiver, _AST4);\n\n  var _super54 = _createSuper(ImplicitReceiver);\n\n  function ImplicitReceiver() {\n    _classCallCheck(this, ImplicitReceiver);\n\n    return _super54.apply(this, arguments);\n  }\n\n  _createClass(ImplicitReceiver, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitImplicitReceiver(this, context);\n    }\n  }]);\n\n  return ImplicitReceiver;\n}(AST);\n/**\n * Receiver when something is accessed through `this` (e.g. `this.foo`). Note that this class\n * inherits from `ImplicitReceiver`, because accessing something through `this` is treated the\n * same as accessing it implicitly inside of an Angular template (e.g. `[attr.title]=\"this.title\"`\n * is the same as `[attr.title]=\"title\"`.). Inheriting allows for the `this` accesses to be treated\n * the same as implicit ones, except for a couple of exceptions like `$event` and `$any`.\n * TODO: we should find a way for this class not to extend from `ImplicitReceiver` in the future.\n */\n\n\nvar ThisReceiver = /*#__PURE__*/function (_ImplicitReceiver) {\n  _inherits(ThisReceiver, _ImplicitReceiver);\n\n  var _super55 = _createSuper(ThisReceiver);\n\n  function ThisReceiver() {\n    _classCallCheck(this, ThisReceiver);\n\n    return _super55.apply(this, arguments);\n  }\n\n  _createClass(ThisReceiver, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var _a;\n\n      return (_a = visitor.visitThisReceiver) === null || _a === void 0 ? void 0 : _a.call(visitor, this, context);\n    }\n  }]);\n\n  return ThisReceiver;\n}(ImplicitReceiver);\n/**\n * Multiple expressions separated by a semicolon.\n */\n\n\nvar Chain = /*#__PURE__*/function (_AST5) {\n  _inherits(Chain, _AST5);\n\n  var _super56 = _createSuper(Chain);\n\n  function Chain(span, sourceSpan, expressions) {\n    var _this93;\n\n    _classCallCheck(this, Chain);\n\n    _this93 = _super56.call(this, span, sourceSpan);\n    _this93.expressions = expressions;\n    return _this93;\n  }\n\n  _createClass(Chain, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitChain(this, context);\n    }\n  }]);\n\n  return Chain;\n}(AST);\n\nvar Conditional = /*#__PURE__*/function (_AST6) {\n  _inherits(Conditional, _AST6);\n\n  var _super57 = _createSuper(Conditional);\n\n  function Conditional(span, sourceSpan, condition, trueExp, falseExp) {\n    var _this94;\n\n    _classCallCheck(this, Conditional);\n\n    _this94 = _super57.call(this, span, sourceSpan);\n    _this94.condition = condition;\n    _this94.trueExp = trueExp;\n    _this94.falseExp = falseExp;\n    return _this94;\n  }\n\n  _createClass(Conditional, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitConditional(this, context);\n    }\n  }]);\n\n  return Conditional;\n}(AST);\n\nvar PropertyRead = /*#__PURE__*/function (_ASTWithName) {\n  _inherits(PropertyRead, _ASTWithName);\n\n  var _super58 = _createSuper(PropertyRead);\n\n  function PropertyRead(span, sourceSpan, nameSpan, receiver, name) {\n    var _this95;\n\n    _classCallCheck(this, PropertyRead);\n\n    _this95 = _super58.call(this, span, sourceSpan, nameSpan);\n    _this95.receiver = receiver;\n    _this95.name = name;\n    return _this95;\n  }\n\n  _createClass(PropertyRead, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitPropertyRead(this, context);\n    }\n  }]);\n\n  return PropertyRead;\n}(ASTWithName);\n\nvar PropertyWrite = /*#__PURE__*/function (_ASTWithName2) {\n  _inherits(PropertyWrite, _ASTWithName2);\n\n  var _super59 = _createSuper(PropertyWrite);\n\n  function PropertyWrite(span, sourceSpan, nameSpan, receiver, name, value) {\n    var _this96;\n\n    _classCallCheck(this, PropertyWrite);\n\n    _this96 = _super59.call(this, span, sourceSpan, nameSpan);\n    _this96.receiver = receiver;\n    _this96.name = name;\n    _this96.value = value;\n    return _this96;\n  }\n\n  _createClass(PropertyWrite, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitPropertyWrite(this, context);\n    }\n  }]);\n\n  return PropertyWrite;\n}(ASTWithName);\n\nvar SafePropertyRead = /*#__PURE__*/function (_ASTWithName3) {\n  _inherits(SafePropertyRead, _ASTWithName3);\n\n  var _super60 = _createSuper(SafePropertyRead);\n\n  function SafePropertyRead(span, sourceSpan, nameSpan, receiver, name) {\n    var _this97;\n\n    _classCallCheck(this, SafePropertyRead);\n\n    _this97 = _super60.call(this, span, sourceSpan, nameSpan);\n    _this97.receiver = receiver;\n    _this97.name = name;\n    return _this97;\n  }\n\n  _createClass(SafePropertyRead, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitSafePropertyRead(this, context);\n    }\n  }]);\n\n  return SafePropertyRead;\n}(ASTWithName);\n\nvar KeyedRead = /*#__PURE__*/function (_AST7) {\n  _inherits(KeyedRead, _AST7);\n\n  var _super61 = _createSuper(KeyedRead);\n\n  function KeyedRead(span, sourceSpan, receiver, key) {\n    var _this98;\n\n    _classCallCheck(this, KeyedRead);\n\n    _this98 = _super61.call(this, span, sourceSpan);\n    _this98.receiver = receiver;\n    _this98.key = key;\n    return _this98;\n  }\n\n  _createClass(KeyedRead, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitKeyedRead(this, context);\n    }\n  }]);\n\n  return KeyedRead;\n}(AST);\n\nvar SafeKeyedRead = /*#__PURE__*/function (_AST8) {\n  _inherits(SafeKeyedRead, _AST8);\n\n  var _super62 = _createSuper(SafeKeyedRead);\n\n  function SafeKeyedRead(span, sourceSpan, receiver, key) {\n    var _this99;\n\n    _classCallCheck(this, SafeKeyedRead);\n\n    _this99 = _super62.call(this, span, sourceSpan);\n    _this99.receiver = receiver;\n    _this99.key = key;\n    return _this99;\n  }\n\n  _createClass(SafeKeyedRead, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitSafeKeyedRead(this, context);\n    }\n  }]);\n\n  return SafeKeyedRead;\n}(AST);\n\nvar KeyedWrite = /*#__PURE__*/function (_AST9) {\n  _inherits(KeyedWrite, _AST9);\n\n  var _super63 = _createSuper(KeyedWrite);\n\n  function KeyedWrite(span, sourceSpan, receiver, key, value) {\n    var _this100;\n\n    _classCallCheck(this, KeyedWrite);\n\n    _this100 = _super63.call(this, span, sourceSpan);\n    _this100.receiver = receiver;\n    _this100.key = key;\n    _this100.value = value;\n    return _this100;\n  }\n\n  _createClass(KeyedWrite, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitKeyedWrite(this, context);\n    }\n  }]);\n\n  return KeyedWrite;\n}(AST);\n\nvar BindingPipe = /*#__PURE__*/function (_ASTWithName4) {\n  _inherits(BindingPipe, _ASTWithName4);\n\n  var _super64 = _createSuper(BindingPipe);\n\n  function BindingPipe(span, sourceSpan, exp, name, args, nameSpan) {\n    var _this101;\n\n    _classCallCheck(this, BindingPipe);\n\n    _this101 = _super64.call(this, span, sourceSpan, nameSpan);\n    _this101.exp = exp;\n    _this101.name = name;\n    _this101.args = args;\n    return _this101;\n  }\n\n  _createClass(BindingPipe, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitPipe(this, context);\n    }\n  }]);\n\n  return BindingPipe;\n}(ASTWithName);\n\nvar LiteralPrimitive = /*#__PURE__*/function (_AST10) {\n  _inherits(LiteralPrimitive, _AST10);\n\n  var _super65 = _createSuper(LiteralPrimitive);\n\n  function LiteralPrimitive(span, sourceSpan, value) {\n    var _this102;\n\n    _classCallCheck(this, LiteralPrimitive);\n\n    _this102 = _super65.call(this, span, sourceSpan);\n    _this102.value = value;\n    return _this102;\n  }\n\n  _createClass(LiteralPrimitive, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitLiteralPrimitive(this, context);\n    }\n  }]);\n\n  return LiteralPrimitive;\n}(AST);\n\nvar LiteralArray = /*#__PURE__*/function (_AST11) {\n  _inherits(LiteralArray, _AST11);\n\n  var _super66 = _createSuper(LiteralArray);\n\n  function LiteralArray(span, sourceSpan, expressions) {\n    var _this103;\n\n    _classCallCheck(this, LiteralArray);\n\n    _this103 = _super66.call(this, span, sourceSpan);\n    _this103.expressions = expressions;\n    return _this103;\n  }\n\n  _createClass(LiteralArray, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitLiteralArray(this, context);\n    }\n  }]);\n\n  return LiteralArray;\n}(AST);\n\nvar LiteralMap = /*#__PURE__*/function (_AST12) {\n  _inherits(LiteralMap, _AST12);\n\n  var _super67 = _createSuper(LiteralMap);\n\n  function LiteralMap(span, sourceSpan, keys, values) {\n    var _this104;\n\n    _classCallCheck(this, LiteralMap);\n\n    _this104 = _super67.call(this, span, sourceSpan);\n    _this104.keys = keys;\n    _this104.values = values;\n    return _this104;\n  }\n\n  _createClass(LiteralMap, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitLiteralMap(this, context);\n    }\n  }]);\n\n  return LiteralMap;\n}(AST);\n\nvar Interpolation = /*#__PURE__*/function (_AST13) {\n  _inherits(Interpolation, _AST13);\n\n  var _super68 = _createSuper(Interpolation);\n\n  function Interpolation(span, sourceSpan, strings, expressions) {\n    var _this105;\n\n    _classCallCheck(this, Interpolation);\n\n    _this105 = _super68.call(this, span, sourceSpan);\n    _this105.strings = strings;\n    _this105.expressions = expressions;\n    return _this105;\n  }\n\n  _createClass(Interpolation, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitInterpolation(this, context);\n    }\n  }]);\n\n  return Interpolation;\n}(AST);\n\nvar Binary = /*#__PURE__*/function (_AST14) {\n  _inherits(Binary, _AST14);\n\n  var _super69 = _createSuper(Binary);\n\n  function Binary(span, sourceSpan, operation, left, right) {\n    var _this106;\n\n    _classCallCheck(this, Binary);\n\n    _this106 = _super69.call(this, span, sourceSpan);\n    _this106.operation = operation;\n    _this106.left = left;\n    _this106.right = right;\n    return _this106;\n  }\n\n  _createClass(Binary, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitBinary(this, context);\n    }\n  }]);\n\n  return Binary;\n}(AST);\n/**\n * For backwards compatibility reasons, `Unary` inherits from `Binary` and mimics the binary AST\n * node that was originally used. This inheritance relation can be deleted in some future major,\n * after consumers have been given a chance to fully support Unary.\n */\n\n\nvar Unary = /*#__PURE__*/function (_Binary) {\n  _inherits(Unary, _Binary);\n\n  var _super70 = _createSuper(Unary);\n\n  /**\n   * During the deprecation period this constructor is private, to avoid consumers from creating\n   * a `Unary` with the fallback properties for `Binary`.\n   */\n  function Unary(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {\n    var _this107;\n\n    _classCallCheck(this, Unary);\n\n    _this107 = _super70.call(this, span, sourceSpan, binaryOp, binaryLeft, binaryRight);\n    _this107.operator = operator;\n    _this107.expr = expr; // Redeclare the properties that are inherited from `Binary` as `never`, as consumers should not\n    // depend on these fields when operating on `Unary`.\n\n    _this107.left = null;\n    _this107.right = null;\n    _this107.operation = null;\n    return _this107;\n  }\n  /**\n   * Creates a unary minus expression \"-x\", represented as `Binary` using \"0 - x\".\n   */\n\n\n  _createClass(Unary, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (visitor.visitUnary !== undefined) {\n        return visitor.visitUnary(this, context);\n      }\n\n      return visitor.visitBinary(this, context);\n    }\n  }], [{\n    key: \"createMinus\",\n    value: function createMinus(span, sourceSpan, expr) {\n      return new Unary(span, sourceSpan, '-', expr, '-', new LiteralPrimitive(span, sourceSpan, 0), expr);\n    }\n    /**\n     * Creates a unary plus expression \"+x\", represented as `Binary` using \"x - 0\".\n     */\n\n  }, {\n    key: \"createPlus\",\n    value: function createPlus(span, sourceSpan, expr) {\n      return new Unary(span, sourceSpan, '+', expr, '-', expr, new LiteralPrimitive(span, sourceSpan, 0));\n    }\n  }]);\n\n  return Unary;\n}(Binary);\n\nvar PrefixNot = /*#__PURE__*/function (_AST15) {\n  _inherits(PrefixNot, _AST15);\n\n  var _super71 = _createSuper(PrefixNot);\n\n  function PrefixNot(span, sourceSpan, expression) {\n    var _this108;\n\n    _classCallCheck(this, PrefixNot);\n\n    _this108 = _super71.call(this, span, sourceSpan);\n    _this108.expression = expression;\n    return _this108;\n  }\n\n  _createClass(PrefixNot, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitPrefixNot(this, context);\n    }\n  }]);\n\n  return PrefixNot;\n}(AST);\n\nvar NonNullAssert = /*#__PURE__*/function (_AST16) {\n  _inherits(NonNullAssert, _AST16);\n\n  var _super72 = _createSuper(NonNullAssert);\n\n  function NonNullAssert(span, sourceSpan, expression) {\n    var _this109;\n\n    _classCallCheck(this, NonNullAssert);\n\n    _this109 = _super72.call(this, span, sourceSpan);\n    _this109.expression = expression;\n    return _this109;\n  }\n\n  _createClass(NonNullAssert, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitNonNullAssert(this, context);\n    }\n  }]);\n\n  return NonNullAssert;\n}(AST);\n\nvar Call = /*#__PURE__*/function (_AST17) {\n  _inherits(Call, _AST17);\n\n  var _super73 = _createSuper(Call);\n\n  function Call(span, sourceSpan, receiver, args, argumentSpan) {\n    var _this110;\n\n    _classCallCheck(this, Call);\n\n    _this110 = _super73.call(this, span, sourceSpan);\n    _this110.receiver = receiver;\n    _this110.args = args;\n    _this110.argumentSpan = argumentSpan;\n    return _this110;\n  }\n\n  _createClass(Call, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return visitor.visitCall(this, context);\n    }\n  }]);\n\n  return Call;\n}(AST);\n/**\n * Records the absolute position of a text span in a source file, where `start` and `end` are the\n * starting and ending byte offsets, respectively, of the text span in a source file.\n */\n\n\nvar AbsoluteSourceSpan = function AbsoluteSourceSpan(start, end) {\n  _classCallCheck(this, AbsoluteSourceSpan);\n\n  this.start = start;\n  this.end = end;\n};\n\nvar ASTWithSource = /*#__PURE__*/function (_AST18) {\n  _inherits(ASTWithSource, _AST18);\n\n  var _super74 = _createSuper(ASTWithSource);\n\n  function ASTWithSource(ast, source, location, absoluteOffset, errors) {\n    var _this111;\n\n    _classCallCheck(this, ASTWithSource);\n\n    _this111 = _super74.call(this, new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));\n    _this111.ast = ast;\n    _this111.source = source;\n    _this111.location = location;\n    _this111.errors = errors;\n    return _this111;\n  }\n\n  _createClass(ASTWithSource, [{\n    key: \"visit\",\n    value: function visit(visitor) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (visitor.visitASTWithSource) {\n        return visitor.visitASTWithSource(this, context);\n      }\n\n      return this.ast.visit(visitor, context);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.source, \" in \").concat(this.location);\n    }\n  }]);\n\n  return ASTWithSource;\n}(AST);\n\nvar VariableBinding =\n/**\n * @param sourceSpan entire span of the binding.\n * @param key name of the LHS along with its span.\n * @param value optional value for the RHS along with its span.\n */\nfunction VariableBinding(sourceSpan, key, value) {\n  _classCallCheck(this, VariableBinding);\n\n  this.sourceSpan = sourceSpan;\n  this.key = key;\n  this.value = value;\n};\n\nvar ExpressionBinding =\n/**\n * @param sourceSpan entire span of the binding.\n * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its\n * span. Note that the length of the span may not be the same as\n * `key.source.length`. For example,\n * 1. key.source = ngFor, key.span is for \"ngFor\"\n * 2. key.source = ngForOf, key.span is for \"of\"\n * 3. key.source = ngForTrackBy, key.span is for \"trackBy\"\n * @param value optional expression for the RHS.\n */\nfunction ExpressionBinding(sourceSpan, key, value) {\n  _classCallCheck(this, ExpressionBinding);\n\n  this.sourceSpan = sourceSpan;\n  this.key = key;\n  this.value = value;\n};\n\nvar RecursiveAstVisitor = /*#__PURE__*/function () {\n  function RecursiveAstVisitor() {\n    _classCallCheck(this, RecursiveAstVisitor);\n  }\n\n  _createClass(RecursiveAstVisitor, [{\n    key: \"visit\",\n    value: function visit(ast, context) {\n      // The default implementation just visits every node.\n      // Classes that extend RecursiveAstVisitor should override this function\n      // to selectively visit the specified node.\n      ast.visit(this, context);\n    }\n  }, {\n    key: \"visitUnary\",\n    value: function visitUnary(ast, context) {\n      this.visit(ast.expr, context);\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(ast, context) {\n      this.visit(ast.left, context);\n      this.visit(ast.right, context);\n    }\n  }, {\n    key: \"visitChain\",\n    value: function visitChain(ast, context) {\n      this.visitAll(ast.expressions, context);\n    }\n  }, {\n    key: \"visitConditional\",\n    value: function visitConditional(ast, context) {\n      this.visit(ast.condition, context);\n      this.visit(ast.trueExp, context);\n      this.visit(ast.falseExp, context);\n    }\n  }, {\n    key: \"visitPipe\",\n    value: function visitPipe(ast, context) {\n      this.visit(ast.exp, context);\n      this.visitAll(ast.args, context);\n    }\n  }, {\n    key: \"visitImplicitReceiver\",\n    value: function visitImplicitReceiver(ast, context) {}\n  }, {\n    key: \"visitThisReceiver\",\n    value: function visitThisReceiver(ast, context) {}\n  }, {\n    key: \"visitInterpolation\",\n    value: function visitInterpolation(ast, context) {\n      this.visitAll(ast.expressions, context);\n    }\n  }, {\n    key: \"visitKeyedRead\",\n    value: function visitKeyedRead(ast, context) {\n      this.visit(ast.receiver, context);\n      this.visit(ast.key, context);\n    }\n  }, {\n    key: \"visitKeyedWrite\",\n    value: function visitKeyedWrite(ast, context) {\n      this.visit(ast.receiver, context);\n      this.visit(ast.key, context);\n      this.visit(ast.value, context);\n    }\n  }, {\n    key: \"visitLiteralArray\",\n    value: function visitLiteralArray(ast, context) {\n      this.visitAll(ast.expressions, context);\n    }\n  }, {\n    key: \"visitLiteralMap\",\n    value: function visitLiteralMap(ast, context) {\n      this.visitAll(ast.values, context);\n    }\n  }, {\n    key: \"visitLiteralPrimitive\",\n    value: function visitLiteralPrimitive(ast, context) {}\n  }, {\n    key: \"visitPrefixNot\",\n    value: function visitPrefixNot(ast, context) {\n      this.visit(ast.expression, context);\n    }\n  }, {\n    key: \"visitNonNullAssert\",\n    value: function visitNonNullAssert(ast, context) {\n      this.visit(ast.expression, context);\n    }\n  }, {\n    key: \"visitPropertyRead\",\n    value: function visitPropertyRead(ast, context) {\n      this.visit(ast.receiver, context);\n    }\n  }, {\n    key: \"visitPropertyWrite\",\n    value: function visitPropertyWrite(ast, context) {\n      this.visit(ast.receiver, context);\n      this.visit(ast.value, context);\n    }\n  }, {\n    key: \"visitSafePropertyRead\",\n    value: function visitSafePropertyRead(ast, context) {\n      this.visit(ast.receiver, context);\n    }\n  }, {\n    key: \"visitSafeKeyedRead\",\n    value: function visitSafeKeyedRead(ast, context) {\n      this.visit(ast.receiver, context);\n      this.visit(ast.key, context);\n    }\n  }, {\n    key: \"visitCall\",\n    value: function visitCall(ast, context) {\n      this.visit(ast.receiver, context);\n      this.visitAll(ast.args, context);\n    }\n  }, {\n    key: \"visitQuote\",\n    value: function visitQuote(ast, context) {} // This is not part of the AstVisitor interface, just a helper method\n\n  }, {\n    key: \"visitAll\",\n    value: function visitAll(asts, context) {\n      var _iterator7 = _createForOfIteratorHelper(asts),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var ast = _step7.value;\n          this.visit(ast, context);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }]);\n\n  return RecursiveAstVisitor;\n}();\n\nvar AstTransformer = /*#__PURE__*/function () {\n  function AstTransformer() {\n    _classCallCheck(this, AstTransformer);\n  }\n\n  _createClass(AstTransformer, [{\n    key: \"visitImplicitReceiver\",\n    value: function visitImplicitReceiver(ast, context) {\n      return ast;\n    }\n  }, {\n    key: \"visitThisReceiver\",\n    value: function visitThisReceiver(ast, context) {\n      return ast;\n    }\n  }, {\n    key: \"visitInterpolation\",\n    value: function visitInterpolation(ast, context) {\n      return new Interpolation(ast.span, ast.sourceSpan, ast.strings, this.visitAll(ast.expressions));\n    }\n  }, {\n    key: \"visitLiteralPrimitive\",\n    value: function visitLiteralPrimitive(ast, context) {\n      return new LiteralPrimitive(ast.span, ast.sourceSpan, ast.value);\n    }\n  }, {\n    key: \"visitPropertyRead\",\n    value: function visitPropertyRead(ast, context) {\n      return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);\n    }\n  }, {\n    key: \"visitPropertyWrite\",\n    value: function visitPropertyWrite(ast, context) {\n      return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n    }\n  }, {\n    key: \"visitSafePropertyRead\",\n    value: function visitSafePropertyRead(ast, context) {\n      return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);\n    }\n  }, {\n    key: \"visitLiteralArray\",\n    value: function visitLiteralArray(ast, context) {\n      return new LiteralArray(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));\n    }\n  }, {\n    key: \"visitLiteralMap\",\n    value: function visitLiteralMap(ast, context) {\n      return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, this.visitAll(ast.values));\n    }\n  }, {\n    key: \"visitUnary\",\n    value: function visitUnary(ast, context) {\n      switch (ast.operator) {\n        case '+':\n          return Unary.createPlus(ast.span, ast.sourceSpan, ast.expr.visit(this));\n\n        case '-':\n          return Unary.createMinus(ast.span, ast.sourceSpan, ast.expr.visit(this));\n\n        default:\n          throw new Error(\"Unknown unary operator \".concat(ast.operator));\n      }\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(ast, context) {\n      return new Binary(ast.span, ast.sourceSpan, ast.operation, ast.left.visit(this), ast.right.visit(this));\n    }\n  }, {\n    key: \"visitPrefixNot\",\n    value: function visitPrefixNot(ast, context) {\n      return new PrefixNot(ast.span, ast.sourceSpan, ast.expression.visit(this));\n    }\n  }, {\n    key: \"visitNonNullAssert\",\n    value: function visitNonNullAssert(ast, context) {\n      return new NonNullAssert(ast.span, ast.sourceSpan, ast.expression.visit(this));\n    }\n  }, {\n    key: \"visitConditional\",\n    value: function visitConditional(ast, context) {\n      return new Conditional(ast.span, ast.sourceSpan, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n    }\n  }, {\n    key: \"visitPipe\",\n    value: function visitPipe(ast, context) {\n      return new BindingPipe(ast.span, ast.sourceSpan, ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.nameSpan);\n    }\n  }, {\n    key: \"visitKeyedRead\",\n    value: function visitKeyedRead(ast, context) {\n      return new KeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));\n    }\n  }, {\n    key: \"visitKeyedWrite\",\n    value: function visitKeyedWrite(ast, context) {\n      return new KeyedWrite(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this), ast.value.visit(this));\n    }\n  }, {\n    key: \"visitCall\",\n    value: function visitCall(ast, context) {\n      return new Call(ast.span, ast.sourceSpan, ast.receiver.visit(this), this.visitAll(ast.args), ast.argumentSpan);\n    }\n  }, {\n    key: \"visitAll\",\n    value: function visitAll(asts) {\n      var res = [];\n\n      for (var i = 0; i < asts.length; ++i) {\n        res[i] = asts[i].visit(this);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"visitChain\",\n    value: function visitChain(ast, context) {\n      return new Chain(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));\n    }\n  }, {\n    key: \"visitQuote\",\n    value: function visitQuote(ast, context) {\n      return new Quote(ast.span, ast.sourceSpan, ast.prefix, ast.uninterpretedExpression, ast.location);\n    }\n  }, {\n    key: \"visitSafeKeyedRead\",\n    value: function visitSafeKeyedRead(ast, context) {\n      return new SafeKeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));\n    }\n  }]);\n\n  return AstTransformer;\n}(); // A transformer that only creates new nodes if the transformer makes a change or\n// a change is made a child node.\n\n\nvar AstMemoryEfficientTransformer = /*#__PURE__*/function () {\n  function AstMemoryEfficientTransformer() {\n    _classCallCheck(this, AstMemoryEfficientTransformer);\n  }\n\n  _createClass(AstMemoryEfficientTransformer, [{\n    key: \"visitImplicitReceiver\",\n    value: function visitImplicitReceiver(ast, context) {\n      return ast;\n    }\n  }, {\n    key: \"visitThisReceiver\",\n    value: function visitThisReceiver(ast, context) {\n      return ast;\n    }\n  }, {\n    key: \"visitInterpolation\",\n    value: function visitInterpolation(ast, context) {\n      var expressions = this.visitAll(ast.expressions);\n      if (expressions !== ast.expressions) return new Interpolation(ast.span, ast.sourceSpan, ast.strings, expressions);\n      return ast;\n    }\n  }, {\n    key: \"visitLiteralPrimitive\",\n    value: function visitLiteralPrimitive(ast, context) {\n      return ast;\n    }\n  }, {\n    key: \"visitPropertyRead\",\n    value: function visitPropertyRead(ast, context) {\n      var receiver = ast.receiver.visit(this);\n\n      if (receiver !== ast.receiver) {\n        return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitPropertyWrite\",\n    value: function visitPropertyWrite(ast, context) {\n      var receiver = ast.receiver.visit(this);\n      var value = ast.value.visit(this);\n\n      if (receiver !== ast.receiver || value !== ast.value) {\n        return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, value);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitSafePropertyRead\",\n    value: function visitSafePropertyRead(ast, context) {\n      var receiver = ast.receiver.visit(this);\n\n      if (receiver !== ast.receiver) {\n        return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitLiteralArray\",\n    value: function visitLiteralArray(ast, context) {\n      var expressions = this.visitAll(ast.expressions);\n\n      if (expressions !== ast.expressions) {\n        return new LiteralArray(ast.span, ast.sourceSpan, expressions);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitLiteralMap\",\n    value: function visitLiteralMap(ast, context) {\n      var values = this.visitAll(ast.values);\n\n      if (values !== ast.values) {\n        return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, values);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitUnary\",\n    value: function visitUnary(ast, context) {\n      var expr = ast.expr.visit(this);\n\n      if (expr !== ast.expr) {\n        switch (ast.operator) {\n          case '+':\n            return Unary.createPlus(ast.span, ast.sourceSpan, expr);\n\n          case '-':\n            return Unary.createMinus(ast.span, ast.sourceSpan, expr);\n\n          default:\n            throw new Error(\"Unknown unary operator \".concat(ast.operator));\n        }\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(ast, context) {\n      var left = ast.left.visit(this);\n      var right = ast.right.visit(this);\n\n      if (left !== ast.left || right !== ast.right) {\n        return new Binary(ast.span, ast.sourceSpan, ast.operation, left, right);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitPrefixNot\",\n    value: function visitPrefixNot(ast, context) {\n      var expression = ast.expression.visit(this);\n\n      if (expression !== ast.expression) {\n        return new PrefixNot(ast.span, ast.sourceSpan, expression);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitNonNullAssert\",\n    value: function visitNonNullAssert(ast, context) {\n      var expression = ast.expression.visit(this);\n\n      if (expression !== ast.expression) {\n        return new NonNullAssert(ast.span, ast.sourceSpan, expression);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitConditional\",\n    value: function visitConditional(ast, context) {\n      var condition = ast.condition.visit(this);\n      var trueExp = ast.trueExp.visit(this);\n      var falseExp = ast.falseExp.visit(this);\n\n      if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== ast.falseExp) {\n        return new Conditional(ast.span, ast.sourceSpan, condition, trueExp, falseExp);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitPipe\",\n    value: function visitPipe(ast, context) {\n      var exp = ast.exp.visit(this);\n      var args = this.visitAll(ast.args);\n\n      if (exp !== ast.exp || args !== ast.args) {\n        return new BindingPipe(ast.span, ast.sourceSpan, exp, ast.name, args, ast.nameSpan);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitKeyedRead\",\n    value: function visitKeyedRead(ast, context) {\n      var obj = ast.receiver.visit(this);\n      var key = ast.key.visit(this);\n\n      if (obj !== ast.receiver || key !== ast.key) {\n        return new KeyedRead(ast.span, ast.sourceSpan, obj, key);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitKeyedWrite\",\n    value: function visitKeyedWrite(ast, context) {\n      var obj = ast.receiver.visit(this);\n      var key = ast.key.visit(this);\n      var value = ast.value.visit(this);\n\n      if (obj !== ast.receiver || key !== ast.key || value !== ast.value) {\n        return new KeyedWrite(ast.span, ast.sourceSpan, obj, key, value);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitAll\",\n    value: function visitAll(asts) {\n      var res = [];\n      var modified = false;\n\n      for (var i = 0; i < asts.length; ++i) {\n        var original = asts[i];\n        var value = original.visit(this);\n        res[i] = value;\n        modified = modified || value !== original;\n      }\n\n      return modified ? res : asts;\n    }\n  }, {\n    key: \"visitChain\",\n    value: function visitChain(ast, context) {\n      var expressions = this.visitAll(ast.expressions);\n\n      if (expressions !== ast.expressions) {\n        return new Chain(ast.span, ast.sourceSpan, expressions);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitCall\",\n    value: function visitCall(ast, context) {\n      var receiver = ast.receiver.visit(this);\n      var args = this.visitAll(ast.args);\n\n      if (receiver !== ast.receiver || args !== ast.args) {\n        return new Call(ast.span, ast.sourceSpan, receiver, args, ast.argumentSpan);\n      }\n\n      return ast;\n    }\n  }, {\n    key: \"visitQuote\",\n    value: function visitQuote(ast, context) {\n      return ast;\n    }\n  }, {\n    key: \"visitSafeKeyedRead\",\n    value: function visitSafeKeyedRead(ast, context) {\n      var obj = ast.receiver.visit(this);\n      var key = ast.key.visit(this);\n\n      if (obj !== ast.receiver || key !== ast.key) {\n        return new SafeKeyedRead(ast.span, ast.sourceSpan, obj, key);\n      }\n\n      return ast;\n    }\n  }]);\n\n  return AstMemoryEfficientTransformer;\n}(); // Bindings\n\n\nvar ParsedProperty = function ParsedProperty(name, expression, type, // TODO(FW-2095): `keySpan` should really be required but allows `undefined` so VE does\n// not need to be updated. Make `keySpan` required when VE is removed.\nsourceSpan, keySpan, valueSpan) {\n  _classCallCheck(this, ParsedProperty);\n\n  this.name = name;\n  this.expression = expression;\n  this.type = type;\n  this.sourceSpan = sourceSpan;\n  this.keySpan = keySpan;\n  this.valueSpan = valueSpan;\n  this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;\n  this.isAnimation = this.type === ParsedPropertyType.ANIMATION;\n};\n\nvar ParsedPropertyType;\n\n(function (ParsedPropertyType) {\n  ParsedPropertyType[ParsedPropertyType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  ParsedPropertyType[ParsedPropertyType[\"LITERAL_ATTR\"] = 1] = \"LITERAL_ATTR\";\n  ParsedPropertyType[ParsedPropertyType[\"ANIMATION\"] = 2] = \"ANIMATION\";\n})(ParsedPropertyType || (ParsedPropertyType = {}));\n\nvar ParsedEvent = // Regular events have a target\n// Animation events have a phase\nfunction ParsedEvent(name, targetOrPhase, type, handler, sourceSpan, // TODO(FW-2095): keySpan should be required but was made optional to avoid changing VE\nhandlerSpan, keySpan) {\n  _classCallCheck(this, ParsedEvent);\n\n  this.name = name;\n  this.targetOrPhase = targetOrPhase;\n  this.type = type;\n  this.handler = handler;\n  this.sourceSpan = sourceSpan;\n  this.handlerSpan = handlerSpan;\n  this.keySpan = keySpan;\n};\n/**\n * ParsedVariable represents a variable declaration in a microsyntax expression.\n */\n\n\nvar ParsedVariable = function ParsedVariable(name, value, sourceSpan, keySpan, valueSpan) {\n  _classCallCheck(this, ParsedVariable);\n\n  this.name = name;\n  this.value = value;\n  this.sourceSpan = sourceSpan;\n  this.keySpan = keySpan;\n  this.valueSpan = valueSpan;\n};\n\nvar BoundElementProperty = function BoundElementProperty(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {\n  _classCallCheck(this, BoundElementProperty);\n\n  this.name = name;\n  this.type = type;\n  this.securityContext = securityContext;\n  this.value = value;\n  this.unit = unit;\n  this.sourceSpan = sourceSpan;\n  this.keySpan = keySpan;\n  this.valueSpan = valueSpan;\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CORE = '@angular/core';\n\nvar Identifiers = function Identifiers() {\n  _classCallCheck(this, Identifiers);\n};\n\nIdentifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {\n  name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\n  moduleName: CORE\n};\nIdentifiers.ElementRef = {\n  name: 'ElementRef',\n  moduleName: CORE\n};\nIdentifiers.NgModuleRef = {\n  name: 'NgModuleRef',\n  moduleName: CORE\n};\nIdentifiers.ViewContainerRef = {\n  name: 'ViewContainerRef',\n  moduleName: CORE\n};\nIdentifiers.ChangeDetectorRef = {\n  name: 'ChangeDetectorRef',\n  moduleName: CORE\n};\nIdentifiers.QueryList = {\n  name: 'QueryList',\n  moduleName: CORE\n};\nIdentifiers.TemplateRef = {\n  name: 'TemplateRef',\n  moduleName: CORE\n};\nIdentifiers.Renderer2 = {\n  name: 'Renderer2',\n  moduleName: CORE\n};\nIdentifiers.CodegenComponentFactoryResolver = {\n  name: 'ɵCodegenComponentFactoryResolver',\n  moduleName: CORE\n};\nIdentifiers.ComponentFactoryResolver = {\n  name: 'ComponentFactoryResolver',\n  moduleName: CORE\n};\nIdentifiers.ComponentFactory = {\n  name: 'ComponentFactory',\n  moduleName: CORE\n};\nIdentifiers.ComponentRef = {\n  name: 'ComponentRef',\n  moduleName: CORE\n};\nIdentifiers.NgModuleFactory = {\n  name: 'NgModuleFactory',\n  moduleName: CORE\n};\nIdentifiers.createModuleFactory = {\n  name: 'ɵcmf',\n  moduleName: CORE\n};\nIdentifiers.moduleDef = {\n  name: 'ɵmod',\n  moduleName: CORE\n};\nIdentifiers.moduleProviderDef = {\n  name: 'ɵmpd',\n  moduleName: CORE\n};\nIdentifiers.RegisterModuleFactoryFn = {\n  name: 'ɵregisterModuleFactory',\n  moduleName: CORE\n};\nIdentifiers.inject = {\n  name: 'ɵɵinject',\n  moduleName: CORE\n};\nIdentifiers.directiveInject = {\n  name: 'ɵɵdirectiveInject',\n  moduleName: CORE\n};\nIdentifiers.INJECTOR = {\n  name: 'INJECTOR',\n  moduleName: CORE\n};\nIdentifiers.Injector = {\n  name: 'Injector',\n  moduleName: CORE\n};\nIdentifiers.ViewEncapsulation = {\n  name: 'ViewEncapsulation',\n  moduleName: CORE\n};\nIdentifiers.ChangeDetectionStrategy = {\n  name: 'ChangeDetectionStrategy',\n  moduleName: CORE\n};\nIdentifiers.SecurityContext = {\n  name: 'SecurityContext',\n  moduleName: CORE\n};\nIdentifiers.LOCALE_ID = {\n  name: 'LOCALE_ID',\n  moduleName: CORE\n};\nIdentifiers.TRANSLATIONS_FORMAT = {\n  name: 'TRANSLATIONS_FORMAT',\n  moduleName: CORE\n};\nIdentifiers.inlineInterpolate = {\n  name: 'ɵinlineInterpolate',\n  moduleName: CORE\n};\nIdentifiers.interpolate = {\n  name: 'ɵinterpolate',\n  moduleName: CORE\n};\nIdentifiers.EMPTY_ARRAY = {\n  name: 'ɵEMPTY_ARRAY',\n  moduleName: CORE\n};\nIdentifiers.EMPTY_MAP = {\n  name: 'ɵEMPTY_MAP',\n  moduleName: CORE\n};\nIdentifiers.Renderer = {\n  name: 'Renderer',\n  moduleName: CORE\n}; // type only\n\nIdentifiers.RendererType2 = {\n  name: 'RendererType2',\n  moduleName: CORE\n}; // type only\n\nIdentifiers.ViewDefinition = {\n  name: 'ɵViewDefinition',\n  moduleName: CORE\n};\nIdentifiers.createComponentFactory = {\n  name: 'ɵccf',\n  moduleName: CORE\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar EventHandlerVars = function EventHandlerVars() {\n  _classCallCheck(this, EventHandlerVars);\n};\n\nEventHandlerVars.event = variable('$event');\n\nvar ConvertActionBindingResult = function ConvertActionBindingResult(\n/**\n * Render2 compatible statements,\n */\nstmts,\n/**\n * Variable name used with render2 compatible statements.\n */\nallowDefault) {\n  _classCallCheck(this, ConvertActionBindingResult);\n\n  this.stmts = stmts;\n  this.allowDefault = allowDefault;\n  /**\n   * This is bit of a hack. It converts statements which render2 expects to statements which are\n   * expected by render3.\n   *\n   * Example: `<div click=\"doSomething($event)\">` will generate:\n   *\n   * Render3:\n   * ```\n   * const pd_b:any = ((<any>ctx.doSomething($event)) !== false);\n   * return pd_b;\n   * ```\n   *\n   * but render2 expects:\n   * ```\n   * return ctx.doSomething($event);\n   * ```\n   */\n  // TODO(misko): remove this hack once we no longer support ViewEngine.\n\n  this.render3Stmts = stmts.map(function (statement) {\n    if (statement instanceof DeclareVarStmt && statement.name == allowDefault.name && statement.value instanceof BinaryOperatorExpr) {\n      var lhs = statement.value.lhs;\n      return new ReturnStatement(lhs.value);\n    }\n\n    return statement;\n  });\n};\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression is\n * used in an action binding (e.g. an event handler).\n */\n\n\nfunction convertActionBinding(localResolver, implicitReceiver, action, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses, globals) {\n  if (!localResolver) {\n    localResolver = new DefaultLocalResolver(globals);\n  }\n\n  var actionWithoutBuiltins = convertPropertyBindingBuiltins({\n    createLiteralArrayConverter: function createLiteralArrayConverter(argCount) {\n      // Note: no caching for literal arrays in actions.\n      return function (args) {\n        return literalArr(args);\n      };\n    },\n    createLiteralMapConverter: function createLiteralMapConverter(keys) {\n      // Note: no caching for literal maps in actions.\n      return function (values) {\n        var entries = keys.map(function (k, i) {\n          return {\n            key: k.key,\n            value: values[i],\n            quoted: k.quoted\n          };\n        });\n        return literalMap(entries);\n      };\n    },\n    createPipeConverter: function createPipeConverter(name) {\n      throw new Error(\"Illegal State: Actions are not allowed to contain pipes. Pipe: \".concat(name));\n    }\n  }, action);\n  var visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses);\n  var actionStmts = [];\n  flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);\n  prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\n\n  if (visitor.usesImplicitReceiver) {\n    localResolver.notifyImplicitReceiverUse();\n  }\n\n  var lastIndex = actionStmts.length - 1;\n  var preventDefaultVar = null;\n\n  if (lastIndex >= 0) {\n    var lastStatement = actionStmts[lastIndex];\n    var returnExpr = convertStmtIntoExpression(lastStatement);\n\n    if (returnExpr) {\n      // Note: We need to cast the result of the method call to dynamic,\n      // as it might be a void method!\n      preventDefaultVar = createPreventDefaultVar(bindingId);\n      actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null, [StmtModifier.Final]);\n    }\n  }\n\n  return new ConvertActionBindingResult(actionStmts, preventDefaultVar);\n}\n\nfunction convertPropertyBindingBuiltins(converterFactory, ast) {\n  return convertBuiltins(converterFactory, ast);\n}\n\nvar ConvertPropertyBindingResult = function ConvertPropertyBindingResult(stmts, currValExpr) {\n  _classCallCheck(this, ConvertPropertyBindingResult);\n\n  this.stmts = stmts;\n  this.currValExpr = currValExpr;\n};\n\nvar BindingForm;\n\n(function (BindingForm) {\n  // The general form of binding expression, supports all expressions.\n  BindingForm[BindingForm[\"General\"] = 0] = \"General\"; // Try to generate a simple binding (no temporaries or statements)\n  // otherwise generate a general binding\n\n  BindingForm[BindingForm[\"TrySimple\"] = 1] = \"TrySimple\"; // Inlines assignment of temporaries into the generated expression. The result may still\n  // have statements attached for declarations of temporary variables.\n  // This is the only relevant form for Ivy, the other forms are only used in ViewEngine.\n\n  BindingForm[BindingForm[\"Expression\"] = 2] = \"Expression\";\n})(BindingForm || (BindingForm = {}));\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression\n * is used in property binding. The expression has to be preprocessed via\n * `convertPropertyBindingBuiltins`.\n */\n\n\nfunction _convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId, form, interpolationFunction) {\n  if (!localResolver) {\n    localResolver = new DefaultLocalResolver();\n  }\n\n  var visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction);\n  var outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);\n  var stmts = getStatementsFromVisitor(visitor, bindingId);\n\n  if (visitor.usesImplicitReceiver) {\n    localResolver.notifyImplicitReceiverUse();\n  }\n\n  if (visitor.temporaryCount === 0 && form == BindingForm.TrySimple) {\n    return new ConvertPropertyBindingResult([], outputExpr);\n  } else if (form === BindingForm.Expression) {\n    return new ConvertPropertyBindingResult(stmts, outputExpr);\n  }\n\n  var currValExpr = createCurrValueExpr(bindingId);\n  stmts.push(currValExpr.set(outputExpr).toDeclStmt(DYNAMIC_TYPE, [StmtModifier.Final]));\n  return new ConvertPropertyBindingResult(stmts, currValExpr);\n}\n/**\n * Given some expression, such as a binding or interpolation expression, and a context expression to\n * look values up on, visit each facet of the given expression resolving values from the context\n * expression such that a list of arguments can be derived from the found values that can be used as\n * arguments to an external update instruction.\n *\n * @param localResolver The resolver to use to look up expressions by name appropriately\n * @param contextVariableExpression The expression representing the context variable used to create\n * the final argument expressions\n * @param expressionWithArgumentsToExtract The expression to visit to figure out what values need to\n * be resolved and what arguments list to build.\n * @param bindingId A name prefix used to create temporary variable names if they're needed for the\n * arguments generated\n * @returns An array of expressions that can be passed as arguments to instruction expressions like\n * `o.importExpr(R3.propertyInterpolate).callFn(result)`\n */\n\n\nfunction convertUpdateArguments(localResolver, contextVariableExpression, expressionWithArgumentsToExtract, bindingId) {\n  var visitor = new _AstToIrVisitor(localResolver, contextVariableExpression, bindingId, undefined);\n  var outputExpr = expressionWithArgumentsToExtract.visit(visitor, _Mode.Expression);\n\n  if (visitor.usesImplicitReceiver) {\n    localResolver.notifyImplicitReceiverUse();\n  }\n\n  var stmts = getStatementsFromVisitor(visitor, bindingId); // Removing the first argument, because it was a length for ViewEngine, not Ivy.\n\n  var args = outputExpr.args.slice(1);\n\n  if (expressionWithArgumentsToExtract instanceof Interpolation) {\n    // If we're dealing with an interpolation of 1 value with an empty prefix and suffix, reduce the\n    // args returned to just the value, because we're going to pass it to a special instruction.\n    var strings = expressionWithArgumentsToExtract.strings;\n\n    if (args.length === 3 && strings[0] === '' && strings[1] === '') {\n      // Single argument interpolate instructions.\n      args = [args[1]];\n    } else if (args.length >= 19) {\n      // 19 or more arguments must be passed to the `interpolateV`-style instructions, which accept\n      // an array of arguments\n      args = [literalArr(args)];\n    }\n  }\n\n  return {\n    stmts: stmts,\n    args: args\n  };\n}\n\nfunction getStatementsFromVisitor(visitor, bindingId) {\n  var stmts = [];\n\n  for (var i = 0; i < visitor.temporaryCount; i++) {\n    stmts.push(temporaryDeclaration(bindingId, i));\n  }\n\n  return stmts;\n}\n\nfunction convertBuiltins(converterFactory, ast) {\n  var visitor = new _BuiltinAstConverter(converterFactory);\n  return ast.visit(visitor);\n}\n\nfunction temporaryName(bindingId, temporaryNumber) {\n  return \"tmp_\".concat(bindingId, \"_\").concat(temporaryNumber);\n}\n\nfunction temporaryDeclaration(bindingId, temporaryNumber) {\n  return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber));\n}\n\nfunction prependTemporaryDecls(temporaryCount, bindingId, statements) {\n  for (var i = temporaryCount - 1; i >= 0; i--) {\n    statements.unshift(temporaryDeclaration(bindingId, i));\n  }\n}\n\nvar _Mode;\n\n(function (_Mode) {\n  _Mode[_Mode[\"Statement\"] = 0] = \"Statement\";\n  _Mode[_Mode[\"Expression\"] = 1] = \"Expression\";\n})(_Mode || (_Mode = {}));\n\nfunction ensureStatementMode(mode, ast) {\n  if (mode !== _Mode.Statement) {\n    throw new Error(\"Expected a statement, but saw \".concat(ast));\n  }\n}\n\nfunction ensureExpressionMode(mode, ast) {\n  if (mode !== _Mode.Expression) {\n    throw new Error(\"Expected an expression, but saw \".concat(ast));\n  }\n}\n\nfunction convertToStatementIfNeeded(mode, expr) {\n  if (mode === _Mode.Statement) {\n    return expr.toStmt();\n  } else {\n    return expr;\n  }\n}\n\nvar _BuiltinAstConverter = /*#__PURE__*/function (_AstTransformer) {\n  _inherits(_BuiltinAstConverter, _AstTransformer);\n\n  var _super75 = _createSuper(_BuiltinAstConverter);\n\n  function _BuiltinAstConverter(_converterFactory) {\n    var _this112;\n\n    _classCallCheck(this, _BuiltinAstConverter);\n\n    _this112 = _super75.call(this);\n    _this112._converterFactory = _converterFactory;\n    return _this112;\n  }\n\n  _createClass(_BuiltinAstConverter, [{\n    key: \"visitPipe\",\n    value: function visitPipe(ast, context) {\n      var _this113 = this;\n\n      var args = [ast.exp].concat(_toConsumableArray(ast.args)).map(function (ast) {\n        return ast.visit(_this113, context);\n      });\n      return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createPipeConverter(ast.name, args.length));\n    }\n  }, {\n    key: \"visitLiteralArray\",\n    value: function visitLiteralArray(ast, context) {\n      var _this114 = this;\n\n      var args = ast.expressions.map(function (ast) {\n        return ast.visit(_this114, context);\n      });\n      return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));\n    }\n  }, {\n    key: \"visitLiteralMap\",\n    value: function visitLiteralMap(ast, context) {\n      var _this115 = this;\n\n      var args = ast.values.map(function (ast) {\n        return ast.visit(_this115, context);\n      });\n      return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralMapConverter(ast.keys));\n    }\n  }]);\n\n  return _BuiltinAstConverter;\n}(AstTransformer);\n\nvar _AstToIrVisitor = /*#__PURE__*/function () {\n  function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses) {\n    _classCallCheck(this, _AstToIrVisitor);\n\n    this._localResolver = _localResolver;\n    this._implicitReceiver = _implicitReceiver;\n    this.bindingId = bindingId;\n    this.interpolationFunction = interpolationFunction;\n    this.baseSourceSpan = baseSourceSpan;\n    this.implicitReceiverAccesses = implicitReceiverAccesses;\n    this._nodeMap = new Map();\n    this._resultMap = new Map();\n    this._currentTemporary = 0;\n    this.temporaryCount = 0;\n    this.usesImplicitReceiver = false;\n  }\n\n  _createClass(_AstToIrVisitor, [{\n    key: \"visitUnary\",\n    value: function visitUnary(ast, mode) {\n      var op;\n\n      switch (ast.operator) {\n        case '+':\n          op = UnaryOperator.Plus;\n          break;\n\n        case '-':\n          op = UnaryOperator.Minus;\n          break;\n\n        default:\n          throw new Error(\"Unsupported operator \".concat(ast.operator));\n      }\n\n      return convertToStatementIfNeeded(mode, new UnaryOperatorExpr(op, this._visit(ast.expr, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(ast, mode) {\n      var op;\n\n      switch (ast.operation) {\n        case '+':\n          op = BinaryOperator.Plus;\n          break;\n\n        case '-':\n          op = BinaryOperator.Minus;\n          break;\n\n        case '*':\n          op = BinaryOperator.Multiply;\n          break;\n\n        case '/':\n          op = BinaryOperator.Divide;\n          break;\n\n        case '%':\n          op = BinaryOperator.Modulo;\n          break;\n\n        case '&&':\n          op = BinaryOperator.And;\n          break;\n\n        case '||':\n          op = BinaryOperator.Or;\n          break;\n\n        case '==':\n          op = BinaryOperator.Equals;\n          break;\n\n        case '!=':\n          op = BinaryOperator.NotEquals;\n          break;\n\n        case '===':\n          op = BinaryOperator.Identical;\n          break;\n\n        case '!==':\n          op = BinaryOperator.NotIdentical;\n          break;\n\n        case '<':\n          op = BinaryOperator.Lower;\n          break;\n\n        case '>':\n          op = BinaryOperator.Bigger;\n          break;\n\n        case '<=':\n          op = BinaryOperator.LowerEquals;\n          break;\n\n        case '>=':\n          op = BinaryOperator.BiggerEquals;\n          break;\n\n        case '??':\n          return this.convertNullishCoalesce(ast, mode);\n\n        default:\n          throw new Error(\"Unsupported operation \".concat(ast.operation));\n      }\n\n      return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n    }\n  }, {\n    key: \"visitChain\",\n    value: function visitChain(ast, mode) {\n      ensureStatementMode(mode, ast);\n      return this.visitAll(ast.expressions, mode);\n    }\n  }, {\n    key: \"visitConditional\",\n    value: function visitConditional(ast, mode) {\n      var value = this._visit(ast.condition, _Mode.Expression);\n\n      return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression), this.convertSourceSpan(ast.span)));\n    }\n  }, {\n    key: \"visitPipe\",\n    value: function visitPipe(ast, mode) {\n      throw new Error(\"Illegal state: Pipes should have been converted into functions. Pipe: \".concat(ast.name));\n    }\n  }, {\n    key: \"visitImplicitReceiver\",\n    value: function visitImplicitReceiver(ast, mode) {\n      ensureExpressionMode(mode, ast);\n      this.usesImplicitReceiver = true;\n      return this._implicitReceiver;\n    }\n  }, {\n    key: \"visitThisReceiver\",\n    value: function visitThisReceiver(ast, mode) {\n      return this.visitImplicitReceiver(ast, mode);\n    }\n  }, {\n    key: \"visitInterpolation\",\n    value: function visitInterpolation(ast, mode) {\n      ensureExpressionMode(mode, ast);\n      var args = [literal(ast.expressions.length)];\n\n      for (var i = 0; i < ast.strings.length - 1; i++) {\n        args.push(literal(ast.strings[i]));\n        args.push(this._visit(ast.expressions[i], _Mode.Expression));\n      }\n\n      args.push(literal(ast.strings[ast.strings.length - 1]));\n\n      if (this.interpolationFunction) {\n        return this.interpolationFunction(args);\n      }\n\n      return ast.expressions.length <= 9 ? importExpr(Identifiers.inlineInterpolate).callFn(args) : importExpr(Identifiers.interpolate).callFn([args[0], literalArr(args.slice(1), undefined, this.convertSourceSpan(ast.span))]);\n    }\n  }, {\n    key: \"visitKeyedRead\",\n    value: function visitKeyedRead(ast, mode) {\n      var leftMostSafe = this.leftMostSafeNode(ast);\n\n      if (leftMostSafe) {\n        return this.convertSafeAccess(ast, leftMostSafe, mode);\n      } else {\n        return convertToStatementIfNeeded(mode, this._visit(ast.receiver, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));\n      }\n    }\n  }, {\n    key: \"visitKeyedWrite\",\n    value: function visitKeyedWrite(ast, mode) {\n      var obj = this._visit(ast.receiver, _Mode.Expression);\n\n      var key = this._visit(ast.key, _Mode.Expression);\n\n      var value = this._visit(ast.value, _Mode.Expression);\n\n      if (obj === this._implicitReceiver) {\n        this._localResolver.maybeRestoreView();\n      }\n\n      return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n    }\n  }, {\n    key: \"visitLiteralArray\",\n    value: function visitLiteralArray(ast, mode) {\n      throw new Error(\"Illegal State: literal arrays should have been converted into functions\");\n    }\n  }, {\n    key: \"visitLiteralMap\",\n    value: function visitLiteralMap(ast, mode) {\n      throw new Error(\"Illegal State: literal maps should have been converted into functions\");\n    }\n  }, {\n    key: \"visitLiteralPrimitive\",\n    value: function visitLiteralPrimitive(ast, mode) {\n      // For literal values of null, undefined, true, or false allow type interference\n      // to infer the type.\n      var type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ? INFERRED_TYPE : undefined;\n      return convertToStatementIfNeeded(mode, literal(ast.value, type, this.convertSourceSpan(ast.span)));\n    }\n  }, {\n    key: \"_getLocal\",\n    value: function _getLocal(name, receiver) {\n      var _a;\n\n      if (((_a = this._localResolver.globals) === null || _a === void 0 ? void 0 : _a.has(name)) && receiver instanceof ThisReceiver) {\n        return null;\n      }\n\n      return this._localResolver.getLocal(name);\n    }\n  }, {\n    key: \"visitPrefixNot\",\n    value: function visitPrefixNot(ast, mode) {\n      return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));\n    }\n  }, {\n    key: \"visitNonNullAssert\",\n    value: function visitNonNullAssert(ast, mode) {\n      return convertToStatementIfNeeded(mode, assertNotNull(this._visit(ast.expression, _Mode.Expression)));\n    }\n  }, {\n    key: \"visitPropertyRead\",\n    value: function visitPropertyRead(ast, mode) {\n      var leftMostSafe = this.leftMostSafeNode(ast);\n\n      if (leftMostSafe) {\n        return this.convertSafeAccess(ast, leftMostSafe, mode);\n      } else {\n        var result = null;\n        var prevUsesImplicitReceiver = this.usesImplicitReceiver;\n\n        var receiver = this._visit(ast.receiver, _Mode.Expression);\n\n        if (receiver === this._implicitReceiver) {\n          result = this._getLocal(ast.name, ast.receiver);\n\n          if (result) {\n            // Restore the previous \"usesImplicitReceiver\" state since the implicit\n            // receiver has been replaced with a resolved local expression.\n            this.usesImplicitReceiver = prevUsesImplicitReceiver;\n            this.addImplicitReceiverAccess(ast.name);\n          }\n        }\n\n        if (result == null) {\n          result = receiver.prop(ast.name, this.convertSourceSpan(ast.span));\n        }\n\n        return convertToStatementIfNeeded(mode, result);\n      }\n    }\n  }, {\n    key: \"visitPropertyWrite\",\n    value: function visitPropertyWrite(ast, mode) {\n      var receiver = this._visit(ast.receiver, _Mode.Expression);\n\n      var prevUsesImplicitReceiver = this.usesImplicitReceiver;\n      var varExpr = null;\n\n      if (receiver === this._implicitReceiver) {\n        var localExpr = this._getLocal(ast.name, ast.receiver);\n\n        if (localExpr) {\n          if (localExpr instanceof ReadPropExpr) {\n            // If the local variable is a property read expression, it's a reference\n            // to a 'context.property' value and will be used as the target of the\n            // write expression.\n            varExpr = localExpr; // Restore the previous \"usesImplicitReceiver\" state since the implicit\n            // receiver has been replaced with a resolved local expression.\n\n            this.usesImplicitReceiver = prevUsesImplicitReceiver;\n            this.addImplicitReceiverAccess(ast.name);\n          } else {\n            // Otherwise it's an error.\n            var _receiver = ast.name;\n            var value = ast.value instanceof PropertyRead ? ast.value.name : undefined;\n            throw new Error(\"Cannot assign value \\\"\".concat(value, \"\\\" to template variable \\\"\").concat(_receiver, \"\\\". Template variables are read-only.\"));\n          }\n        }\n      } // If no local expression could be produced, use the original receiver's\n      // property as the target.\n\n\n      if (varExpr === null) {\n        varExpr = receiver.prop(ast.name, this.convertSourceSpan(ast.span));\n      }\n\n      return convertToStatementIfNeeded(mode, varExpr.set(this._visit(ast.value, _Mode.Expression)));\n    }\n  }, {\n    key: \"visitSafePropertyRead\",\n    value: function visitSafePropertyRead(ast, mode) {\n      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    }\n  }, {\n    key: \"visitSafeKeyedRead\",\n    value: function visitSafeKeyedRead(ast, mode) {\n      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    }\n  }, {\n    key: \"visitAll\",\n    value: function visitAll(asts, mode) {\n      var _this116 = this;\n\n      return asts.map(function (ast) {\n        return _this116._visit(ast, mode);\n      });\n    }\n  }, {\n    key: \"visitQuote\",\n    value: function visitQuote(ast, mode) {\n      throw new Error(\"Quotes are not supported for evaluation!\\n        Statement: \".concat(ast.uninterpretedExpression, \" located at \").concat(ast.location));\n    }\n  }, {\n    key: \"visitCall\",\n    value: function visitCall(ast, mode) {\n      var leftMostSafe = this.leftMostSafeNode(ast);\n\n      if (leftMostSafe) {\n        return this.convertSafeAccess(ast, leftMostSafe, mode);\n      }\n\n      var convertedArgs = this.visitAll(ast.args, _Mode.Expression);\n\n      if (ast instanceof BuiltinFunctionCall) {\n        return convertToStatementIfNeeded(mode, ast.converter(convertedArgs));\n      }\n\n      var receiver = ast.receiver;\n\n      if (receiver instanceof PropertyRead && receiver.receiver instanceof ImplicitReceiver && !(receiver.receiver instanceof ThisReceiver) && receiver.name === '$any') {\n        if (convertedArgs.length !== 1) {\n          throw new Error(\"Invalid call to $any, expected 1 argument but received \".concat(convertedArgs.length || 'none'));\n        }\n\n        return convertToStatementIfNeeded(mode, convertedArgs[0].cast(DYNAMIC_TYPE, this.convertSourceSpan(ast.span)));\n      }\n\n      var call = this._visit(receiver, _Mode.Expression).callFn(convertedArgs, this.convertSourceSpan(ast.span));\n\n      return convertToStatementIfNeeded(mode, call);\n    }\n  }, {\n    key: \"_visit\",\n    value: function _visit(ast, mode) {\n      var result = this._resultMap.get(ast);\n\n      if (result) return result;\n      return (this._nodeMap.get(ast) || ast).visit(this, mode);\n    }\n  }, {\n    key: \"convertSafeAccess\",\n    value: function convertSafeAccess(ast, leftMostSafe, mode) {\n      // If the expression contains a safe access node on the left it needs to be converted to\n      // an expression that guards the access to the member by checking the receiver for blank. As\n      // execution proceeds from left to right, the left most part of the expression must be guarded\n      // first but, because member access is left associative, the right side of the expression is at\n      // the top of the AST. The desired result requires lifting a copy of the left part of the\n      // expression up to test it for blank before generating the unguarded version.\n      // Consider, for example the following expression: a?.b.c?.d.e\n      // This results in the ast:\n      //         .\n      //        / \\\n      //       ?.   e\n      //      /  \\\n      //     .    d\n      //    / \\\n      //   ?.  c\n      //  /  \\\n      // a    b\n      // The following tree should be generated:\n      //\n      //        /---- ? ----\\\n      //       /      |      \\\n      //     a   /--- ? ---\\  null\n      //        /     |     \\\n      //       .      .     null\n      //      / \\    / \\\n      //     .  c   .   e\n      //    / \\    / \\\n      //   a   b  .   d\n      //         / \\\n      //        .   c\n      //       / \\\n      //      a   b\n      //\n      // Notice that the first guard condition is the left hand of the left most safe access node\n      // which comes in as leftMostSafe to this routine.\n      var guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);\n\n      var temporary = undefined;\n\n      if (this.needsTemporaryInSafeAccess(leftMostSafe.receiver)) {\n        // If the expression has method calls or pipes then we need to save the result into a\n        // temporary variable to avoid calling stateful or impure code more than once.\n        temporary = this.allocateTemporary(); // Preserve the result in the temporary variable\n\n        guardedExpression = temporary.set(guardedExpression); // Ensure all further references to the guarded expression refer to the temporary instead.\n\n        this._resultMap.set(leftMostSafe.receiver, temporary);\n      }\n\n      var condition = guardedExpression.isBlank(); // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n      // leftMostNode with its unguarded version in the call to `this.visit()`.\n\n      if (leftMostSafe instanceof SafeKeyedRead) {\n        this._nodeMap.set(leftMostSafe, new KeyedRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.key));\n      } else {\n        this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.nameSpan, leftMostSafe.receiver, leftMostSafe.name));\n      } // Recursively convert the node now without the guarded member access.\n\n\n      var access = this._visit(ast, _Mode.Expression); // Remove the mapping. This is not strictly required as the converter only traverses each node\n      // once but is safer if the conversion is changed to traverse the nodes more than once.\n\n\n      this._nodeMap.delete(leftMostSafe); // If we allocated a temporary, release it.\n\n\n      if (temporary) {\n        this.releaseTemporary(temporary);\n      } // Produce the conditional\n\n\n      return convertToStatementIfNeeded(mode, condition.conditional(NULL_EXPR, access));\n    }\n  }, {\n    key: \"convertNullishCoalesce\",\n    value: function convertNullishCoalesce(ast, mode) {\n      var left = this._visit(ast.left, _Mode.Expression);\n\n      var right = this._visit(ast.right, _Mode.Expression);\n\n      var temporary = this.allocateTemporary();\n      this.releaseTemporary(temporary); // Generate the following expression. It is identical to how TS\n      // transpiles binary expressions with a nullish coalescing operator.\n      // let temp;\n      // (temp = a) !== null && temp !== undefined ? temp : b;\n\n      return convertToStatementIfNeeded(mode, temporary.set(left).notIdentical(NULL_EXPR).and(temporary.notIdentical(literal(undefined))).conditional(temporary, right));\n    } // Given an expression of the form a?.b.c?.d.e then the left most safe node is\n    // the (a?.b). The . and ?. are left associative thus can be rewritten as:\n    // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or\n    // safe method call as this needs to be transformed initially to:\n    //   a == null ? null : a.c.b.c?.d.e\n    // then to:\n    //   a == null ? null : a.b.c == null ? null : a.b.c.d.e\n\n  }, {\n    key: \"leftMostSafeNode\",\n    value: function leftMostSafeNode(ast) {\n      var _this117 = this;\n\n      var visit = function visit(visitor, ast) {\n        return (_this117._nodeMap.get(ast) || ast).visit(visitor);\n      };\n\n      return ast.visit({\n        visitUnary: function visitUnary(ast) {\n          return null;\n        },\n        visitBinary: function visitBinary(ast) {\n          return null;\n        },\n        visitChain: function visitChain(ast) {\n          return null;\n        },\n        visitConditional: function visitConditional(ast) {\n          return null;\n        },\n        visitCall: function visitCall(ast) {\n          return visit(this, ast.receiver);\n        },\n        visitImplicitReceiver: function visitImplicitReceiver(ast) {\n          return null;\n        },\n        visitThisReceiver: function visitThisReceiver(ast) {\n          return null;\n        },\n        visitInterpolation: function visitInterpolation(ast) {\n          return null;\n        },\n        visitKeyedRead: function visitKeyedRead(ast) {\n          return visit(this, ast.receiver);\n        },\n        visitKeyedWrite: function visitKeyedWrite(ast) {\n          return null;\n        },\n        visitLiteralArray: function visitLiteralArray(ast) {\n          return null;\n        },\n        visitLiteralMap: function visitLiteralMap(ast) {\n          return null;\n        },\n        visitLiteralPrimitive: function visitLiteralPrimitive(ast) {\n          return null;\n        },\n        visitPipe: function visitPipe(ast) {\n          return null;\n        },\n        visitPrefixNot: function visitPrefixNot(ast) {\n          return null;\n        },\n        visitNonNullAssert: function visitNonNullAssert(ast) {\n          return null;\n        },\n        visitPropertyRead: function visitPropertyRead(ast) {\n          return visit(this, ast.receiver);\n        },\n        visitPropertyWrite: function visitPropertyWrite(ast) {\n          return null;\n        },\n        visitQuote: function visitQuote(ast) {\n          return null;\n        },\n        visitSafePropertyRead: function visitSafePropertyRead(ast) {\n          return visit(this, ast.receiver) || ast;\n        },\n        visitSafeKeyedRead: function visitSafeKeyedRead(ast) {\n          return visit(this, ast.receiver) || ast;\n        }\n      });\n    } // Returns true of the AST includes a method or a pipe indicating that, if the\n    // expression is used as the target of a safe property or method access then\n    // the expression should be stored into a temporary variable.\n\n  }, {\n    key: \"needsTemporaryInSafeAccess\",\n    value: function needsTemporaryInSafeAccess(ast) {\n      var _this118 = this;\n\n      var visit = function visit(visitor, ast) {\n        return ast && (_this118._nodeMap.get(ast) || ast).visit(visitor);\n      };\n\n      var visitSome = function visitSome(visitor, ast) {\n        return ast.some(function (ast) {\n          return visit(visitor, ast);\n        });\n      };\n\n      return ast.visit({\n        visitUnary: function visitUnary(ast) {\n          return visit(this, ast.expr);\n        },\n        visitBinary: function visitBinary(ast) {\n          return visit(this, ast.left) || visit(this, ast.right);\n        },\n        visitChain: function visitChain(ast) {\n          return false;\n        },\n        visitConditional: function visitConditional(ast) {\n          return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);\n        },\n        visitCall: function visitCall(ast) {\n          return true;\n        },\n        visitImplicitReceiver: function visitImplicitReceiver(ast) {\n          return false;\n        },\n        visitThisReceiver: function visitThisReceiver(ast) {\n          return false;\n        },\n        visitInterpolation: function visitInterpolation(ast) {\n          return visitSome(this, ast.expressions);\n        },\n        visitKeyedRead: function visitKeyedRead(ast) {\n          return false;\n        },\n        visitKeyedWrite: function visitKeyedWrite(ast) {\n          return false;\n        },\n        visitLiteralArray: function visitLiteralArray(ast) {\n          return true;\n        },\n        visitLiteralMap: function visitLiteralMap(ast) {\n          return true;\n        },\n        visitLiteralPrimitive: function visitLiteralPrimitive(ast) {\n          return false;\n        },\n        visitPipe: function visitPipe(ast) {\n          return true;\n        },\n        visitPrefixNot: function visitPrefixNot(ast) {\n          return visit(this, ast.expression);\n        },\n        visitNonNullAssert: function visitNonNullAssert(ast) {\n          return visit(this, ast.expression);\n        },\n        visitPropertyRead: function visitPropertyRead(ast) {\n          return false;\n        },\n        visitPropertyWrite: function visitPropertyWrite(ast) {\n          return false;\n        },\n        visitQuote: function visitQuote(ast) {\n          return false;\n        },\n        visitSafePropertyRead: function visitSafePropertyRead(ast) {\n          return false;\n        },\n        visitSafeKeyedRead: function visitSafeKeyedRead(ast) {\n          return false;\n        }\n      });\n    }\n  }, {\n    key: \"allocateTemporary\",\n    value: function allocateTemporary() {\n      var tempNumber = this._currentTemporary++;\n      this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n      return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));\n    }\n  }, {\n    key: \"releaseTemporary\",\n    value: function releaseTemporary(temporary) {\n      this._currentTemporary--;\n\n      if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\n        throw new Error(\"Temporary \".concat(temporary.name, \" released out of order\"));\n      }\n    }\n    /**\n     * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.\n     *\n     * `ParseSpan` objects are relative to the start of the expression.\n     * This method converts these to full `ParseSourceSpan` objects that\n     * show where the span is within the overall source file.\n     *\n     * @param span the relative span to convert.\n     * @returns a `ParseSourceSpan` for the given span or null if no\n     * `baseSourceSpan` was provided to this class.\n     */\n\n  }, {\n    key: \"convertSourceSpan\",\n    value: function convertSourceSpan(span) {\n      if (this.baseSourceSpan) {\n        var _start = this.baseSourceSpan.start.moveBy(span.start);\n\n        var end = this.baseSourceSpan.start.moveBy(span.end);\n        var fullStart = this.baseSourceSpan.fullStart.moveBy(span.start);\n        return new ParseSourceSpan(_start, end, fullStart);\n      } else {\n        return null;\n      }\n    }\n    /** Adds the name of an AST to the list of implicit receiver accesses. */\n\n  }, {\n    key: \"addImplicitReceiverAccess\",\n    value: function addImplicitReceiverAccess(name) {\n      if (this.implicitReceiverAccesses) {\n        this.implicitReceiverAccesses.add(name);\n      }\n    }\n  }]);\n\n  return _AstToIrVisitor;\n}();\n\nfunction flattenStatements(arg, output) {\n  if (Array.isArray(arg)) {\n    arg.forEach(function (entry) {\n      return flattenStatements(entry, output);\n    });\n  } else {\n    output.push(arg);\n  }\n}\n\nvar DefaultLocalResolver = /*#__PURE__*/function () {\n  function DefaultLocalResolver(globals) {\n    _classCallCheck(this, DefaultLocalResolver);\n\n    this.globals = globals;\n  }\n\n  _createClass(DefaultLocalResolver, [{\n    key: \"notifyImplicitReceiverUse\",\n    value: function notifyImplicitReceiverUse() {}\n  }, {\n    key: \"maybeRestoreView\",\n    value: function maybeRestoreView() {}\n  }, {\n    key: \"getLocal\",\n    value: function getLocal(name) {\n      if (name === EventHandlerVars.event.name) {\n        return EventHandlerVars.event;\n      }\n\n      return null;\n    }\n  }]);\n\n  return DefaultLocalResolver;\n}();\n\nfunction createCurrValueExpr(bindingId) {\n  return variable(\"currVal_\".concat(bindingId)); // fix syntax highlighting: `\n}\n\nfunction createPreventDefaultVar(bindingId) {\n  return variable(\"pd_\".concat(bindingId));\n}\n\nfunction convertStmtIntoExpression(stmt) {\n  if (stmt instanceof ExpressionStatement) {\n    return stmt.expr;\n  } else if (stmt instanceof ReturnStatement) {\n    return stmt.value;\n  }\n\n  return null;\n}\n\nvar BuiltinFunctionCall = /*#__PURE__*/function (_Call) {\n  _inherits(BuiltinFunctionCall, _Call);\n\n  var _super76 = _createSuper(BuiltinFunctionCall);\n\n  function BuiltinFunctionCall(span, sourceSpan, args, converter) {\n    var _this119;\n\n    _classCallCheck(this, BuiltinFunctionCall);\n\n    _this119 = _super76.call(this, span, sourceSpan, new EmptyExpr(span, sourceSpan), args, null);\n    _this119.converter = converter;\n    return _this119;\n  }\n\n  return BuiltinFunctionCall;\n}(Call);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n *\n * Please make sure to keep to edits in sync with the source file.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n  this feature.\n\n  By default, rules are prefixed with the host element tag name\n  as a descendant selector. This ensures styling does not leak out of the 'top'\n  of the element's ShadowDOM. For example,\n\n  div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n  x-foo div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n  selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\n\n\nvar ShadowCss = /*#__PURE__*/function () {\n  function ShadowCss() {\n    _classCallCheck(this, ShadowCss);\n\n    this.strictStyling = true;\n  }\n  /*\n   * Shim some cssText with the given selector. Returns cssText that can\n   * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).\n   *\n   * When strictStyling is true:\n   * - selector is the attribute added to all elements inside the host,\n   * - hostSelector is the attribute added to the host itself.\n   */\n\n\n  _createClass(ShadowCss, [{\n    key: \"shimCssText\",\n    value: function shimCssText(cssText, selector) {\n      var hostSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var commentsWithHash = extractCommentsWithHash(cssText);\n      cssText = stripComments(cssText);\n      cssText = this._insertDirectives(cssText);\n\n      var scopedCssText = this._scopeCssText(cssText, selector, hostSelector);\n\n      return [scopedCssText].concat(_toConsumableArray(commentsWithHash)).join('\\n');\n    }\n  }, {\n    key: \"_insertDirectives\",\n    value: function _insertDirectives(cssText) {\n      cssText = this._insertPolyfillDirectivesInCssText(cssText);\n      return this._insertPolyfillRulesInCssText(cssText);\n    }\n    /*\n     * Process styles to convert native ShadowDOM rules that will trip\n     * up the css parser; we rely on decorating the stylesheet with inert rules.\n     *\n     * For example, we convert this rule:\n     *\n     * polyfill-next-selector { content: ':host menu-item'; }\n     * ::content menu-item {\n     *\n     * to this:\n     *\n     * scopeName menu-item {\n     *\n     **/\n\n  }, {\n    key: \"_insertPolyfillDirectivesInCssText\",\n    value: function _insertPolyfillDirectivesInCssText(cssText) {\n      // Difference with webcomponents.js: does not handle comments\n      return cssText.replace(_cssContentNextSelectorRe, function () {\n        return (arguments.length <= 2 ? undefined : arguments[2]) + '{';\n      });\n    }\n    /*\n     * Process styles to add rules which will only apply under the polyfill\n     *\n     * For example, we convert this rule:\n     *\n     * polyfill-rule {\n     *   content: ':host menu-item';\n     * ...\n     * }\n     *\n     * to this:\n     *\n     * scopeName menu-item {...}\n     *\n     **/\n\n  }, {\n    key: \"_insertPolyfillRulesInCssText\",\n    value: function _insertPolyfillRulesInCssText(cssText) {\n      // Difference with webcomponents.js: does not handle comments\n      return cssText.replace(_cssContentRuleRe, function () {\n        for (var _len4 = arguments.length, m = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n          m[_key5] = arguments[_key5];\n        }\n\n        var rule = m[0].replace(m[1], '').replace(m[2], '');\n        return m[4] + rule;\n      });\n    }\n    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:\n     *\n     *  .foo {... }\n     *\n     *  and converts this to\n     *\n     *  scopeName .foo { ... }\n     */\n\n  }, {\n    key: \"_scopeCssText\",\n    value: function _scopeCssText(cssText, scopeSelector, hostSelector) {\n      var unscopedRules = this._extractUnscopedRulesFromCssText(cssText); // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n\n\n      cssText = this._insertPolyfillHostInCssText(cssText);\n      cssText = this._convertColonHost(cssText);\n      cssText = this._convertColonHostContext(cssText);\n      cssText = this._convertShadowDOMSelectors(cssText);\n\n      if (scopeSelector) {\n        cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n      }\n\n      cssText = cssText + '\\n' + unscopedRules;\n      return cssText.trim();\n    }\n    /*\n     * Process styles to add rules which will only apply under the polyfill\n     * and do not process via CSSOM. (CSSOM is destructive to rules on rare\n     * occasions, e.g. -webkit-calc on Safari.)\n     * For example, we convert this rule:\n     *\n     * @polyfill-unscoped-rule {\n     *   content: 'menu-item';\n     * ... }\n     *\n     * to this:\n     *\n     * menu-item {...}\n     *\n     **/\n\n  }, {\n    key: \"_extractUnscopedRulesFromCssText\",\n    value: function _extractUnscopedRulesFromCssText(cssText) {\n      // Difference with webcomponents.js: does not handle comments\n      var r = '';\n      var m;\n      _cssContentUnscopedRuleRe.lastIndex = 0;\n\n      while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n        var rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n        r += rule + '\\n\\n';\n      }\n\n      return r;\n    }\n    /*\n     * convert a rule like :host(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar\n     */\n\n  }, {\n    key: \"_convertColonHost\",\n    value: function _convertColonHost(cssText) {\n      return cssText.replace(_cssColonHostRe, function (_, hostSelectors, otherSelectors) {\n        if (hostSelectors) {\n          var convertedSelectors = [];\n          var hostSelectorArray = hostSelectors.split(',').map(function (p) {\n            return p.trim();\n          });\n\n          var _iterator8 = _createForOfIteratorHelper(hostSelectorArray),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var hostSelector = _step8.value;\n              if (!hostSelector) break;\n              var convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;\n              convertedSelectors.push(convertedSelector);\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n\n          return convertedSelectors.join(',');\n        } else {\n          return _polyfillHostNoCombinator + otherSelectors;\n        }\n      });\n    }\n    /*\n     * convert a rule like :host-context(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }\n     *\n     * and\n     *\n     * :host-context(.foo:host) .bar { ... }\n     *\n     * to\n     *\n     * .foo<scopeName> .bar { ... }\n     */\n\n  }, {\n    key: \"_convertColonHostContext\",\n    value: function _convertColonHostContext(cssText) {\n      return cssText.replace(_cssColonHostContextReGlobal, function (selectorText) {\n        var _a; // We have captured a selector that contains a `:host-context` rule.\n        // For backward compatibility `:host-context` may contain a comma separated list of selectors.\n        // Each context selector group will contain a list of host-context selectors that must match\n        // an ancestor of the host.\n        // (Normally `contextSelectorGroups` will only contain a single array of context selectors.)\n\n\n        var contextSelectorGroups = [[]]; // There may be more than `:host-context` in this selector so `selectorText` could look like:\n        // `:host-context(.one):host-context(.two)`.\n        // Execute `_cssColonHostContextRe` over and over until we have extracted all the\n        // `:host-context` selectors from this selector.\n\n        var match;\n\n        while (match = _cssColonHostContextRe.exec(selectorText)) {\n          // `match` = [':host-context(<selectors>)<rest>', <selectors>, <rest>]\n          // The `<selectors>` could actually be a comma separated list: `:host-context(.one, .two)`.\n          var newContextSelectors = ((_a = match[1]) !== null && _a !== void 0 ? _a : '').trim().split(',').map(function (m) {\n            return m.trim();\n          }).filter(function (m) {\n            return m !== '';\n          }); // We must duplicate the current selector group for each of these new selectors.\n          // For example if the current groups are:\n          // ```\n          // [\n          //   ['a', 'b', 'c'],\n          //   ['x', 'y', 'z'],\n          // ]\n          // ```\n          // And we have a new set of comma separated selectors: `:host-context(m,n)` then the new\n          // groups are:\n          // ```\n          // [\n          //   ['a', 'b', 'c', 'm'],\n          //   ['x', 'y', 'z', 'm'],\n          //   ['a', 'b', 'c', 'n'],\n          //   ['x', 'y', 'z', 'n'],\n          // ]\n          // ```\n\n          var contextSelectorGroupsLength = contextSelectorGroups.length;\n          repeatGroups(contextSelectorGroups, newContextSelectors.length);\n\n          for (var i = 0; i < newContextSelectors.length; i++) {\n            for (var j = 0; j < contextSelectorGroupsLength; j++) {\n              contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);\n            }\n          } // Update the `selectorText` and see repeat to see if there are more `:host-context`s.\n\n\n          selectorText = match[2];\n        } // The context selectors now must be combined with each other to capture all the possible\n        // selectors that `:host-context` can match. See `combineHostContextSelectors()` for more\n        // info about how this is done.\n\n\n        return contextSelectorGroups.map(function (contextSelectors) {\n          return combineHostContextSelectors(contextSelectors, selectorText);\n        }).join(', ');\n      });\n    }\n    /*\n     * Convert combinators like ::shadow and pseudo-elements like ::content\n     * by replacing with space.\n     */\n\n  }, {\n    key: \"_convertShadowDOMSelectors\",\n    value: function _convertShadowDOMSelectors(cssText) {\n      return _shadowDOMSelectorsRe.reduce(function (result, pattern) {\n        return result.replace(pattern, ' ');\n      }, cssText);\n    } // change a selector like 'div' to 'name div'\n\n  }, {\n    key: \"_scopeSelectors\",\n    value: function _scopeSelectors(cssText, scopeSelector, hostSelector) {\n      var _this120 = this;\n\n      return processRules(cssText, function (rule) {\n        var selector = rule.selector;\n        var content = rule.content;\n\n        if (rule.selector[0] !== '@') {\n          selector = _this120._scopeSelector(rule.selector, scopeSelector, hostSelector, _this120.strictStyling);\n        } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@document')) {\n          content = _this120._scopeSelectors(rule.content, scopeSelector, hostSelector);\n        } else if (rule.selector.startsWith('@font-face') || rule.selector.startsWith('@page')) {\n          content = _this120._stripScopingSelectors(rule.content);\n        }\n\n        return new CssRule(selector, content);\n      });\n    }\n    /**\n     * Handle a css text that is within a rule that should not contain scope selectors by simply\n     * removing them! An example of such a rule is `@font-face`.\n     *\n     * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.\n     * Normally this would be a syntax error by the author of the styles. But in some rare cases, such\n     * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we\n     * can end up with broken css if the imported styles happen to contain @font-face rules.\n     *\n     * For example:\n     *\n     * ```\n     * :host ::ng-deep {\n     *   import 'some/lib/containing/font-face';\n     * }\n     *\n     * Similar logic applies to `@page` rules which can contain a particular set of properties,\n     * as well as some specific at-rules. Since they can't be encapsulated, we have to strip\n     * any scoping selectors from them. For more information: https://www.w3.org/TR/css-page-3\n     * ```\n     */\n\n  }, {\n    key: \"_stripScopingSelectors\",\n    value: function _stripScopingSelectors(cssText) {\n      return processRules(cssText, function (rule) {\n        var selector = rule.selector.replace(_shadowDeepSelectors, ' ').replace(_polyfillHostNoCombinatorRe, ' ');\n        return new CssRule(selector, rule.content);\n      });\n    }\n  }, {\n    key: \"_scopeSelector\",\n    value: function _scopeSelector(selector, scopeSelector, hostSelector, strict) {\n      var _this121 = this;\n\n      return selector.split(',').map(function (part) {\n        return part.trim().split(_shadowDeepSelectors);\n      }).map(function (deepParts) {\n        var _deepParts = _toArray(deepParts),\n            shallowPart = _deepParts[0],\n            otherParts = _deepParts.slice(1);\n\n        var applyScope = function applyScope(shallowPart) {\n          if (_this121._selectorNeedsScoping(shallowPart, scopeSelector)) {\n            return strict ? _this121._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this121._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n          } else {\n            return shallowPart;\n          }\n        };\n\n        return [applyScope(shallowPart)].concat(_toConsumableArray(otherParts)).join(' ');\n      }).join(', ');\n    }\n  }, {\n    key: \"_selectorNeedsScoping\",\n    value: function _selectorNeedsScoping(selector, scopeSelector) {\n      var re = this._makeScopeMatcher(scopeSelector);\n\n      return !re.test(selector);\n    }\n  }, {\n    key: \"_makeScopeMatcher\",\n    value: function _makeScopeMatcher(scopeSelector) {\n      var lre = /\\[/g;\n      var rre = /\\]/g;\n      scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n      return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    }\n  }, {\n    key: \"_applySelectorScope\",\n    value: function _applySelectorScope(selector, scopeSelector, hostSelector) {\n      // Difference from webcomponents.js: scopeSelector could not be an array\n      return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n    } // scope via name and [is=name]\n\n  }, {\n    key: \"_applySimpleSelectorScope\",\n    value: function _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n      // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n      _polyfillHostRe.lastIndex = 0;\n\n      if (_polyfillHostRe.test(selector)) {\n        var replaceBy = this.strictStyling ? \"[\".concat(hostSelector, \"]\") : scopeSelector;\n        return selector.replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {\n          return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n            return before + replaceBy + colon + after;\n          });\n        }).replace(_polyfillHostRe, replaceBy + ' ');\n      }\n\n      return scopeSelector + ' ' + selector;\n    } // return a selector with [name] suffix on each simple selector\n    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */\n\n  }, {\n    key: \"_applyStrictSelectorScope\",\n    value: function _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n      var _this122 = this;\n\n      var isRe = /\\[is=([^\\]]*)\\]/g;\n      scopeSelector = scopeSelector.replace(isRe, function (_) {\n        return arguments.length <= 1 ? undefined : arguments[1];\n      });\n      var attrName = '[' + scopeSelector + ']';\n\n      var _scopeSelectorPart = function _scopeSelectorPart(p) {\n        var scopedP = p.trim();\n\n        if (!scopedP) {\n          return '';\n        }\n\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n          scopedP = _this122._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        } else {\n          // remove :host since it should be unnecessary\n          var t = p.replace(_polyfillHostRe, '');\n\n          if (t.length > 0) {\n            var matches = t.match(/([^:]*)(:*)(.*)/);\n\n            if (matches) {\n              scopedP = matches[1] + attrName + matches[2] + matches[3];\n            }\n          }\n        }\n\n        return scopedP;\n      };\n\n      var safeContent = new SafeSelector(selector);\n      selector = safeContent.content();\n      var scopedSelector = '';\n      var startIndex = 0;\n      var res;\n      var sep = /( |>|\\+|~(?!=))\\s*/g; // If a selector appears before :host it should not be shimmed as it\n      // matches on ancestor elements and not on elements in the host's shadow\n      // `:host-context(div)` is transformed to\n      // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n      // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n      // Historically `component-tag:host` was matching the component so we also want to preserve\n      // this behavior to avoid breaking legacy apps (it should not match).\n      // The behavior should be:\n      // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n      // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n      //   `:host-context(tag)`)\n\n      var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1; // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n\n      var shouldScope = !hasHost;\n\n      while ((res = sep.exec(selector)) !== null) {\n        var separator = res[1];\n\n        var _part = selector.slice(startIndex, res.index).trim();\n\n        shouldScope = shouldScope || _part.indexOf(_polyfillHostNoCombinator) > -1;\n        var scopedPart = shouldScope ? _scopeSelectorPart(_part) : _part;\n        scopedSelector += \"\".concat(scopedPart, \" \").concat(separator, \" \");\n        startIndex = sep.lastIndex;\n      }\n\n      var part = selector.substring(startIndex);\n      shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n      scopedSelector += shouldScope ? _scopeSelectorPart(part) : part; // replace the placeholders with their original values\n\n      return safeContent.restore(scopedSelector);\n    }\n  }, {\n    key: \"_insertPolyfillHostInCssText\",\n    value: function _insertPolyfillHostInCssText(selector) {\n      return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);\n    }\n  }]);\n\n  return ShadowCss;\n}();\n\nvar SafeSelector = /*#__PURE__*/function () {\n  function SafeSelector(selector) {\n    var _this123 = this;\n\n    _classCallCheck(this, SafeSelector);\n\n    this.placeholders = [];\n    this.index = 0; // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n\n    selector = this._escapeRegexMatches(selector, /(\\[[^\\]]*\\])/g); // CSS allows for certain special characters to be used in selectors if they're escaped.\n    // E.g. `.foo:blue` won't match a class called `foo:blue`, because the colon denotes a\n    // pseudo-class, but writing `.foo\\:blue` will match, because the colon was escaped.\n    // Replace all escape sequences (`\\` followed by a character) with a placeholder so\n    // that our handling of pseudo-selectors doesn't mess with them.\n\n    selector = this._escapeRegexMatches(selector, /(\\\\.)/g); // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n\n    this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n      var replaceBy = \"__ph-\".concat(_this123.index, \"__\");\n\n      _this123.placeholders.push(exp);\n\n      _this123.index++;\n      return pseudo + replaceBy;\n    });\n  }\n\n  _createClass(SafeSelector, [{\n    key: \"restore\",\n    value: function restore(content) {\n      var _this124 = this;\n\n      return content.replace(/__ph-(\\d+)__/g, function (_ph, index) {\n        return _this124.placeholders[+index];\n      });\n    }\n  }, {\n    key: \"content\",\n    value: function content() {\n      return this._content;\n    }\n    /**\n     * Replaces all of the substrings that match a regex within a\n     * special string (e.g. `__ph-0__`, `__ph-1__`, etc).\n     */\n\n  }, {\n    key: \"_escapeRegexMatches\",\n    value: function _escapeRegexMatches(content, pattern) {\n      var _this125 = this;\n\n      return content.replace(pattern, function (_, keep) {\n        var replaceBy = \"__ph-\".concat(_this125.index, \"__\");\n\n        _this125.placeholders.push(keep);\n\n        _this125.index++;\n        return replaceBy;\n      });\n    }\n  }]);\n\n  return SafeSelector;\n}();\n\nvar _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\nvar _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nvar _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nvar _polyfillHost = '-shadowcsshost'; // note: :host-context pre-processed to -shadowcsshostcontext.\n\nvar _polyfillHostContext = '-shadowcsscontext';\n\nvar _parenSuffix = '(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\n\nvar _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, 'gim');\n\nvar _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, 'gim');\n\nvar _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, 'im');\n\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, // Deprecated selectors\n/\\/shadow-deep\\//g, /\\/shadow\\//g]; // The deep combinator is deprecated in the CSS spec\n// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\n// see https://github.com/angular/angular/pull/17677\n\nvar _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\nvar _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*[\\s\\S]*?\\*\\//g;\n\nfunction stripComments(input) {\n  return input.replace(_commentRe, '');\n}\n\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n\nfunction extractCommentsWithHash(input) {\n  return input.match(_commentWithHashRe) || [];\n}\n\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar QUOTE_PLACEHOLDER = '%QUOTED%';\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _quotedRe = /%QUOTED%/g;\nvar CONTENT_PAIRS = new Map([['{', '}']]);\nvar QUOTE_PAIRS = new Map([[\"\\\"\", \"\\\"\"], [\"'\", \"'\"]]);\n\nvar CssRule = function CssRule(selector, content) {\n  _classCallCheck(this, CssRule);\n\n  this.selector = selector;\n  this.content = content;\n};\n\nfunction processRules(input, ruleCallback) {\n  var inputWithEscapedQuotes = escapeBlocks(input, QUOTE_PAIRS, QUOTE_PLACEHOLDER);\n  var inputWithEscapedBlocks = escapeBlocks(inputWithEscapedQuotes.escapedString, CONTENT_PAIRS, BLOCK_PLACEHOLDER);\n  var nextBlockIndex = 0;\n  var nextQuoteIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n    var selector = arguments.length <= 2 ? undefined : arguments[2];\n    var content = '';\n    var suffix = arguments.length <= 4 ? undefined : arguments[4];\n    var contentPrefix = '';\n\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n\n    var rule = ruleCallback(new CssRule(selector, content));\n    return \"\".concat(arguments.length <= 1 ? undefined : arguments[1]).concat(rule.selector).concat(arguments.length <= 3 ? undefined : arguments[3]).concat(contentPrefix).concat(rule.content).concat(suffix);\n  }).replace(_quotedRe, function () {\n    return inputWithEscapedQuotes.blocks[nextQuoteIndex++];\n  });\n}\n\nvar StringWithEscapedBlocks = function StringWithEscapedBlocks(escapedString, blocks) {\n  _classCallCheck(this, StringWithEscapedBlocks);\n\n  this.escapedString = escapedString;\n  this.blocks = blocks;\n};\n\nfunction escapeBlocks(input, charPairs, placeholder) {\n  var resultParts = [];\n  var escapedBlocks = [];\n  var openCharCount = 0;\n  var nonBlockStartIndex = 0;\n  var blockStartIndex = -1;\n  var openChar;\n  var closeChar;\n\n  for (var i = 0; i < input.length; i++) {\n    var char = input[i];\n\n    if (char === '\\\\') {\n      i++;\n    } else if (char === closeChar) {\n      openCharCount--;\n\n      if (openCharCount === 0) {\n        escapedBlocks.push(input.substring(blockStartIndex, i));\n        resultParts.push(placeholder);\n        nonBlockStartIndex = i;\n        blockStartIndex = -1;\n        openChar = closeChar = undefined;\n      }\n    } else if (char === openChar) {\n      openCharCount++;\n    } else if (openCharCount === 0 && charPairs.has(char)) {\n      openChar = char;\n      closeChar = charPairs.get(char);\n      openCharCount = 1;\n      blockStartIndex = i + 1;\n      resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));\n    }\n  }\n\n  if (blockStartIndex !== -1) {\n    escapedBlocks.push(input.substring(blockStartIndex));\n    resultParts.push(placeholder);\n  } else {\n    resultParts.push(input.substring(nonBlockStartIndex));\n  }\n\n  return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n/**\n * Combine the `contextSelectors` with the `hostMarker` and the `otherSelectors`\n * to create a selector that matches the same as `:host-context()`.\n *\n * Given a single context selector `A` we need to output selectors that match on the host and as an\n * ancestor of the host:\n *\n * ```\n * A <hostMarker>, A<hostMarker> {}\n * ```\n *\n * When there is more than one context selector we also have to create combinations of those\n * selectors with each other. For example if there are `A` and `B` selectors the output is:\n *\n * ```\n * AB<hostMarker>, AB <hostMarker>, A B<hostMarker>,\n * B A<hostMarker>, A B <hostMarker>, B A <hostMarker> {}\n * ```\n *\n * And so on...\n *\n * @param hostMarker the string that selects the host element.\n * @param contextSelectors an array of context selectors that will be combined.\n * @param otherSelectors the rest of the selectors that are not context selectors.\n */\n\n\nfunction combineHostContextSelectors(contextSelectors, otherSelectors) {\n  var hostMarker = _polyfillHostNoCombinator;\n  _polyfillHostRe.lastIndex = 0; // reset the regex to ensure we get an accurate test\n\n  var otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors); // If there are no context selectors then just output a host marker\n\n\n  if (contextSelectors.length === 0) {\n    return hostMarker + otherSelectors;\n  }\n\n  var combined = [contextSelectors.pop() || ''];\n\n  while (contextSelectors.length > 0) {\n    var length = combined.length;\n    var contextSelector = contextSelectors.pop();\n\n    for (var i = 0; i < length; i++) {\n      var previousSelectors = combined[i]; // Add the new selector as a descendant of the previous selectors\n\n      combined[length * 2 + i] = previousSelectors + ' ' + contextSelector; // Add the new selector as an ancestor of the previous selectors\n\n      combined[length + i] = contextSelector + ' ' + previousSelectors; // Add the new selector to act on the same element as the previous selectors\n\n      combined[i] = contextSelector + previousSelectors;\n    }\n  } // Finally connect the selector to the `hostMarker`s: either acting directly on the host\n  // (A<hostMarker>) or as an ancestor (A <hostMarker>).\n\n\n  return combined.map(function (s) {\n    return otherSelectorsHasHost ? \"\".concat(s).concat(otherSelectors) : \"\".concat(s).concat(hostMarker).concat(otherSelectors, \", \").concat(s, \" \").concat(hostMarker).concat(otherSelectors);\n  }).join(',');\n}\n/**\n * Mutate the given `groups` array so that there are `multiples` clones of the original array\n * stored.\n *\n * For example `repeatGroups([a, b], 3)` will result in `[a, b, a, b, a, b]` - but importantly the\n * newly added groups will be clones of the original.\n *\n * @param groups An array of groups of strings that will be repeated. This array is mutated\n *     in-place.\n * @param multiples The number of times the current groups should appear.\n */\n\n\nfunction repeatGroups(groups, multiples) {\n  var length = groups.length;\n\n  for (var i = 1; i < multiples; i++) {\n    for (var j = 0; j < length; j++) {\n      groups[j + i * length] = groups[j].slice(0);\n    }\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Parses string representation of a style and converts it into object literal.\n *\n * @param value string representation of style as used in the `style` attribute in HTML.\n *   Example: `color: red; height: auto`.\n * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',\n * 'auto']`\n */\n\n\nfunction parse(value) {\n  // we use a string array here instead of a string map\n  // because a string-map is not guaranteed to retain the\n  // order of the entries whereas a string array can be\n  // constructed in a [key, value, key, value] format.\n  var styles = [];\n  var i = 0;\n  var parenDepth = 0;\n  var quote = 0\n  /* QuoteNone */\n  ;\n  var valueStart = 0;\n  var propStart = 0;\n  var currentProp = null;\n  var valueHasQuotes = false;\n\n  while (i < value.length) {\n    var token = value.charCodeAt(i++);\n\n    switch (token) {\n      case 40\n      /* OpenParen */\n      :\n        parenDepth++;\n        break;\n\n      case 41\n      /* CloseParen */\n      :\n        parenDepth--;\n        break;\n\n      case 39\n      /* QuoteSingle */\n      :\n        // valueStart needs to be there since prop values don't\n        // have quotes in CSS\n        valueHasQuotes = valueHasQuotes || valueStart > 0;\n\n        if (quote === 0\n        /* QuoteNone */\n        ) {\n          quote = 39\n          /* QuoteSingle */\n          ;\n        } else if (quote === 39\n        /* QuoteSingle */\n        && value.charCodeAt(i - 1) !== 92\n        /* BackSlash */\n        ) {\n          quote = 0\n          /* QuoteNone */\n          ;\n        }\n\n        break;\n\n      case 34\n      /* QuoteDouble */\n      :\n        // same logic as above\n        valueHasQuotes = valueHasQuotes || valueStart > 0;\n\n        if (quote === 0\n        /* QuoteNone */\n        ) {\n          quote = 34\n          /* QuoteDouble */\n          ;\n        } else if (quote === 34\n        /* QuoteDouble */\n        && value.charCodeAt(i - 1) !== 92\n        /* BackSlash */\n        ) {\n          quote = 0\n          /* QuoteNone */\n          ;\n        }\n\n        break;\n\n      case 58\n      /* Colon */\n      :\n        if (!currentProp && parenDepth === 0 && quote === 0\n        /* QuoteNone */\n        ) {\n          currentProp = hyphenate(value.substring(propStart, i - 1).trim());\n          valueStart = i;\n        }\n\n        break;\n\n      case 59\n      /* Semicolon */\n      :\n        if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0\n        /* QuoteNone */\n        ) {\n          var styleVal = value.substring(valueStart, i - 1).trim();\n          styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal);\n          propStart = i;\n          valueStart = 0;\n          currentProp = null;\n          valueHasQuotes = false;\n        }\n\n        break;\n    }\n  }\n\n  if (currentProp && valueStart) {\n    var _styleVal = value.substr(valueStart).trim();\n\n    styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(_styleVal) : _styleVal);\n  }\n\n  return styles;\n}\n\nfunction stripUnnecessaryQuotes(value) {\n  var qS = value.charCodeAt(0);\n  var qE = value.charCodeAt(value.length - 1);\n\n  if (qS == qE && (qS == 39\n  /* QuoteSingle */\n  || qS == 34\n  /* QuoteDouble */\n  )) {\n    var tempValue = value.substring(1, value.length - 1); // special case to avoid using a multi-quoted string that was just chomped\n    // (e.g. `font-family: \"Verdana\", \"sans-serif\"`)\n\n    if (tempValue.indexOf('\\'') == -1 && tempValue.indexOf('\"') == -1) {\n      value = tempValue;\n    }\n  }\n\n  return value;\n}\n\nfunction hyphenate(value) {\n  return value.replace(/[a-z][A-Z]/g, function (v) {\n    return v.charAt(0) + '-' + v.charAt(1);\n  }).toLowerCase();\n}\n\nvar IMPORTANT_FLAG = '!important';\n/**\n * Minimum amount of binding slots required in the runtime for style/class bindings.\n *\n * Styling in Angular uses up two slots in the runtime LView/TData data structures to\n * record binding data, property information and metadata.\n *\n * When a binding is registered it will place the following information in the `LView`:\n *\n * slot 1) binding value\n * slot 2) cached value (all other values collected before it in string form)\n *\n * When a binding is registered it will place the following information in the `TData`:\n *\n * slot 1) prop name\n * slot 2) binding index that points to the previous style/class binding (and some extra config\n * values)\n *\n * Let's imagine we have a binding that looks like so:\n *\n * ```\n * <div [style.width]=\"x\" [style.height]=\"y\">\n * ```\n *\n * Our `LView` and `TData` data-structures look like so:\n *\n * ```typescript\n * LView = [\n *   // ...\n *   x, // value of x\n *   \"width: x\",\n *\n *   y, // value of y\n *   \"width: x; height: y\",\n *   // ...\n * ];\n *\n * TData = [\n *   // ...\n *   \"width\", // binding slot 20\n *   0,\n *\n *   \"height\",\n *   20,\n *   // ...\n * ];\n * ```\n *\n * */\n\nvar MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;\n/**\n * Produces creation/update instructions for all styling bindings (class and style)\n *\n * It also produces the creation instruction to register all initial styling values\n * (which are all the static class=\"...\" and style=\"...\" attribute values that exist\n * on an element within a template).\n *\n * The builder class below handles producing instructions for the following cases:\n *\n * - Static style/class attributes (style=\"...\" and class=\"...\")\n * - Dynamic style/class map bindings ([style]=\"map\" and [class]=\"map|string\")\n * - Dynamic style/class property bindings ([style.prop]=\"exp\" and [class.name]=\"exp\")\n *\n * Due to the complex relationship of all of these cases, the instructions generated\n * for these attributes/properties/bindings must be done so in the correct order. The\n * order which these must be generated is as follows:\n *\n * if (createMode) {\n *   styling(...)\n * }\n * if (updateMode) {\n *   styleMap(...)\n *   classMap(...)\n *   styleProp(...)\n *   classProp(...)\n * }\n *\n * The creation/update methods within the builder class produce these instructions.\n */\n\nvar StylingBuilder = /*#__PURE__*/function () {\n  function StylingBuilder(_directiveExpr) {\n    _classCallCheck(this, StylingBuilder);\n\n    this._directiveExpr = _directiveExpr;\n    /** Whether or not there are any static styling values present */\n\n    this._hasInitialValues = false;\n    /**\n     *  Whether or not there are any styling bindings present\n     *  (i.e. `[style]`, `[class]`, `[style.prop]` or `[class.name]`)\n     */\n\n    this.hasBindings = false;\n    this.hasBindingsWithPipes = false;\n    /** the input for [class] (if it exists) */\n\n    this._classMapInput = null;\n    /** the input for [style] (if it exists) */\n\n    this._styleMapInput = null;\n    /** an array of each [style.prop] input */\n\n    this._singleStyleInputs = null;\n    /** an array of each [class.name] input */\n\n    this._singleClassInputs = null;\n    this._lastStylingInput = null;\n    this._firstStylingInput = null; // maps are used instead of hash maps because a Map will\n    // retain the ordering of the keys\n\n    /**\n     * Represents the location of each style binding in the template\n     * (e.g. `<div [style.width]=\"w\" [style.height]=\"h\">` implies\n     * that `width=0` and `height=1`)\n     */\n\n    this._stylesIndex = new Map();\n    /**\n     * Represents the location of each class binding in the template\n     * (e.g. `<div [class.big]=\"b\" [class.hidden]=\"h\">` implies\n     * that `big=0` and `hidden=1`)\n     */\n\n    this._classesIndex = new Map();\n    this._initialStyleValues = [];\n    this._initialClassValues = [];\n  }\n  /**\n   * Registers a given input to the styling builder to be later used when producing AOT code.\n   *\n   * The code below will only accept the input if it is somehow tied to styling (whether it be\n   * style/class bindings or static style/class attributes).\n   */\n\n\n  _createClass(StylingBuilder, [{\n    key: \"registerBoundInput\",\n    value: function registerBoundInput(input) {\n      // [attr.style] or [attr.class] are skipped in the code below,\n      // they should not be treated as styling-based bindings since\n      // they are intended to be written directly to the attr and\n      // will therefore skip all style/class resolution that is present\n      // with style=\"\", [style]=\"\" and [style.prop]=\"\", class=\"\",\n      // [class.prop]=\"\". [class]=\"\" assignments\n      var binding = null;\n      var name = input.name;\n\n      switch (input.type) {\n        case 0\n        /* Property */\n        :\n          binding = this.registerInputBasedOnName(name, input.value, input.sourceSpan);\n          break;\n\n        case 3\n        /* Style */\n        :\n          binding = this.registerStyleInput(name, false, input.value, input.sourceSpan, input.unit);\n          break;\n\n        case 2\n        /* Class */\n        :\n          binding = this.registerClassInput(name, false, input.value, input.sourceSpan);\n          break;\n      }\n\n      return binding ? true : false;\n    }\n  }, {\n    key: \"registerInputBasedOnName\",\n    value: function registerInputBasedOnName(name, expression, sourceSpan) {\n      var binding = null;\n      var prefix = name.substring(0, 6);\n      var isStyle = name === 'style' || prefix === 'style.' || prefix === 'style!';\n      var isClass = !isStyle && (name === 'class' || prefix === 'class.' || prefix === 'class!');\n\n      if (isStyle || isClass) {\n        var isMapBased = name.charAt(5) !== '.'; // style.prop or class.prop makes this a no\n\n        var property = name.substr(isMapBased ? 5 : 6); // the dot explains why there's a +1\n\n        if (isStyle) {\n          binding = this.registerStyleInput(property, isMapBased, expression, sourceSpan);\n        } else {\n          binding = this.registerClassInput(property, isMapBased, expression, sourceSpan);\n        }\n      }\n\n      return binding;\n    }\n  }, {\n    key: \"registerStyleInput\",\n    value: function registerStyleInput(name, isMapBased, value, sourceSpan, suffix) {\n      if (isEmptyExpression(value)) {\n        return null;\n      } // CSS custom properties are case-sensitive so we shouldn't normalize them.\n      // See: https://www.w3.org/TR/css-variables-1/#defining-variables\n\n\n      if (!isCssCustomProperty(name)) {\n        name = hyphenate(name);\n      }\n\n      var _parseProperty = parseProperty(name),\n          property = _parseProperty.property,\n          hasOverrideFlag = _parseProperty.hasOverrideFlag,\n          bindingSuffix = _parseProperty.suffix;\n\n      suffix = typeof suffix === 'string' && suffix.length !== 0 ? suffix : bindingSuffix;\n      var entry = {\n        name: property,\n        suffix: suffix,\n        value: value,\n        sourceSpan: sourceSpan,\n        hasOverrideFlag: hasOverrideFlag\n      };\n\n      if (isMapBased) {\n        this._styleMapInput = entry;\n      } else {\n        (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);\n        registerIntoMap(this._stylesIndex, property);\n      }\n\n      this._lastStylingInput = entry;\n      this._firstStylingInput = this._firstStylingInput || entry;\n\n      this._checkForPipes(value);\n\n      this.hasBindings = true;\n      return entry;\n    }\n  }, {\n    key: \"registerClassInput\",\n    value: function registerClassInput(name, isMapBased, value, sourceSpan) {\n      if (isEmptyExpression(value)) {\n        return null;\n      }\n\n      var _parseProperty2 = parseProperty(name),\n          property = _parseProperty2.property,\n          hasOverrideFlag = _parseProperty2.hasOverrideFlag;\n\n      var entry = {\n        name: property,\n        value: value,\n        sourceSpan: sourceSpan,\n        hasOverrideFlag: hasOverrideFlag,\n        suffix: null\n      };\n\n      if (isMapBased) {\n        this._classMapInput = entry;\n      } else {\n        (this._singleClassInputs = this._singleClassInputs || []).push(entry);\n        registerIntoMap(this._classesIndex, property);\n      }\n\n      this._lastStylingInput = entry;\n      this._firstStylingInput = this._firstStylingInput || entry;\n\n      this._checkForPipes(value);\n\n      this.hasBindings = true;\n      return entry;\n    }\n  }, {\n    key: \"_checkForPipes\",\n    value: function _checkForPipes(value) {\n      if (value instanceof ASTWithSource && value.ast instanceof BindingPipe) {\n        this.hasBindingsWithPipes = true;\n      }\n    }\n    /**\n     * Registers the element's static style string value to the builder.\n     *\n     * @param value the style string (e.g. `width:100px; height:200px;`)\n     */\n\n  }, {\n    key: \"registerStyleAttr\",\n    value: function registerStyleAttr(value) {\n      this._initialStyleValues = parse(value);\n      this._hasInitialValues = true;\n    }\n    /**\n     * Registers the element's static class string value to the builder.\n     *\n     * @param value the className string (e.g. `disabled gold zoom`)\n     */\n\n  }, {\n    key: \"registerClassAttr\",\n    value: function registerClassAttr(value) {\n      this._initialClassValues = value.trim().split(/\\s+/g);\n      this._hasInitialValues = true;\n    }\n    /**\n     * Appends all styling-related expressions to the provided attrs array.\n     *\n     * @param attrs an existing array where each of the styling expressions\n     * will be inserted into.\n     */\n\n  }, {\n    key: \"populateInitialStylingAttrs\",\n    value: function populateInitialStylingAttrs(attrs) {\n      // [CLASS_MARKER, 'foo', 'bar', 'baz' ...]\n      if (this._initialClassValues.length) {\n        attrs.push(literal(1\n        /* Classes */\n        ));\n\n        for (var i = 0; i < this._initialClassValues.length; i++) {\n          attrs.push(literal(this._initialClassValues[i]));\n        }\n      } // [STYLE_MARKER, 'width', '200px', 'height', '100px', ...]\n\n\n      if (this._initialStyleValues.length) {\n        attrs.push(literal(2\n        /* Styles */\n        ));\n\n        for (var _i6 = 0; _i6 < this._initialStyleValues.length; _i6 += 2) {\n          attrs.push(literal(this._initialStyleValues[_i6]), literal(this._initialStyleValues[_i6 + 1]));\n        }\n      }\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `elementHostAttrs`.\n     *\n     * The instruction generation code below is used for producing the AOT statement code which is\n     * responsible for registering initial styles (within a directive hostBindings' creation block),\n     * as well as any of the provided attribute values, to the directive host element.\n     */\n\n  }, {\n    key: \"assignHostAttrs\",\n    value: function assignHostAttrs(attrs, definitionMap) {\n      if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {\n        this.populateInitialStylingAttrs(attrs);\n        definitionMap.set('hostAttrs', literalArr(attrs));\n      }\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `classMap`.\n     *\n     * The instruction data will contain all expressions for `classMap` to function\n     * which includes the `[class]` expression params.\n     */\n\n  }, {\n    key: \"buildClassMapInstruction\",\n    value: function buildClassMapInstruction(valueConverter) {\n      if (this._classMapInput) {\n        return this._buildMapBasedInstruction(valueConverter, true, this._classMapInput);\n      }\n\n      return null;\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `styleMap`.\n     *\n     * The instruction data will contain all expressions for `styleMap` to function\n     * which includes the `[style]` expression params.\n     */\n\n  }, {\n    key: \"buildStyleMapInstruction\",\n    value: function buildStyleMapInstruction(valueConverter) {\n      if (this._styleMapInput) {\n        return this._buildMapBasedInstruction(valueConverter, false, this._styleMapInput);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_buildMapBasedInstruction\",\n    value: function _buildMapBasedInstruction(valueConverter, isClassBased, stylingInput) {\n      // each styling binding value is stored in the LView\n      // map-based bindings allocate two slots: one for the\n      // previous binding value and another for the previous\n      // className or style attribute value.\n      var totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED; // these values must be outside of the update block so that they can\n      // be evaluated (the AST visit call) during creation time so that any\n      // pipes can be picked up in time before the template is built\n\n      var mapValue = stylingInput.value.visit(valueConverter);\n      var reference;\n\n      if (mapValue instanceof Interpolation) {\n        totalBindingSlotsRequired += mapValue.expressions.length;\n        reference = isClassBased ? getClassMapInterpolationExpression(mapValue) : getStyleMapInterpolationExpression(mapValue);\n      } else {\n        reference = isClassBased ? Identifiers$1.classMap : Identifiers$1.styleMap;\n      }\n\n      return {\n        reference: reference,\n        calls: [{\n          supportsInterpolation: true,\n          sourceSpan: stylingInput.sourceSpan,\n          allocateBindingSlots: totalBindingSlotsRequired,\n          params: function params(convertFn) {\n            var convertResult = convertFn(mapValue);\n            var params = Array.isArray(convertResult) ? convertResult : [convertResult];\n            return params;\n          }\n        }]\n      };\n    }\n  }, {\n    key: \"_buildSingleInputs\",\n    value: function _buildSingleInputs(reference, inputs, valueConverter, getInterpolationExpressionFn, isClassBased) {\n      var instructions = [];\n      inputs.forEach(function (input) {\n        var previousInstruction = instructions[instructions.length - 1];\n        var value = input.value.visit(valueConverter);\n        var referenceForCall = reference; // each styling binding value is stored in the LView\n        // but there are two values stored for each binding:\n        //   1) the value itself\n        //   2) an intermediate value (concatenation of style up to this point).\n        //      We need to store the intermediate value so that we don't allocate\n        //      the strings on each CD.\n\n        var totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;\n\n        if (value instanceof Interpolation) {\n          totalBindingSlotsRequired += value.expressions.length;\n\n          if (getInterpolationExpressionFn) {\n            referenceForCall = getInterpolationExpressionFn(value);\n          }\n        }\n\n        var call = {\n          sourceSpan: input.sourceSpan,\n          allocateBindingSlots: totalBindingSlotsRequired,\n          supportsInterpolation: !!getInterpolationExpressionFn,\n          params: function params(convertFn) {\n            // params => stylingProp(propName, value, suffix)\n            var params = [];\n            params.push(literal(input.name));\n            var convertResult = convertFn(value);\n\n            if (Array.isArray(convertResult)) {\n              params.push.apply(params, _toConsumableArray(convertResult));\n            } else {\n              params.push(convertResult);\n            } // [style.prop] bindings may use suffix values (e.g. px, em, etc...), therefore,\n            // if that is detected then we need to pass that in as an optional param.\n\n\n            if (!isClassBased && input.suffix !== null) {\n              params.push(literal(input.suffix));\n            }\n\n            return params;\n          }\n        }; // If we ended up generating a call to the same instruction as the previous styling property\n        // we can chain the calls together safely to save some bytes, otherwise we have to generate\n        // a separate instruction call. This is primarily a concern with interpolation instructions\n        // where we may start off with one `reference`, but end up using another based on the\n        // number of interpolations.\n\n        if (previousInstruction && previousInstruction.reference === referenceForCall) {\n          previousInstruction.calls.push(call);\n        } else {\n          instructions.push({\n            reference: referenceForCall,\n            calls: [call]\n          });\n        }\n      });\n      return instructions;\n    }\n  }, {\n    key: \"_buildClassInputs\",\n    value: function _buildClassInputs(valueConverter) {\n      if (this._singleClassInputs) {\n        return this._buildSingleInputs(Identifiers$1.classProp, this._singleClassInputs, valueConverter, null, true);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"_buildStyleInputs\",\n    value: function _buildStyleInputs(valueConverter) {\n      if (this._singleStyleInputs) {\n        return this._buildSingleInputs(Identifiers$1.styleProp, this._singleStyleInputs, valueConverter, getStylePropInterpolationExpression, false);\n      }\n\n      return [];\n    }\n    /**\n     * Constructs all instructions which contain the expressions that will be placed\n     * into the update block of a template function or a directive hostBindings function.\n     */\n\n  }, {\n    key: \"buildUpdateLevelInstructions\",\n    value: function buildUpdateLevelInstructions(valueConverter) {\n      var instructions = [];\n\n      if (this.hasBindings) {\n        var styleMapInstruction = this.buildStyleMapInstruction(valueConverter);\n\n        if (styleMapInstruction) {\n          instructions.push(styleMapInstruction);\n        }\n\n        var classMapInstruction = this.buildClassMapInstruction(valueConverter);\n\n        if (classMapInstruction) {\n          instructions.push(classMapInstruction);\n        }\n\n        instructions.push.apply(instructions, _toConsumableArray(this._buildStyleInputs(valueConverter)));\n        instructions.push.apply(instructions, _toConsumableArray(this._buildClassInputs(valueConverter)));\n      }\n\n      return instructions;\n    }\n  }]);\n\n  return StylingBuilder;\n}();\n\nfunction registerIntoMap(map, key) {\n  if (!map.has(key)) {\n    map.set(key, map.size);\n  }\n}\n\nfunction parseProperty(name) {\n  var hasOverrideFlag = false;\n  var overrideIndex = name.indexOf(IMPORTANT_FLAG);\n\n  if (overrideIndex !== -1) {\n    name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';\n    hasOverrideFlag = true;\n  }\n\n  var suffix = null;\n  var property = name;\n  var unitIndex = name.lastIndexOf('.');\n\n  if (unitIndex > 0) {\n    suffix = name.substr(unitIndex + 1);\n    property = name.substring(0, unitIndex);\n  }\n\n  return {\n    property: property,\n    suffix: suffix,\n    hasOverrideFlag: hasOverrideFlag\n  };\n}\n/**\n * Gets the instruction to generate for an interpolated class map.\n * @param interpolation An Interpolation AST\n */\n\n\nfunction getClassMapInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers$1.classMap;\n\n    case 3:\n      return Identifiers$1.classMapInterpolate1;\n\n    case 5:\n      return Identifiers$1.classMapInterpolate2;\n\n    case 7:\n      return Identifiers$1.classMapInterpolate3;\n\n    case 9:\n      return Identifiers$1.classMapInterpolate4;\n\n    case 11:\n      return Identifiers$1.classMapInterpolate5;\n\n    case 13:\n      return Identifiers$1.classMapInterpolate6;\n\n    case 15:\n      return Identifiers$1.classMapInterpolate7;\n\n    case 17:\n      return Identifiers$1.classMapInterpolate8;\n\n    default:\n      return Identifiers$1.classMapInterpolateV;\n  }\n}\n/**\n * Gets the instruction to generate for an interpolated style map.\n * @param interpolation An Interpolation AST\n */\n\n\nfunction getStyleMapInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers$1.styleMap;\n\n    case 3:\n      return Identifiers$1.styleMapInterpolate1;\n\n    case 5:\n      return Identifiers$1.styleMapInterpolate2;\n\n    case 7:\n      return Identifiers$1.styleMapInterpolate3;\n\n    case 9:\n      return Identifiers$1.styleMapInterpolate4;\n\n    case 11:\n      return Identifiers$1.styleMapInterpolate5;\n\n    case 13:\n      return Identifiers$1.styleMapInterpolate6;\n\n    case 15:\n      return Identifiers$1.styleMapInterpolate7;\n\n    case 17:\n      return Identifiers$1.styleMapInterpolate8;\n\n    default:\n      return Identifiers$1.styleMapInterpolateV;\n  }\n}\n/**\n * Gets the instruction to generate for an interpolated style prop.\n * @param interpolation An Interpolation AST\n */\n\n\nfunction getStylePropInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers$1.styleProp;\n\n    case 3:\n      return Identifiers$1.stylePropInterpolate1;\n\n    case 5:\n      return Identifiers$1.stylePropInterpolate2;\n\n    case 7:\n      return Identifiers$1.stylePropInterpolate3;\n\n    case 9:\n      return Identifiers$1.stylePropInterpolate4;\n\n    case 11:\n      return Identifiers$1.stylePropInterpolate5;\n\n    case 13:\n      return Identifiers$1.stylePropInterpolate6;\n\n    case 15:\n      return Identifiers$1.stylePropInterpolate7;\n\n    case 17:\n      return Identifiers$1.stylePropInterpolate8;\n\n    default:\n      return Identifiers$1.stylePropInterpolateV;\n  }\n}\n/**\n * Checks whether property name is a custom CSS property.\n * See: https://www.w3.org/TR/css-variables-1\n */\n\n\nfunction isCssCustomProperty(name) {\n  return name.startsWith('--');\n}\n\nfunction isEmptyExpression(ast) {\n  if (ast instanceof ASTWithSource) {\n    ast = ast.ast;\n  }\n\n  return ast instanceof EmptyExpr;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar TokenType;\n\n(function (TokenType) {\n  TokenType[TokenType[\"Character\"] = 0] = \"Character\";\n  TokenType[TokenType[\"Identifier\"] = 1] = \"Identifier\";\n  TokenType[TokenType[\"PrivateIdentifier\"] = 2] = \"PrivateIdentifier\";\n  TokenType[TokenType[\"Keyword\"] = 3] = \"Keyword\";\n  TokenType[TokenType[\"String\"] = 4] = \"String\";\n  TokenType[TokenType[\"Operator\"] = 5] = \"Operator\";\n  TokenType[TokenType[\"Number\"] = 6] = \"Number\";\n  TokenType[TokenType[\"Error\"] = 7] = \"Error\";\n})(TokenType || (TokenType = {}));\n\nvar KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\n\nvar Lexer = /*#__PURE__*/function () {\n  function Lexer() {\n    _classCallCheck(this, Lexer);\n  }\n\n  _createClass(Lexer, [{\n    key: \"tokenize\",\n    value: function tokenize(text) {\n      var scanner = new _Scanner(text);\n      var tokens = [];\n      var token = scanner.scanToken();\n\n      while (token != null) {\n        tokens.push(token);\n        token = scanner.scanToken();\n      }\n\n      return tokens;\n    }\n  }]);\n\n  return Lexer;\n}();\n\nvar Token = /*#__PURE__*/function () {\n  function Token(index, end, type, numValue, strValue) {\n    _classCallCheck(this, Token);\n\n    this.index = index;\n    this.end = end;\n    this.type = type;\n    this.numValue = numValue;\n    this.strValue = strValue;\n  }\n\n  _createClass(Token, [{\n    key: \"isCharacter\",\n    value: function isCharacter(code) {\n      return this.type == TokenType.Character && this.numValue == code;\n    }\n  }, {\n    key: \"isNumber\",\n    value: function isNumber() {\n      return this.type == TokenType.Number;\n    }\n  }, {\n    key: \"isString\",\n    value: function isString() {\n      return this.type == TokenType.String;\n    }\n  }, {\n    key: \"isOperator\",\n    value: function isOperator(operator) {\n      return this.type == TokenType.Operator && this.strValue == operator;\n    }\n  }, {\n    key: \"isIdentifier\",\n    value: function isIdentifier() {\n      return this.type == TokenType.Identifier;\n    }\n  }, {\n    key: \"isPrivateIdentifier\",\n    value: function isPrivateIdentifier() {\n      return this.type == TokenType.PrivateIdentifier;\n    }\n  }, {\n    key: \"isKeyword\",\n    value: function isKeyword() {\n      return this.type == TokenType.Keyword;\n    }\n  }, {\n    key: \"isKeywordLet\",\n    value: function isKeywordLet() {\n      return this.type == TokenType.Keyword && this.strValue == 'let';\n    }\n  }, {\n    key: \"isKeywordAs\",\n    value: function isKeywordAs() {\n      return this.type == TokenType.Keyword && this.strValue == 'as';\n    }\n  }, {\n    key: \"isKeywordNull\",\n    value: function isKeywordNull() {\n      return this.type == TokenType.Keyword && this.strValue == 'null';\n    }\n  }, {\n    key: \"isKeywordUndefined\",\n    value: function isKeywordUndefined() {\n      return this.type == TokenType.Keyword && this.strValue == 'undefined';\n    }\n  }, {\n    key: \"isKeywordTrue\",\n    value: function isKeywordTrue() {\n      return this.type == TokenType.Keyword && this.strValue == 'true';\n    }\n  }, {\n    key: \"isKeywordFalse\",\n    value: function isKeywordFalse() {\n      return this.type == TokenType.Keyword && this.strValue == 'false';\n    }\n  }, {\n    key: \"isKeywordThis\",\n    value: function isKeywordThis() {\n      return this.type == TokenType.Keyword && this.strValue == 'this';\n    }\n  }, {\n    key: \"isError\",\n    value: function isError() {\n      return this.type == TokenType.Error;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.type == TokenType.Number ? this.numValue : -1;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      switch (this.type) {\n        case TokenType.Character:\n        case TokenType.Identifier:\n        case TokenType.Keyword:\n        case TokenType.Operator:\n        case TokenType.PrivateIdentifier:\n        case TokenType.String:\n        case TokenType.Error:\n          return this.strValue;\n\n        case TokenType.Number:\n          return this.numValue.toString();\n\n        default:\n          return null;\n      }\n    }\n  }]);\n\n  return Token;\n}();\n\nfunction newCharacterToken(index, end, code) {\n  return new Token(index, end, TokenType.Character, code, String.fromCharCode(code));\n}\n\nfunction newIdentifierToken(index, end, text) {\n  return new Token(index, end, TokenType.Identifier, 0, text);\n}\n\nfunction newPrivateIdentifierToken(index, end, text) {\n  return new Token(index, end, TokenType.PrivateIdentifier, 0, text);\n}\n\nfunction newKeywordToken(index, end, text) {\n  return new Token(index, end, TokenType.Keyword, 0, text);\n}\n\nfunction newOperatorToken(index, end, text) {\n  return new Token(index, end, TokenType.Operator, 0, text);\n}\n\nfunction newStringToken(index, end, text) {\n  return new Token(index, end, TokenType.String, 0, text);\n}\n\nfunction newNumberToken(index, end, n) {\n  return new Token(index, end, TokenType.Number, n, '');\n}\n\nfunction newErrorToken(index, end, message) {\n  return new Token(index, end, TokenType.Error, 0, message);\n}\n\nvar EOF = new Token(-1, -1, TokenType.Character, 0, '');\n\nvar _Scanner = /*#__PURE__*/function () {\n  function _Scanner(input) {\n    _classCallCheck(this, _Scanner);\n\n    this.input = input;\n    this.peek = 0;\n    this.index = -1;\n    this.length = input.length;\n    this.advance();\n  }\n\n  _createClass(_Scanner, [{\n    key: \"advance\",\n    value: function advance() {\n      this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);\n    }\n  }, {\n    key: \"scanToken\",\n    value: function scanToken() {\n      var input = this.input,\n          length = this.length;\n      var peek = this.peek,\n          index = this.index; // Skip whitespace.\n\n      while (peek <= $SPACE) {\n        if (++index >= length) {\n          peek = $EOF;\n          break;\n        } else {\n          peek = input.charCodeAt(index);\n        }\n      }\n\n      this.peek = peek;\n      this.index = index;\n\n      if (index >= length) {\n        return null;\n      } // Handle identifiers and numbers.\n\n\n      if (isIdentifierStart(peek)) return this.scanIdentifier();\n      if (isDigit(peek)) return this.scanNumber(index);\n      var start = index;\n\n      switch (peek) {\n        case $PERIOD:\n          this.advance();\n          return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, this.index, $PERIOD);\n\n        case $LPAREN:\n        case $RPAREN:\n        case $LBRACE:\n        case $RBRACE:\n        case $LBRACKET:\n        case $RBRACKET:\n        case $COMMA:\n        case $COLON:\n        case $SEMICOLON:\n          return this.scanCharacter(start, peek);\n\n        case $SQ:\n        case $DQ:\n          return this.scanString();\n\n        case $HASH:\n          return this.scanPrivateIdentifier();\n\n        case $PLUS:\n        case $MINUS:\n        case $STAR:\n        case $SLASH:\n        case $PERCENT:\n        case $CARET:\n          return this.scanOperator(start, String.fromCharCode(peek));\n\n        case $QUESTION:\n          return this.scanQuestion(start);\n\n        case $LT:\n        case $GT:\n          return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');\n\n        case $BANG:\n        case $EQ:\n          return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');\n\n        case $AMPERSAND:\n          return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\n\n        case $BAR:\n          return this.scanComplexOperator(start, '|', $BAR, '|');\n\n        case $NBSP:\n          while (isWhitespace(this.peek)) {\n            this.advance();\n          }\n\n          return this.scanToken();\n      }\n\n      this.advance();\n      return this.error(\"Unexpected character [\".concat(String.fromCharCode(peek), \"]\"), 0);\n    }\n  }, {\n    key: \"scanCharacter\",\n    value: function scanCharacter(start, code) {\n      this.advance();\n      return newCharacterToken(start, this.index, code);\n    }\n  }, {\n    key: \"scanOperator\",\n    value: function scanOperator(start, str) {\n      this.advance();\n      return newOperatorToken(start, this.index, str);\n    }\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param start start index in the expression\n     * @param one first symbol (always part of the operator)\n     * @param twoCode code point for the second symbol\n     * @param two second symbol (part of the operator when the second code point matches)\n     * @param threeCode code point for the third symbol\n     * @param three third symbol (part of the operator when provided and matches source expression)\n     */\n\n  }, {\n    key: \"scanComplexOperator\",\n    value: function scanComplexOperator(start, one, twoCode, two, threeCode, three) {\n      this.advance();\n      var str = one;\n\n      if (this.peek == twoCode) {\n        this.advance();\n        str += two;\n      }\n\n      if (threeCode != null && this.peek == threeCode) {\n        this.advance();\n        str += three;\n      }\n\n      return newOperatorToken(start, this.index, str);\n    }\n  }, {\n    key: \"scanIdentifier\",\n    value: function scanIdentifier() {\n      var start = this.index;\n      this.advance();\n\n      while (isIdentifierPart(this.peek)) {\n        this.advance();\n      }\n\n      var str = this.input.substring(start, this.index);\n      return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) : newIdentifierToken(start, this.index, str);\n    }\n    /** Scans an ECMAScript private identifier. */\n\n  }, {\n    key: \"scanPrivateIdentifier\",\n    value: function scanPrivateIdentifier() {\n      var start = this.index;\n      this.advance();\n\n      if (!isIdentifierStart(this.peek)) {\n        return this.error('Invalid character [#]', -1);\n      }\n\n      while (isIdentifierPart(this.peek)) {\n        this.advance();\n      }\n\n      var identifierName = this.input.substring(start, this.index);\n      return newPrivateIdentifierToken(start, this.index, identifierName);\n    }\n  }, {\n    key: \"scanNumber\",\n    value: function scanNumber(start) {\n      var simple = this.index === start;\n      var hasSeparators = false;\n      this.advance(); // Skip initial digit.\n\n      while (true) {\n        if (isDigit(this.peek)) {// Do nothing.\n        } else if (this.peek === $_) {\n          // Separators are only valid when they're surrounded by digits. E.g. `1_0_1` is\n          // valid while `_101` and `101_` are not. The separator can't be next to the decimal\n          // point or another separator either. Note that it's unlikely that we'll hit a case where\n          // the underscore is at the start, because that's a valid identifier and it will be picked\n          // up earlier in the parsing. We validate for it anyway just in case.\n          if (!isDigit(this.input.charCodeAt(this.index - 1)) || !isDigit(this.input.charCodeAt(this.index + 1))) {\n            return this.error('Invalid numeric separator', 0);\n          }\n\n          hasSeparators = true;\n        } else if (this.peek === $PERIOD) {\n          simple = false;\n        } else if (isExponentStart(this.peek)) {\n          this.advance();\n          if (isExponentSign(this.peek)) this.advance();\n          if (!isDigit(this.peek)) return this.error('Invalid exponent', -1);\n          simple = false;\n        } else {\n          break;\n        }\n\n        this.advance();\n      }\n\n      var str = this.input.substring(start, this.index);\n\n      if (hasSeparators) {\n        str = str.replace(/_/g, '');\n      }\n\n      var value = simple ? parseIntAutoRadix(str) : parseFloat(str);\n      return newNumberToken(start, this.index, value);\n    }\n  }, {\n    key: \"scanString\",\n    value: function scanString() {\n      var start = this.index;\n      var quote = this.peek;\n      this.advance(); // Skip initial quote.\n\n      var buffer = '';\n      var marker = this.index;\n      var input = this.input;\n\n      while (this.peek != quote) {\n        if (this.peek == $BACKSLASH) {\n          buffer += input.substring(marker, this.index);\n          this.advance();\n          var unescapedCode = void 0; // Workaround for TS2.1-introduced type strictness\n\n          this.peek = this.peek;\n\n          if (this.peek == $u) {\n            // 4 character hex code for unicode character.\n            var hex = input.substring(this.index + 1, this.index + 5);\n\n            if (/^[0-9a-f]+$/i.test(hex)) {\n              unescapedCode = parseInt(hex, 16);\n            } else {\n              return this.error(\"Invalid unicode escape [\\\\u\".concat(hex, \"]\"), 0);\n            }\n\n            for (var i = 0; i < 5; i++) {\n              this.advance();\n            }\n          } else {\n            unescapedCode = unescape(this.peek);\n            this.advance();\n          }\n\n          buffer += String.fromCharCode(unescapedCode);\n          marker = this.index;\n        } else if (this.peek == $EOF) {\n          return this.error('Unterminated quote', 0);\n        } else {\n          this.advance();\n        }\n      }\n\n      var last = input.substring(marker, this.index);\n      this.advance(); // Skip terminating quote.\n\n      return newStringToken(start, this.index, buffer + last);\n    }\n  }, {\n    key: \"scanQuestion\",\n    value: function scanQuestion(start) {\n      this.advance();\n      var str = '?'; // Either `a ?? b` or 'a?.b'.\n\n      if (this.peek === $QUESTION || this.peek === $PERIOD) {\n        str += this.peek === $PERIOD ? '.' : '?';\n        this.advance();\n      }\n\n      return newOperatorToken(start, this.index, str);\n    }\n  }, {\n    key: \"error\",\n    value: function error(message, offset) {\n      var position = this.index + offset;\n      return newErrorToken(position, this.index, \"Lexer Error: \".concat(message, \" at column \").concat(position, \" in expression [\").concat(this.input, \"]\"));\n    }\n  }]);\n\n  return _Scanner;\n}();\n\nfunction isIdentifierStart(code) {\n  return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;\n}\n\nfunction isIdentifier(input) {\n  if (input.length == 0) return false;\n  var scanner = new _Scanner(input);\n  if (!isIdentifierStart(scanner.peek)) return false;\n  scanner.advance();\n\n  while (scanner.peek !== $EOF) {\n    if (!isIdentifierPart(scanner.peek)) return false;\n    scanner.advance();\n  }\n\n  return true;\n}\n\nfunction isIdentifierPart(code) {\n  return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;\n}\n\nfunction isExponentStart(code) {\n  return code == $e || code == $E;\n}\n\nfunction isExponentSign(code) {\n  return code == $MINUS || code == $PLUS;\n}\n\nfunction unescape(code) {\n  switch (code) {\n    case $n:\n      return $LF;\n\n    case $f:\n      return $FF;\n\n    case $r:\n      return $CR;\n\n    case $t:\n      return $TAB;\n\n    case $v:\n      return $VTAB;\n\n    default:\n      return code;\n  }\n}\n\nfunction parseIntAutoRadix(text) {\n  var result = parseInt(text);\n\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n\n  return result;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar SplitInterpolation = function SplitInterpolation(strings, expressions, offsets) {\n  _classCallCheck(this, SplitInterpolation);\n\n  this.strings = strings;\n  this.expressions = expressions;\n  this.offsets = offsets;\n};\n\nvar TemplateBindingParseResult = function TemplateBindingParseResult(templateBindings, warnings, errors) {\n  _classCallCheck(this, TemplateBindingParseResult);\n\n  this.templateBindings = templateBindings;\n  this.warnings = warnings;\n  this.errors = errors;\n};\n\nvar Parser$1 = /*#__PURE__*/function () {\n  function Parser$1(_lexer) {\n    _classCallCheck(this, Parser$1);\n\n    this._lexer = _lexer;\n    this.errors = [];\n    this.simpleExpressionChecker = SimpleExpressionChecker;\n  }\n\n  _createClass(Parser$1, [{\n    key: \"parseAction\",\n    value: function parseAction(input, location, absoluteOffset) {\n      var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;\n\n      this._checkNoInterpolation(input, location, interpolationConfig);\n\n      var sourceToLex = this._stripComments(input);\n\n      var tokens = this._lexer.tokenize(this._stripComments(input));\n\n      var ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();\n      return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    }\n  }, {\n    key: \"parseBinding\",\n    value: function parseBinding(input, location, absoluteOffset) {\n      var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;\n\n      var ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n\n      return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    }\n  }, {\n    key: \"checkSimpleExpression\",\n    value: function checkSimpleExpression(ast) {\n      var checker = new this.simpleExpressionChecker();\n      ast.visit(checker);\n      return checker.errors;\n    }\n  }, {\n    key: \"parseSimpleBinding\",\n    value: function parseSimpleBinding(input, location, absoluteOffset) {\n      var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;\n\n      var ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n\n      var errors = this.checkSimpleExpression(ast);\n\n      if (errors.length > 0) {\n        this._reportError(\"Host binding expression cannot contain \".concat(errors.join(' ')), input, location);\n      }\n\n      return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    }\n  }, {\n    key: \"_reportError\",\n    value: function _reportError(message, input, errLocation, ctxLocation) {\n      this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n    }\n  }, {\n    key: \"_parseBindingAst\",\n    value: function _parseBindingAst(input, location, absoluteOffset, interpolationConfig) {\n      // Quotes expressions use 3rd-party expression language. We don't want to use\n      // our lexer or parser for that, so we check for that ahead of time.\n      var quote = this._parseQuote(input, location, absoluteOffset);\n\n      if (quote != null) {\n        return quote;\n      }\n\n      this._checkNoInterpolation(input, location, interpolationConfig);\n\n      var sourceToLex = this._stripComments(input);\n\n      var tokens = this._lexer.tokenize(sourceToLex);\n\n      return new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();\n    }\n  }, {\n    key: \"_parseQuote\",\n    value: function _parseQuote(input, location, absoluteOffset) {\n      if (input == null) return null;\n      var prefixSeparatorIndex = input.indexOf(':');\n      if (prefixSeparatorIndex == -1) return null;\n      var prefix = input.substring(0, prefixSeparatorIndex).trim();\n      if (!isIdentifier(prefix)) return null;\n      var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n      var span = new ParseSpan(0, input.length);\n      return new Quote(span, span.toAbsolute(absoluteOffset), prefix, uninterpretedExpression, location);\n    }\n    /**\n     * Parse microsyntax template expression and return a list of bindings or\n     * parsing errors in case the given expression is invalid.\n     *\n     * For example,\n     * ```\n     *   <div *ngFor=\"let item of items\">\n     *         ^      ^ absoluteValueOffset for `templateValue`\n     *         absoluteKeyOffset for `templateKey`\n     * ```\n     * contains three bindings:\n     * 1. ngFor -> null\n     * 2. item -> NgForOfContext.$implicit\n     * 3. ngForOf -> items\n     *\n     * This is apparent from the de-sugared template:\n     * ```\n     *   <ng-template ngFor let-item [ngForOf]=\"items\">\n     * ```\n     *\n     * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor\n     * @param templateValue RHS of the microsyntax attribute\n     * @param templateUrl template filename if it's external, component filename if it's inline\n     * @param absoluteKeyOffset start of the `templateKey`\n     * @param absoluteValueOffset start of the `templateValue`\n     */\n\n  }, {\n    key: \"parseTemplateBindings\",\n    value: function parseTemplateBindings(templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {\n      var tokens = this._lexer.tokenize(templateValue);\n\n      var parser = new _ParseAST(templateValue, templateUrl, absoluteValueOffset, tokens, templateValue.length, false\n      /* parseAction */\n      , this.errors, 0\n      /* relative offset */\n      );\n      return parser.parseTemplateBindings({\n        source: templateKey,\n        span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length)\n      });\n    }\n  }, {\n    key: \"parseInterpolation\",\n    value: function parseInterpolation(input, location, absoluteOffset) {\n      var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;\n\n      var _this$splitInterpolat = this.splitInterpolation(input, location, interpolationConfig),\n          strings = _this$splitInterpolat.strings,\n          expressions = _this$splitInterpolat.expressions,\n          offsets = _this$splitInterpolat.offsets;\n\n      if (expressions.length === 0) return null;\n      var expressionNodes = [];\n\n      for (var i = 0; i < expressions.length; ++i) {\n        var expressionText = expressions[i].text;\n\n        var sourceToLex = this._stripComments(expressionText);\n\n        var tokens = this._lexer.tokenize(sourceToLex);\n\n        var ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();\n        expressionNodes.push(ast);\n      }\n\n      return this.createInterpolationAst(strings.map(function (s) {\n        return s.text;\n      }), expressionNodes, input, location, absoluteOffset);\n    }\n    /**\n     * Similar to `parseInterpolation`, but treats the provided string as a single expression\n     * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\n     * This is used for parsing the switch expression in ICUs.\n     */\n\n  }, {\n    key: \"parseInterpolationExpression\",\n    value: function parseInterpolationExpression(expression, location, absoluteOffset) {\n      var sourceToLex = this._stripComments(expression);\n\n      var tokens = this._lexer.tokenize(sourceToLex);\n\n      var ast = new _ParseAST(expression, location, absoluteOffset, tokens, sourceToLex.length,\n      /* parseAction */\n      false, this.errors, 0).parseChain();\n      var strings = ['', '']; // The prefix and suffix strings are both empty\n\n      return this.createInterpolationAst(strings, [ast], expression, location, absoluteOffset);\n    }\n  }, {\n    key: \"createInterpolationAst\",\n    value: function createInterpolationAst(strings, expressions, input, location, absoluteOffset) {\n      var span = new ParseSpan(0, input.length);\n      var interpolation = new Interpolation(span, span.toAbsolute(absoluteOffset), strings, expressions);\n      return new ASTWithSource(interpolation, input, location, absoluteOffset, this.errors);\n    }\n    /**\n     * Splits a string of text into \"raw\" text segments and expressions present in interpolations in\n     * the string.\n     * Returns `null` if there are no interpolations, otherwise a\n     * `SplitInterpolation` with splits that look like\n     *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>\n     */\n\n  }, {\n    key: \"splitInterpolation\",\n    value: function splitInterpolation(input, location) {\n      var interpolationConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_INTERPOLATION_CONFIG;\n      var strings = [];\n      var expressions = [];\n      var offsets = [];\n      var i = 0;\n      var atInterpolation = false;\n      var extendLastString = false;\n      var interpStart = interpolationConfig.start,\n          interpEnd = interpolationConfig.end;\n\n      while (i < input.length) {\n        if (!atInterpolation) {\n          // parse until starting {{\n          var _start2 = i;\n          i = input.indexOf(interpStart, i);\n\n          if (i === -1) {\n            i = input.length;\n          }\n\n          var text = input.substring(_start2, i);\n          strings.push({\n            text: text,\n            start: _start2,\n            end: i\n          });\n          atInterpolation = true;\n        } else {\n          // parse from starting {{ to ending }} while ignoring content inside quotes.\n          var fullStart = i;\n          var exprStart = fullStart + interpStart.length;\n\n          var exprEnd = this._getInterpolationEndIndex(input, interpEnd, exprStart);\n\n          if (exprEnd === -1) {\n            // Could not find the end of the interpolation; do not parse an expression.\n            // Instead we should extend the content on the last raw string.\n            atInterpolation = false;\n            extendLastString = true;\n            break;\n          }\n\n          var fullEnd = exprEnd + interpEnd.length;\n\n          var _text = input.substring(exprStart, exprEnd);\n\n          if (_text.trim().length === 0) {\n            this._reportError('Blank expressions are not allowed in interpolated strings', input, \"at column \".concat(i, \" in\"), location);\n          }\n\n          expressions.push({\n            text: _text,\n            start: fullStart,\n            end: fullEnd\n          });\n          offsets.push(exprStart);\n          i = fullEnd;\n          atInterpolation = false;\n        }\n      }\n\n      if (!atInterpolation) {\n        // If we are now at a text section, add the remaining content as a raw string.\n        if (extendLastString) {\n          var piece = strings[strings.length - 1];\n          piece.text += input.substring(i);\n          piece.end = input.length;\n        } else {\n          strings.push({\n            text: input.substring(i),\n            start: i,\n            end: input.length\n          });\n        }\n      }\n\n      return new SplitInterpolation(strings, expressions, offsets);\n    }\n  }, {\n    key: \"wrapLiteralPrimitive\",\n    value: function wrapLiteralPrimitive(input, location, absoluteOffset) {\n      var span = new ParseSpan(0, input == null ? 0 : input.length);\n      return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input), input, location, absoluteOffset, this.errors);\n    }\n  }, {\n    key: \"_stripComments\",\n    value: function _stripComments(input) {\n      var i = this._commentStart(input);\n\n      return i != null ? input.substring(0, i).trim() : input;\n    }\n  }, {\n    key: \"_commentStart\",\n    value: function _commentStart(input) {\n      var outerQuote = null;\n\n      for (var i = 0; i < input.length - 1; i++) {\n        var char = input.charCodeAt(i);\n        var nextChar = input.charCodeAt(i + 1);\n        if (char === $SLASH && nextChar == $SLASH && outerQuote == null) return i;\n\n        if (outerQuote === char) {\n          outerQuote = null;\n        } else if (outerQuote == null && isQuote(char)) {\n          outerQuote = char;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_checkNoInterpolation\",\n    value: function _checkNoInterpolation(input, location, _ref6) {\n      var start = _ref6.start,\n          end = _ref6.end;\n      var startIndex = -1;\n      var endIndex = -1;\n\n      var _iterator9 = _createForOfIteratorHelper(this._forEachUnquotedChar(input, 0)),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var charIndex = _step9.value;\n\n          if (startIndex === -1) {\n            if (input.startsWith(start)) {\n              startIndex = charIndex;\n            }\n          } else {\n            endIndex = this._getInterpolationEndIndex(input, end, charIndex);\n\n            if (endIndex > -1) {\n              break;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      if (startIndex > -1 && endIndex > -1) {\n        this._reportError(\"Got interpolation (\".concat(start).concat(end, \") where expression was expected\"), input, \"at column \".concat(startIndex, \" in\"), location);\n      }\n    }\n    /**\n     * Finds the index of the end of an interpolation expression\n     * while ignoring comments and quoted content.\n     */\n\n  }, {\n    key: \"_getInterpolationEndIndex\",\n    value: function _getInterpolationEndIndex(input, expressionEnd, start) {\n      var _iterator10 = _createForOfIteratorHelper(this._forEachUnquotedChar(input, start)),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var charIndex = _step10.value;\n\n          if (input.startsWith(expressionEnd, charIndex)) {\n            return charIndex;\n          } // Nothing else in the expression matters after we've\n          // hit a comment so look directly for the end token.\n\n\n          if (input.startsWith('//', charIndex)) {\n            return input.indexOf(expressionEnd, charIndex);\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      return -1;\n    }\n    /**\n     * Generator used to iterate over the character indexes of a string that are outside of quotes.\n     * @param input String to loop through.\n     * @param start Index within the string at which to start.\n     */\n\n  }, {\n    key: \"_forEachUnquotedChar\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _forEachUnquotedChar(input, start) {\n      var currentQuote, escapeCount, i, char;\n      return _regeneratorRuntime.wrap(function _forEachUnquotedChar$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              currentQuote = null;\n              escapeCount = 0;\n              i = start;\n\n            case 3:\n              if (!(i < input.length)) {\n                _context2.next = 16;\n                break;\n              }\n\n              char = input[i]; // Skip the characters inside quotes. Note that we only care about the outer-most\n              // quotes matching up and we need to account for escape characters.\n\n              if (!(isQuote(input.charCodeAt(i)) && (currentQuote === null || currentQuote === char) && escapeCount % 2 === 0)) {\n                _context2.next = 9;\n                break;\n              }\n\n              currentQuote = currentQuote === null ? char : null;\n              _context2.next = 12;\n              break;\n\n            case 9:\n              if (!(currentQuote === null)) {\n                _context2.next = 12;\n                break;\n              }\n\n              _context2.next = 12;\n              return i;\n\n            case 12:\n              escapeCount = char === '\\\\' ? escapeCount + 1 : 0;\n\n            case 13:\n              i++;\n              _context2.next = 3;\n              break;\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _forEachUnquotedChar);\n    })\n  }]);\n\n  return Parser$1;\n}();\n\nvar IvyParser = /*#__PURE__*/function (_Parser$) {\n  _inherits(IvyParser, _Parser$);\n\n  var _super77 = _createSuper(IvyParser);\n\n  function IvyParser() {\n    var _this126;\n\n    _classCallCheck(this, IvyParser);\n\n    _this126 = _super77.apply(this, arguments);\n    _this126.simpleExpressionChecker = IvySimpleExpressionChecker;\n    return _this126;\n  }\n\n  return IvyParser;\n}(Parser$1);\n/** Describes a stateful context an expression parser is in. */\n\n\nvar ParseContextFlags;\n\n(function (ParseContextFlags) {\n  ParseContextFlags[ParseContextFlags[\"None\"] = 0] = \"None\";\n  /**\n   * A Writable context is one in which a value may be written to an lvalue.\n   * For example, after we see a property access, we may expect a write to the\n   * property via the \"=\" operator.\n   *   prop\n   *        ^ possible \"=\" after\n   */\n\n  ParseContextFlags[ParseContextFlags[\"Writable\"] = 1] = \"Writable\";\n})(ParseContextFlags || (ParseContextFlags = {}));\n\nvar _ParseAST = /*#__PURE__*/function () {\n  function _ParseAST(input, location, absoluteOffset, tokens, inputLength, parseAction, errors, offset) {\n    _classCallCheck(this, _ParseAST);\n\n    this.input = input;\n    this.location = location;\n    this.absoluteOffset = absoluteOffset;\n    this.tokens = tokens;\n    this.inputLength = inputLength;\n    this.parseAction = parseAction;\n    this.errors = errors;\n    this.offset = offset;\n    this.rparensExpected = 0;\n    this.rbracketsExpected = 0;\n    this.rbracesExpected = 0;\n    this.context = ParseContextFlags.None; // Cache of expression start and input indeces to the absolute source span they map to, used to\n    // prevent creating superfluous source spans in `sourceSpan`.\n    // A serial of the expression start and input index is used for mapping because both are stateful\n    // and may change for subsequent expressions visited by the parser.\n\n    this.sourceSpanCache = new Map();\n    this.index = 0;\n  }\n\n  _createClass(_ParseAST, [{\n    key: \"peek\",\n    value: function peek(offset) {\n      var i = this.index + offset;\n      return i < this.tokens.length ? this.tokens[i] : EOF;\n    }\n  }, {\n    key: \"next\",\n    get: function get() {\n      return this.peek(0);\n    }\n    /** Whether all the parser input has been processed. */\n\n  }, {\n    key: \"atEOF\",\n    get: function get() {\n      return this.index >= this.tokens.length;\n    }\n    /**\n     * Index of the next token to be processed, or the end of the last token if all have been\n     * processed.\n     */\n\n  }, {\n    key: \"inputIndex\",\n    get: function get() {\n      return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;\n    }\n    /**\n     * End index of the last processed token, or the start of the first token if none have been\n     * processed.\n     */\n\n  }, {\n    key: \"currentEndIndex\",\n    get: function get() {\n      if (this.index > 0) {\n        var curToken = this.peek(-1);\n        return curToken.end + this.offset;\n      } // No tokens have been processed yet; return the next token's start or the length of the input\n      // if there is no token.\n\n\n      if (this.tokens.length === 0) {\n        return this.inputLength + this.offset;\n      }\n\n      return this.next.index + this.offset;\n    }\n    /**\n     * Returns the absolute offset of the start of the current token.\n     */\n\n  }, {\n    key: \"currentAbsoluteOffset\",\n    get: function get() {\n      return this.absoluteOffset + this.inputIndex;\n    }\n    /**\n     * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if\n     * provided).\n     *\n     * @param start Position from which the `ParseSpan` will start.\n     * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the\n     *     natural ending index)\n     */\n\n  }, {\n    key: \"span\",\n    value: function span(start, artificialEndIndex) {\n      var endIndex = this.currentEndIndex;\n\n      if (artificialEndIndex !== undefined && artificialEndIndex > this.currentEndIndex) {\n        endIndex = artificialEndIndex;\n      } // In some unusual parsing scenarios (like when certain tokens are missing and an `EmptyExpr` is\n      // being created), the current token may already be advanced beyond the `currentEndIndex`. This\n      // appears to be a deep-seated parser bug.\n      //\n      // As a workaround for now, swap the start and end indices to ensure a valid `ParseSpan`.\n      // TODO(alxhub): fix the bug upstream in the parser state, and remove this workaround.\n\n\n      if (start > endIndex) {\n        var tmp = endIndex;\n        endIndex = start;\n        start = tmp;\n      }\n\n      return new ParseSpan(start, endIndex);\n    }\n  }, {\n    key: \"sourceSpan\",\n    value: function sourceSpan(start, artificialEndIndex) {\n      var serial = \"\".concat(start, \"@\").concat(this.inputIndex, \":\").concat(artificialEndIndex);\n\n      if (!this.sourceSpanCache.has(serial)) {\n        this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));\n      }\n\n      return this.sourceSpanCache.get(serial);\n    }\n  }, {\n    key: \"advance\",\n    value: function advance() {\n      this.index++;\n    }\n    /**\n     * Executes a callback in the provided context.\n     */\n\n  }, {\n    key: \"withContext\",\n    value: function withContext(context, cb) {\n      this.context |= context;\n      var ret = cb();\n      this.context ^= context;\n      return ret;\n    }\n  }, {\n    key: \"consumeOptionalCharacter\",\n    value: function consumeOptionalCharacter(code) {\n      if (this.next.isCharacter(code)) {\n        this.advance();\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"peekKeywordLet\",\n    value: function peekKeywordLet() {\n      return this.next.isKeywordLet();\n    }\n  }, {\n    key: \"peekKeywordAs\",\n    value: function peekKeywordAs() {\n      return this.next.isKeywordAs();\n    }\n    /**\n     * Consumes an expected character, otherwise emits an error about the missing expected character\n     * and skips over the token stream until reaching a recoverable point.\n     *\n     * See `this.error` and `this.skip` for more details.\n     */\n\n  }, {\n    key: \"expectCharacter\",\n    value: function expectCharacter(code) {\n      if (this.consumeOptionalCharacter(code)) return;\n      this.error(\"Missing expected \".concat(String.fromCharCode(code)));\n    }\n  }, {\n    key: \"consumeOptionalOperator\",\n    value: function consumeOptionalOperator(op) {\n      if (this.next.isOperator(op)) {\n        this.advance();\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"expectOperator\",\n    value: function expectOperator(operator) {\n      if (this.consumeOptionalOperator(operator)) return;\n      this.error(\"Missing expected operator \".concat(operator));\n    }\n  }, {\n    key: \"prettyPrintToken\",\n    value: function prettyPrintToken(tok) {\n      return tok === EOF ? 'end of input' : \"token \".concat(tok);\n    }\n  }, {\n    key: \"expectIdentifierOrKeyword\",\n    value: function expectIdentifierOrKeyword() {\n      var n = this.next;\n\n      if (!n.isIdentifier() && !n.isKeyword()) {\n        if (n.isPrivateIdentifier()) {\n          this._reportErrorForPrivateIdentifier(n, 'expected identifier or keyword');\n        } else {\n          this.error(\"Unexpected \".concat(this.prettyPrintToken(n), \", expected identifier or keyword\"));\n        }\n\n        return null;\n      }\n\n      this.advance();\n      return n.toString();\n    }\n  }, {\n    key: \"expectIdentifierOrKeywordOrString\",\n    value: function expectIdentifierOrKeywordOrString() {\n      var n = this.next;\n\n      if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n        if (n.isPrivateIdentifier()) {\n          this._reportErrorForPrivateIdentifier(n, 'expected identifier, keyword or string');\n        } else {\n          this.error(\"Unexpected \".concat(this.prettyPrintToken(n), \", expected identifier, keyword, or string\"));\n        }\n\n        return '';\n      }\n\n      this.advance();\n      return n.toString();\n    }\n  }, {\n    key: \"parseChain\",\n    value: function parseChain() {\n      var exprs = [];\n      var start = this.inputIndex;\n\n      while (this.index < this.tokens.length) {\n        var expr = this.parsePipe();\n        exprs.push(expr);\n\n        if (this.consumeOptionalCharacter($SEMICOLON)) {\n          if (!this.parseAction) {\n            this.error('Binding expression cannot contain chained expression');\n          }\n\n          while (this.consumeOptionalCharacter($SEMICOLON)) {} // read all semicolons\n\n        } else if (this.index < this.tokens.length) {\n          this.error(\"Unexpected token '\".concat(this.next, \"'\"));\n        }\n      }\n\n      if (exprs.length == 0) {\n        // We have no expressions so create an empty expression that spans the entire input length\n        var artificialStart = this.offset;\n        var artificialEnd = this.offset + this.inputLength;\n        return new EmptyExpr(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));\n      }\n\n      if (exprs.length == 1) return exprs[0];\n      return new Chain(this.span(start), this.sourceSpan(start), exprs);\n    }\n  }, {\n    key: \"parsePipe\",\n    value: function parsePipe() {\n      var start = this.inputIndex;\n      var result = this.parseExpression();\n\n      if (this.consumeOptionalOperator('|')) {\n        if (this.parseAction) {\n          this.error('Cannot have a pipe in an action expression');\n        }\n\n        do {\n          var nameStart = this.inputIndex;\n          var nameId = this.expectIdentifierOrKeyword();\n          var nameSpan = void 0;\n          var fullSpanEnd = undefined;\n\n          if (nameId !== null) {\n            nameSpan = this.sourceSpan(nameStart);\n          } else {\n            // No valid identifier was found, so we'll assume an empty pipe name ('').\n            nameId = ''; // However, there may have been whitespace present between the pipe character and the next\n            // token in the sequence (or the end of input). We want to track this whitespace so that\n            // the `BindingPipe` we produce covers not just the pipe character, but any trailing\n            // whitespace beyond it. Another way of thinking about this is that the zero-length name\n            // is assumed to be at the end of any whitespace beyond the pipe character.\n            //\n            // Therefore, we push the end of the `ParseSpan` for this pipe all the way up to the\n            // beginning of the next token, or until the end of input if the next token is EOF.\n\n            fullSpanEnd = this.next.index !== -1 ? this.next.index : this.inputLength + this.offset; // The `nameSpan` for an empty pipe name is zero-length at the end of any whitespace\n            // beyond the pipe character.\n\n            nameSpan = new ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);\n          }\n\n          var args = [];\n\n          while (this.consumeOptionalCharacter($COLON)) {\n            args.push(this.parseExpression()); // If there are additional expressions beyond the name, then the artificial end for the\n            // name is no longer relevant.\n          }\n\n          result = new BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);\n        } while (this.consumeOptionalOperator('|'));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"parseExpression\",\n    value: function parseExpression() {\n      return this.parseConditional();\n    }\n  }, {\n    key: \"parseConditional\",\n    value: function parseConditional() {\n      var start = this.inputIndex;\n      var result = this.parseLogicalOr();\n\n      if (this.consumeOptionalOperator('?')) {\n        var yes = this.parsePipe();\n        var no;\n\n        if (!this.consumeOptionalCharacter($COLON)) {\n          var end = this.inputIndex;\n          var expression = this.input.substring(start, end);\n          this.error(\"Conditional expression \".concat(expression, \" requires all 3 expressions\"));\n          no = new EmptyExpr(this.span(start), this.sourceSpan(start));\n        } else {\n          no = this.parsePipe();\n        }\n\n        return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);\n      } else {\n        return result;\n      }\n    }\n  }, {\n    key: \"parseLogicalOr\",\n    value: function parseLogicalOr() {\n      // '||'\n      var start = this.inputIndex;\n      var result = this.parseLogicalAnd();\n\n      while (this.consumeOptionalOperator('||')) {\n        var right = this.parseLogicalAnd();\n        result = new Binary(this.span(start), this.sourceSpan(start), '||', result, right);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"parseLogicalAnd\",\n    value: function parseLogicalAnd() {\n      // '&&'\n      var start = this.inputIndex;\n      var result = this.parseNullishCoalescing();\n\n      while (this.consumeOptionalOperator('&&')) {\n        var right = this.parseNullishCoalescing();\n        result = new Binary(this.span(start), this.sourceSpan(start), '&&', result, right);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"parseNullishCoalescing\",\n    value: function parseNullishCoalescing() {\n      // '??'\n      var start = this.inputIndex;\n      var result = this.parseEquality();\n\n      while (this.consumeOptionalOperator('??')) {\n        var right = this.parseEquality();\n        result = new Binary(this.span(start), this.sourceSpan(start), '??', result, right);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"parseEquality\",\n    value: function parseEquality() {\n      // '==','!=','===','!=='\n      var start = this.inputIndex;\n      var result = this.parseRelational();\n\n      while (this.next.type == TokenType.Operator) {\n        var operator = this.next.strValue;\n\n        switch (operator) {\n          case '==':\n          case '===':\n          case '!=':\n          case '!==':\n            this.advance();\n            var right = this.parseRelational();\n            result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n            continue;\n        }\n\n        break;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"parseRelational\",\n    value: function parseRelational() {\n      // '<', '>', '<=', '>='\n      var start = this.inputIndex;\n      var result = this.parseAdditive();\n\n      while (this.next.type == TokenType.Operator) {\n        var operator = this.next.strValue;\n\n        switch (operator) {\n          case '<':\n          case '>':\n          case '<=':\n          case '>=':\n            this.advance();\n            var right = this.parseAdditive();\n            result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n            continue;\n        }\n\n        break;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"parseAdditive\",\n    value: function parseAdditive() {\n      // '+', '-'\n      var start = this.inputIndex;\n      var result = this.parseMultiplicative();\n\n      while (this.next.type == TokenType.Operator) {\n        var operator = this.next.strValue;\n\n        switch (operator) {\n          case '+':\n          case '-':\n            this.advance();\n            var right = this.parseMultiplicative();\n            result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n            continue;\n        }\n\n        break;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"parseMultiplicative\",\n    value: function parseMultiplicative() {\n      // '*', '%', '/'\n      var start = this.inputIndex;\n      var result = this.parsePrefix();\n\n      while (this.next.type == TokenType.Operator) {\n        var operator = this.next.strValue;\n\n        switch (operator) {\n          case '*':\n          case '%':\n          case '/':\n            this.advance();\n            var right = this.parsePrefix();\n            result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n            continue;\n        }\n\n        break;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"parsePrefix\",\n    value: function parsePrefix() {\n      if (this.next.type == TokenType.Operator) {\n        var _start3 = this.inputIndex;\n        var operator = this.next.strValue;\n        var result;\n\n        switch (operator) {\n          case '+':\n            this.advance();\n            result = this.parsePrefix();\n            return Unary.createPlus(this.span(_start3), this.sourceSpan(_start3), result);\n\n          case '-':\n            this.advance();\n            result = this.parsePrefix();\n            return Unary.createMinus(this.span(_start3), this.sourceSpan(_start3), result);\n\n          case '!':\n            this.advance();\n            result = this.parsePrefix();\n            return new PrefixNot(this.span(_start3), this.sourceSpan(_start3), result);\n        }\n      }\n\n      return this.parseCallChain();\n    }\n  }, {\n    key: \"parseCallChain\",\n    value: function parseCallChain() {\n      var start = this.inputIndex;\n      var result = this.parsePrimary();\n\n      while (true) {\n        if (this.consumeOptionalCharacter($PERIOD)) {\n          result = this.parseAccessMemberOrCall(result, start, false);\n        } else if (this.consumeOptionalOperator('?.')) {\n          result = this.consumeOptionalCharacter($LBRACKET) ? this.parseKeyedReadOrWrite(result, start, true) : this.parseAccessMemberOrCall(result, start, true);\n        } else if (this.consumeOptionalCharacter($LBRACKET)) {\n          result = this.parseKeyedReadOrWrite(result, start, false);\n        } else if (this.consumeOptionalCharacter($LPAREN)) {\n          var argumentStart = this.inputIndex;\n          this.rparensExpected++;\n          var args = this.parseCallArguments();\n          var argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);\n          this.rparensExpected--;\n          this.expectCharacter($RPAREN);\n          result = new Call(this.span(start), this.sourceSpan(start), result, args, argumentSpan);\n        } else if (this.consumeOptionalOperator('!')) {\n          result = new NonNullAssert(this.span(start), this.sourceSpan(start), result);\n        } else {\n          return result;\n        }\n      }\n    }\n  }, {\n    key: \"parsePrimary\",\n    value: function parsePrimary() {\n      var start = this.inputIndex;\n\n      if (this.consumeOptionalCharacter($LPAREN)) {\n        this.rparensExpected++;\n        var result = this.parsePipe();\n        this.rparensExpected--;\n        this.expectCharacter($RPAREN);\n        return result;\n      } else if (this.next.isKeywordNull()) {\n        this.advance();\n        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);\n      } else if (this.next.isKeywordUndefined()) {\n        this.advance();\n        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);\n      } else if (this.next.isKeywordTrue()) {\n        this.advance();\n        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);\n      } else if (this.next.isKeywordFalse()) {\n        this.advance();\n        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);\n      } else if (this.next.isKeywordThis()) {\n        this.advance();\n        return new ThisReceiver(this.span(start), this.sourceSpan(start));\n      } else if (this.consumeOptionalCharacter($LBRACKET)) {\n        this.rbracketsExpected++;\n        var elements = this.parseExpressionList($RBRACKET);\n        this.rbracketsExpected--;\n        this.expectCharacter($RBRACKET);\n        return new LiteralArray(this.span(start), this.sourceSpan(start), elements);\n      } else if (this.next.isCharacter($LBRACE)) {\n        return this.parseLiteralMap();\n      } else if (this.next.isIdentifier()) {\n        return this.parseAccessMemberOrCall(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);\n      } else if (this.next.isNumber()) {\n        var value = this.next.toNumber();\n        this.advance();\n        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);\n      } else if (this.next.isString()) {\n        var literalValue = this.next.toString();\n        this.advance();\n        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);\n      } else if (this.next.isPrivateIdentifier()) {\n        this._reportErrorForPrivateIdentifier(this.next, null);\n\n        return new EmptyExpr(this.span(start), this.sourceSpan(start));\n      } else if (this.index >= this.tokens.length) {\n        this.error(\"Unexpected end of expression: \".concat(this.input));\n        return new EmptyExpr(this.span(start), this.sourceSpan(start));\n      } else {\n        this.error(\"Unexpected token \".concat(this.next));\n        return new EmptyExpr(this.span(start), this.sourceSpan(start));\n      }\n    }\n  }, {\n    key: \"parseExpressionList\",\n    value: function parseExpressionList(terminator) {\n      var result = [];\n\n      do {\n        if (!this.next.isCharacter(terminator)) {\n          result.push(this.parsePipe());\n        } else {\n          break;\n        }\n      } while (this.consumeOptionalCharacter($COMMA));\n\n      return result;\n    }\n  }, {\n    key: \"parseLiteralMap\",\n    value: function parseLiteralMap() {\n      var keys = [];\n      var values = [];\n      var start = this.inputIndex;\n      this.expectCharacter($LBRACE);\n\n      if (!this.consumeOptionalCharacter($RBRACE)) {\n        this.rbracesExpected++;\n\n        do {\n          var keyStart = this.inputIndex;\n          var quoted = this.next.isString();\n          var key = this.expectIdentifierOrKeywordOrString();\n          keys.push({\n            key: key,\n            quoted: quoted\n          }); // Properties with quoted keys can't use the shorthand syntax.\n\n          if (quoted) {\n            this.expectCharacter($COLON);\n            values.push(this.parsePipe());\n          } else if (this.consumeOptionalCharacter($COLON)) {\n            values.push(this.parsePipe());\n          } else {\n            var span = this.span(keyStart);\n            var sourceSpan = this.sourceSpan(keyStart);\n            values.push(new PropertyRead(span, sourceSpan, sourceSpan, new ImplicitReceiver(span, sourceSpan), key));\n          }\n        } while (this.consumeOptionalCharacter($COMMA));\n\n        this.rbracesExpected--;\n        this.expectCharacter($RBRACE);\n      }\n\n      return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);\n    }\n  }, {\n    key: \"parseAccessMemberOrCall\",\n    value: function parseAccessMemberOrCall(readReceiver, start, isSafe) {\n      var _this127 = this;\n\n      var nameStart = this.inputIndex;\n      var id = this.withContext(ParseContextFlags.Writable, function () {\n        var _a;\n\n        var id = (_a = _this127.expectIdentifierOrKeyword()) !== null && _a !== void 0 ? _a : '';\n\n        if (id.length === 0) {\n          _this127.error(\"Expected identifier for property access\", readReceiver.span.end);\n        }\n\n        return id;\n      });\n      var nameSpan = this.sourceSpan(nameStart);\n      var receiver;\n\n      if (isSafe) {\n        if (this.consumeOptionalOperator('=')) {\n          this.error('The \\'?.\\' operator cannot be used in the assignment');\n          receiver = new EmptyExpr(this.span(start), this.sourceSpan(start));\n        } else {\n          receiver = new SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);\n        }\n      } else {\n        if (this.consumeOptionalOperator('=')) {\n          if (!this.parseAction) {\n            this.error('Bindings cannot contain assignments');\n            return new EmptyExpr(this.span(start), this.sourceSpan(start));\n          }\n\n          var value = this.parseConditional();\n          receiver = new PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id, value);\n        } else {\n          receiver = new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);\n        }\n      }\n\n      if (this.consumeOptionalCharacter($LPAREN)) {\n        var argumentStart = this.inputIndex;\n        this.rparensExpected++;\n        var args = this.parseCallArguments();\n        var argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);\n        this.expectCharacter($RPAREN);\n        this.rparensExpected--;\n        var span = this.span(start);\n        var sourceSpan = this.sourceSpan(start);\n        return new Call(span, sourceSpan, receiver, args, argumentSpan);\n      }\n\n      return receiver;\n    }\n  }, {\n    key: \"parseCallArguments\",\n    value: function parseCallArguments() {\n      if (this.next.isCharacter($RPAREN)) return [];\n      var positionals = [];\n\n      do {\n        positionals.push(this.parsePipe());\n      } while (this.consumeOptionalCharacter($COMMA));\n\n      return positionals;\n    }\n    /**\n     * Parses an identifier, a keyword, a string with an optional `-` in between,\n     * and returns the string along with its absolute source span.\n     */\n\n  }, {\n    key: \"expectTemplateBindingKey\",\n    value: function expectTemplateBindingKey() {\n      var result = '';\n      var operatorFound = false;\n      var start = this.currentAbsoluteOffset;\n\n      do {\n        result += this.expectIdentifierOrKeywordOrString();\n        operatorFound = this.consumeOptionalOperator('-');\n\n        if (operatorFound) {\n          result += '-';\n        }\n      } while (operatorFound);\n\n      return {\n        source: result,\n        span: new AbsoluteSourceSpan(start, start + result.length)\n      };\n    }\n    /**\n     * Parse microsyntax template expression and return a list of bindings or\n     * parsing errors in case the given expression is invalid.\n     *\n     * For example,\n     * ```\n     *   <div *ngFor=\"let item of items; index as i; trackBy: func\">\n     * ```\n     * contains five bindings:\n     * 1. ngFor -> null\n     * 2. item -> NgForOfContext.$implicit\n     * 3. ngForOf -> items\n     * 4. i -> NgForOfContext.index\n     * 5. ngForTrackBy -> func\n     *\n     * For a full description of the microsyntax grammar, see\n     * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855\n     *\n     * @param templateKey name of the microsyntax directive, like ngIf, ngFor,\n     * without the *, along with its absolute span.\n     */\n\n  }, {\n    key: \"parseTemplateBindings\",\n    value: function parseTemplateBindings(templateKey) {\n      var bindings = []; // The first binding is for the template key itself\n      // In *ngFor=\"let item of items\", key = \"ngFor\", value = null\n      // In *ngIf=\"cond | pipe\", key = \"ngIf\", value = \"cond | pipe\"\n\n      bindings.push.apply(bindings, _toConsumableArray(this.parseDirectiveKeywordBindings(templateKey)));\n\n      while (this.index < this.tokens.length) {\n        // If it starts with 'let', then this must be variable declaration\n        var letBinding = this.parseLetBinding();\n\n        if (letBinding) {\n          bindings.push(letBinding);\n        } else {\n          // Two possible cases here, either `value \"as\" key` or\n          // \"directive-keyword expression\". We don't know which case, but both\n          // \"value\" and \"directive-keyword\" are template binding key, so consume\n          // the key first.\n          var key = this.expectTemplateBindingKey(); // Peek at the next token, if it is \"as\" then this must be variable\n          // declaration.\n\n          var binding = this.parseAsBinding(key);\n\n          if (binding) {\n            bindings.push(binding);\n          } else {\n            // Otherwise the key must be a directive keyword, like \"of\". Transform\n            // the key to actual key. Eg. of -> ngForOf, trackBy -> ngForTrackBy\n            key.source = templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);\n            bindings.push.apply(bindings, _toConsumableArray(this.parseDirectiveKeywordBindings(key)));\n          }\n        }\n\n        this.consumeStatementTerminator();\n      }\n\n      return new TemplateBindingParseResult(bindings, []\n      /* warnings */\n      , this.errors);\n    }\n  }, {\n    key: \"parseKeyedReadOrWrite\",\n    value: function parseKeyedReadOrWrite(receiver, start, isSafe) {\n      var _this128 = this;\n\n      return this.withContext(ParseContextFlags.Writable, function () {\n        _this128.rbracketsExpected++;\n\n        var key = _this128.parsePipe();\n\n        if (key instanceof EmptyExpr) {\n          _this128.error(\"Key access cannot be empty\");\n        }\n\n        _this128.rbracketsExpected--;\n\n        _this128.expectCharacter($RBRACKET);\n\n        if (_this128.consumeOptionalOperator('=')) {\n          if (isSafe) {\n            _this128.error('The \\'?.\\' operator cannot be used in the assignment');\n          } else {\n            var value = _this128.parseConditional();\n\n            return new KeyedWrite(_this128.span(start), _this128.sourceSpan(start), receiver, key, value);\n          }\n        } else {\n          return isSafe ? new SafeKeyedRead(_this128.span(start), _this128.sourceSpan(start), receiver, key) : new KeyedRead(_this128.span(start), _this128.sourceSpan(start), receiver, key);\n        }\n\n        return new EmptyExpr(_this128.span(start), _this128.sourceSpan(start));\n      });\n    }\n    /**\n     * Parse a directive keyword, followed by a mandatory expression.\n     * For example, \"of items\", \"trackBy: func\".\n     * The bindings are: ngForOf -> items, ngForTrackBy -> func\n     * There could be an optional \"as\" binding that follows the expression.\n     * For example,\n     * ```\n     *   *ngFor=\"let item of items | slice:0:1 as collection\".\n     *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^\n     *               keyword    bound target   optional 'as' binding\n     * ```\n     *\n     * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its\n     * absolute span.\n     */\n\n  }, {\n    key: \"parseDirectiveKeywordBindings\",\n    value: function parseDirectiveKeywordBindings(key) {\n      var bindings = [];\n      this.consumeOptionalCharacter($COLON); // trackBy: trackByFunction\n\n      var value = this.getDirectiveBoundTarget();\n      var spanEnd = this.currentAbsoluteOffset; // The binding could optionally be followed by \"as\". For example,\n      // *ngIf=\"cond | pipe as x\". In this case, the key in the \"as\" binding\n      // is \"x\" and the value is the template key itself (\"ngIf\"). Note that the\n      // 'key' in the current context now becomes the \"value\" in the next binding.\n\n      var asBinding = this.parseAsBinding(key);\n\n      if (!asBinding) {\n        this.consumeStatementTerminator();\n        spanEnd = this.currentAbsoluteOffset;\n      }\n\n      var sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);\n      bindings.push(new ExpressionBinding(sourceSpan, key, value));\n\n      if (asBinding) {\n        bindings.push(asBinding);\n      }\n\n      return bindings;\n    }\n    /**\n     * Return the expression AST for the bound target of a directive keyword\n     * binding. For example,\n     * ```\n     *   *ngIf=\"condition | pipe\"\n     *          ^^^^^^^^^^^^^^^^ bound target for \"ngIf\"\n     *   *ngFor=\"let item of items\"\n     *                       ^^^^^ bound target for \"ngForOf\"\n     * ```\n     */\n\n  }, {\n    key: \"getDirectiveBoundTarget\",\n    value: function getDirectiveBoundTarget() {\n      if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {\n        return null;\n      }\n\n      var ast = this.parsePipe(); // example: \"condition | async\"\n\n      var _ast$span = ast.span,\n          start = _ast$span.start,\n          end = _ast$span.end;\n      var value = this.input.substring(start, end);\n      return new ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);\n    }\n    /**\n     * Return the binding for a variable declared using `as`. Note that the order\n     * of the key-value pair in this declaration is reversed. For example,\n     * ```\n     *   *ngFor=\"let item of items; index as i\"\n     *                              ^^^^^    ^\n     *                              value    key\n     * ```\n     *\n     * @param value name of the value in the declaration, \"ngIf\" in the example\n     * above, along with its absolute span.\n     */\n\n  }, {\n    key: \"parseAsBinding\",\n    value: function parseAsBinding(value) {\n      if (!this.peekKeywordAs()) {\n        return null;\n      }\n\n      this.advance(); // consume the 'as' keyword\n\n      var key = this.expectTemplateBindingKey();\n      this.consumeStatementTerminator();\n      var sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);\n      return new VariableBinding(sourceSpan, key, value);\n    }\n    /**\n     * Return the binding for a variable declared using `let`. For example,\n     * ```\n     *   *ngFor=\"let item of items; let i=index;\"\n     *           ^^^^^^^^           ^^^^^^^^^^^\n     * ```\n     * In the first binding, `item` is bound to `NgForOfContext.$implicit`.\n     * In the second binding, `i` is bound to `NgForOfContext.index`.\n     */\n\n  }, {\n    key: \"parseLetBinding\",\n    value: function parseLetBinding() {\n      if (!this.peekKeywordLet()) {\n        return null;\n      }\n\n      var spanStart = this.currentAbsoluteOffset;\n      this.advance(); // consume the 'let' keyword\n\n      var key = this.expectTemplateBindingKey();\n      var value = null;\n\n      if (this.consumeOptionalOperator('=')) {\n        value = this.expectTemplateBindingKey();\n      }\n\n      this.consumeStatementTerminator();\n      var sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);\n      return new VariableBinding(sourceSpan, key, value);\n    }\n    /**\n     * Consume the optional statement terminator: semicolon or comma.\n     */\n\n  }, {\n    key: \"consumeStatementTerminator\",\n    value: function consumeStatementTerminator() {\n      this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);\n    }\n    /**\n     * Records an error and skips over the token stream until reaching a recoverable point. See\n     * `this.skip` for more details on token skipping.\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(message) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n      this.skip();\n    }\n  }, {\n    key: \"locationText\",\n    value: function locationText() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (index == null) index = this.index;\n      return index < this.tokens.length ? \"at column \".concat(this.tokens[index].index + 1, \" in\") : \"at the end of the expression\";\n    }\n    /**\n     * Records an error for an unexpected private identifier being discovered.\n     * @param token Token representing a private identifier.\n     * @param extraMessage Optional additional message being appended to the error.\n     */\n\n  }, {\n    key: \"_reportErrorForPrivateIdentifier\",\n    value: function _reportErrorForPrivateIdentifier(token, extraMessage) {\n      var errorMessage = \"Private identifiers are not supported. Unexpected private identifier: \".concat(token);\n\n      if (extraMessage !== null) {\n        errorMessage += \", \".concat(extraMessage);\n      }\n\n      this.error(errorMessage);\n    }\n    /**\n     * Error recovery should skip tokens until it encounters a recovery point.\n     *\n     * The following are treated as unconditional recovery points:\n     *   - end of input\n     *   - ';' (parseChain() is always the root production, and it expects a ';')\n     *   - '|' (since pipes may be chained and each pipe expression may be treated independently)\n     *\n     * The following are conditional recovery points:\n     *   - ')', '}', ']' if one of calling productions is expecting one of these symbols\n     *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to\n     *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins\n     *       an '(' <expr> ')' production).\n     *       The recovery points of grouping symbols must be conditional as they must be skipped if\n     *       none of the calling productions are not expecting the closing token else we will never\n     *       make progress in the case of an extraneous group closing symbol (such as a stray ')').\n     *       That is, we skip a closing symbol if we are not in a grouping production.\n     *   - '=' in a `Writable` context\n     *     - In this context, we are able to recover after seeing the `=` operator, which\n     *       signals the presence of an independent rvalue expression following the `=` operator.\n     *\n     * If a production expects one of these token it increments the corresponding nesting count,\n     * and then decrements it just prior to checking if the token is in the input.\n     */\n\n  }, {\n    key: \"skip\",\n    value: function skip() {\n      var n = this.next;\n\n      while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && !n.isOperator('|') && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) && (!(this.context & ParseContextFlags.Writable) || !n.isOperator('='))) {\n        if (this.next.isError()) {\n          this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n        }\n\n        this.advance();\n        n = this.next;\n      }\n    }\n  }]);\n\n  return _ParseAST;\n}();\n\nvar SimpleExpressionChecker = /*#__PURE__*/function () {\n  function SimpleExpressionChecker() {\n    _classCallCheck(this, SimpleExpressionChecker);\n\n    this.errors = [];\n  }\n\n  _createClass(SimpleExpressionChecker, [{\n    key: \"visitImplicitReceiver\",\n    value: function visitImplicitReceiver(ast, context) {}\n  }, {\n    key: \"visitThisReceiver\",\n    value: function visitThisReceiver(ast, context) {}\n  }, {\n    key: \"visitInterpolation\",\n    value: function visitInterpolation(ast, context) {}\n  }, {\n    key: \"visitLiteralPrimitive\",\n    value: function visitLiteralPrimitive(ast, context) {}\n  }, {\n    key: \"visitPropertyRead\",\n    value: function visitPropertyRead(ast, context) {}\n  }, {\n    key: \"visitPropertyWrite\",\n    value: function visitPropertyWrite(ast, context) {}\n  }, {\n    key: \"visitSafePropertyRead\",\n    value: function visitSafePropertyRead(ast, context) {}\n  }, {\n    key: \"visitCall\",\n    value: function visitCall(ast, context) {}\n  }, {\n    key: \"visitLiteralArray\",\n    value: function visitLiteralArray(ast, context) {\n      this.visitAll(ast.expressions, context);\n    }\n  }, {\n    key: \"visitLiteralMap\",\n    value: function visitLiteralMap(ast, context) {\n      this.visitAll(ast.values, context);\n    }\n  }, {\n    key: \"visitUnary\",\n    value: function visitUnary(ast, context) {}\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(ast, context) {}\n  }, {\n    key: \"visitPrefixNot\",\n    value: function visitPrefixNot(ast, context) {}\n  }, {\n    key: \"visitNonNullAssert\",\n    value: function visitNonNullAssert(ast, context) {}\n  }, {\n    key: \"visitConditional\",\n    value: function visitConditional(ast, context) {}\n  }, {\n    key: \"visitPipe\",\n    value: function visitPipe(ast, context) {\n      this.errors.push('pipes');\n    }\n  }, {\n    key: \"visitKeyedRead\",\n    value: function visitKeyedRead(ast, context) {}\n  }, {\n    key: \"visitKeyedWrite\",\n    value: function visitKeyedWrite(ast, context) {}\n  }, {\n    key: \"visitAll\",\n    value: function visitAll(asts, context) {\n      var _this129 = this;\n\n      return asts.map(function (node) {\n        return node.visit(_this129, context);\n      });\n    }\n  }, {\n    key: \"visitChain\",\n    value: function visitChain(ast, context) {}\n  }, {\n    key: \"visitQuote\",\n    value: function visitQuote(ast, context) {}\n  }, {\n    key: \"visitSafeKeyedRead\",\n    value: function visitSafeKeyedRead(ast, context) {}\n  }]);\n\n  return SimpleExpressionChecker;\n}();\n/**\n * This class implements SimpleExpressionChecker used in View Engine and performs more strict checks\n * to make sure host bindings do not contain pipes. In View Engine, having pipes in host bindings is\n * not supported as well, but in some cases (like `!(value | async)`) the error is not triggered at\n * compile time. In order to preserve View Engine behavior, more strict checks are introduced for\n * Ivy mode only.\n */\n\n\nvar IvySimpleExpressionChecker = /*#__PURE__*/function (_RecursiveAstVisitor) {\n  _inherits(IvySimpleExpressionChecker, _RecursiveAstVisitor);\n\n  var _super78 = _createSuper(IvySimpleExpressionChecker);\n\n  function IvySimpleExpressionChecker() {\n    var _this130;\n\n    _classCallCheck(this, IvySimpleExpressionChecker);\n\n    _this130 = _super78.apply(this, arguments);\n    _this130.errors = [];\n    return _this130;\n  }\n\n  _createClass(IvySimpleExpressionChecker, [{\n    key: \"visitPipe\",\n    value: function visitPipe() {\n      this.errors.push('pipes');\n    }\n  }]);\n\n  return IvySimpleExpressionChecker;\n}(RecursiveAstVisitor);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n *\n * For example, the expression `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n *\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n */\n\n\nvar AstPath = /*#__PURE__*/function () {\n  function AstPath(path) {\n    var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n    _classCallCheck(this, AstPath);\n\n    this.path = path;\n    this.position = position;\n  }\n\n  _createClass(AstPath, [{\n    key: \"empty\",\n    get: function get() {\n      return !this.path || !this.path.length;\n    }\n  }, {\n    key: \"head\",\n    get: function get() {\n      return this.path[0];\n    }\n  }, {\n    key: \"tail\",\n    get: function get() {\n      return this.path[this.path.length - 1];\n    }\n  }, {\n    key: \"parentOf\",\n    value: function parentOf(node) {\n      return node && this.path[this.path.indexOf(node) - 1];\n    }\n  }, {\n    key: \"childOf\",\n    value: function childOf(node) {\n      return this.path[this.path.indexOf(node) + 1];\n    }\n  }, {\n    key: \"first\",\n    value: function first(ctor) {\n      for (var i = this.path.length - 1; i >= 0; i--) {\n        var item = this.path[i];\n        if (item instanceof ctor) return item;\n      }\n    }\n  }, {\n    key: \"push\",\n    value: function push(node) {\n      this.path.push(node);\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      return this.path.pop();\n    }\n  }]);\n\n  return AstPath;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar NodeWithI18n = function NodeWithI18n(sourceSpan, i18n) {\n  _classCallCheck(this, NodeWithI18n);\n\n  this.sourceSpan = sourceSpan;\n  this.i18n = i18n;\n};\n\nvar Text = /*#__PURE__*/function (_NodeWithI18n) {\n  _inherits(Text, _NodeWithI18n);\n\n  var _super79 = _createSuper(Text);\n\n  function Text(value, sourceSpan, tokens, i18n) {\n    var _this131;\n\n    _classCallCheck(this, Text);\n\n    _this131 = _super79.call(this, sourceSpan, i18n);\n    _this131.value = value;\n    _this131.tokens = tokens;\n    return _this131;\n  }\n\n  _createClass(Text, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitText(this, context);\n    }\n  }]);\n\n  return Text;\n}(NodeWithI18n);\n\nvar Expansion = /*#__PURE__*/function (_NodeWithI18n2) {\n  _inherits(Expansion, _NodeWithI18n2);\n\n  var _super80 = _createSuper(Expansion);\n\n  function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n) {\n    var _this132;\n\n    _classCallCheck(this, Expansion);\n\n    _this132 = _super80.call(this, sourceSpan, i18n);\n    _this132.switchValue = switchValue;\n    _this132.type = type;\n    _this132.cases = cases;\n    _this132.switchValueSourceSpan = switchValueSourceSpan;\n    return _this132;\n  }\n\n  _createClass(Expansion, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitExpansion(this, context);\n    }\n  }]);\n\n  return Expansion;\n}(NodeWithI18n);\n\nvar ExpansionCase = /*#__PURE__*/function () {\n  function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n    _classCallCheck(this, ExpansionCase);\n\n    this.value = value;\n    this.expression = expression;\n    this.sourceSpan = sourceSpan;\n    this.valueSourceSpan = valueSourceSpan;\n    this.expSourceSpan = expSourceSpan;\n  }\n\n  _createClass(ExpansionCase, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitExpansionCase(this, context);\n    }\n  }]);\n\n  return ExpansionCase;\n}();\n\nvar Attribute = /*#__PURE__*/function (_NodeWithI18n3) {\n  _inherits(Attribute, _NodeWithI18n3);\n\n  var _super81 = _createSuper(Attribute);\n\n  function Attribute(name, value, sourceSpan, keySpan, valueSpan, valueTokens, i18n) {\n    var _this133;\n\n    _classCallCheck(this, Attribute);\n\n    _this133 = _super81.call(this, sourceSpan, i18n);\n    _this133.name = name;\n    _this133.value = value;\n    _this133.keySpan = keySpan;\n    _this133.valueSpan = valueSpan;\n    _this133.valueTokens = valueTokens;\n    return _this133;\n  }\n\n  _createClass(Attribute, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitAttribute(this, context);\n    }\n  }]);\n\n  return Attribute;\n}(NodeWithI18n);\n\nvar Element = /*#__PURE__*/function (_NodeWithI18n4) {\n  _inherits(Element, _NodeWithI18n4);\n\n  var _super82 = _createSuper(Element);\n\n  function Element(name, attrs, children, sourceSpan, startSourceSpan) {\n    var _this134;\n\n    var endSourceSpan = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    var i18n = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, Element);\n\n    _this134 = _super82.call(this, sourceSpan, i18n);\n    _this134.name = name;\n    _this134.attrs = attrs;\n    _this134.children = children;\n    _this134.startSourceSpan = startSourceSpan;\n    _this134.endSourceSpan = endSourceSpan;\n    return _this134;\n  }\n\n  _createClass(Element, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitElement(this, context);\n    }\n  }]);\n\n  return Element;\n}(NodeWithI18n);\n\nvar Comment = /*#__PURE__*/function () {\n  function Comment(value, sourceSpan) {\n    _classCallCheck(this, Comment);\n\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n\n  _createClass(Comment, [{\n    key: \"visit\",\n    value: function visit(visitor, context) {\n      return visitor.visitComment(this, context);\n    }\n  }]);\n\n  return Comment;\n}();\n\nfunction visitAll(visitor, nodes) {\n  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var result = [];\n  var visit = visitor.visit ? function (ast) {\n    return visitor.visit(ast, context) || ast.visit(visitor, context);\n  } : function (ast) {\n    return ast.visit(visitor, context);\n  };\n  nodes.forEach(function (ast) {\n    var astResult = visit(ast);\n\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\nvar RecursiveVisitor = /*#__PURE__*/function () {\n  function RecursiveVisitor() {\n    _classCallCheck(this, RecursiveVisitor);\n  }\n\n  _createClass(RecursiveVisitor, [{\n    key: \"visitElement\",\n    value: function visitElement(ast, context) {\n      this.visitChildren(context, function (visit) {\n        visit(ast.attrs);\n        visit(ast.children);\n      });\n    }\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(ast, context) {}\n  }, {\n    key: \"visitText\",\n    value: function visitText(ast, context) {}\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(ast, context) {}\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(ast, context) {\n      return this.visitChildren(context, function (visit) {\n        visit(ast.cases);\n      });\n    }\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(ast, context) {}\n  }, {\n    key: \"visitChildren\",\n    value: function visitChildren(context, cb) {\n      var results = [];\n      var t = this;\n\n      function visit(children) {\n        if (children) results.push(visitAll(t, children, context));\n      }\n\n      cb(visit);\n      return Array.prototype.concat.apply([], results);\n    }\n  }]);\n\n  return RecursiveVisitor;\n}();\n\nfunction spanOf(ast) {\n  var start = ast.sourceSpan.start.offset;\n  var end = ast.sourceSpan.end.offset;\n\n  if (ast instanceof Element) {\n    if (ast.endSourceSpan) {\n      end = ast.endSourceSpan.end.offset;\n    } else if (ast.children && ast.children.length) {\n      end = spanOf(ast.children[ast.children.length - 1]).end;\n    }\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n\nfunction findNode(nodes, position) {\n  var path = [];\n  var visitor = new ( /*#__PURE__*/function (_RecursiveVisitor) {\n    _inherits(_class, _RecursiveVisitor);\n\n    var _super83 = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super83.apply(this, arguments);\n    }\n\n    _createClass(_class, [{\n      key: \"visit\",\n      value: function visit(ast, context) {\n        var span = spanOf(ast);\n\n        if (span.start <= position && position < span.end) {\n          path.push(ast);\n        } else {\n          // Returning a value here will result in the children being skipped.\n          return true;\n        }\n      }\n    }]);\n\n    return _class;\n  }(RecursiveVisitor))();\n  visitAll(visitor, nodes);\n  return new AstPath(path, position);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Mapping between all HTML entity names and their unicode representation.\n// Generated from https://html.spec.whatwg.org/multipage/entities.json by stripping\n// the `&` and `;` from the keys and removing the duplicates.\n// see https://www.w3.org/TR/html51/syntax.html#named-character-references\n\n\nvar NAMED_ENTITIES = {\n  'AElig': \"\\xC6\",\n  'AMP': \"&\",\n  'amp': \"&\",\n  'Aacute': \"\\xC1\",\n  'Abreve': \"\\u0102\",\n  'Acirc': \"\\xC2\",\n  'Acy': \"\\u0410\",\n  'Afr': \"\\uD835\\uDD04\",\n  'Agrave': \"\\xC0\",\n  'Alpha': \"\\u0391\",\n  'Amacr': \"\\u0100\",\n  'And': \"\\u2A53\",\n  'Aogon': \"\\u0104\",\n  'Aopf': \"\\uD835\\uDD38\",\n  'ApplyFunction': \"\\u2061\",\n  'af': \"\\u2061\",\n  'Aring': \"\\xC5\",\n  'angst': \"\\xC5\",\n  'Ascr': \"\\uD835\\uDC9C\",\n  'Assign': \"\\u2254\",\n  'colone': \"\\u2254\",\n  'coloneq': \"\\u2254\",\n  'Atilde': \"\\xC3\",\n  'Auml': \"\\xC4\",\n  'Backslash': \"\\u2216\",\n  'setminus': \"\\u2216\",\n  'setmn': \"\\u2216\",\n  'smallsetminus': \"\\u2216\",\n  'ssetmn': \"\\u2216\",\n  'Barv': \"\\u2AE7\",\n  'Barwed': \"\\u2306\",\n  'doublebarwedge': \"\\u2306\",\n  'Bcy': \"\\u0411\",\n  'Because': \"\\u2235\",\n  'becaus': \"\\u2235\",\n  'because': \"\\u2235\",\n  'Bernoullis': \"\\u212C\",\n  'Bscr': \"\\u212C\",\n  'bernou': \"\\u212C\",\n  'Beta': \"\\u0392\",\n  'Bfr': \"\\uD835\\uDD05\",\n  'Bopf': \"\\uD835\\uDD39\",\n  'Breve': \"\\u02D8\",\n  'breve': \"\\u02D8\",\n  'Bumpeq': \"\\u224E\",\n  'HumpDownHump': \"\\u224E\",\n  'bump': \"\\u224E\",\n  'CHcy': \"\\u0427\",\n  'COPY': \"\\xA9\",\n  'copy': \"\\xA9\",\n  'Cacute': \"\\u0106\",\n  'Cap': \"\\u22D2\",\n  'CapitalDifferentialD': \"\\u2145\",\n  'DD': \"\\u2145\",\n  'Cayleys': \"\\u212D\",\n  'Cfr': \"\\u212D\",\n  'Ccaron': \"\\u010C\",\n  'Ccedil': \"\\xC7\",\n  'Ccirc': \"\\u0108\",\n  'Cconint': \"\\u2230\",\n  'Cdot': \"\\u010A\",\n  'Cedilla': \"\\xB8\",\n  'cedil': \"\\xB8\",\n  'CenterDot': \"\\xB7\",\n  'centerdot': \"\\xB7\",\n  'middot': \"\\xB7\",\n  'Chi': \"\\u03A7\",\n  'CircleDot': \"\\u2299\",\n  'odot': \"\\u2299\",\n  'CircleMinus': \"\\u2296\",\n  'ominus': \"\\u2296\",\n  'CirclePlus': \"\\u2295\",\n  'oplus': \"\\u2295\",\n  'CircleTimes': \"\\u2297\",\n  'otimes': \"\\u2297\",\n  'ClockwiseContourIntegral': \"\\u2232\",\n  'cwconint': \"\\u2232\",\n  'CloseCurlyDoubleQuote': \"\\u201D\",\n  'rdquo': \"\\u201D\",\n  'rdquor': \"\\u201D\",\n  'CloseCurlyQuote': \"\\u2019\",\n  'rsquo': \"\\u2019\",\n  'rsquor': \"\\u2019\",\n  'Colon': \"\\u2237\",\n  'Proportion': \"\\u2237\",\n  'Colone': \"\\u2A74\",\n  'Congruent': \"\\u2261\",\n  'equiv': \"\\u2261\",\n  'Conint': \"\\u222F\",\n  'DoubleContourIntegral': \"\\u222F\",\n  'ContourIntegral': \"\\u222E\",\n  'conint': \"\\u222E\",\n  'oint': \"\\u222E\",\n  'Copf': \"\\u2102\",\n  'complexes': \"\\u2102\",\n  'Coproduct': \"\\u2210\",\n  'coprod': \"\\u2210\",\n  'CounterClockwiseContourIntegral': \"\\u2233\",\n  'awconint': \"\\u2233\",\n  'Cross': \"\\u2A2F\",\n  'Cscr': \"\\uD835\\uDC9E\",\n  'Cup': \"\\u22D3\",\n  'CupCap': \"\\u224D\",\n  'asympeq': \"\\u224D\",\n  'DDotrahd': \"\\u2911\",\n  'DJcy': \"\\u0402\",\n  'DScy': \"\\u0405\",\n  'DZcy': \"\\u040F\",\n  'Dagger': \"\\u2021\",\n  'ddagger': \"\\u2021\",\n  'Darr': \"\\u21A1\",\n  'Dashv': \"\\u2AE4\",\n  'DoubleLeftTee': \"\\u2AE4\",\n  'Dcaron': \"\\u010E\",\n  'Dcy': \"\\u0414\",\n  'Del': \"\\u2207\",\n  'nabla': \"\\u2207\",\n  'Delta': \"\\u0394\",\n  'Dfr': \"\\uD835\\uDD07\",\n  'DiacriticalAcute': \"\\xB4\",\n  'acute': \"\\xB4\",\n  'DiacriticalDot': \"\\u02D9\",\n  'dot': \"\\u02D9\",\n  'DiacriticalDoubleAcute': \"\\u02DD\",\n  'dblac': \"\\u02DD\",\n  'DiacriticalGrave': \"`\",\n  'grave': \"`\",\n  'DiacriticalTilde': \"\\u02DC\",\n  'tilde': \"\\u02DC\",\n  'Diamond': \"\\u22C4\",\n  'diam': \"\\u22C4\",\n  'diamond': \"\\u22C4\",\n  'DifferentialD': \"\\u2146\",\n  'dd': \"\\u2146\",\n  'Dopf': \"\\uD835\\uDD3B\",\n  'Dot': \"\\xA8\",\n  'DoubleDot': \"\\xA8\",\n  'die': \"\\xA8\",\n  'uml': \"\\xA8\",\n  'DotDot': \"\\u20DC\",\n  'DotEqual': \"\\u2250\",\n  'doteq': \"\\u2250\",\n  'esdot': \"\\u2250\",\n  'DoubleDownArrow': \"\\u21D3\",\n  'Downarrow': \"\\u21D3\",\n  'dArr': \"\\u21D3\",\n  'DoubleLeftArrow': \"\\u21D0\",\n  'Leftarrow': \"\\u21D0\",\n  'lArr': \"\\u21D0\",\n  'DoubleLeftRightArrow': \"\\u21D4\",\n  'Leftrightarrow': \"\\u21D4\",\n  'hArr': \"\\u21D4\",\n  'iff': \"\\u21D4\",\n  'DoubleLongLeftArrow': \"\\u27F8\",\n  'Longleftarrow': \"\\u27F8\",\n  'xlArr': \"\\u27F8\",\n  'DoubleLongLeftRightArrow': \"\\u27FA\",\n  'Longleftrightarrow': \"\\u27FA\",\n  'xhArr': \"\\u27FA\",\n  'DoubleLongRightArrow': \"\\u27F9\",\n  'Longrightarrow': \"\\u27F9\",\n  'xrArr': \"\\u27F9\",\n  'DoubleRightArrow': \"\\u21D2\",\n  'Implies': \"\\u21D2\",\n  'Rightarrow': \"\\u21D2\",\n  'rArr': \"\\u21D2\",\n  'DoubleRightTee': \"\\u22A8\",\n  'vDash': \"\\u22A8\",\n  'DoubleUpArrow': \"\\u21D1\",\n  'Uparrow': \"\\u21D1\",\n  'uArr': \"\\u21D1\",\n  'DoubleUpDownArrow': \"\\u21D5\",\n  'Updownarrow': \"\\u21D5\",\n  'vArr': \"\\u21D5\",\n  'DoubleVerticalBar': \"\\u2225\",\n  'par': \"\\u2225\",\n  'parallel': \"\\u2225\",\n  'shortparallel': \"\\u2225\",\n  'spar': \"\\u2225\",\n  'DownArrow': \"\\u2193\",\n  'ShortDownArrow': \"\\u2193\",\n  'darr': \"\\u2193\",\n  'downarrow': \"\\u2193\",\n  'DownArrowBar': \"\\u2913\",\n  'DownArrowUpArrow': \"\\u21F5\",\n  'duarr': \"\\u21F5\",\n  'DownBreve': \"\\u0311\",\n  'DownLeftRightVector': \"\\u2950\",\n  'DownLeftTeeVector': \"\\u295E\",\n  'DownLeftVector': \"\\u21BD\",\n  'leftharpoondown': \"\\u21BD\",\n  'lhard': \"\\u21BD\",\n  'DownLeftVectorBar': \"\\u2956\",\n  'DownRightTeeVector': \"\\u295F\",\n  'DownRightVector': \"\\u21C1\",\n  'rhard': \"\\u21C1\",\n  'rightharpoondown': \"\\u21C1\",\n  'DownRightVectorBar': \"\\u2957\",\n  'DownTee': \"\\u22A4\",\n  'top': \"\\u22A4\",\n  'DownTeeArrow': \"\\u21A7\",\n  'mapstodown': \"\\u21A7\",\n  'Dscr': \"\\uD835\\uDC9F\",\n  'Dstrok': \"\\u0110\",\n  'ENG': \"\\u014A\",\n  'ETH': \"\\xD0\",\n  'Eacute': \"\\xC9\",\n  'Ecaron': \"\\u011A\",\n  'Ecirc': \"\\xCA\",\n  'Ecy': \"\\u042D\",\n  'Edot': \"\\u0116\",\n  'Efr': \"\\uD835\\uDD08\",\n  'Egrave': \"\\xC8\",\n  'Element': \"\\u2208\",\n  'in': \"\\u2208\",\n  'isin': \"\\u2208\",\n  'isinv': \"\\u2208\",\n  'Emacr': \"\\u0112\",\n  'EmptySmallSquare': \"\\u25FB\",\n  'EmptyVerySmallSquare': \"\\u25AB\",\n  'Eogon': \"\\u0118\",\n  'Eopf': \"\\uD835\\uDD3C\",\n  'Epsilon': \"\\u0395\",\n  'Equal': \"\\u2A75\",\n  'EqualTilde': \"\\u2242\",\n  'eqsim': \"\\u2242\",\n  'esim': \"\\u2242\",\n  'Equilibrium': \"\\u21CC\",\n  'rightleftharpoons': \"\\u21CC\",\n  'rlhar': \"\\u21CC\",\n  'Escr': \"\\u2130\",\n  'expectation': \"\\u2130\",\n  'Esim': \"\\u2A73\",\n  'Eta': \"\\u0397\",\n  'Euml': \"\\xCB\",\n  'Exists': \"\\u2203\",\n  'exist': \"\\u2203\",\n  'ExponentialE': \"\\u2147\",\n  'ee': \"\\u2147\",\n  'exponentiale': \"\\u2147\",\n  'Fcy': \"\\u0424\",\n  'Ffr': \"\\uD835\\uDD09\",\n  'FilledSmallSquare': \"\\u25FC\",\n  'FilledVerySmallSquare': \"\\u25AA\",\n  'blacksquare': \"\\u25AA\",\n  'squarf': \"\\u25AA\",\n  'squf': \"\\u25AA\",\n  'Fopf': \"\\uD835\\uDD3D\",\n  'ForAll': \"\\u2200\",\n  'forall': \"\\u2200\",\n  'Fouriertrf': \"\\u2131\",\n  'Fscr': \"\\u2131\",\n  'GJcy': \"\\u0403\",\n  'GT': \">\",\n  'gt': \">\",\n  'Gamma': \"\\u0393\",\n  'Gammad': \"\\u03DC\",\n  'Gbreve': \"\\u011E\",\n  'Gcedil': \"\\u0122\",\n  'Gcirc': \"\\u011C\",\n  'Gcy': \"\\u0413\",\n  'Gdot': \"\\u0120\",\n  'Gfr': \"\\uD835\\uDD0A\",\n  'Gg': \"\\u22D9\",\n  'ggg': \"\\u22D9\",\n  'Gopf': \"\\uD835\\uDD3E\",\n  'GreaterEqual': \"\\u2265\",\n  'ge': \"\\u2265\",\n  'geq': \"\\u2265\",\n  'GreaterEqualLess': \"\\u22DB\",\n  'gel': \"\\u22DB\",\n  'gtreqless': \"\\u22DB\",\n  'GreaterFullEqual': \"\\u2267\",\n  'gE': \"\\u2267\",\n  'geqq': \"\\u2267\",\n  'GreaterGreater': \"\\u2AA2\",\n  'GreaterLess': \"\\u2277\",\n  'gl': \"\\u2277\",\n  'gtrless': \"\\u2277\",\n  'GreaterSlantEqual': \"\\u2A7E\",\n  'geqslant': \"\\u2A7E\",\n  'ges': \"\\u2A7E\",\n  'GreaterTilde': \"\\u2273\",\n  'gsim': \"\\u2273\",\n  'gtrsim': \"\\u2273\",\n  'Gscr': \"\\uD835\\uDCA2\",\n  'Gt': \"\\u226B\",\n  'NestedGreaterGreater': \"\\u226B\",\n  'gg': \"\\u226B\",\n  'HARDcy': \"\\u042A\",\n  'Hacek': \"\\u02C7\",\n  'caron': \"\\u02C7\",\n  'Hat': \"^\",\n  'Hcirc': \"\\u0124\",\n  'Hfr': \"\\u210C\",\n  'Poincareplane': \"\\u210C\",\n  'HilbertSpace': \"\\u210B\",\n  'Hscr': \"\\u210B\",\n  'hamilt': \"\\u210B\",\n  'Hopf': \"\\u210D\",\n  'quaternions': \"\\u210D\",\n  'HorizontalLine': \"\\u2500\",\n  'boxh': \"\\u2500\",\n  'Hstrok': \"\\u0126\",\n  'HumpEqual': \"\\u224F\",\n  'bumpe': \"\\u224F\",\n  'bumpeq': \"\\u224F\",\n  'IEcy': \"\\u0415\",\n  'IJlig': \"\\u0132\",\n  'IOcy': \"\\u0401\",\n  'Iacute': \"\\xCD\",\n  'Icirc': \"\\xCE\",\n  'Icy': \"\\u0418\",\n  'Idot': \"\\u0130\",\n  'Ifr': \"\\u2111\",\n  'Im': \"\\u2111\",\n  'image': \"\\u2111\",\n  'imagpart': \"\\u2111\",\n  'Igrave': \"\\xCC\",\n  'Imacr': \"\\u012A\",\n  'ImaginaryI': \"\\u2148\",\n  'ii': \"\\u2148\",\n  'Int': \"\\u222C\",\n  'Integral': \"\\u222B\",\n  'int': \"\\u222B\",\n  'Intersection': \"\\u22C2\",\n  'bigcap': \"\\u22C2\",\n  'xcap': \"\\u22C2\",\n  'InvisibleComma': \"\\u2063\",\n  'ic': \"\\u2063\",\n  'InvisibleTimes': \"\\u2062\",\n  'it': \"\\u2062\",\n  'Iogon': \"\\u012E\",\n  'Iopf': \"\\uD835\\uDD40\",\n  'Iota': \"\\u0399\",\n  'Iscr': \"\\u2110\",\n  'imagline': \"\\u2110\",\n  'Itilde': \"\\u0128\",\n  'Iukcy': \"\\u0406\",\n  'Iuml': \"\\xCF\",\n  'Jcirc': \"\\u0134\",\n  'Jcy': \"\\u0419\",\n  'Jfr': \"\\uD835\\uDD0D\",\n  'Jopf': \"\\uD835\\uDD41\",\n  'Jscr': \"\\uD835\\uDCA5\",\n  'Jsercy': \"\\u0408\",\n  'Jukcy': \"\\u0404\",\n  'KHcy': \"\\u0425\",\n  'KJcy': \"\\u040C\",\n  'Kappa': \"\\u039A\",\n  'Kcedil': \"\\u0136\",\n  'Kcy': \"\\u041A\",\n  'Kfr': \"\\uD835\\uDD0E\",\n  'Kopf': \"\\uD835\\uDD42\",\n  'Kscr': \"\\uD835\\uDCA6\",\n  'LJcy': \"\\u0409\",\n  'LT': \"<\",\n  'lt': \"<\",\n  'Lacute': \"\\u0139\",\n  'Lambda': \"\\u039B\",\n  'Lang': \"\\u27EA\",\n  'Laplacetrf': \"\\u2112\",\n  'Lscr': \"\\u2112\",\n  'lagran': \"\\u2112\",\n  'Larr': \"\\u219E\",\n  'twoheadleftarrow': \"\\u219E\",\n  'Lcaron': \"\\u013D\",\n  'Lcedil': \"\\u013B\",\n  'Lcy': \"\\u041B\",\n  'LeftAngleBracket': \"\\u27E8\",\n  'lang': \"\\u27E8\",\n  'langle': \"\\u27E8\",\n  'LeftArrow': \"\\u2190\",\n  'ShortLeftArrow': \"\\u2190\",\n  'larr': \"\\u2190\",\n  'leftarrow': \"\\u2190\",\n  'slarr': \"\\u2190\",\n  'LeftArrowBar': \"\\u21E4\",\n  'larrb': \"\\u21E4\",\n  'LeftArrowRightArrow': \"\\u21C6\",\n  'leftrightarrows': \"\\u21C6\",\n  'lrarr': \"\\u21C6\",\n  'LeftCeiling': \"\\u2308\",\n  'lceil': \"\\u2308\",\n  'LeftDoubleBracket': \"\\u27E6\",\n  'lobrk': \"\\u27E6\",\n  'LeftDownTeeVector': \"\\u2961\",\n  'LeftDownVector': \"\\u21C3\",\n  'dharl': \"\\u21C3\",\n  'downharpoonleft': \"\\u21C3\",\n  'LeftDownVectorBar': \"\\u2959\",\n  'LeftFloor': \"\\u230A\",\n  'lfloor': \"\\u230A\",\n  'LeftRightArrow': \"\\u2194\",\n  'harr': \"\\u2194\",\n  'leftrightarrow': \"\\u2194\",\n  'LeftRightVector': \"\\u294E\",\n  'LeftTee': \"\\u22A3\",\n  'dashv': \"\\u22A3\",\n  'LeftTeeArrow': \"\\u21A4\",\n  'mapstoleft': \"\\u21A4\",\n  'LeftTeeVector': \"\\u295A\",\n  'LeftTriangle': \"\\u22B2\",\n  'vartriangleleft': \"\\u22B2\",\n  'vltri': \"\\u22B2\",\n  'LeftTriangleBar': \"\\u29CF\",\n  'LeftTriangleEqual': \"\\u22B4\",\n  'ltrie': \"\\u22B4\",\n  'trianglelefteq': \"\\u22B4\",\n  'LeftUpDownVector': \"\\u2951\",\n  'LeftUpTeeVector': \"\\u2960\",\n  'LeftUpVector': \"\\u21BF\",\n  'uharl': \"\\u21BF\",\n  'upharpoonleft': \"\\u21BF\",\n  'LeftUpVectorBar': \"\\u2958\",\n  'LeftVector': \"\\u21BC\",\n  'leftharpoonup': \"\\u21BC\",\n  'lharu': \"\\u21BC\",\n  'LeftVectorBar': \"\\u2952\",\n  'LessEqualGreater': \"\\u22DA\",\n  'leg': \"\\u22DA\",\n  'lesseqgtr': \"\\u22DA\",\n  'LessFullEqual': \"\\u2266\",\n  'lE': \"\\u2266\",\n  'leqq': \"\\u2266\",\n  'LessGreater': \"\\u2276\",\n  'lessgtr': \"\\u2276\",\n  'lg': \"\\u2276\",\n  'LessLess': \"\\u2AA1\",\n  'LessSlantEqual': \"\\u2A7D\",\n  'leqslant': \"\\u2A7D\",\n  'les': \"\\u2A7D\",\n  'LessTilde': \"\\u2272\",\n  'lesssim': \"\\u2272\",\n  'lsim': \"\\u2272\",\n  'Lfr': \"\\uD835\\uDD0F\",\n  'Ll': \"\\u22D8\",\n  'Lleftarrow': \"\\u21DA\",\n  'lAarr': \"\\u21DA\",\n  'Lmidot': \"\\u013F\",\n  'LongLeftArrow': \"\\u27F5\",\n  'longleftarrow': \"\\u27F5\",\n  'xlarr': \"\\u27F5\",\n  'LongLeftRightArrow': \"\\u27F7\",\n  'longleftrightarrow': \"\\u27F7\",\n  'xharr': \"\\u27F7\",\n  'LongRightArrow': \"\\u27F6\",\n  'longrightarrow': \"\\u27F6\",\n  'xrarr': \"\\u27F6\",\n  'Lopf': \"\\uD835\\uDD43\",\n  'LowerLeftArrow': \"\\u2199\",\n  'swarr': \"\\u2199\",\n  'swarrow': \"\\u2199\",\n  'LowerRightArrow': \"\\u2198\",\n  'searr': \"\\u2198\",\n  'searrow': \"\\u2198\",\n  'Lsh': \"\\u21B0\",\n  'lsh': \"\\u21B0\",\n  'Lstrok': \"\\u0141\",\n  'Lt': \"\\u226A\",\n  'NestedLessLess': \"\\u226A\",\n  'll': \"\\u226A\",\n  'Map': \"\\u2905\",\n  'Mcy': \"\\u041C\",\n  'MediumSpace': \"\\u205F\",\n  'Mellintrf': \"\\u2133\",\n  'Mscr': \"\\u2133\",\n  'phmmat': \"\\u2133\",\n  'Mfr': \"\\uD835\\uDD10\",\n  'MinusPlus': \"\\u2213\",\n  'mnplus': \"\\u2213\",\n  'mp': \"\\u2213\",\n  'Mopf': \"\\uD835\\uDD44\",\n  'Mu': \"\\u039C\",\n  'NJcy': \"\\u040A\",\n  'Nacute': \"\\u0143\",\n  'Ncaron': \"\\u0147\",\n  'Ncedil': \"\\u0145\",\n  'Ncy': \"\\u041D\",\n  'NegativeMediumSpace': \"\\u200B\",\n  'NegativeThickSpace': \"\\u200B\",\n  'NegativeThinSpace': \"\\u200B\",\n  'NegativeVeryThinSpace': \"\\u200B\",\n  'ZeroWidthSpace': \"\\u200B\",\n  'NewLine': \"\\n\",\n  'Nfr': \"\\uD835\\uDD11\",\n  'NoBreak': \"\\u2060\",\n  'NonBreakingSpace': \"\\xA0\",\n  'nbsp': \"\\xA0\",\n  'Nopf': \"\\u2115\",\n  'naturals': \"\\u2115\",\n  'Not': \"\\u2AEC\",\n  'NotCongruent': \"\\u2262\",\n  'nequiv': \"\\u2262\",\n  'NotCupCap': \"\\u226D\",\n  'NotDoubleVerticalBar': \"\\u2226\",\n  'npar': \"\\u2226\",\n  'nparallel': \"\\u2226\",\n  'nshortparallel': \"\\u2226\",\n  'nspar': \"\\u2226\",\n  'NotElement': \"\\u2209\",\n  'notin': \"\\u2209\",\n  'notinva': \"\\u2209\",\n  'NotEqual': \"\\u2260\",\n  'ne': \"\\u2260\",\n  'NotEqualTilde': \"\\u2242\\u0338\",\n  'nesim': \"\\u2242\\u0338\",\n  'NotExists': \"\\u2204\",\n  'nexist': \"\\u2204\",\n  'nexists': \"\\u2204\",\n  'NotGreater': \"\\u226F\",\n  'ngt': \"\\u226F\",\n  'ngtr': \"\\u226F\",\n  'NotGreaterEqual': \"\\u2271\",\n  'nge': \"\\u2271\",\n  'ngeq': \"\\u2271\",\n  'NotGreaterFullEqual': \"\\u2267\\u0338\",\n  'ngE': \"\\u2267\\u0338\",\n  'ngeqq': \"\\u2267\\u0338\",\n  'NotGreaterGreater': \"\\u226B\\u0338\",\n  'nGtv': \"\\u226B\\u0338\",\n  'NotGreaterLess': \"\\u2279\",\n  'ntgl': \"\\u2279\",\n  'NotGreaterSlantEqual': \"\\u2A7E\\u0338\",\n  'ngeqslant': \"\\u2A7E\\u0338\",\n  'nges': \"\\u2A7E\\u0338\",\n  'NotGreaterTilde': \"\\u2275\",\n  'ngsim': \"\\u2275\",\n  'NotHumpDownHump': \"\\u224E\\u0338\",\n  'nbump': \"\\u224E\\u0338\",\n  'NotHumpEqual': \"\\u224F\\u0338\",\n  'nbumpe': \"\\u224F\\u0338\",\n  'NotLeftTriangle': \"\\u22EA\",\n  'nltri': \"\\u22EA\",\n  'ntriangleleft': \"\\u22EA\",\n  'NotLeftTriangleBar': \"\\u29CF\\u0338\",\n  'NotLeftTriangleEqual': \"\\u22EC\",\n  'nltrie': \"\\u22EC\",\n  'ntrianglelefteq': \"\\u22EC\",\n  'NotLess': \"\\u226E\",\n  'nless': \"\\u226E\",\n  'nlt': \"\\u226E\",\n  'NotLessEqual': \"\\u2270\",\n  'nle': \"\\u2270\",\n  'nleq': \"\\u2270\",\n  'NotLessGreater': \"\\u2278\",\n  'ntlg': \"\\u2278\",\n  'NotLessLess': \"\\u226A\\u0338\",\n  'nLtv': \"\\u226A\\u0338\",\n  'NotLessSlantEqual': \"\\u2A7D\\u0338\",\n  'nleqslant': \"\\u2A7D\\u0338\",\n  'nles': \"\\u2A7D\\u0338\",\n  'NotLessTilde': \"\\u2274\",\n  'nlsim': \"\\u2274\",\n  'NotNestedGreaterGreater': \"\\u2AA2\\u0338\",\n  'NotNestedLessLess': \"\\u2AA1\\u0338\",\n  'NotPrecedes': \"\\u2280\",\n  'npr': \"\\u2280\",\n  'nprec': \"\\u2280\",\n  'NotPrecedesEqual': \"\\u2AAF\\u0338\",\n  'npre': \"\\u2AAF\\u0338\",\n  'npreceq': \"\\u2AAF\\u0338\",\n  'NotPrecedesSlantEqual': \"\\u22E0\",\n  'nprcue': \"\\u22E0\",\n  'NotReverseElement': \"\\u220C\",\n  'notni': \"\\u220C\",\n  'notniva': \"\\u220C\",\n  'NotRightTriangle': \"\\u22EB\",\n  'nrtri': \"\\u22EB\",\n  'ntriangleright': \"\\u22EB\",\n  'NotRightTriangleBar': \"\\u29D0\\u0338\",\n  'NotRightTriangleEqual': \"\\u22ED\",\n  'nrtrie': \"\\u22ED\",\n  'ntrianglerighteq': \"\\u22ED\",\n  'NotSquareSubset': \"\\u228F\\u0338\",\n  'NotSquareSubsetEqual': \"\\u22E2\",\n  'nsqsube': \"\\u22E2\",\n  'NotSquareSuperset': \"\\u2290\\u0338\",\n  'NotSquareSupersetEqual': \"\\u22E3\",\n  'nsqsupe': \"\\u22E3\",\n  'NotSubset': \"\\u2282\\u20D2\",\n  'nsubset': \"\\u2282\\u20D2\",\n  'vnsub': \"\\u2282\\u20D2\",\n  'NotSubsetEqual': \"\\u2288\",\n  'nsube': \"\\u2288\",\n  'nsubseteq': \"\\u2288\",\n  'NotSucceeds': \"\\u2281\",\n  'nsc': \"\\u2281\",\n  'nsucc': \"\\u2281\",\n  'NotSucceedsEqual': \"\\u2AB0\\u0338\",\n  'nsce': \"\\u2AB0\\u0338\",\n  'nsucceq': \"\\u2AB0\\u0338\",\n  'NotSucceedsSlantEqual': \"\\u22E1\",\n  'nsccue': \"\\u22E1\",\n  'NotSucceedsTilde': \"\\u227F\\u0338\",\n  'NotSuperset': \"\\u2283\\u20D2\",\n  'nsupset': \"\\u2283\\u20D2\",\n  'vnsup': \"\\u2283\\u20D2\",\n  'NotSupersetEqual': \"\\u2289\",\n  'nsupe': \"\\u2289\",\n  'nsupseteq': \"\\u2289\",\n  'NotTilde': \"\\u2241\",\n  'nsim': \"\\u2241\",\n  'NotTildeEqual': \"\\u2244\",\n  'nsime': \"\\u2244\",\n  'nsimeq': \"\\u2244\",\n  'NotTildeFullEqual': \"\\u2247\",\n  'ncong': \"\\u2247\",\n  'NotTildeTilde': \"\\u2249\",\n  'nap': \"\\u2249\",\n  'napprox': \"\\u2249\",\n  'NotVerticalBar': \"\\u2224\",\n  'nmid': \"\\u2224\",\n  'nshortmid': \"\\u2224\",\n  'nsmid': \"\\u2224\",\n  'Nscr': \"\\uD835\\uDCA9\",\n  'Ntilde': \"\\xD1\",\n  'Nu': \"\\u039D\",\n  'OElig': \"\\u0152\",\n  'Oacute': \"\\xD3\",\n  'Ocirc': \"\\xD4\",\n  'Ocy': \"\\u041E\",\n  'Odblac': \"\\u0150\",\n  'Ofr': \"\\uD835\\uDD12\",\n  'Ograve': \"\\xD2\",\n  'Omacr': \"\\u014C\",\n  'Omega': \"\\u03A9\",\n  'ohm': \"\\u03A9\",\n  'Omicron': \"\\u039F\",\n  'Oopf': \"\\uD835\\uDD46\",\n  'OpenCurlyDoubleQuote': \"\\u201C\",\n  'ldquo': \"\\u201C\",\n  'OpenCurlyQuote': \"\\u2018\",\n  'lsquo': \"\\u2018\",\n  'Or': \"\\u2A54\",\n  'Oscr': \"\\uD835\\uDCAA\",\n  'Oslash': \"\\xD8\",\n  'Otilde': \"\\xD5\",\n  'Otimes': \"\\u2A37\",\n  'Ouml': \"\\xD6\",\n  'OverBar': \"\\u203E\",\n  'oline': \"\\u203E\",\n  'OverBrace': \"\\u23DE\",\n  'OverBracket': \"\\u23B4\",\n  'tbrk': \"\\u23B4\",\n  'OverParenthesis': \"\\u23DC\",\n  'PartialD': \"\\u2202\",\n  'part': \"\\u2202\",\n  'Pcy': \"\\u041F\",\n  'Pfr': \"\\uD835\\uDD13\",\n  'Phi': \"\\u03A6\",\n  'Pi': \"\\u03A0\",\n  'PlusMinus': \"\\xB1\",\n  'plusmn': \"\\xB1\",\n  'pm': \"\\xB1\",\n  'Popf': \"\\u2119\",\n  'primes': \"\\u2119\",\n  'Pr': \"\\u2ABB\",\n  'Precedes': \"\\u227A\",\n  'pr': \"\\u227A\",\n  'prec': \"\\u227A\",\n  'PrecedesEqual': \"\\u2AAF\",\n  'pre': \"\\u2AAF\",\n  'preceq': \"\\u2AAF\",\n  'PrecedesSlantEqual': \"\\u227C\",\n  'prcue': \"\\u227C\",\n  'preccurlyeq': \"\\u227C\",\n  'PrecedesTilde': \"\\u227E\",\n  'precsim': \"\\u227E\",\n  'prsim': \"\\u227E\",\n  'Prime': \"\\u2033\",\n  'Product': \"\\u220F\",\n  'prod': \"\\u220F\",\n  'Proportional': \"\\u221D\",\n  'prop': \"\\u221D\",\n  'propto': \"\\u221D\",\n  'varpropto': \"\\u221D\",\n  'vprop': \"\\u221D\",\n  'Pscr': \"\\uD835\\uDCAB\",\n  'Psi': \"\\u03A8\",\n  'QUOT': \"\\\"\",\n  'quot': \"\\\"\",\n  'Qfr': \"\\uD835\\uDD14\",\n  'Qopf': \"\\u211A\",\n  'rationals': \"\\u211A\",\n  'Qscr': \"\\uD835\\uDCAC\",\n  'RBarr': \"\\u2910\",\n  'drbkarow': \"\\u2910\",\n  'REG': \"\\xAE\",\n  'circledR': \"\\xAE\",\n  'reg': \"\\xAE\",\n  'Racute': \"\\u0154\",\n  'Rang': \"\\u27EB\",\n  'Rarr': \"\\u21A0\",\n  'twoheadrightarrow': \"\\u21A0\",\n  'Rarrtl': \"\\u2916\",\n  'Rcaron': \"\\u0158\",\n  'Rcedil': \"\\u0156\",\n  'Rcy': \"\\u0420\",\n  'Re': \"\\u211C\",\n  'Rfr': \"\\u211C\",\n  'real': \"\\u211C\",\n  'realpart': \"\\u211C\",\n  'ReverseElement': \"\\u220B\",\n  'SuchThat': \"\\u220B\",\n  'ni': \"\\u220B\",\n  'niv': \"\\u220B\",\n  'ReverseEquilibrium': \"\\u21CB\",\n  'leftrightharpoons': \"\\u21CB\",\n  'lrhar': \"\\u21CB\",\n  'ReverseUpEquilibrium': \"\\u296F\",\n  'duhar': \"\\u296F\",\n  'Rho': \"\\u03A1\",\n  'RightAngleBracket': \"\\u27E9\",\n  'rang': \"\\u27E9\",\n  'rangle': \"\\u27E9\",\n  'RightArrow': \"\\u2192\",\n  'ShortRightArrow': \"\\u2192\",\n  'rarr': \"\\u2192\",\n  'rightarrow': \"\\u2192\",\n  'srarr': \"\\u2192\",\n  'RightArrowBar': \"\\u21E5\",\n  'rarrb': \"\\u21E5\",\n  'RightArrowLeftArrow': \"\\u21C4\",\n  'rightleftarrows': \"\\u21C4\",\n  'rlarr': \"\\u21C4\",\n  'RightCeiling': \"\\u2309\",\n  'rceil': \"\\u2309\",\n  'RightDoubleBracket': \"\\u27E7\",\n  'robrk': \"\\u27E7\",\n  'RightDownTeeVector': \"\\u295D\",\n  'RightDownVector': \"\\u21C2\",\n  'dharr': \"\\u21C2\",\n  'downharpoonright': \"\\u21C2\",\n  'RightDownVectorBar': \"\\u2955\",\n  'RightFloor': \"\\u230B\",\n  'rfloor': \"\\u230B\",\n  'RightTee': \"\\u22A2\",\n  'vdash': \"\\u22A2\",\n  'RightTeeArrow': \"\\u21A6\",\n  'map': \"\\u21A6\",\n  'mapsto': \"\\u21A6\",\n  'RightTeeVector': \"\\u295B\",\n  'RightTriangle': \"\\u22B3\",\n  'vartriangleright': \"\\u22B3\",\n  'vrtri': \"\\u22B3\",\n  'RightTriangleBar': \"\\u29D0\",\n  'RightTriangleEqual': \"\\u22B5\",\n  'rtrie': \"\\u22B5\",\n  'trianglerighteq': \"\\u22B5\",\n  'RightUpDownVector': \"\\u294F\",\n  'RightUpTeeVector': \"\\u295C\",\n  'RightUpVector': \"\\u21BE\",\n  'uharr': \"\\u21BE\",\n  'upharpoonright': \"\\u21BE\",\n  'RightUpVectorBar': \"\\u2954\",\n  'RightVector': \"\\u21C0\",\n  'rharu': \"\\u21C0\",\n  'rightharpoonup': \"\\u21C0\",\n  'RightVectorBar': \"\\u2953\",\n  'Ropf': \"\\u211D\",\n  'reals': \"\\u211D\",\n  'RoundImplies': \"\\u2970\",\n  'Rrightarrow': \"\\u21DB\",\n  'rAarr': \"\\u21DB\",\n  'Rscr': \"\\u211B\",\n  'realine': \"\\u211B\",\n  'Rsh': \"\\u21B1\",\n  'rsh': \"\\u21B1\",\n  'RuleDelayed': \"\\u29F4\",\n  'SHCHcy': \"\\u0429\",\n  'SHcy': \"\\u0428\",\n  'SOFTcy': \"\\u042C\",\n  'Sacute': \"\\u015A\",\n  'Sc': \"\\u2ABC\",\n  'Scaron': \"\\u0160\",\n  'Scedil': \"\\u015E\",\n  'Scirc': \"\\u015C\",\n  'Scy': \"\\u0421\",\n  'Sfr': \"\\uD835\\uDD16\",\n  'ShortUpArrow': \"\\u2191\",\n  'UpArrow': \"\\u2191\",\n  'uarr': \"\\u2191\",\n  'uparrow': \"\\u2191\",\n  'Sigma': \"\\u03A3\",\n  'SmallCircle': \"\\u2218\",\n  'compfn': \"\\u2218\",\n  'Sopf': \"\\uD835\\uDD4A\",\n  'Sqrt': \"\\u221A\",\n  'radic': \"\\u221A\",\n  'Square': \"\\u25A1\",\n  'squ': \"\\u25A1\",\n  'square': \"\\u25A1\",\n  'SquareIntersection': \"\\u2293\",\n  'sqcap': \"\\u2293\",\n  'SquareSubset': \"\\u228F\",\n  'sqsub': \"\\u228F\",\n  'sqsubset': \"\\u228F\",\n  'SquareSubsetEqual': \"\\u2291\",\n  'sqsube': \"\\u2291\",\n  'sqsubseteq': \"\\u2291\",\n  'SquareSuperset': \"\\u2290\",\n  'sqsup': \"\\u2290\",\n  'sqsupset': \"\\u2290\",\n  'SquareSupersetEqual': \"\\u2292\",\n  'sqsupe': \"\\u2292\",\n  'sqsupseteq': \"\\u2292\",\n  'SquareUnion': \"\\u2294\",\n  'sqcup': \"\\u2294\",\n  'Sscr': \"\\uD835\\uDCAE\",\n  'Star': \"\\u22C6\",\n  'sstarf': \"\\u22C6\",\n  'Sub': \"\\u22D0\",\n  'Subset': \"\\u22D0\",\n  'SubsetEqual': \"\\u2286\",\n  'sube': \"\\u2286\",\n  'subseteq': \"\\u2286\",\n  'Succeeds': \"\\u227B\",\n  'sc': \"\\u227B\",\n  'succ': \"\\u227B\",\n  'SucceedsEqual': \"\\u2AB0\",\n  'sce': \"\\u2AB0\",\n  'succeq': \"\\u2AB0\",\n  'SucceedsSlantEqual': \"\\u227D\",\n  'sccue': \"\\u227D\",\n  'succcurlyeq': \"\\u227D\",\n  'SucceedsTilde': \"\\u227F\",\n  'scsim': \"\\u227F\",\n  'succsim': \"\\u227F\",\n  'Sum': \"\\u2211\",\n  'sum': \"\\u2211\",\n  'Sup': \"\\u22D1\",\n  'Supset': \"\\u22D1\",\n  'Superset': \"\\u2283\",\n  'sup': \"\\u2283\",\n  'supset': \"\\u2283\",\n  'SupersetEqual': \"\\u2287\",\n  'supe': \"\\u2287\",\n  'supseteq': \"\\u2287\",\n  'THORN': \"\\xDE\",\n  'TRADE': \"\\u2122\",\n  'trade': \"\\u2122\",\n  'TSHcy': \"\\u040B\",\n  'TScy': \"\\u0426\",\n  'Tab': \"\\t\",\n  'Tau': \"\\u03A4\",\n  'Tcaron': \"\\u0164\",\n  'Tcedil': \"\\u0162\",\n  'Tcy': \"\\u0422\",\n  'Tfr': \"\\uD835\\uDD17\",\n  'Therefore': \"\\u2234\",\n  'there4': \"\\u2234\",\n  'therefore': \"\\u2234\",\n  'Theta': \"\\u0398\",\n  'ThickSpace': \"\\u205F\\u200A\",\n  'ThinSpace': \"\\u2009\",\n  'thinsp': \"\\u2009\",\n  'Tilde': \"\\u223C\",\n  'sim': \"\\u223C\",\n  'thicksim': \"\\u223C\",\n  'thksim': \"\\u223C\",\n  'TildeEqual': \"\\u2243\",\n  'sime': \"\\u2243\",\n  'simeq': \"\\u2243\",\n  'TildeFullEqual': \"\\u2245\",\n  'cong': \"\\u2245\",\n  'TildeTilde': \"\\u2248\",\n  'ap': \"\\u2248\",\n  'approx': \"\\u2248\",\n  'asymp': \"\\u2248\",\n  'thickapprox': \"\\u2248\",\n  'thkap': \"\\u2248\",\n  'Topf': \"\\uD835\\uDD4B\",\n  'TripleDot': \"\\u20DB\",\n  'tdot': \"\\u20DB\",\n  'Tscr': \"\\uD835\\uDCAF\",\n  'Tstrok': \"\\u0166\",\n  'Uacute': \"\\xDA\",\n  'Uarr': \"\\u219F\",\n  'Uarrocir': \"\\u2949\",\n  'Ubrcy': \"\\u040E\",\n  'Ubreve': \"\\u016C\",\n  'Ucirc': \"\\xDB\",\n  'Ucy': \"\\u0423\",\n  'Udblac': \"\\u0170\",\n  'Ufr': \"\\uD835\\uDD18\",\n  'Ugrave': \"\\xD9\",\n  'Umacr': \"\\u016A\",\n  'UnderBar': \"_\",\n  'lowbar': \"_\",\n  'UnderBrace': \"\\u23DF\",\n  'UnderBracket': \"\\u23B5\",\n  'bbrk': \"\\u23B5\",\n  'UnderParenthesis': \"\\u23DD\",\n  'Union': \"\\u22C3\",\n  'bigcup': \"\\u22C3\",\n  'xcup': \"\\u22C3\",\n  'UnionPlus': \"\\u228E\",\n  'uplus': \"\\u228E\",\n  'Uogon': \"\\u0172\",\n  'Uopf': \"\\uD835\\uDD4C\",\n  'UpArrowBar': \"\\u2912\",\n  'UpArrowDownArrow': \"\\u21C5\",\n  'udarr': \"\\u21C5\",\n  'UpDownArrow': \"\\u2195\",\n  'updownarrow': \"\\u2195\",\n  'varr': \"\\u2195\",\n  'UpEquilibrium': \"\\u296E\",\n  'udhar': \"\\u296E\",\n  'UpTee': \"\\u22A5\",\n  'bot': \"\\u22A5\",\n  'bottom': \"\\u22A5\",\n  'perp': \"\\u22A5\",\n  'UpTeeArrow': \"\\u21A5\",\n  'mapstoup': \"\\u21A5\",\n  'UpperLeftArrow': \"\\u2196\",\n  'nwarr': \"\\u2196\",\n  'nwarrow': \"\\u2196\",\n  'UpperRightArrow': \"\\u2197\",\n  'nearr': \"\\u2197\",\n  'nearrow': \"\\u2197\",\n  'Upsi': \"\\u03D2\",\n  'upsih': \"\\u03D2\",\n  'Upsilon': \"\\u03A5\",\n  'Uring': \"\\u016E\",\n  'Uscr': \"\\uD835\\uDCB0\",\n  'Utilde': \"\\u0168\",\n  'Uuml': \"\\xDC\",\n  'VDash': \"\\u22AB\",\n  'Vbar': \"\\u2AEB\",\n  'Vcy': \"\\u0412\",\n  'Vdash': \"\\u22A9\",\n  'Vdashl': \"\\u2AE6\",\n  'Vee': \"\\u22C1\",\n  'bigvee': \"\\u22C1\",\n  'xvee': \"\\u22C1\",\n  'Verbar': \"\\u2016\",\n  'Vert': \"\\u2016\",\n  'VerticalBar': \"\\u2223\",\n  'mid': \"\\u2223\",\n  'shortmid': \"\\u2223\",\n  'smid': \"\\u2223\",\n  'VerticalLine': \"|\",\n  'verbar': \"|\",\n  'vert': \"|\",\n  'VerticalSeparator': \"\\u2758\",\n  'VerticalTilde': \"\\u2240\",\n  'wr': \"\\u2240\",\n  'wreath': \"\\u2240\",\n  'VeryThinSpace': \"\\u200A\",\n  'hairsp': \"\\u200A\",\n  'Vfr': \"\\uD835\\uDD19\",\n  'Vopf': \"\\uD835\\uDD4D\",\n  'Vscr': \"\\uD835\\uDCB1\",\n  'Vvdash': \"\\u22AA\",\n  'Wcirc': \"\\u0174\",\n  'Wedge': \"\\u22C0\",\n  'bigwedge': \"\\u22C0\",\n  'xwedge': \"\\u22C0\",\n  'Wfr': \"\\uD835\\uDD1A\",\n  'Wopf': \"\\uD835\\uDD4E\",\n  'Wscr': \"\\uD835\\uDCB2\",\n  'Xfr': \"\\uD835\\uDD1B\",\n  'Xi': \"\\u039E\",\n  'Xopf': \"\\uD835\\uDD4F\",\n  'Xscr': \"\\uD835\\uDCB3\",\n  'YAcy': \"\\u042F\",\n  'YIcy': \"\\u0407\",\n  'YUcy': \"\\u042E\",\n  'Yacute': \"\\xDD\",\n  'Ycirc': \"\\u0176\",\n  'Ycy': \"\\u042B\",\n  'Yfr': \"\\uD835\\uDD1C\",\n  'Yopf': \"\\uD835\\uDD50\",\n  'Yscr': \"\\uD835\\uDCB4\",\n  'Yuml': \"\\u0178\",\n  'ZHcy': \"\\u0416\",\n  'Zacute': \"\\u0179\",\n  'Zcaron': \"\\u017D\",\n  'Zcy': \"\\u0417\",\n  'Zdot': \"\\u017B\",\n  'Zeta': \"\\u0396\",\n  'Zfr': \"\\u2128\",\n  'zeetrf': \"\\u2128\",\n  'Zopf': \"\\u2124\",\n  'integers': \"\\u2124\",\n  'Zscr': \"\\uD835\\uDCB5\",\n  'aacute': \"\\xE1\",\n  'abreve': \"\\u0103\",\n  'ac': \"\\u223E\",\n  'mstpos': \"\\u223E\",\n  'acE': \"\\u223E\\u0333\",\n  'acd': \"\\u223F\",\n  'acirc': \"\\xE2\",\n  'acy': \"\\u0430\",\n  'aelig': \"\\xE6\",\n  'afr': \"\\uD835\\uDD1E\",\n  'agrave': \"\\xE0\",\n  'alefsym': \"\\u2135\",\n  'aleph': \"\\u2135\",\n  'alpha': \"\\u03B1\",\n  'amacr': \"\\u0101\",\n  'amalg': \"\\u2A3F\",\n  'and': \"\\u2227\",\n  'wedge': \"\\u2227\",\n  'andand': \"\\u2A55\",\n  'andd': \"\\u2A5C\",\n  'andslope': \"\\u2A58\",\n  'andv': \"\\u2A5A\",\n  'ang': \"\\u2220\",\n  'angle': \"\\u2220\",\n  'ange': \"\\u29A4\",\n  'angmsd': \"\\u2221\",\n  'measuredangle': \"\\u2221\",\n  'angmsdaa': \"\\u29A8\",\n  'angmsdab': \"\\u29A9\",\n  'angmsdac': \"\\u29AA\",\n  'angmsdad': \"\\u29AB\",\n  'angmsdae': \"\\u29AC\",\n  'angmsdaf': \"\\u29AD\",\n  'angmsdag': \"\\u29AE\",\n  'angmsdah': \"\\u29AF\",\n  'angrt': \"\\u221F\",\n  'angrtvb': \"\\u22BE\",\n  'angrtvbd': \"\\u299D\",\n  'angsph': \"\\u2222\",\n  'angzarr': \"\\u237C\",\n  'aogon': \"\\u0105\",\n  'aopf': \"\\uD835\\uDD52\",\n  'apE': \"\\u2A70\",\n  'apacir': \"\\u2A6F\",\n  'ape': \"\\u224A\",\n  'approxeq': \"\\u224A\",\n  'apid': \"\\u224B\",\n  'apos': \"'\",\n  'aring': \"\\xE5\",\n  'ascr': \"\\uD835\\uDCB6\",\n  'ast': \"*\",\n  'midast': \"*\",\n  'atilde': \"\\xE3\",\n  'auml': \"\\xE4\",\n  'awint': \"\\u2A11\",\n  'bNot': \"\\u2AED\",\n  'backcong': \"\\u224C\",\n  'bcong': \"\\u224C\",\n  'backepsilon': \"\\u03F6\",\n  'bepsi': \"\\u03F6\",\n  'backprime': \"\\u2035\",\n  'bprime': \"\\u2035\",\n  'backsim': \"\\u223D\",\n  'bsim': \"\\u223D\",\n  'backsimeq': \"\\u22CD\",\n  'bsime': \"\\u22CD\",\n  'barvee': \"\\u22BD\",\n  'barwed': \"\\u2305\",\n  'barwedge': \"\\u2305\",\n  'bbrktbrk': \"\\u23B6\",\n  'bcy': \"\\u0431\",\n  'bdquo': \"\\u201E\",\n  'ldquor': \"\\u201E\",\n  'bemptyv': \"\\u29B0\",\n  'beta': \"\\u03B2\",\n  'beth': \"\\u2136\",\n  'between': \"\\u226C\",\n  'twixt': \"\\u226C\",\n  'bfr': \"\\uD835\\uDD1F\",\n  'bigcirc': \"\\u25EF\",\n  'xcirc': \"\\u25EF\",\n  'bigodot': \"\\u2A00\",\n  'xodot': \"\\u2A00\",\n  'bigoplus': \"\\u2A01\",\n  'xoplus': \"\\u2A01\",\n  'bigotimes': \"\\u2A02\",\n  'xotime': \"\\u2A02\",\n  'bigsqcup': \"\\u2A06\",\n  'xsqcup': \"\\u2A06\",\n  'bigstar': \"\\u2605\",\n  'starf': \"\\u2605\",\n  'bigtriangledown': \"\\u25BD\",\n  'xdtri': \"\\u25BD\",\n  'bigtriangleup': \"\\u25B3\",\n  'xutri': \"\\u25B3\",\n  'biguplus': \"\\u2A04\",\n  'xuplus': \"\\u2A04\",\n  'bkarow': \"\\u290D\",\n  'rbarr': \"\\u290D\",\n  'blacklozenge': \"\\u29EB\",\n  'lozf': \"\\u29EB\",\n  'blacktriangle': \"\\u25B4\",\n  'utrif': \"\\u25B4\",\n  'blacktriangledown': \"\\u25BE\",\n  'dtrif': \"\\u25BE\",\n  'blacktriangleleft': \"\\u25C2\",\n  'ltrif': \"\\u25C2\",\n  'blacktriangleright': \"\\u25B8\",\n  'rtrif': \"\\u25B8\",\n  'blank': \"\\u2423\",\n  'blk12': \"\\u2592\",\n  'blk14': \"\\u2591\",\n  'blk34': \"\\u2593\",\n  'block': \"\\u2588\",\n  'bne': \"=\\u20E5\",\n  'bnequiv': \"\\u2261\\u20E5\",\n  'bnot': \"\\u2310\",\n  'bopf': \"\\uD835\\uDD53\",\n  'bowtie': \"\\u22C8\",\n  'boxDL': \"\\u2557\",\n  'boxDR': \"\\u2554\",\n  'boxDl': \"\\u2556\",\n  'boxDr': \"\\u2553\",\n  'boxH': \"\\u2550\",\n  'boxHD': \"\\u2566\",\n  'boxHU': \"\\u2569\",\n  'boxHd': \"\\u2564\",\n  'boxHu': \"\\u2567\",\n  'boxUL': \"\\u255D\",\n  'boxUR': \"\\u255A\",\n  'boxUl': \"\\u255C\",\n  'boxUr': \"\\u2559\",\n  'boxV': \"\\u2551\",\n  'boxVH': \"\\u256C\",\n  'boxVL': \"\\u2563\",\n  'boxVR': \"\\u2560\",\n  'boxVh': \"\\u256B\",\n  'boxVl': \"\\u2562\",\n  'boxVr': \"\\u255F\",\n  'boxbox': \"\\u29C9\",\n  'boxdL': \"\\u2555\",\n  'boxdR': \"\\u2552\",\n  'boxdl': \"\\u2510\",\n  'boxdr': \"\\u250C\",\n  'boxhD': \"\\u2565\",\n  'boxhU': \"\\u2568\",\n  'boxhd': \"\\u252C\",\n  'boxhu': \"\\u2534\",\n  'boxminus': \"\\u229F\",\n  'minusb': \"\\u229F\",\n  'boxplus': \"\\u229E\",\n  'plusb': \"\\u229E\",\n  'boxtimes': \"\\u22A0\",\n  'timesb': \"\\u22A0\",\n  'boxuL': \"\\u255B\",\n  'boxuR': \"\\u2558\",\n  'boxul': \"\\u2518\",\n  'boxur': \"\\u2514\",\n  'boxv': \"\\u2502\",\n  'boxvH': \"\\u256A\",\n  'boxvL': \"\\u2561\",\n  'boxvR': \"\\u255E\",\n  'boxvh': \"\\u253C\",\n  'boxvl': \"\\u2524\",\n  'boxvr': \"\\u251C\",\n  'brvbar': \"\\xA6\",\n  'bscr': \"\\uD835\\uDCB7\",\n  'bsemi': \"\\u204F\",\n  'bsol': \"\\\\\",\n  'bsolb': \"\\u29C5\",\n  'bsolhsub': \"\\u27C8\",\n  'bull': \"\\u2022\",\n  'bullet': \"\\u2022\",\n  'bumpE': \"\\u2AAE\",\n  'cacute': \"\\u0107\",\n  'cap': \"\\u2229\",\n  'capand': \"\\u2A44\",\n  'capbrcup': \"\\u2A49\",\n  'capcap': \"\\u2A4B\",\n  'capcup': \"\\u2A47\",\n  'capdot': \"\\u2A40\",\n  'caps': \"\\u2229\\uFE00\",\n  'caret': \"\\u2041\",\n  'ccaps': \"\\u2A4D\",\n  'ccaron': \"\\u010D\",\n  'ccedil': \"\\xE7\",\n  'ccirc': \"\\u0109\",\n  'ccups': \"\\u2A4C\",\n  'ccupssm': \"\\u2A50\",\n  'cdot': \"\\u010B\",\n  'cemptyv': \"\\u29B2\",\n  'cent': \"\\xA2\",\n  'cfr': \"\\uD835\\uDD20\",\n  'chcy': \"\\u0447\",\n  'check': \"\\u2713\",\n  'checkmark': \"\\u2713\",\n  'chi': \"\\u03C7\",\n  'cir': \"\\u25CB\",\n  'cirE': \"\\u29C3\",\n  'circ': \"\\u02C6\",\n  'circeq': \"\\u2257\",\n  'cire': \"\\u2257\",\n  'circlearrowleft': \"\\u21BA\",\n  'olarr': \"\\u21BA\",\n  'circlearrowright': \"\\u21BB\",\n  'orarr': \"\\u21BB\",\n  'circledS': \"\\u24C8\",\n  'oS': \"\\u24C8\",\n  'circledast': \"\\u229B\",\n  'oast': \"\\u229B\",\n  'circledcirc': \"\\u229A\",\n  'ocir': \"\\u229A\",\n  'circleddash': \"\\u229D\",\n  'odash': \"\\u229D\",\n  'cirfnint': \"\\u2A10\",\n  'cirmid': \"\\u2AEF\",\n  'cirscir': \"\\u29C2\",\n  'clubs': \"\\u2663\",\n  'clubsuit': \"\\u2663\",\n  'colon': \":\",\n  'comma': \",\",\n  'commat': \"@\",\n  'comp': \"\\u2201\",\n  'complement': \"\\u2201\",\n  'congdot': \"\\u2A6D\",\n  'copf': \"\\uD835\\uDD54\",\n  'copysr': \"\\u2117\",\n  'crarr': \"\\u21B5\",\n  'cross': \"\\u2717\",\n  'cscr': \"\\uD835\\uDCB8\",\n  'csub': \"\\u2ACF\",\n  'csube': \"\\u2AD1\",\n  'csup': \"\\u2AD0\",\n  'csupe': \"\\u2AD2\",\n  'ctdot': \"\\u22EF\",\n  'cudarrl': \"\\u2938\",\n  'cudarrr': \"\\u2935\",\n  'cuepr': \"\\u22DE\",\n  'curlyeqprec': \"\\u22DE\",\n  'cuesc': \"\\u22DF\",\n  'curlyeqsucc': \"\\u22DF\",\n  'cularr': \"\\u21B6\",\n  'curvearrowleft': \"\\u21B6\",\n  'cularrp': \"\\u293D\",\n  'cup': \"\\u222A\",\n  'cupbrcap': \"\\u2A48\",\n  'cupcap': \"\\u2A46\",\n  'cupcup': \"\\u2A4A\",\n  'cupdot': \"\\u228D\",\n  'cupor': \"\\u2A45\",\n  'cups': \"\\u222A\\uFE00\",\n  'curarr': \"\\u21B7\",\n  'curvearrowright': \"\\u21B7\",\n  'curarrm': \"\\u293C\",\n  'curlyvee': \"\\u22CE\",\n  'cuvee': \"\\u22CE\",\n  'curlywedge': \"\\u22CF\",\n  'cuwed': \"\\u22CF\",\n  'curren': \"\\xA4\",\n  'cwint': \"\\u2231\",\n  'cylcty': \"\\u232D\",\n  'dHar': \"\\u2965\",\n  'dagger': \"\\u2020\",\n  'daleth': \"\\u2138\",\n  'dash': \"\\u2010\",\n  'hyphen': \"\\u2010\",\n  'dbkarow': \"\\u290F\",\n  'rBarr': \"\\u290F\",\n  'dcaron': \"\\u010F\",\n  'dcy': \"\\u0434\",\n  'ddarr': \"\\u21CA\",\n  'downdownarrows': \"\\u21CA\",\n  'ddotseq': \"\\u2A77\",\n  'eDDot': \"\\u2A77\",\n  'deg': \"\\xB0\",\n  'delta': \"\\u03B4\",\n  'demptyv': \"\\u29B1\",\n  'dfisht': \"\\u297F\",\n  'dfr': \"\\uD835\\uDD21\",\n  'diamondsuit': \"\\u2666\",\n  'diams': \"\\u2666\",\n  'digamma': \"\\u03DD\",\n  'gammad': \"\\u03DD\",\n  'disin': \"\\u22F2\",\n  'div': \"\\xF7\",\n  'divide': \"\\xF7\",\n  'divideontimes': \"\\u22C7\",\n  'divonx': \"\\u22C7\",\n  'djcy': \"\\u0452\",\n  'dlcorn': \"\\u231E\",\n  'llcorner': \"\\u231E\",\n  'dlcrop': \"\\u230D\",\n  'dollar': \"$\",\n  'dopf': \"\\uD835\\uDD55\",\n  'doteqdot': \"\\u2251\",\n  'eDot': \"\\u2251\",\n  'dotminus': \"\\u2238\",\n  'minusd': \"\\u2238\",\n  'dotplus': \"\\u2214\",\n  'plusdo': \"\\u2214\",\n  'dotsquare': \"\\u22A1\",\n  'sdotb': \"\\u22A1\",\n  'drcorn': \"\\u231F\",\n  'lrcorner': \"\\u231F\",\n  'drcrop': \"\\u230C\",\n  'dscr': \"\\uD835\\uDCB9\",\n  'dscy': \"\\u0455\",\n  'dsol': \"\\u29F6\",\n  'dstrok': \"\\u0111\",\n  'dtdot': \"\\u22F1\",\n  'dtri': \"\\u25BF\",\n  'triangledown': \"\\u25BF\",\n  'dwangle': \"\\u29A6\",\n  'dzcy': \"\\u045F\",\n  'dzigrarr': \"\\u27FF\",\n  'eacute': \"\\xE9\",\n  'easter': \"\\u2A6E\",\n  'ecaron': \"\\u011B\",\n  'ecir': \"\\u2256\",\n  'eqcirc': \"\\u2256\",\n  'ecirc': \"\\xEA\",\n  'ecolon': \"\\u2255\",\n  'eqcolon': \"\\u2255\",\n  'ecy': \"\\u044D\",\n  'edot': \"\\u0117\",\n  'efDot': \"\\u2252\",\n  'fallingdotseq': \"\\u2252\",\n  'efr': \"\\uD835\\uDD22\",\n  'eg': \"\\u2A9A\",\n  'egrave': \"\\xE8\",\n  'egs': \"\\u2A96\",\n  'eqslantgtr': \"\\u2A96\",\n  'egsdot': \"\\u2A98\",\n  'el': \"\\u2A99\",\n  'elinters': \"\\u23E7\",\n  'ell': \"\\u2113\",\n  'els': \"\\u2A95\",\n  'eqslantless': \"\\u2A95\",\n  'elsdot': \"\\u2A97\",\n  'emacr': \"\\u0113\",\n  'empty': \"\\u2205\",\n  'emptyset': \"\\u2205\",\n  'emptyv': \"\\u2205\",\n  'varnothing': \"\\u2205\",\n  'emsp13': \"\\u2004\",\n  'emsp14': \"\\u2005\",\n  'emsp': \"\\u2003\",\n  'eng': \"\\u014B\",\n  'ensp': \"\\u2002\",\n  'eogon': \"\\u0119\",\n  'eopf': \"\\uD835\\uDD56\",\n  'epar': \"\\u22D5\",\n  'eparsl': \"\\u29E3\",\n  'eplus': \"\\u2A71\",\n  'epsi': \"\\u03B5\",\n  'epsilon': \"\\u03B5\",\n  'epsiv': \"\\u03F5\",\n  'straightepsilon': \"\\u03F5\",\n  'varepsilon': \"\\u03F5\",\n  'equals': \"=\",\n  'equest': \"\\u225F\",\n  'questeq': \"\\u225F\",\n  'equivDD': \"\\u2A78\",\n  'eqvparsl': \"\\u29E5\",\n  'erDot': \"\\u2253\",\n  'risingdotseq': \"\\u2253\",\n  'erarr': \"\\u2971\",\n  'escr': \"\\u212F\",\n  'eta': \"\\u03B7\",\n  'eth': \"\\xF0\",\n  'euml': \"\\xEB\",\n  'euro': \"\\u20AC\",\n  'excl': \"!\",\n  'fcy': \"\\u0444\",\n  'female': \"\\u2640\",\n  'ffilig': \"\\uFB03\",\n  'fflig': \"\\uFB00\",\n  'ffllig': \"\\uFB04\",\n  'ffr': \"\\uD835\\uDD23\",\n  'filig': \"\\uFB01\",\n  'fjlig': \"fj\",\n  'flat': \"\\u266D\",\n  'fllig': \"\\uFB02\",\n  'fltns': \"\\u25B1\",\n  'fnof': \"\\u0192\",\n  'fopf': \"\\uD835\\uDD57\",\n  'fork': \"\\u22D4\",\n  'pitchfork': \"\\u22D4\",\n  'forkv': \"\\u2AD9\",\n  'fpartint': \"\\u2A0D\",\n  'frac12': \"\\xBD\",\n  'half': \"\\xBD\",\n  'frac13': \"\\u2153\",\n  'frac14': \"\\xBC\",\n  'frac15': \"\\u2155\",\n  'frac16': \"\\u2159\",\n  'frac18': \"\\u215B\",\n  'frac23': \"\\u2154\",\n  'frac25': \"\\u2156\",\n  'frac34': \"\\xBE\",\n  'frac35': \"\\u2157\",\n  'frac38': \"\\u215C\",\n  'frac45': \"\\u2158\",\n  'frac56': \"\\u215A\",\n  'frac58': \"\\u215D\",\n  'frac78': \"\\u215E\",\n  'frasl': \"\\u2044\",\n  'frown': \"\\u2322\",\n  'sfrown': \"\\u2322\",\n  'fscr': \"\\uD835\\uDCBB\",\n  'gEl': \"\\u2A8C\",\n  'gtreqqless': \"\\u2A8C\",\n  'gacute': \"\\u01F5\",\n  'gamma': \"\\u03B3\",\n  'gap': \"\\u2A86\",\n  'gtrapprox': \"\\u2A86\",\n  'gbreve': \"\\u011F\",\n  'gcirc': \"\\u011D\",\n  'gcy': \"\\u0433\",\n  'gdot': \"\\u0121\",\n  'gescc': \"\\u2AA9\",\n  'gesdot': \"\\u2A80\",\n  'gesdoto': \"\\u2A82\",\n  'gesdotol': \"\\u2A84\",\n  'gesl': \"\\u22DB\\uFE00\",\n  'gesles': \"\\u2A94\",\n  'gfr': \"\\uD835\\uDD24\",\n  'gimel': \"\\u2137\",\n  'gjcy': \"\\u0453\",\n  'glE': \"\\u2A92\",\n  'gla': \"\\u2AA5\",\n  'glj': \"\\u2AA4\",\n  'gnE': \"\\u2269\",\n  'gneqq': \"\\u2269\",\n  'gnap': \"\\u2A8A\",\n  'gnapprox': \"\\u2A8A\",\n  'gne': \"\\u2A88\",\n  'gneq': \"\\u2A88\",\n  'gnsim': \"\\u22E7\",\n  'gopf': \"\\uD835\\uDD58\",\n  'gscr': \"\\u210A\",\n  'gsime': \"\\u2A8E\",\n  'gsiml': \"\\u2A90\",\n  'gtcc': \"\\u2AA7\",\n  'gtcir': \"\\u2A7A\",\n  'gtdot': \"\\u22D7\",\n  'gtrdot': \"\\u22D7\",\n  'gtlPar': \"\\u2995\",\n  'gtquest': \"\\u2A7C\",\n  'gtrarr': \"\\u2978\",\n  'gvertneqq': \"\\u2269\\uFE00\",\n  'gvnE': \"\\u2269\\uFE00\",\n  'hardcy': \"\\u044A\",\n  'harrcir': \"\\u2948\",\n  'harrw': \"\\u21AD\",\n  'leftrightsquigarrow': \"\\u21AD\",\n  'hbar': \"\\u210F\",\n  'hslash': \"\\u210F\",\n  'planck': \"\\u210F\",\n  'plankv': \"\\u210F\",\n  'hcirc': \"\\u0125\",\n  'hearts': \"\\u2665\",\n  'heartsuit': \"\\u2665\",\n  'hellip': \"\\u2026\",\n  'mldr': \"\\u2026\",\n  'hercon': \"\\u22B9\",\n  'hfr': \"\\uD835\\uDD25\",\n  'hksearow': \"\\u2925\",\n  'searhk': \"\\u2925\",\n  'hkswarow': \"\\u2926\",\n  'swarhk': \"\\u2926\",\n  'hoarr': \"\\u21FF\",\n  'homtht': \"\\u223B\",\n  'hookleftarrow': \"\\u21A9\",\n  'larrhk': \"\\u21A9\",\n  'hookrightarrow': \"\\u21AA\",\n  'rarrhk': \"\\u21AA\",\n  'hopf': \"\\uD835\\uDD59\",\n  'horbar': \"\\u2015\",\n  'hscr': \"\\uD835\\uDCBD\",\n  'hstrok': \"\\u0127\",\n  'hybull': \"\\u2043\",\n  'iacute': \"\\xED\",\n  'icirc': \"\\xEE\",\n  'icy': \"\\u0438\",\n  'iecy': \"\\u0435\",\n  'iexcl': \"\\xA1\",\n  'ifr': \"\\uD835\\uDD26\",\n  'igrave': \"\\xEC\",\n  'iiiint': \"\\u2A0C\",\n  'qint': \"\\u2A0C\",\n  'iiint': \"\\u222D\",\n  'tint': \"\\u222D\",\n  'iinfin': \"\\u29DC\",\n  'iiota': \"\\u2129\",\n  'ijlig': \"\\u0133\",\n  'imacr': \"\\u012B\",\n  'imath': \"\\u0131\",\n  'inodot': \"\\u0131\",\n  'imof': \"\\u22B7\",\n  'imped': \"\\u01B5\",\n  'incare': \"\\u2105\",\n  'infin': \"\\u221E\",\n  'infintie': \"\\u29DD\",\n  'intcal': \"\\u22BA\",\n  'intercal': \"\\u22BA\",\n  'intlarhk': \"\\u2A17\",\n  'intprod': \"\\u2A3C\",\n  'iprod': \"\\u2A3C\",\n  'iocy': \"\\u0451\",\n  'iogon': \"\\u012F\",\n  'iopf': \"\\uD835\\uDD5A\",\n  'iota': \"\\u03B9\",\n  'iquest': \"\\xBF\",\n  'iscr': \"\\uD835\\uDCBE\",\n  'isinE': \"\\u22F9\",\n  'isindot': \"\\u22F5\",\n  'isins': \"\\u22F4\",\n  'isinsv': \"\\u22F3\",\n  'itilde': \"\\u0129\",\n  'iukcy': \"\\u0456\",\n  'iuml': \"\\xEF\",\n  'jcirc': \"\\u0135\",\n  'jcy': \"\\u0439\",\n  'jfr': \"\\uD835\\uDD27\",\n  'jmath': \"\\u0237\",\n  'jopf': \"\\uD835\\uDD5B\",\n  'jscr': \"\\uD835\\uDCBF\",\n  'jsercy': \"\\u0458\",\n  'jukcy': \"\\u0454\",\n  'kappa': \"\\u03BA\",\n  'kappav': \"\\u03F0\",\n  'varkappa': \"\\u03F0\",\n  'kcedil': \"\\u0137\",\n  'kcy': \"\\u043A\",\n  'kfr': \"\\uD835\\uDD28\",\n  'kgreen': \"\\u0138\",\n  'khcy': \"\\u0445\",\n  'kjcy': \"\\u045C\",\n  'kopf': \"\\uD835\\uDD5C\",\n  'kscr': \"\\uD835\\uDCC0\",\n  'lAtail': \"\\u291B\",\n  'lBarr': \"\\u290E\",\n  'lEg': \"\\u2A8B\",\n  'lesseqqgtr': \"\\u2A8B\",\n  'lHar': \"\\u2962\",\n  'lacute': \"\\u013A\",\n  'laemptyv': \"\\u29B4\",\n  'lambda': \"\\u03BB\",\n  'langd': \"\\u2991\",\n  'lap': \"\\u2A85\",\n  'lessapprox': \"\\u2A85\",\n  'laquo': \"\\xAB\",\n  'larrbfs': \"\\u291F\",\n  'larrfs': \"\\u291D\",\n  'larrlp': \"\\u21AB\",\n  'looparrowleft': \"\\u21AB\",\n  'larrpl': \"\\u2939\",\n  'larrsim': \"\\u2973\",\n  'larrtl': \"\\u21A2\",\n  'leftarrowtail': \"\\u21A2\",\n  'lat': \"\\u2AAB\",\n  'latail': \"\\u2919\",\n  'late': \"\\u2AAD\",\n  'lates': \"\\u2AAD\\uFE00\",\n  'lbarr': \"\\u290C\",\n  'lbbrk': \"\\u2772\",\n  'lbrace': \"{\",\n  'lcub': \"{\",\n  'lbrack': \"[\",\n  'lsqb': \"[\",\n  'lbrke': \"\\u298B\",\n  'lbrksld': \"\\u298F\",\n  'lbrkslu': \"\\u298D\",\n  'lcaron': \"\\u013E\",\n  'lcedil': \"\\u013C\",\n  'lcy': \"\\u043B\",\n  'ldca': \"\\u2936\",\n  'ldrdhar': \"\\u2967\",\n  'ldrushar': \"\\u294B\",\n  'ldsh': \"\\u21B2\",\n  'le': \"\\u2264\",\n  'leq': \"\\u2264\",\n  'leftleftarrows': \"\\u21C7\",\n  'llarr': \"\\u21C7\",\n  'leftthreetimes': \"\\u22CB\",\n  'lthree': \"\\u22CB\",\n  'lescc': \"\\u2AA8\",\n  'lesdot': \"\\u2A7F\",\n  'lesdoto': \"\\u2A81\",\n  'lesdotor': \"\\u2A83\",\n  'lesg': \"\\u22DA\\uFE00\",\n  'lesges': \"\\u2A93\",\n  'lessdot': \"\\u22D6\",\n  'ltdot': \"\\u22D6\",\n  'lfisht': \"\\u297C\",\n  'lfr': \"\\uD835\\uDD29\",\n  'lgE': \"\\u2A91\",\n  'lharul': \"\\u296A\",\n  'lhblk': \"\\u2584\",\n  'ljcy': \"\\u0459\",\n  'llhard': \"\\u296B\",\n  'lltri': \"\\u25FA\",\n  'lmidot': \"\\u0140\",\n  'lmoust': \"\\u23B0\",\n  'lmoustache': \"\\u23B0\",\n  'lnE': \"\\u2268\",\n  'lneqq': \"\\u2268\",\n  'lnap': \"\\u2A89\",\n  'lnapprox': \"\\u2A89\",\n  'lne': \"\\u2A87\",\n  'lneq': \"\\u2A87\",\n  'lnsim': \"\\u22E6\",\n  'loang': \"\\u27EC\",\n  'loarr': \"\\u21FD\",\n  'longmapsto': \"\\u27FC\",\n  'xmap': \"\\u27FC\",\n  'looparrowright': \"\\u21AC\",\n  'rarrlp': \"\\u21AC\",\n  'lopar': \"\\u2985\",\n  'lopf': \"\\uD835\\uDD5D\",\n  'loplus': \"\\u2A2D\",\n  'lotimes': \"\\u2A34\",\n  'lowast': \"\\u2217\",\n  'loz': \"\\u25CA\",\n  'lozenge': \"\\u25CA\",\n  'lpar': \"(\",\n  'lparlt': \"\\u2993\",\n  'lrhard': \"\\u296D\",\n  'lrm': \"\\u200E\",\n  'lrtri': \"\\u22BF\",\n  'lsaquo': \"\\u2039\",\n  'lscr': \"\\uD835\\uDCC1\",\n  'lsime': \"\\u2A8D\",\n  'lsimg': \"\\u2A8F\",\n  'lsquor': \"\\u201A\",\n  'sbquo': \"\\u201A\",\n  'lstrok': \"\\u0142\",\n  'ltcc': \"\\u2AA6\",\n  'ltcir': \"\\u2A79\",\n  'ltimes': \"\\u22C9\",\n  'ltlarr': \"\\u2976\",\n  'ltquest': \"\\u2A7B\",\n  'ltrPar': \"\\u2996\",\n  'ltri': \"\\u25C3\",\n  'triangleleft': \"\\u25C3\",\n  'lurdshar': \"\\u294A\",\n  'luruhar': \"\\u2966\",\n  'lvertneqq': \"\\u2268\\uFE00\",\n  'lvnE': \"\\u2268\\uFE00\",\n  'mDDot': \"\\u223A\",\n  'macr': \"\\xAF\",\n  'strns': \"\\xAF\",\n  'male': \"\\u2642\",\n  'malt': \"\\u2720\",\n  'maltese': \"\\u2720\",\n  'marker': \"\\u25AE\",\n  'mcomma': \"\\u2A29\",\n  'mcy': \"\\u043C\",\n  'mdash': \"\\u2014\",\n  'mfr': \"\\uD835\\uDD2A\",\n  'mho': \"\\u2127\",\n  'micro': \"\\xB5\",\n  'midcir': \"\\u2AF0\",\n  'minus': \"\\u2212\",\n  'minusdu': \"\\u2A2A\",\n  'mlcp': \"\\u2ADB\",\n  'models': \"\\u22A7\",\n  'mopf': \"\\uD835\\uDD5E\",\n  'mscr': \"\\uD835\\uDCC2\",\n  'mu': \"\\u03BC\",\n  'multimap': \"\\u22B8\",\n  'mumap': \"\\u22B8\",\n  'nGg': \"\\u22D9\\u0338\",\n  'nGt': \"\\u226B\\u20D2\",\n  'nLeftarrow': \"\\u21CD\",\n  'nlArr': \"\\u21CD\",\n  'nLeftrightarrow': \"\\u21CE\",\n  'nhArr': \"\\u21CE\",\n  'nLl': \"\\u22D8\\u0338\",\n  'nLt': \"\\u226A\\u20D2\",\n  'nRightarrow': \"\\u21CF\",\n  'nrArr': \"\\u21CF\",\n  'nVDash': \"\\u22AF\",\n  'nVdash': \"\\u22AE\",\n  'nacute': \"\\u0144\",\n  'nang': \"\\u2220\\u20D2\",\n  'napE': \"\\u2A70\\u0338\",\n  'napid': \"\\u224B\\u0338\",\n  'napos': \"\\u0149\",\n  'natur': \"\\u266E\",\n  'natural': \"\\u266E\",\n  'ncap': \"\\u2A43\",\n  'ncaron': \"\\u0148\",\n  'ncedil': \"\\u0146\",\n  'ncongdot': \"\\u2A6D\\u0338\",\n  'ncup': \"\\u2A42\",\n  'ncy': \"\\u043D\",\n  'ndash': \"\\u2013\",\n  'neArr': \"\\u21D7\",\n  'nearhk': \"\\u2924\",\n  'nedot': \"\\u2250\\u0338\",\n  'nesear': \"\\u2928\",\n  'toea': \"\\u2928\",\n  'nfr': \"\\uD835\\uDD2B\",\n  'nharr': \"\\u21AE\",\n  'nleftrightarrow': \"\\u21AE\",\n  'nhpar': \"\\u2AF2\",\n  'nis': \"\\u22FC\",\n  'nisd': \"\\u22FA\",\n  'njcy': \"\\u045A\",\n  'nlE': \"\\u2266\\u0338\",\n  'nleqq': \"\\u2266\\u0338\",\n  'nlarr': \"\\u219A\",\n  'nleftarrow': \"\\u219A\",\n  'nldr': \"\\u2025\",\n  'nopf': \"\\uD835\\uDD5F\",\n  'not': \"\\xAC\",\n  'notinE': \"\\u22F9\\u0338\",\n  'notindot': \"\\u22F5\\u0338\",\n  'notinvb': \"\\u22F7\",\n  'notinvc': \"\\u22F6\",\n  'notnivb': \"\\u22FE\",\n  'notnivc': \"\\u22FD\",\n  'nparsl': \"\\u2AFD\\u20E5\",\n  'npart': \"\\u2202\\u0338\",\n  'npolint': \"\\u2A14\",\n  'nrarr': \"\\u219B\",\n  'nrightarrow': \"\\u219B\",\n  'nrarrc': \"\\u2933\\u0338\",\n  'nrarrw': \"\\u219D\\u0338\",\n  'nscr': \"\\uD835\\uDCC3\",\n  'nsub': \"\\u2284\",\n  'nsubE': \"\\u2AC5\\u0338\",\n  'nsubseteqq': \"\\u2AC5\\u0338\",\n  'nsup': \"\\u2285\",\n  'nsupE': \"\\u2AC6\\u0338\",\n  'nsupseteqq': \"\\u2AC6\\u0338\",\n  'ntilde': \"\\xF1\",\n  'nu': \"\\u03BD\",\n  'num': \"#\",\n  'numero': \"\\u2116\",\n  'numsp': \"\\u2007\",\n  'nvDash': \"\\u22AD\",\n  'nvHarr': \"\\u2904\",\n  'nvap': \"\\u224D\\u20D2\",\n  'nvdash': \"\\u22AC\",\n  'nvge': \"\\u2265\\u20D2\",\n  'nvgt': \">\\u20D2\",\n  'nvinfin': \"\\u29DE\",\n  'nvlArr': \"\\u2902\",\n  'nvle': \"\\u2264\\u20D2\",\n  'nvlt': \"<\\u20D2\",\n  'nvltrie': \"\\u22B4\\u20D2\",\n  'nvrArr': \"\\u2903\",\n  'nvrtrie': \"\\u22B5\\u20D2\",\n  'nvsim': \"\\u223C\\u20D2\",\n  'nwArr': \"\\u21D6\",\n  'nwarhk': \"\\u2923\",\n  'nwnear': \"\\u2927\",\n  'oacute': \"\\xF3\",\n  'ocirc': \"\\xF4\",\n  'ocy': \"\\u043E\",\n  'odblac': \"\\u0151\",\n  'odiv': \"\\u2A38\",\n  'odsold': \"\\u29BC\",\n  'oelig': \"\\u0153\",\n  'ofcir': \"\\u29BF\",\n  'ofr': \"\\uD835\\uDD2C\",\n  'ogon': \"\\u02DB\",\n  'ograve': \"\\xF2\",\n  'ogt': \"\\u29C1\",\n  'ohbar': \"\\u29B5\",\n  'olcir': \"\\u29BE\",\n  'olcross': \"\\u29BB\",\n  'olt': \"\\u29C0\",\n  'omacr': \"\\u014D\",\n  'omega': \"\\u03C9\",\n  'omicron': \"\\u03BF\",\n  'omid': \"\\u29B6\",\n  'oopf': \"\\uD835\\uDD60\",\n  'opar': \"\\u29B7\",\n  'operp': \"\\u29B9\",\n  'or': \"\\u2228\",\n  'vee': \"\\u2228\",\n  'ord': \"\\u2A5D\",\n  'order': \"\\u2134\",\n  'orderof': \"\\u2134\",\n  'oscr': \"\\u2134\",\n  'ordf': \"\\xAA\",\n  'ordm': \"\\xBA\",\n  'origof': \"\\u22B6\",\n  'oror': \"\\u2A56\",\n  'orslope': \"\\u2A57\",\n  'orv': \"\\u2A5B\",\n  'oslash': \"\\xF8\",\n  'osol': \"\\u2298\",\n  'otilde': \"\\xF5\",\n  'otimesas': \"\\u2A36\",\n  'ouml': \"\\xF6\",\n  'ovbar': \"\\u233D\",\n  'para': \"\\xB6\",\n  'parsim': \"\\u2AF3\",\n  'parsl': \"\\u2AFD\",\n  'pcy': \"\\u043F\",\n  'percnt': \"%\",\n  'period': \".\",\n  'permil': \"\\u2030\",\n  'pertenk': \"\\u2031\",\n  'pfr': \"\\uD835\\uDD2D\",\n  'phi': \"\\u03C6\",\n  'phiv': \"\\u03D5\",\n  'straightphi': \"\\u03D5\",\n  'varphi': \"\\u03D5\",\n  'phone': \"\\u260E\",\n  'pi': \"\\u03C0\",\n  'piv': \"\\u03D6\",\n  'varpi': \"\\u03D6\",\n  'planckh': \"\\u210E\",\n  'plus': \"+\",\n  'plusacir': \"\\u2A23\",\n  'pluscir': \"\\u2A22\",\n  'plusdu': \"\\u2A25\",\n  'pluse': \"\\u2A72\",\n  'plussim': \"\\u2A26\",\n  'plustwo': \"\\u2A27\",\n  'pointint': \"\\u2A15\",\n  'popf': \"\\uD835\\uDD61\",\n  'pound': \"\\xA3\",\n  'prE': \"\\u2AB3\",\n  'prap': \"\\u2AB7\",\n  'precapprox': \"\\u2AB7\",\n  'precnapprox': \"\\u2AB9\",\n  'prnap': \"\\u2AB9\",\n  'precneqq': \"\\u2AB5\",\n  'prnE': \"\\u2AB5\",\n  'precnsim': \"\\u22E8\",\n  'prnsim': \"\\u22E8\",\n  'prime': \"\\u2032\",\n  'profalar': \"\\u232E\",\n  'profline': \"\\u2312\",\n  'profsurf': \"\\u2313\",\n  'prurel': \"\\u22B0\",\n  'pscr': \"\\uD835\\uDCC5\",\n  'psi': \"\\u03C8\",\n  'puncsp': \"\\u2008\",\n  'qfr': \"\\uD835\\uDD2E\",\n  'qopf': \"\\uD835\\uDD62\",\n  'qprime': \"\\u2057\",\n  'qscr': \"\\uD835\\uDCC6\",\n  'quatint': \"\\u2A16\",\n  'quest': \"?\",\n  'rAtail': \"\\u291C\",\n  'rHar': \"\\u2964\",\n  'race': \"\\u223D\\u0331\",\n  'racute': \"\\u0155\",\n  'raemptyv': \"\\u29B3\",\n  'rangd': \"\\u2992\",\n  'range': \"\\u29A5\",\n  'raquo': \"\\xBB\",\n  'rarrap': \"\\u2975\",\n  'rarrbfs': \"\\u2920\",\n  'rarrc': \"\\u2933\",\n  'rarrfs': \"\\u291E\",\n  'rarrpl': \"\\u2945\",\n  'rarrsim': \"\\u2974\",\n  'rarrtl': \"\\u21A3\",\n  'rightarrowtail': \"\\u21A3\",\n  'rarrw': \"\\u219D\",\n  'rightsquigarrow': \"\\u219D\",\n  'ratail': \"\\u291A\",\n  'ratio': \"\\u2236\",\n  'rbbrk': \"\\u2773\",\n  'rbrace': \"}\",\n  'rcub': \"}\",\n  'rbrack': \"]\",\n  'rsqb': \"]\",\n  'rbrke': \"\\u298C\",\n  'rbrksld': \"\\u298E\",\n  'rbrkslu': \"\\u2990\",\n  'rcaron': \"\\u0159\",\n  'rcedil': \"\\u0157\",\n  'rcy': \"\\u0440\",\n  'rdca': \"\\u2937\",\n  'rdldhar': \"\\u2969\",\n  'rdsh': \"\\u21B3\",\n  'rect': \"\\u25AD\",\n  'rfisht': \"\\u297D\",\n  'rfr': \"\\uD835\\uDD2F\",\n  'rharul': \"\\u296C\",\n  'rho': \"\\u03C1\",\n  'rhov': \"\\u03F1\",\n  'varrho': \"\\u03F1\",\n  'rightrightarrows': \"\\u21C9\",\n  'rrarr': \"\\u21C9\",\n  'rightthreetimes': \"\\u22CC\",\n  'rthree': \"\\u22CC\",\n  'ring': \"\\u02DA\",\n  'rlm': \"\\u200F\",\n  'rmoust': \"\\u23B1\",\n  'rmoustache': \"\\u23B1\",\n  'rnmid': \"\\u2AEE\",\n  'roang': \"\\u27ED\",\n  'roarr': \"\\u21FE\",\n  'ropar': \"\\u2986\",\n  'ropf': \"\\uD835\\uDD63\",\n  'roplus': \"\\u2A2E\",\n  'rotimes': \"\\u2A35\",\n  'rpar': \")\",\n  'rpargt': \"\\u2994\",\n  'rppolint': \"\\u2A12\",\n  'rsaquo': \"\\u203A\",\n  'rscr': \"\\uD835\\uDCC7\",\n  'rtimes': \"\\u22CA\",\n  'rtri': \"\\u25B9\",\n  'triangleright': \"\\u25B9\",\n  'rtriltri': \"\\u29CE\",\n  'ruluhar': \"\\u2968\",\n  'rx': \"\\u211E\",\n  'sacute': \"\\u015B\",\n  'scE': \"\\u2AB4\",\n  'scap': \"\\u2AB8\",\n  'succapprox': \"\\u2AB8\",\n  'scaron': \"\\u0161\",\n  'scedil': \"\\u015F\",\n  'scirc': \"\\u015D\",\n  'scnE': \"\\u2AB6\",\n  'succneqq': \"\\u2AB6\",\n  'scnap': \"\\u2ABA\",\n  'succnapprox': \"\\u2ABA\",\n  'scnsim': \"\\u22E9\",\n  'succnsim': \"\\u22E9\",\n  'scpolint': \"\\u2A13\",\n  'scy': \"\\u0441\",\n  'sdot': \"\\u22C5\",\n  'sdote': \"\\u2A66\",\n  'seArr': \"\\u21D8\",\n  'sect': \"\\xA7\",\n  'semi': \";\",\n  'seswar': \"\\u2929\",\n  'tosa': \"\\u2929\",\n  'sext': \"\\u2736\",\n  'sfr': \"\\uD835\\uDD30\",\n  'sharp': \"\\u266F\",\n  'shchcy': \"\\u0449\",\n  'shcy': \"\\u0448\",\n  'shy': \"\\xAD\",\n  'sigma': \"\\u03C3\",\n  'sigmaf': \"\\u03C2\",\n  'sigmav': \"\\u03C2\",\n  'varsigma': \"\\u03C2\",\n  'simdot': \"\\u2A6A\",\n  'simg': \"\\u2A9E\",\n  'simgE': \"\\u2AA0\",\n  'siml': \"\\u2A9D\",\n  'simlE': \"\\u2A9F\",\n  'simne': \"\\u2246\",\n  'simplus': \"\\u2A24\",\n  'simrarr': \"\\u2972\",\n  'smashp': \"\\u2A33\",\n  'smeparsl': \"\\u29E4\",\n  'smile': \"\\u2323\",\n  'ssmile': \"\\u2323\",\n  'smt': \"\\u2AAA\",\n  'smte': \"\\u2AAC\",\n  'smtes': \"\\u2AAC\\uFE00\",\n  'softcy': \"\\u044C\",\n  'sol': \"/\",\n  'solb': \"\\u29C4\",\n  'solbar': \"\\u233F\",\n  'sopf': \"\\uD835\\uDD64\",\n  'spades': \"\\u2660\",\n  'spadesuit': \"\\u2660\",\n  'sqcaps': \"\\u2293\\uFE00\",\n  'sqcups': \"\\u2294\\uFE00\",\n  'sscr': \"\\uD835\\uDCC8\",\n  'star': \"\\u2606\",\n  'sub': \"\\u2282\",\n  'subset': \"\\u2282\",\n  'subE': \"\\u2AC5\",\n  'subseteqq': \"\\u2AC5\",\n  'subdot': \"\\u2ABD\",\n  'subedot': \"\\u2AC3\",\n  'submult': \"\\u2AC1\",\n  'subnE': \"\\u2ACB\",\n  'subsetneqq': \"\\u2ACB\",\n  'subne': \"\\u228A\",\n  'subsetneq': \"\\u228A\",\n  'subplus': \"\\u2ABF\",\n  'subrarr': \"\\u2979\",\n  'subsim': \"\\u2AC7\",\n  'subsub': \"\\u2AD5\",\n  'subsup': \"\\u2AD3\",\n  'sung': \"\\u266A\",\n  'sup1': \"\\xB9\",\n  'sup2': \"\\xB2\",\n  'sup3': \"\\xB3\",\n  'supE': \"\\u2AC6\",\n  'supseteqq': \"\\u2AC6\",\n  'supdot': \"\\u2ABE\",\n  'supdsub': \"\\u2AD8\",\n  'supedot': \"\\u2AC4\",\n  'suphsol': \"\\u27C9\",\n  'suphsub': \"\\u2AD7\",\n  'suplarr': \"\\u297B\",\n  'supmult': \"\\u2AC2\",\n  'supnE': \"\\u2ACC\",\n  'supsetneqq': \"\\u2ACC\",\n  'supne': \"\\u228B\",\n  'supsetneq': \"\\u228B\",\n  'supplus': \"\\u2AC0\",\n  'supsim': \"\\u2AC8\",\n  'supsub': \"\\u2AD4\",\n  'supsup': \"\\u2AD6\",\n  'swArr': \"\\u21D9\",\n  'swnwar': \"\\u292A\",\n  'szlig': \"\\xDF\",\n  'target': \"\\u2316\",\n  'tau': \"\\u03C4\",\n  'tcaron': \"\\u0165\",\n  'tcedil': \"\\u0163\",\n  'tcy': \"\\u0442\",\n  'telrec': \"\\u2315\",\n  'tfr': \"\\uD835\\uDD31\",\n  'theta': \"\\u03B8\",\n  'thetasym': \"\\u03D1\",\n  'thetav': \"\\u03D1\",\n  'vartheta': \"\\u03D1\",\n  'thorn': \"\\xFE\",\n  'times': \"\\xD7\",\n  'timesbar': \"\\u2A31\",\n  'timesd': \"\\u2A30\",\n  'topbot': \"\\u2336\",\n  'topcir': \"\\u2AF1\",\n  'topf': \"\\uD835\\uDD65\",\n  'topfork': \"\\u2ADA\",\n  'tprime': \"\\u2034\",\n  'triangle': \"\\u25B5\",\n  'utri': \"\\u25B5\",\n  'triangleq': \"\\u225C\",\n  'trie': \"\\u225C\",\n  'tridot': \"\\u25EC\",\n  'triminus': \"\\u2A3A\",\n  'triplus': \"\\u2A39\",\n  'trisb': \"\\u29CD\",\n  'tritime': \"\\u2A3B\",\n  'trpezium': \"\\u23E2\",\n  'tscr': \"\\uD835\\uDCC9\",\n  'tscy': \"\\u0446\",\n  'tshcy': \"\\u045B\",\n  'tstrok': \"\\u0167\",\n  'uHar': \"\\u2963\",\n  'uacute': \"\\xFA\",\n  'ubrcy': \"\\u045E\",\n  'ubreve': \"\\u016D\",\n  'ucirc': \"\\xFB\",\n  'ucy': \"\\u0443\",\n  'udblac': \"\\u0171\",\n  'ufisht': \"\\u297E\",\n  'ufr': \"\\uD835\\uDD32\",\n  'ugrave': \"\\xF9\",\n  'uhblk': \"\\u2580\",\n  'ulcorn': \"\\u231C\",\n  'ulcorner': \"\\u231C\",\n  'ulcrop': \"\\u230F\",\n  'ultri': \"\\u25F8\",\n  'umacr': \"\\u016B\",\n  'uogon': \"\\u0173\",\n  'uopf': \"\\uD835\\uDD66\",\n  'upsi': \"\\u03C5\",\n  'upsilon': \"\\u03C5\",\n  'upuparrows': \"\\u21C8\",\n  'uuarr': \"\\u21C8\",\n  'urcorn': \"\\u231D\",\n  'urcorner': \"\\u231D\",\n  'urcrop': \"\\u230E\",\n  'uring': \"\\u016F\",\n  'urtri': \"\\u25F9\",\n  'uscr': \"\\uD835\\uDCCA\",\n  'utdot': \"\\u22F0\",\n  'utilde': \"\\u0169\",\n  'uuml': \"\\xFC\",\n  'uwangle': \"\\u29A7\",\n  'vBar': \"\\u2AE8\",\n  'vBarv': \"\\u2AE9\",\n  'vangrt': \"\\u299C\",\n  'varsubsetneq': \"\\u228A\\uFE00\",\n  'vsubne': \"\\u228A\\uFE00\",\n  'varsubsetneqq': \"\\u2ACB\\uFE00\",\n  'vsubnE': \"\\u2ACB\\uFE00\",\n  'varsupsetneq': \"\\u228B\\uFE00\",\n  'vsupne': \"\\u228B\\uFE00\",\n  'varsupsetneqq': \"\\u2ACC\\uFE00\",\n  'vsupnE': \"\\u2ACC\\uFE00\",\n  'vcy': \"\\u0432\",\n  'veebar': \"\\u22BB\",\n  'veeeq': \"\\u225A\",\n  'vellip': \"\\u22EE\",\n  'vfr': \"\\uD835\\uDD33\",\n  'vopf': \"\\uD835\\uDD67\",\n  'vscr': \"\\uD835\\uDCCB\",\n  'vzigzag': \"\\u299A\",\n  'wcirc': \"\\u0175\",\n  'wedbar': \"\\u2A5F\",\n  'wedgeq': \"\\u2259\",\n  'weierp': \"\\u2118\",\n  'wp': \"\\u2118\",\n  'wfr': \"\\uD835\\uDD34\",\n  'wopf': \"\\uD835\\uDD68\",\n  'wscr': \"\\uD835\\uDCCC\",\n  'xfr': \"\\uD835\\uDD35\",\n  'xi': \"\\u03BE\",\n  'xnis': \"\\u22FB\",\n  'xopf': \"\\uD835\\uDD69\",\n  'xscr': \"\\uD835\\uDCCD\",\n  'yacute': \"\\xFD\",\n  'yacy': \"\\u044F\",\n  'ycirc': \"\\u0177\",\n  'ycy': \"\\u044B\",\n  'yen': \"\\xA5\",\n  'yfr': \"\\uD835\\uDD36\",\n  'yicy': \"\\u0457\",\n  'yopf': \"\\uD835\\uDD6A\",\n  'yscr': \"\\uD835\\uDCCE\",\n  'yucy': \"\\u044E\",\n  'yuml': \"\\xFF\",\n  'zacute': \"\\u017A\",\n  'zcaron': \"\\u017E\",\n  'zcy': \"\\u0437\",\n  'zdot': \"\\u017C\",\n  'zeta': \"\\u03B6\",\n  'zfr': \"\\uD835\\uDD37\",\n  'zhcy': \"\\u0436\",\n  'zigrarr': \"\\u21DD\",\n  'zopf': \"\\uD835\\uDD6B\",\n  'zscr': \"\\uD835\\uDCCF\",\n  'zwj': \"\\u200D\",\n  'zwnj': \"\\u200C\"\n}; // The &ngsp; pseudo-entity is denoting a space. see:\n// https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart\n\nvar NGSP_UNICODE = \"\\uE500\";\nNAMED_ENTITIES['ngsp'] = NGSP_UNICODE;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar TokenError = /*#__PURE__*/function (_ParseError) {\n  _inherits(TokenError, _ParseError);\n\n  var _super84 = _createSuper(TokenError);\n\n  function TokenError(errorMsg, tokenType, span) {\n    var _this135;\n\n    _classCallCheck(this, TokenError);\n\n    _this135 = _super84.call(this, span, errorMsg);\n    _this135.tokenType = tokenType;\n    return _this135;\n  }\n\n  return TokenError;\n}(ParseError);\n\nvar TokenizeResult = function TokenizeResult(tokens, errors, nonNormalizedIcuExpressions) {\n  _classCallCheck(this, TokenizeResult);\n\n  this.tokens = tokens;\n  this.errors = errors;\n  this.nonNormalizedIcuExpressions = nonNormalizedIcuExpressions;\n};\n\nfunction tokenize(source, url, getTagDefinition) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var tokenizer = new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options);\n  tokenizer.tokenize();\n  return new TokenizeResult(mergeTextTokens(tokenizer.tokens), tokenizer.errors, tokenizer.nonNormalizedIcuExpressions);\n}\n\nvar _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\n\nfunction _unexpectedCharacterErrorMsg(charCode) {\n  var char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);\n  return \"Unexpected character \\\"\".concat(char, \"\\\"\");\n}\n\nfunction _unknownEntityErrorMsg(entitySrc) {\n  return \"Unknown entity \\\"\".concat(entitySrc, \"\\\" - use the \\\"&#<decimal>;\\\" or  \\\"&#x<hex>;\\\" syntax\");\n}\n\nfunction _unparsableEntityErrorMsg(type, entityStr) {\n  return \"Unable to parse entity \\\"\".concat(entityStr, \"\\\" - \").concat(type, \" character reference entities must end with \\\";\\\"\");\n}\n\nvar CharacterReferenceType;\n\n(function (CharacterReferenceType) {\n  CharacterReferenceType[\"HEX\"] = \"hexadecimal\";\n  CharacterReferenceType[\"DEC\"] = \"decimal\";\n})(CharacterReferenceType || (CharacterReferenceType = {}));\n\nvar _ControlFlowError = function _ControlFlowError(error) {\n  _classCallCheck(this, _ControlFlowError);\n\n  this.error = error;\n}; // See https://www.w3.org/TR/html51/syntax.html#writing-html-documents\n\n\nvar _Tokenizer = /*#__PURE__*/function () {\n  /**\n   * @param _file The html source file being tokenized.\n   * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.\n   * @param options Configuration of the tokenization.\n   */\n  function _Tokenizer(_file, _getTagDefinition, options) {\n    _classCallCheck(this, _Tokenizer);\n\n    this._getTagDefinition = _getTagDefinition;\n    this._currentTokenStart = null;\n    this._currentTokenType = null;\n    this._expansionCaseStack = [];\n    this._inInterpolation = false;\n    this.tokens = [];\n    this.errors = [];\n    this.nonNormalizedIcuExpressions = [];\n    this._tokenizeIcu = options.tokenizeExpansionForms || false;\n    this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n    this._leadingTriviaCodePoints = options.leadingTriviaChars && options.leadingTriviaChars.map(function (c) {\n      return c.codePointAt(0) || 0;\n    });\n    var range = options.range || {\n      endPos: _file.content.length,\n      startPos: 0,\n      startLine: 0,\n      startCol: 0\n    };\n    this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) : new PlainCharacterCursor(_file, range);\n    this._preserveLineEndings = options.preserveLineEndings || false;\n    this._escapedString = options.escapedString || false;\n    this._i18nNormalizeLineEndingsInICUs = options.i18nNormalizeLineEndingsInICUs || false;\n\n    try {\n      this._cursor.init();\n    } catch (e) {\n      this.handleError(e);\n    }\n  }\n\n  _createClass(_Tokenizer, [{\n    key: \"_processCarriageReturns\",\n    value: function _processCarriageReturns(content) {\n      if (this._preserveLineEndings) {\n        return content;\n      } // https://www.w3.org/TR/html51/syntax.html#preprocessing-the-input-stream\n      // In order to keep the original position in the source, we can not\n      // pre-process it.\n      // Instead CRs are processed right before instantiating the tokens.\n\n\n      return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n    }\n  }, {\n    key: \"tokenize\",\n    value: function tokenize() {\n      var _this136 = this;\n\n      while (this._cursor.peek() !== $EOF) {\n        var _start4 = this._cursor.clone();\n\n        try {\n          if (this._attemptCharCode($LT)) {\n            if (this._attemptCharCode($BANG)) {\n              if (this._attemptCharCode($LBRACKET)) {\n                this._consumeCdata(_start4);\n              } else if (this._attemptCharCode($MINUS)) {\n                this._consumeComment(_start4);\n              } else {\n                this._consumeDocType(_start4);\n              }\n            } else if (this._attemptCharCode($SLASH)) {\n              this._consumeTagClose(_start4);\n            } else {\n              this._consumeTagOpen(_start4);\n            }\n          } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n            // In (possibly interpolated) text the end of the text is given by `isTextEnd()`, while\n            // the premature end of an interpolation is given by the start of a new HTML element.\n            this._consumeWithInterpolation(5\n            /* TEXT */\n            , 8\n            /* INTERPOLATION */\n            , function () {\n              return _this136._isTextEnd();\n            }, function () {\n              return _this136._isTagStart();\n            });\n          }\n        } catch (e) {\n          this.handleError(e);\n        }\n      }\n\n      this._beginToken(24\n      /* EOF */\n      );\n\n      this._endToken([]);\n    }\n    /**\n     * @returns whether an ICU token has been created\n     * @internal\n     */\n\n  }, {\n    key: \"_tokenizeExpansionForm\",\n    value: function _tokenizeExpansionForm() {\n      if (this.isExpansionFormStart()) {\n        this._consumeExpansionFormStart();\n\n        return true;\n      }\n\n      if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {\n        this._consumeExpansionCaseStart();\n\n        return true;\n      }\n\n      if (this._cursor.peek() === $RBRACE) {\n        if (this._isInExpansionCase()) {\n          this._consumeExpansionCaseEnd();\n\n          return true;\n        }\n\n        if (this._isInExpansionForm()) {\n          this._consumeExpansionFormEnd();\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_beginToken\",\n    value: function _beginToken(type) {\n      var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._cursor.clone();\n      this._currentTokenStart = start;\n      this._currentTokenType = type;\n    }\n  }, {\n    key: \"_endToken\",\n    value: function _endToken(parts, end) {\n      if (this._currentTokenStart === null) {\n        throw new TokenError('Programming error - attempted to end a token when there was no start to the token', this._currentTokenType, this._cursor.getSpan(end));\n      }\n\n      if (this._currentTokenType === null) {\n        throw new TokenError('Programming error - attempted to end a token which has no token type', null, this._cursor.getSpan(this._currentTokenStart));\n      }\n\n      var token = {\n        type: this._currentTokenType,\n        parts: parts,\n        sourceSpan: (end !== null && end !== void 0 ? end : this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints)\n      };\n      this.tokens.push(token);\n      this._currentTokenStart = null;\n      this._currentTokenType = null;\n      return token;\n    }\n  }, {\n    key: \"_createError\",\n    value: function _createError(msg, span) {\n      if (this._isInExpansionForm()) {\n        msg += \" (Do you have an unescaped \\\"{\\\" in your template? Use \\\"{{ '{' }}\\\") to escape it.)\";\n      }\n\n      var error = new TokenError(msg, this._currentTokenType, span);\n      this._currentTokenStart = null;\n      this._currentTokenType = null;\n      return new _ControlFlowError(error);\n    }\n  }, {\n    key: \"handleError\",\n    value: function handleError(e) {\n      if (e instanceof CursorError) {\n        e = this._createError(e.msg, this._cursor.getSpan(e.cursor));\n      }\n\n      if (e instanceof _ControlFlowError) {\n        this.errors.push(e.error);\n      } else {\n        throw e;\n      }\n    }\n  }, {\n    key: \"_attemptCharCode\",\n    value: function _attemptCharCode(charCode) {\n      if (this._cursor.peek() === charCode) {\n        this._cursor.advance();\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_attemptCharCodeCaseInsensitive\",\n    value: function _attemptCharCodeCaseInsensitive(charCode) {\n      if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {\n        this._cursor.advance();\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_requireCharCode\",\n    value: function _requireCharCode(charCode) {\n      var location = this._cursor.clone();\n\n      if (!this._attemptCharCode(charCode)) {\n        throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n      }\n    }\n  }, {\n    key: \"_attemptStr\",\n    value: function _attemptStr(chars) {\n      var len = chars.length;\n\n      if (this._cursor.charsLeft() < len) {\n        return false;\n      }\n\n      var initialPosition = this._cursor.clone();\n\n      for (var i = 0; i < len; i++) {\n        if (!this._attemptCharCode(chars.charCodeAt(i))) {\n          // If attempting to parse the string fails, we want to reset the parser\n          // to where it was before the attempt\n          this._cursor = initialPosition;\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_attemptStrCaseInsensitive\",\n    value: function _attemptStrCaseInsensitive(chars) {\n      for (var i = 0; i < chars.length; i++) {\n        if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_requireStr\",\n    value: function _requireStr(chars) {\n      var location = this._cursor.clone();\n\n      if (!this._attemptStr(chars)) {\n        throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n      }\n    }\n  }, {\n    key: \"_attemptCharCodeUntilFn\",\n    value: function _attemptCharCodeUntilFn(predicate) {\n      while (!predicate(this._cursor.peek())) {\n        this._cursor.advance();\n      }\n    }\n  }, {\n    key: \"_requireCharCodeUntilFn\",\n    value: function _requireCharCodeUntilFn(predicate, len) {\n      var start = this._cursor.clone();\n\n      this._attemptCharCodeUntilFn(predicate);\n\n      if (this._cursor.diff(start) < len) {\n        throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n      }\n    }\n  }, {\n    key: \"_attemptUntilChar\",\n    value: function _attemptUntilChar(char) {\n      while (this._cursor.peek() !== char) {\n        this._cursor.advance();\n      }\n    }\n  }, {\n    key: \"_readChar\",\n    value: function _readChar() {\n      // Don't rely upon reading directly from `_input` as the actual char value\n      // may have been generated from an escape sequence.\n      var char = String.fromCodePoint(this._cursor.peek());\n\n      this._cursor.advance();\n\n      return char;\n    }\n  }, {\n    key: \"_consumeEntity\",\n    value: function _consumeEntity(textTokenType) {\n      this._beginToken(9\n      /* ENCODED_ENTITY */\n      );\n\n      var start = this._cursor.clone();\n\n      this._cursor.advance();\n\n      if (this._attemptCharCode($HASH)) {\n        var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\n\n        var codeStart = this._cursor.clone();\n\n        this._attemptCharCodeUntilFn(isDigitEntityEnd);\n\n        if (this._cursor.peek() != $SEMICOLON) {\n          // Advance cursor to include the peeked character in the string provided to the error\n          // message.\n          this._cursor.advance();\n\n          var entityType = isHex ? CharacterReferenceType.HEX : CharacterReferenceType.DEC;\n          throw this._createError(_unparsableEntityErrorMsg(entityType, this._cursor.getChars(start)), this._cursor.getSpan());\n        }\n\n        var strNum = this._cursor.getChars(codeStart);\n\n        this._cursor.advance();\n\n        try {\n          var charCode = parseInt(strNum, isHex ? 16 : 10);\n\n          this._endToken([String.fromCharCode(charCode), this._cursor.getChars(start)]);\n        } catch (_a) {\n          throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());\n        }\n      } else {\n        var nameStart = this._cursor.clone();\n\n        this._attemptCharCodeUntilFn(isNamedEntityEnd);\n\n        if (this._cursor.peek() != $SEMICOLON) {\n          // No semicolon was found so abort the encoded entity token that was in progress, and treat\n          // this as a text token\n          this._beginToken(textTokenType, start);\n\n          this._cursor = nameStart;\n\n          this._endToken(['&']);\n        } else {\n          var name = this._cursor.getChars(nameStart);\n\n          this._cursor.advance();\n\n          var char = NAMED_ENTITIES[name];\n\n          if (!char) {\n            throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));\n          }\n\n          this._endToken([char, \"&\".concat(name, \";\")]);\n        }\n      }\n    }\n  }, {\n    key: \"_consumeRawText\",\n    value: function _consumeRawText(consumeEntities, endMarkerPredicate) {\n      this._beginToken(consumeEntities ? 6\n      /* ESCAPABLE_RAW_TEXT */\n      : 7\n      /* RAW_TEXT */\n      );\n\n      var parts = [];\n\n      while (true) {\n        var tagCloseStart = this._cursor.clone();\n\n        var foundEndMarker = endMarkerPredicate();\n        this._cursor = tagCloseStart;\n\n        if (foundEndMarker) {\n          break;\n        }\n\n        if (consumeEntities && this._cursor.peek() === $AMPERSAND) {\n          this._endToken([this._processCarriageReturns(parts.join(''))]);\n\n          parts.length = 0;\n\n          this._consumeEntity(6\n          /* ESCAPABLE_RAW_TEXT */\n          );\n\n          this._beginToken(6\n          /* ESCAPABLE_RAW_TEXT */\n          );\n        } else {\n          parts.push(this._readChar());\n        }\n      }\n\n      this._endToken([this._processCarriageReturns(parts.join(''))]);\n    }\n  }, {\n    key: \"_consumeComment\",\n    value: function _consumeComment(start) {\n      var _this137 = this;\n\n      this._beginToken(10\n      /* COMMENT_START */\n      , start);\n\n      this._requireCharCode($MINUS);\n\n      this._endToken([]);\n\n      this._consumeRawText(false, function () {\n        return _this137._attemptStr('-->');\n      });\n\n      this._beginToken(11\n      /* COMMENT_END */\n      );\n\n      this._requireStr('-->');\n\n      this._endToken([]);\n    }\n  }, {\n    key: \"_consumeCdata\",\n    value: function _consumeCdata(start) {\n      var _this138 = this;\n\n      this._beginToken(12\n      /* CDATA_START */\n      , start);\n\n      this._requireStr('CDATA[');\n\n      this._endToken([]);\n\n      this._consumeRawText(false, function () {\n        return _this138._attemptStr(']]>');\n      });\n\n      this._beginToken(13\n      /* CDATA_END */\n      );\n\n      this._requireStr(']]>');\n\n      this._endToken([]);\n    }\n  }, {\n    key: \"_consumeDocType\",\n    value: function _consumeDocType(start) {\n      this._beginToken(18\n      /* DOC_TYPE */\n      , start);\n\n      var contentStart = this._cursor.clone();\n\n      this._attemptUntilChar($GT);\n\n      var content = this._cursor.getChars(contentStart);\n\n      this._cursor.advance();\n\n      this._endToken([content]);\n    }\n  }, {\n    key: \"_consumePrefixAndName\",\n    value: function _consumePrefixAndName() {\n      var nameOrPrefixStart = this._cursor.clone();\n\n      var prefix = '';\n\n      while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {\n        this._cursor.advance();\n      }\n\n      var nameStart;\n\n      if (this._cursor.peek() === $COLON) {\n        prefix = this._cursor.getChars(nameOrPrefixStart);\n\n        this._cursor.advance();\n\n        nameStart = this._cursor.clone();\n      } else {\n        nameStart = nameOrPrefixStart;\n      }\n\n      this._requireCharCodeUntilFn(isNameEnd, prefix === '' ? 0 : 1);\n\n      var name = this._cursor.getChars(nameStart);\n\n      return [prefix, name];\n    }\n  }, {\n    key: \"_consumeTagOpen\",\n    value: function _consumeTagOpen(start) {\n      var tagName;\n      var prefix;\n      var openTagToken;\n\n      try {\n        if (!isAsciiLetter(this._cursor.peek())) {\n          throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n        }\n\n        openTagToken = this._consumeTagOpenStart(start);\n        prefix = openTagToken.parts[0];\n        tagName = openTagToken.parts[1];\n\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n\n        while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT && this._cursor.peek() !== $LT && this._cursor.peek() !== $EOF) {\n          this._consumeAttributeName();\n\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n\n          if (this._attemptCharCode($EQ)) {\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n\n            this._consumeAttributeValue();\n          }\n\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n        }\n\n        this._consumeTagOpenEnd();\n      } catch (e) {\n        if (e instanceof _ControlFlowError) {\n          if (openTagToken) {\n            // We errored before we could close the opening tag, so it is incomplete.\n            openTagToken.type = 4\n            /* INCOMPLETE_TAG_OPEN */\n            ;\n          } else {\n            // When the start tag is invalid, assume we want a \"<\" as text.\n            // Back to back text tokens are merged at the end.\n            this._beginToken(5\n            /* TEXT */\n            , start);\n\n            this._endToken(['<']);\n          }\n\n          return;\n        }\n\n        throw e;\n      }\n\n      var contentTokenType = this._getTagDefinition(tagName).getContentType(prefix);\n\n      if (contentTokenType === TagContentType.RAW_TEXT) {\n        this._consumeRawTextWithTagClose(prefix, tagName, false);\n      } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n        this._consumeRawTextWithTagClose(prefix, tagName, true);\n      }\n    }\n  }, {\n    key: \"_consumeRawTextWithTagClose\",\n    value: function _consumeRawTextWithTagClose(prefix, tagName, consumeEntities) {\n      var _this139 = this;\n\n      this._consumeRawText(consumeEntities, function () {\n        if (!_this139._attemptCharCode($LT)) return false;\n        if (!_this139._attemptCharCode($SLASH)) return false;\n\n        _this139._attemptCharCodeUntilFn(isNotWhitespace);\n\n        if (!_this139._attemptStrCaseInsensitive(tagName)) return false;\n\n        _this139._attemptCharCodeUntilFn(isNotWhitespace);\n\n        return _this139._attemptCharCode($GT);\n      });\n\n      this._beginToken(3\n      /* TAG_CLOSE */\n      );\n\n      this._requireCharCodeUntilFn(function (code) {\n        return code === $GT;\n      }, 3);\n\n      this._cursor.advance(); // Consume the `>`\n\n\n      this._endToken([prefix, tagName]);\n    }\n  }, {\n    key: \"_consumeTagOpenStart\",\n    value: function _consumeTagOpenStart(start) {\n      this._beginToken(0\n      /* TAG_OPEN_START */\n      , start);\n\n      var parts = this._consumePrefixAndName();\n\n      return this._endToken(parts);\n    }\n  }, {\n    key: \"_consumeAttributeName\",\n    value: function _consumeAttributeName() {\n      var attrNameStart = this._cursor.peek();\n\n      if (attrNameStart === $SQ || attrNameStart === $DQ) {\n        throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());\n      }\n\n      this._beginToken(14\n      /* ATTR_NAME */\n      );\n\n      var prefixAndName = this._consumePrefixAndName();\n\n      this._endToken(prefixAndName);\n    }\n  }, {\n    key: \"_consumeAttributeValue\",\n    value: function _consumeAttributeValue() {\n      var _this140 = this;\n\n      var value;\n\n      if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {\n        var quoteChar = this._cursor.peek();\n\n        this._consumeQuote(quoteChar); // In an attribute then end of the attribute value and the premature end to an interpolation\n        // are both triggered by the `quoteChar`.\n\n\n        var endPredicate = function endPredicate() {\n          return _this140._cursor.peek() === quoteChar;\n        };\n\n        this._consumeWithInterpolation(16\n        /* ATTR_VALUE_TEXT */\n        , 17\n        /* ATTR_VALUE_INTERPOLATION */\n        , endPredicate, endPredicate);\n\n        this._consumeQuote(quoteChar);\n      } else {\n        var _endPredicate = function _endPredicate() {\n          return isNameEnd(_this140._cursor.peek());\n        };\n\n        this._consumeWithInterpolation(16\n        /* ATTR_VALUE_TEXT */\n        , 17\n        /* ATTR_VALUE_INTERPOLATION */\n        , _endPredicate, _endPredicate);\n      }\n    }\n  }, {\n    key: \"_consumeQuote\",\n    value: function _consumeQuote(quoteChar) {\n      this._beginToken(15\n      /* ATTR_QUOTE */\n      );\n\n      this._requireCharCode(quoteChar);\n\n      this._endToken([String.fromCodePoint(quoteChar)]);\n    }\n  }, {\n    key: \"_consumeTagOpenEnd\",\n    value: function _consumeTagOpenEnd() {\n      var tokenType = this._attemptCharCode($SLASH) ? 2\n      /* TAG_OPEN_END_VOID */\n      : 1\n      /* TAG_OPEN_END */\n      ;\n\n      this._beginToken(tokenType);\n\n      this._requireCharCode($GT);\n\n      this._endToken([]);\n    }\n  }, {\n    key: \"_consumeTagClose\",\n    value: function _consumeTagClose(start) {\n      this._beginToken(3\n      /* TAG_CLOSE */\n      , start);\n\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n\n      var prefixAndName = this._consumePrefixAndName();\n\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n\n      this._requireCharCode($GT);\n\n      this._endToken(prefixAndName);\n    }\n  }, {\n    key: \"_consumeExpansionFormStart\",\n    value: function _consumeExpansionFormStart() {\n      this._beginToken(19\n      /* EXPANSION_FORM_START */\n      );\n\n      this._requireCharCode($LBRACE);\n\n      this._endToken([]);\n\n      this._expansionCaseStack.push(19\n      /* EXPANSION_FORM_START */\n      );\n\n      this._beginToken(7\n      /* RAW_TEXT */\n      );\n\n      var condition = this._readUntil($COMMA);\n\n      var normalizedCondition = this._processCarriageReturns(condition);\n\n      if (this._i18nNormalizeLineEndingsInICUs) {\n        // We explicitly want to normalize line endings for this text.\n        this._endToken([normalizedCondition]);\n      } else {\n        // We are not normalizing line endings.\n        var conditionToken = this._endToken([condition]);\n\n        if (normalizedCondition !== condition) {\n          this.nonNormalizedIcuExpressions.push(conditionToken);\n        }\n      }\n\n      this._requireCharCode($COMMA);\n\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n\n      this._beginToken(7\n      /* RAW_TEXT */\n      );\n\n      var type = this._readUntil($COMMA);\n\n      this._endToken([type]);\n\n      this._requireCharCode($COMMA);\n\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n    }\n  }, {\n    key: \"_consumeExpansionCaseStart\",\n    value: function _consumeExpansionCaseStart() {\n      this._beginToken(20\n      /* EXPANSION_CASE_VALUE */\n      );\n\n      var value = this._readUntil($LBRACE).trim();\n\n      this._endToken([value]);\n\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n\n      this._beginToken(21\n      /* EXPANSION_CASE_EXP_START */\n      );\n\n      this._requireCharCode($LBRACE);\n\n      this._endToken([]);\n\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n\n      this._expansionCaseStack.push(21\n      /* EXPANSION_CASE_EXP_START */\n      );\n    }\n  }, {\n    key: \"_consumeExpansionCaseEnd\",\n    value: function _consumeExpansionCaseEnd() {\n      this._beginToken(22\n      /* EXPANSION_CASE_EXP_END */\n      );\n\n      this._requireCharCode($RBRACE);\n\n      this._endToken([]);\n\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n\n      this._expansionCaseStack.pop();\n    }\n  }, {\n    key: \"_consumeExpansionFormEnd\",\n    value: function _consumeExpansionFormEnd() {\n      this._beginToken(23\n      /* EXPANSION_FORM_END */\n      );\n\n      this._requireCharCode($RBRACE);\n\n      this._endToken([]);\n\n      this._expansionCaseStack.pop();\n    }\n    /**\n     * Consume a string that may contain interpolation expressions.\n     *\n     * The first token consumed will be of `tokenType` and then there will be alternating\n     * `interpolationTokenType` and `tokenType` tokens until the `endPredicate()` returns true.\n     *\n     * If an interpolation token ends prematurely it will have no end marker in its `parts` array.\n     *\n     * @param textTokenType the kind of tokens to interleave around interpolation tokens.\n     * @param interpolationTokenType the kind of tokens that contain interpolation.\n     * @param endPredicate a function that should return true when we should stop consuming.\n     * @param endInterpolation a function that should return true if there is a premature end to an\n     *     interpolation expression - i.e. before we get to the normal interpolation closing marker.\n     */\n\n  }, {\n    key: \"_consumeWithInterpolation\",\n    value: function _consumeWithInterpolation(textTokenType, interpolationTokenType, endPredicate, endInterpolation) {\n      this._beginToken(textTokenType);\n\n      var parts = [];\n\n      while (!endPredicate()) {\n        var current = this._cursor.clone();\n\n        if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n          this._endToken([this._processCarriageReturns(parts.join(''))], current);\n\n          parts.length = 0;\n\n          this._consumeInterpolation(interpolationTokenType, current, endInterpolation);\n\n          this._beginToken(textTokenType);\n        } else if (this._cursor.peek() === $AMPERSAND) {\n          this._endToken([this._processCarriageReturns(parts.join(''))]);\n\n          parts.length = 0;\n\n          this._consumeEntity(textTokenType);\n\n          this._beginToken(textTokenType);\n        } else {\n          parts.push(this._readChar());\n        }\n      } // It is possible that an interpolation was started but not ended inside this text token.\n      // Make sure that we reset the state of the lexer correctly.\n\n\n      this._inInterpolation = false;\n\n      this._endToken([this._processCarriageReturns(parts.join(''))]);\n    }\n    /**\n     * Consume a block of text that has been interpreted as an Angular interpolation.\n     *\n     * @param interpolationTokenType the type of the interpolation token to generate.\n     * @param interpolationStart a cursor that points to the start of this interpolation.\n     * @param prematureEndPredicate a function that should return true if the next characters indicate\n     *     an end to the interpolation before its normal closing marker.\n     */\n\n  }, {\n    key: \"_consumeInterpolation\",\n    value: function _consumeInterpolation(interpolationTokenType, interpolationStart, prematureEndPredicate) {\n      var parts = [];\n\n      this._beginToken(interpolationTokenType, interpolationStart);\n\n      parts.push(this._interpolationConfig.start); // Find the end of the interpolation, ignoring content inside quotes.\n\n      var expressionStart = this._cursor.clone();\n\n      var inQuote = null;\n      var inComment = false;\n\n      while (this._cursor.peek() !== $EOF && (prematureEndPredicate === null || !prematureEndPredicate())) {\n        var current = this._cursor.clone();\n\n        if (this._isTagStart()) {\n          // We are starting what looks like an HTML element in the middle of this interpolation.\n          // Reset the cursor to before the `<` character and end the interpolation token.\n          // (This is actually wrong but here for backward compatibility).\n          this._cursor = current;\n          parts.push(this._getProcessedChars(expressionStart, current));\n\n          this._endToken(parts);\n\n          return;\n        }\n\n        if (inQuote === null) {\n          if (this._attemptStr(this._interpolationConfig.end)) {\n            // We are not in a string, and we hit the end interpolation marker\n            parts.push(this._getProcessedChars(expressionStart, current));\n            parts.push(this._interpolationConfig.end);\n\n            this._endToken(parts);\n\n            return;\n          } else if (this._attemptStr('//')) {\n            // Once we are in a comment we ignore any quotes\n            inComment = true;\n          }\n        }\n\n        var char = this._cursor.peek();\n\n        this._cursor.advance();\n\n        if (char === $BACKSLASH) {\n          // Skip the next character because it was escaped.\n          this._cursor.advance();\n        } else if (char === inQuote) {\n          // Exiting the current quoted string\n          inQuote = null;\n        } else if (!inComment && inQuote === null && isQuote(char)) {\n          // Entering a new quoted string\n          inQuote = char;\n        }\n      } // We hit EOF without finding a closing interpolation marker\n\n\n      parts.push(this._getProcessedChars(expressionStart, this._cursor));\n\n      this._endToken(parts);\n    }\n  }, {\n    key: \"_getProcessedChars\",\n    value: function _getProcessedChars(start, end) {\n      return this._processCarriageReturns(end.getChars(start));\n    }\n  }, {\n    key: \"_isTextEnd\",\n    value: function _isTextEnd() {\n      if (this._isTagStart() || this._cursor.peek() === $EOF) {\n        return true;\n      }\n\n      if (this._tokenizeIcu && !this._inInterpolation) {\n        if (this.isExpansionFormStart()) {\n          // start of an expansion form\n          return true;\n        }\n\n        if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {\n          // end of and expansion case\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns true if the current cursor is pointing to the start of a tag\n     * (opening/closing/comments/cdata/etc).\n     */\n\n  }, {\n    key: \"_isTagStart\",\n    value: function _isTagStart() {\n      if (this._cursor.peek() === $LT) {\n        // We assume that `<` followed by whitespace is not the start of an HTML element.\n        var tmp = this._cursor.clone();\n\n        tmp.advance(); // If the next character is alphabetic, ! nor / then it is a tag start\n\n        var code = tmp.peek();\n\n        if ($a <= code && code <= $z || $A <= code && code <= $Z || code === $SLASH || code === $BANG) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_readUntil\",\n    value: function _readUntil(char) {\n      var start = this._cursor.clone();\n\n      this._attemptUntilChar(char);\n\n      return this._cursor.getChars(start);\n    }\n  }, {\n    key: \"_isInExpansionCase\",\n    value: function _isInExpansionCase() {\n      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 21\n      /* EXPANSION_CASE_EXP_START */\n      ;\n    }\n  }, {\n    key: \"_isInExpansionForm\",\n    value: function _isInExpansionForm() {\n      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 19\n      /* EXPANSION_FORM_START */\n      ;\n    }\n  }, {\n    key: \"isExpansionFormStart\",\n    value: function isExpansionFormStart() {\n      if (this._cursor.peek() !== $LBRACE) {\n        return false;\n      }\n\n      if (this._interpolationConfig) {\n        var _start5 = this._cursor.clone();\n\n        var isInterpolation = this._attemptStr(this._interpolationConfig.start);\n\n        this._cursor = _start5;\n        return !isInterpolation;\n      }\n\n      return true;\n    }\n  }]);\n\n  return _Tokenizer;\n}();\n\nfunction isNotWhitespace(code) {\n  return !isWhitespace(code) || code === $EOF;\n}\n\nfunction isNameEnd(code) {\n  return isWhitespace(code) || code === $GT || code === $LT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ || code === $EOF;\n}\n\nfunction isPrefixEnd(code) {\n  return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);\n}\n\nfunction isDigitEntityEnd(code) {\n  return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);\n}\n\nfunction isNamedEntityEnd(code) {\n  return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);\n}\n\nfunction isExpansionCaseStart(peek) {\n  return peek !== $RBRACE;\n}\n\nfunction compareCharCodeCaseInsensitive(code1, code2) {\n  return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);\n}\n\nfunction toUpperCaseCharCode(code) {\n  return code >= $a && code <= $z ? code - $a + $A : code;\n}\n\nfunction mergeTextTokens(srcTokens) {\n  var dstTokens = [];\n  var lastDstToken = undefined;\n\n  for (var i = 0; i < srcTokens.length; i++) {\n    var token = srcTokens[i];\n\n    if (lastDstToken && lastDstToken.type === 5\n    /* TEXT */\n    && token.type === 5\n    /* TEXT */\n    || lastDstToken && lastDstToken.type === 16\n    /* ATTR_VALUE_TEXT */\n    && token.type === 16\n    /* ATTR_VALUE_TEXT */\n    ) {\n      lastDstToken.parts[0] += token.parts[0];\n      lastDstToken.sourceSpan.end = token.sourceSpan.end;\n    } else {\n      lastDstToken = token;\n      dstTokens.push(lastDstToken);\n    }\n  }\n\n  return dstTokens;\n}\n\nvar PlainCharacterCursor = /*#__PURE__*/function () {\n  function PlainCharacterCursor(fileOrCursor, range) {\n    _classCallCheck(this, PlainCharacterCursor);\n\n    if (fileOrCursor instanceof PlainCharacterCursor) {\n      this.file = fileOrCursor.file;\n      this.input = fileOrCursor.input;\n      this.end = fileOrCursor.end;\n      var state = fileOrCursor.state; // Note: avoid using `{...fileOrCursor.state}` here as that has a severe performance penalty.\n      // In ES5 bundles the object spread operator is translated into the `__assign` helper, which\n      // is not optimized by VMs as efficiently as a raw object literal. Since this constructor is\n      // called in tight loops, this difference matters.\n\n      this.state = {\n        peek: state.peek,\n        offset: state.offset,\n        line: state.line,\n        column: state.column\n      };\n    } else {\n      if (!range) {\n        throw new Error('Programming error: the range argument must be provided with a file argument.');\n      }\n\n      this.file = fileOrCursor;\n      this.input = fileOrCursor.content;\n      this.end = range.endPos;\n      this.state = {\n        peek: -1,\n        offset: range.startPos,\n        line: range.startLine,\n        column: range.startCol\n      };\n    }\n  }\n\n  _createClass(PlainCharacterCursor, [{\n    key: \"clone\",\n    value: function clone() {\n      return new PlainCharacterCursor(this);\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this.state.peek;\n    }\n  }, {\n    key: \"charsLeft\",\n    value: function charsLeft() {\n      return this.end - this.state.offset;\n    }\n  }, {\n    key: \"diff\",\n    value: function diff(other) {\n      return this.state.offset - other.state.offset;\n    }\n  }, {\n    key: \"advance\",\n    value: function advance() {\n      this.advanceState(this.state);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.updatePeek(this.state);\n    }\n  }, {\n    key: \"getSpan\",\n    value: function getSpan(start, leadingTriviaCodePoints) {\n      start = start || this;\n      var fullStart = start;\n\n      if (leadingTriviaCodePoints) {\n        while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {\n          if (fullStart === start) {\n            start = start.clone();\n          }\n\n          start.advance();\n        }\n      }\n\n      var startLocation = this.locationFromCursor(start);\n      var endLocation = this.locationFromCursor(this);\n      var fullStartLocation = fullStart !== start ? this.locationFromCursor(fullStart) : startLocation;\n      return new ParseSourceSpan(startLocation, endLocation, fullStartLocation);\n    }\n  }, {\n    key: \"getChars\",\n    value: function getChars(start) {\n      return this.input.substring(start.state.offset, this.state.offset);\n    }\n  }, {\n    key: \"charAt\",\n    value: function charAt(pos) {\n      return this.input.charCodeAt(pos);\n    }\n  }, {\n    key: \"advanceState\",\n    value: function advanceState(state) {\n      if (state.offset >= this.end) {\n        this.state = state;\n        throw new CursorError('Unexpected character \"EOF\"', this);\n      }\n\n      var currentChar = this.charAt(state.offset);\n\n      if (currentChar === $LF) {\n        state.line++;\n        state.column = 0;\n      } else if (!isNewLine(currentChar)) {\n        state.column++;\n      }\n\n      state.offset++;\n      this.updatePeek(state);\n    }\n  }, {\n    key: \"updatePeek\",\n    value: function updatePeek(state) {\n      state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);\n    }\n  }, {\n    key: \"locationFromCursor\",\n    value: function locationFromCursor(cursor) {\n      return new ParseLocation(cursor.file, cursor.state.offset, cursor.state.line, cursor.state.column);\n    }\n  }]);\n\n  return PlainCharacterCursor;\n}();\n\nvar EscapedCharacterCursor = /*#__PURE__*/function (_PlainCharacterCursor) {\n  _inherits(EscapedCharacterCursor, _PlainCharacterCursor);\n\n  var _super85 = _createSuper(EscapedCharacterCursor);\n\n  function EscapedCharacterCursor(fileOrCursor, range) {\n    var _this141;\n\n    _classCallCheck(this, EscapedCharacterCursor);\n\n    if (fileOrCursor instanceof EscapedCharacterCursor) {\n      _this141 = _super85.call(this, fileOrCursor);\n      _this141.internalState = Object.assign({}, fileOrCursor.internalState);\n    } else {\n      _this141 = _super85.call(this, fileOrCursor, range);\n      _this141.internalState = _this141.state;\n    }\n\n    return _possibleConstructorReturn(_this141);\n  }\n\n  _createClass(EscapedCharacterCursor, [{\n    key: \"advance\",\n    value: function advance() {\n      this.state = this.internalState;\n\n      _get(_getPrototypeOf(EscapedCharacterCursor.prototype), \"advance\", this).call(this);\n\n      this.processEscapeSequence();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      _get(_getPrototypeOf(EscapedCharacterCursor.prototype), \"init\", this).call(this);\n\n      this.processEscapeSequence();\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new EscapedCharacterCursor(this);\n    }\n  }, {\n    key: \"getChars\",\n    value: function getChars(start) {\n      var cursor = start.clone();\n      var chars = '';\n\n      while (cursor.internalState.offset < this.internalState.offset) {\n        chars += String.fromCodePoint(cursor.peek());\n        cursor.advance();\n      }\n\n      return chars;\n    }\n    /**\n     * Process the escape sequence that starts at the current position in the text.\n     *\n     * This method is called to ensure that `peek` has the unescaped value of escape sequences.\n     */\n\n  }, {\n    key: \"processEscapeSequence\",\n    value: function processEscapeSequence() {\n      var _this142 = this;\n\n      var peek = function peek() {\n        return _this142.internalState.peek;\n      };\n\n      if (peek() === $BACKSLASH) {\n        // We have hit an escape sequence so we need the internal state to become independent\n        // of the external state.\n        this.internalState = Object.assign({}, this.state); // Move past the backslash\n\n        this.advanceState(this.internalState); // First check for standard control char sequences\n\n        if (peek() === $n) {\n          this.state.peek = $LF;\n        } else if (peek() === $r) {\n          this.state.peek = $CR;\n        } else if (peek() === $v) {\n          this.state.peek = $VTAB;\n        } else if (peek() === $t) {\n          this.state.peek = $TAB;\n        } else if (peek() === $b) {\n          this.state.peek = $BSPACE;\n        } else if (peek() === $f) {\n          this.state.peek = $FF;\n        } // Now consider more complex sequences\n        else if (peek() === $u) {\n          // Unicode code-point sequence\n          this.advanceState(this.internalState); // advance past the `u` char\n\n          if (peek() === $LBRACE) {\n            // Variable length Unicode, e.g. `\\x{123}`\n            this.advanceState(this.internalState); // advance past the `{` char\n            // Advance past the variable number of hex digits until we hit a `}` char\n\n            var digitStart = this.clone();\n            var length = 0;\n\n            while (peek() !== $RBRACE) {\n              this.advanceState(this.internalState);\n              length++;\n            }\n\n            this.state.peek = this.decodeHexDigits(digitStart, length);\n          } else {\n            // Fixed length Unicode, e.g. `\\u1234`\n            var _digitStart = this.clone();\n\n            this.advanceState(this.internalState);\n            this.advanceState(this.internalState);\n            this.advanceState(this.internalState);\n            this.state.peek = this.decodeHexDigits(_digitStart, 4);\n          }\n        } else if (peek() === $x) {\n          // Hex char code, e.g. `\\x2F`\n          this.advanceState(this.internalState); // advance past the `x` char\n\n          var _digitStart2 = this.clone();\n\n          this.advanceState(this.internalState);\n          this.state.peek = this.decodeHexDigits(_digitStart2, 2);\n        } else if (isOctalDigit(peek())) {\n          // Octal char code, e.g. `\\012`,\n          var octal = '';\n          var _length = 0;\n          var previous = this.clone();\n\n          while (isOctalDigit(peek()) && _length < 3) {\n            previous = this.clone();\n            octal += String.fromCodePoint(peek());\n            this.advanceState(this.internalState);\n            _length++;\n          }\n\n          this.state.peek = parseInt(octal, 8); // Backup one char\n\n          this.internalState = previous.internalState;\n        } else if (isNewLine(this.internalState.peek)) {\n          // Line continuation `\\` followed by a new line\n          this.advanceState(this.internalState); // advance over the newline\n\n          this.state = this.internalState;\n        } else {\n          // If none of the `if` blocks were executed then we just have an escaped normal character.\n          // In that case we just, effectively, skip the backslash from the character.\n          this.state.peek = this.internalState.peek;\n        }\n      }\n    }\n  }, {\n    key: \"decodeHexDigits\",\n    value: function decodeHexDigits(start, length) {\n      var hex = this.input.substr(start.internalState.offset, length);\n      var charCode = parseInt(hex, 16);\n\n      if (!isNaN(charCode)) {\n        return charCode;\n      } else {\n        start.state = start.internalState;\n        throw new CursorError('Invalid hexadecimal escape sequence', start);\n      }\n    }\n  }]);\n\n  return EscapedCharacterCursor;\n}(PlainCharacterCursor);\n\nvar CursorError = function CursorError(msg, cursor) {\n  _classCallCheck(this, CursorError);\n\n  this.msg = msg;\n  this.cursor = cursor;\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar TreeError = /*#__PURE__*/function (_ParseError2) {\n  _inherits(TreeError, _ParseError2);\n\n  var _super86 = _createSuper(TreeError);\n\n  function TreeError(elementName, span, msg) {\n    var _this143;\n\n    _classCallCheck(this, TreeError);\n\n    _this143 = _super86.call(this, span, msg);\n    _this143.elementName = elementName;\n    return _this143;\n  }\n\n  _createClass(TreeError, null, [{\n    key: \"create\",\n    value: function create(elementName, span, msg) {\n      return new TreeError(elementName, span, msg);\n    }\n  }]);\n\n  return TreeError;\n}(ParseError);\n\nvar ParseTreeResult = function ParseTreeResult(rootNodes, errors) {\n  _classCallCheck(this, ParseTreeResult);\n\n  this.rootNodes = rootNodes;\n  this.errors = errors;\n};\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(getTagDefinition) {\n    _classCallCheck(this, Parser);\n\n    this.getTagDefinition = getTagDefinition;\n  }\n\n  _createClass(Parser, [{\n    key: \"parse\",\n    value: function parse(source, url, options) {\n      var tokenizeResult = tokenize(source, url, this.getTagDefinition, options);\n      var parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);\n      parser.build();\n      return new ParseTreeResult(parser.rootNodes, tokenizeResult.errors.concat(parser.errors));\n    }\n  }]);\n\n  return Parser;\n}();\n\nvar _TreeBuilder = /*#__PURE__*/function () {\n  function _TreeBuilder(tokens, getTagDefinition) {\n    _classCallCheck(this, _TreeBuilder);\n\n    this.tokens = tokens;\n    this.getTagDefinition = getTagDefinition;\n    this._index = -1;\n    this._elementStack = [];\n    this.rootNodes = [];\n    this.errors = [];\n\n    this._advance();\n  }\n\n  _createClass(_TreeBuilder, [{\n    key: \"build\",\n    value: function build() {\n      while (this._peek.type !== 24\n      /* EOF */\n      ) {\n        if (this._peek.type === 0\n        /* TAG_OPEN_START */\n        || this._peek.type === 4\n        /* INCOMPLETE_TAG_OPEN */\n        ) {\n          this._consumeStartTag(this._advance());\n        } else if (this._peek.type === 3\n        /* TAG_CLOSE */\n        ) {\n          this._consumeEndTag(this._advance());\n        } else if (this._peek.type === 12\n        /* CDATA_START */\n        ) {\n          this._closeVoidElement();\n\n          this._consumeCdata(this._advance());\n        } else if (this._peek.type === 10\n        /* COMMENT_START */\n        ) {\n          this._closeVoidElement();\n\n          this._consumeComment(this._advance());\n        } else if (this._peek.type === 5\n        /* TEXT */\n        || this._peek.type === 7\n        /* RAW_TEXT */\n        || this._peek.type === 6\n        /* ESCAPABLE_RAW_TEXT */\n        ) {\n          this._closeVoidElement();\n\n          this._consumeText(this._advance());\n        } else if (this._peek.type === 19\n        /* EXPANSION_FORM_START */\n        ) {\n          this._consumeExpansion(this._advance());\n        } else {\n          // Skip all other tokens...\n          this._advance();\n        }\n      }\n    }\n  }, {\n    key: \"_advance\",\n    value: function _advance() {\n      var prev = this._peek;\n\n      if (this._index < this.tokens.length - 1) {\n        // Note: there is always an EOF token at the end\n        this._index++;\n      }\n\n      this._peek = this.tokens[this._index];\n      return prev;\n    }\n  }, {\n    key: \"_advanceIf\",\n    value: function _advanceIf(type) {\n      if (this._peek.type === type) {\n        return this._advance();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_consumeCdata\",\n    value: function _consumeCdata(_startToken) {\n      this._consumeText(this._advance());\n\n      this._advanceIf(13\n      /* CDATA_END */\n      );\n    }\n  }, {\n    key: \"_consumeComment\",\n    value: function _consumeComment(token) {\n      var text = this._advanceIf(7\n      /* RAW_TEXT */\n      );\n\n      this._advanceIf(11\n      /* COMMENT_END */\n      );\n\n      var value = text != null ? text.parts[0].trim() : null;\n\n      this._addToParent(new Comment(value, token.sourceSpan));\n    }\n  }, {\n    key: \"_consumeExpansion\",\n    value: function _consumeExpansion(token) {\n      var switchValue = this._advance();\n\n      var type = this._advance();\n\n      var cases = []; // read =\n\n      while (this._peek.type === 20\n      /* EXPANSION_CASE_VALUE */\n      ) {\n        var expCase = this._parseExpansionCase();\n\n        if (!expCase) return; // error\n\n        cases.push(expCase);\n      } // read the final }\n\n\n      if (this._peek.type !== 23\n      /* EXPANSION_FORM_END */\n      ) {\n        this.errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n        return;\n      }\n\n      var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);\n\n      this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n\n      this._advance();\n    }\n  }, {\n    key: \"_parseExpansionCase\",\n    value: function _parseExpansionCase() {\n      var value = this._advance(); // read {\n\n\n      if (this._peek.type !== 21\n      /* EXPANSION_CASE_EXP_START */\n      ) {\n        this.errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '{'.\"));\n        return null;\n      } // read until }\n\n\n      var start = this._advance();\n\n      var exp = this._collectExpansionExpTokens(start);\n\n      if (!exp) return null;\n\n      var end = this._advance();\n\n      exp.push({\n        type: 24\n        /* EOF */\n        ,\n        parts: [],\n        sourceSpan: end.sourceSpan\n      }); // parse everything in between { and }\n\n      var expansionCaseParser = new _TreeBuilder(exp, this.getTagDefinition);\n      expansionCaseParser.build();\n\n      if (expansionCaseParser.errors.length > 0) {\n        this.errors = this.errors.concat(expansionCaseParser.errors);\n        return null;\n      }\n\n      var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);\n      var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);\n      return new ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n    }\n  }, {\n    key: \"_collectExpansionExpTokens\",\n    value: function _collectExpansionExpTokens(start) {\n      var exp = [];\n      var expansionFormStack = [21\n      /* EXPANSION_CASE_EXP_START */\n      ];\n\n      while (true) {\n        if (this._peek.type === 19\n        /* EXPANSION_FORM_START */\n        || this._peek.type === 21\n        /* EXPANSION_CASE_EXP_START */\n        ) {\n          expansionFormStack.push(this._peek.type);\n        }\n\n        if (this._peek.type === 22\n        /* EXPANSION_CASE_EXP_END */\n        ) {\n          if (lastOnStack(expansionFormStack, 21\n          /* EXPANSION_CASE_EXP_START */\n          )) {\n            expansionFormStack.pop();\n            if (expansionFormStack.length === 0) return exp;\n          } else {\n            this.errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n            return null;\n          }\n        }\n\n        if (this._peek.type === 23\n        /* EXPANSION_FORM_END */\n        ) {\n          if (lastOnStack(expansionFormStack, 19\n          /* EXPANSION_FORM_START */\n          )) {\n            expansionFormStack.pop();\n          } else {\n            this.errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n            return null;\n          }\n        }\n\n        if (this._peek.type === 24\n        /* EOF */\n        ) {\n          this.errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n          return null;\n        }\n\n        exp.push(this._advance());\n      }\n    }\n  }, {\n    key: \"_consumeText\",\n    value: function _consumeText(token) {\n      var tokens = [token];\n      var startSpan = token.sourceSpan;\n      var text = token.parts[0];\n\n      if (text.length > 0 && text[0] === '\\n') {\n        var parent = this._getParentElement();\n\n        if (parent != null && parent.children.length === 0 && this.getTagDefinition(parent.name).ignoreFirstLf) {\n          text = text.substring(1);\n          tokens[0] = {\n            type: token.type,\n            sourceSpan: token.sourceSpan,\n            parts: [text]\n          };\n        }\n      }\n\n      while (this._peek.type === 8\n      /* INTERPOLATION */\n      || this._peek.type === 5\n      /* TEXT */\n      || this._peek.type === 9\n      /* ENCODED_ENTITY */\n      ) {\n        token = this._advance();\n        tokens.push(token);\n\n        if (token.type === 8\n        /* INTERPOLATION */\n        ) {\n          // For backward compatibility we decode HTML entities that appear in interpolation\n          // expressions. This is arguably a bug, but it could be a considerable breaking change to\n          // fix it. It should be addressed in a larger project to refactor the entire parser/lexer\n          // chain after View Engine has been removed.\n          text += token.parts.join('').replace(/&([^;]+);/g, decodeEntity);\n        } else if (token.type === 9\n        /* ENCODED_ENTITY */\n        ) {\n          text += token.parts[0];\n        } else {\n          text += token.parts.join('');\n        }\n      }\n\n      if (text.length > 0) {\n        var endSpan = token.sourceSpan;\n\n        this._addToParent(new Text(text, new ParseSourceSpan(startSpan.start, endSpan.end, startSpan.fullStart, startSpan.details), tokens));\n      }\n    }\n  }, {\n    key: \"_closeVoidElement\",\n    value: function _closeVoidElement() {\n      var el = this._getParentElement();\n\n      if (el && this.getTagDefinition(el.name).isVoid) {\n        this._elementStack.pop();\n      }\n    }\n  }, {\n    key: \"_consumeStartTag\",\n    value: function _consumeStartTag(startTagToken) {\n      var _startTagToken$parts = _slicedToArray(startTagToken.parts, 2),\n          prefix = _startTagToken$parts[0],\n          name = _startTagToken$parts[1];\n\n      var attrs = [];\n\n      while (this._peek.type === 14\n      /* ATTR_NAME */\n      ) {\n        attrs.push(this._consumeAttr(this._advance()));\n      }\n\n      var fullName = this._getElementFullName(prefix, name, this._getParentElement());\n\n      var selfClosing = false; // Note: There could have been a tokenizer error\n      // so that we don't get a token for the end tag...\n\n      if (this._peek.type === 2\n      /* TAG_OPEN_END_VOID */\n      ) {\n        this._advance();\n\n        selfClosing = true;\n        var tagDef = this.getTagDefinition(fullName);\n\n        if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n          this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, \"Only void and foreign elements can be self closed \\\"\".concat(startTagToken.parts[1], \"\\\"\")));\n        }\n      } else if (this._peek.type === 1\n      /* TAG_OPEN_END */\n      ) {\n        this._advance();\n\n        selfClosing = false;\n      }\n\n      var end = this._peek.sourceSpan.fullStart;\n      var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart); // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n\n      var startSpan = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n      var el = new Element(fullName, attrs, [], span, startSpan, undefined);\n\n      this._pushElement(el);\n\n      if (selfClosing) {\n        // Elements that are self-closed have their `endSourceSpan` set to the full span, as the\n        // element start tag also represents the end tag.\n        this._popElement(fullName, span);\n      } else if (startTagToken.type === 4\n      /* INCOMPLETE_TAG_OPEN */\n      ) {\n        // We already know the opening tag is not complete, so it is unlikely it has a corresponding\n        // close tag. Let's optimistically parse it as a full element and emit an error.\n        this._popElement(fullName, null);\n\n        this.errors.push(TreeError.create(fullName, span, \"Opening tag \\\"\".concat(fullName, \"\\\" not terminated.\")));\n      }\n    }\n  }, {\n    key: \"_pushElement\",\n    value: function _pushElement(el) {\n      var parentEl = this._getParentElement();\n\n      if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n        this._elementStack.pop();\n      }\n\n      this._addToParent(el);\n\n      this._elementStack.push(el);\n    }\n  }, {\n    key: \"_consumeEndTag\",\n    value: function _consumeEndTag(endTagToken) {\n      var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n\n      if (this.getTagDefinition(fullName).isVoid) {\n        this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, \"Void elements do not have end tags \\\"\".concat(endTagToken.parts[1], \"\\\"\")));\n      } else if (!this._popElement(fullName, endTagToken.sourceSpan)) {\n        var errMsg = \"Unexpected closing tag \\\"\".concat(fullName, \"\\\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags\");\n        this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n      }\n    }\n    /**\n     * Closes the nearest element with the tag name `fullName` in the parse tree.\n     * `endSourceSpan` is the span of the closing tag, or null if the element does\n     * not have a closing tag (for example, this happens when an incomplete\n     * opening tag is recovered).\n     */\n\n  }, {\n    key: \"_popElement\",\n    value: function _popElement(fullName, endSourceSpan) {\n      var unexpectedCloseTagDetected = false;\n\n      for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n        var el = this._elementStack[stackIndex];\n\n        if (el.name === fullName) {\n          // Record the parse span with the element that is being closed. Any elements that are\n          // removed from the element stack at this point are closed implicitly, so they won't get\n          // an end source span (as there is no explicit closing element).\n          el.endSourceSpan = endSourceSpan;\n          el.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : el.sourceSpan.end;\n\n          this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n\n          return !unexpectedCloseTagDetected;\n        }\n\n        if (!this.getTagDefinition(el.name).closedByParent) {\n          // Note that we encountered an unexpected close tag but continue processing the element\n          // stack so we can assign an `endSourceSpan` if there is a corresponding start tag for this\n          // end tag in the stack.\n          unexpectedCloseTagDetected = true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_consumeAttr\",\n    value: function _consumeAttr(attrName) {\n      var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n      var attrEnd = attrName.sourceSpan.end; // Consume any quote\n\n      if (this._peek.type === 15\n      /* ATTR_QUOTE */\n      ) {\n        this._advance();\n      } // Consume the attribute value\n\n\n      var value = '';\n      var valueTokens = [];\n      var valueStartSpan = undefined;\n      var valueEnd = undefined; // NOTE: We need to use a new variable `nextTokenType` here to hide the actual type of\n      // `_peek.type` from TS. Otherwise TS will narrow the type of `_peek.type` preventing it from\n      // being able to consider `ATTR_VALUE_INTERPOLATION` as an option. This is because TS is not\n      // able to see that `_advance()` will actually mutate `_peek`.\n\n      var nextTokenType = this._peek.type;\n\n      if (nextTokenType === 16\n      /* ATTR_VALUE_TEXT */\n      ) {\n        valueStartSpan = this._peek.sourceSpan;\n        valueEnd = this._peek.sourceSpan.end;\n\n        while (this._peek.type === 16\n        /* ATTR_VALUE_TEXT */\n        || this._peek.type === 17\n        /* ATTR_VALUE_INTERPOLATION */\n        || this._peek.type === 9\n        /* ENCODED_ENTITY */\n        ) {\n          var valueToken = this._advance();\n\n          valueTokens.push(valueToken);\n\n          if (valueToken.type === 17\n          /* ATTR_VALUE_INTERPOLATION */\n          ) {\n            // For backward compatibility we decode HTML entities that appear in interpolation\n            // expressions. This is arguably a bug, but it could be a considerable breaking change to\n            // fix it. It should be addressed in a larger project to refactor the entire parser/lexer\n            // chain after View Engine has been removed.\n            value += valueToken.parts.join('').replace(/&([^;]+);/g, decodeEntity);\n          } else if (valueToken.type === 9\n          /* ENCODED_ENTITY */\n          ) {\n            value += valueToken.parts[0];\n          } else {\n            value += valueToken.parts.join('');\n          }\n\n          valueEnd = attrEnd = valueToken.sourceSpan.end;\n        }\n      } // Consume any quote\n\n\n      if (this._peek.type === 15\n      /* ATTR_QUOTE */\n      ) {\n        var quoteToken = this._advance();\n\n        attrEnd = quoteToken.sourceSpan.end;\n      }\n\n      var valueSpan = valueStartSpan && valueEnd && new ParseSourceSpan(valueStartSpan.start, valueEnd, valueStartSpan.fullStart);\n      return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, attrEnd, attrName.sourceSpan.fullStart), attrName.sourceSpan, valueSpan, valueTokens.length > 0 ? valueTokens : undefined, undefined);\n    }\n  }, {\n    key: \"_getParentElement\",\n    value: function _getParentElement() {\n      return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n    }\n  }, {\n    key: \"_addToParent\",\n    value: function _addToParent(node) {\n      var parent = this._getParentElement();\n\n      if (parent != null) {\n        parent.children.push(node);\n      } else {\n        this.rootNodes.push(node);\n      }\n    }\n  }, {\n    key: \"_getElementFullName\",\n    value: function _getElementFullName(prefix, localName, parentElement) {\n      if (prefix === '') {\n        prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';\n\n        if (prefix === '' && parentElement != null) {\n          var parentTagName = splitNsName(parentElement.name)[1];\n          var parentTagDefinition = this.getTagDefinition(parentTagName);\n\n          if (!parentTagDefinition.preventNamespaceInheritance) {\n            prefix = getNsPrefix(parentElement.name);\n          }\n        }\n      }\n\n      return mergeNsAndName(prefix, localName);\n    }\n  }]);\n\n  return _TreeBuilder;\n}();\n\nfunction lastOnStack(stack, element) {\n  return stack.length > 0 && stack[stack.length - 1] === element;\n}\n/**\n * Decode the `entity` string, which we believe is the contents of an HTML entity.\n *\n * If the string is not actually a valid/known entity then just return the original `match` string.\n */\n\n\nfunction decodeEntity(match, entity) {\n  if (NAMED_ENTITIES[entity] !== undefined) {\n    return NAMED_ENTITIES[entity] || match;\n  }\n\n  if (/^#x[a-f0-9]+$/i.test(entity)) {\n    return String.fromCodePoint(parseInt(entity.slice(2), 16));\n  }\n\n  if (/^#\\d+$/.test(entity)) {\n    return String.fromCodePoint(parseInt(entity.slice(1), 10));\n  }\n\n  return match;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar HtmlParser = /*#__PURE__*/function (_Parser) {\n  _inherits(HtmlParser, _Parser);\n\n  var _super87 = _createSuper(HtmlParser);\n\n  function HtmlParser() {\n    _classCallCheck(this, HtmlParser);\n\n    return _super87.call(this, getHtmlTagDefinition);\n  }\n\n  _createClass(HtmlParser, [{\n    key: \"parse\",\n    value: function parse(source, url, options) {\n      return _get(_getPrototypeOf(HtmlParser.prototype), \"parse\", this).call(this, source, url, options);\n    }\n  }]);\n\n  return HtmlParser;\n}(Parser);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\nvar SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']); // Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\nvar WS_CHARS = \" \\f\\n\\r\\t\\x0B\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF\";\nvar NO_WS_REGEXP = new RegExp(\"[^\".concat(WS_CHARS, \"]\"));\nvar WS_REPLACE_REGEXP = new RegExp(\"[\".concat(WS_CHARS, \"]{2,}\"), 'g');\n\nfunction hasPreserveWhitespacesAttr(attrs) {\n  return attrs.some(function (attr) {\n    return attr.name === PRESERVE_WS_ATTR_NAME;\n  });\n}\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here.\n */\n\n\nfunction replaceNgsp(value) {\n  // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n  return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\n\n\nvar WhitespaceVisitor = /*#__PURE__*/function () {\n  function WhitespaceVisitor() {\n    _classCallCheck(this, WhitespaceVisitor);\n  }\n\n  _createClass(WhitespaceVisitor, [{\n    key: \"visitElement\",\n    value: function visitElement(element, context) {\n      if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n        // don't descent into elements where we need to preserve whitespaces\n        // but still visit all attributes to eliminate one used as a market to preserve WS\n        return new Element(element.name, visitAll(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n      }\n\n      return new Element(element.name, element.attrs, visitAllWithSiblings(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    }\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute, context) {\n      return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      var isNotBlank = text.value.match(NO_WS_REGEXP);\n      var hasExpansionSibling = context && (context.prev instanceof Expansion || context.next instanceof Expansion);\n\n      if (isNotBlank || hasExpansionSibling) {\n        // Process the whitespace in the tokens of this Text node\n        var tokens = text.tokens.map(function (token) {\n          return token.type === 5\n          /* TEXT */\n          ? createWhitespaceProcessedTextToken(token) : token;\n        }); // Process the whitespace of the value of this Text node\n\n        var value = processWhitespace(text.value);\n        return new Text(value, text.sourceSpan, tokens, text.i18n);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment, context) {\n      return comment;\n    }\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(expansion, context) {\n      return expansion;\n    }\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(expansionCase, context) {\n      return expansionCase;\n    }\n  }]);\n\n  return WhitespaceVisitor;\n}();\n\nfunction createWhitespaceProcessedTextToken(_ref7) {\n  var type = _ref7.type,\n      parts = _ref7.parts,\n      sourceSpan = _ref7.sourceSpan;\n  return {\n    type: type,\n    parts: [processWhitespace(parts[0])],\n    sourceSpan: sourceSpan\n  };\n}\n\nfunction processWhitespace(text) {\n  return replaceNgsp(text).replace(WS_REPLACE_REGEXP, ' ');\n}\n\nfunction removeWhitespaces(htmlAstWithErrors) {\n  return new ParseTreeResult(visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);\n}\n\nfunction visitAllWithSiblings(visitor, nodes) {\n  var result = [];\n  nodes.forEach(function (ast, i) {\n    var context = {\n      prev: nodes[i - 1],\n      next: nodes[i + 1]\n    };\n    var astResult = ast.visit(visitor, context);\n\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction mapEntry(key, value) {\n  return {\n    key: key,\n    value: value,\n    quoted: false\n  };\n}\n\nfunction mapLiteral(obj) {\n  var quoted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return literalMap(Object.keys(obj).map(function (key) {\n    return {\n      key: key,\n      quoted: quoted,\n      value: obj[key]\n    };\n  }));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!\n//                               Reach out to mprobst for details.\n//\n// =================================================================================================\n\n/** Map from tagName|propertyName to SecurityContext. Properties applying to all tags use '*'. */\n\n\nvar _SECURITY_SCHEMA;\n\nfunction SECURITY_SCHEMA() {\n  if (!_SECURITY_SCHEMA) {\n    _SECURITY_SCHEMA = {}; // Case is insignificant below, all element and attribute names are lower-cased for lookup.\n\n    registerContext(SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);\n    registerContext(SecurityContext.STYLE, ['*|style']); // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\n\n    registerContext(SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src']);\n    registerContext(SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);\n  }\n\n  return _SECURITY_SCHEMA;\n}\n\nfunction registerContext(ctx, specs) {\n  var _iterator11 = _createForOfIteratorHelper(specs),\n      _step11;\n\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var spec = _step11.value;\n      _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar ElementSchemaRegistry = function ElementSchemaRegistry() {\n  _classCallCheck(this, ElementSchemaRegistry);\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar EVENT = 'event';\nvar BOOLEAN = 'boolean';\nvar NUMBER = 'number';\nvar STRING = 'string';\nvar OBJECT = 'object';\n/**\n * This array represents the DOM schema. It encodes inheritance, properties, and events.\n *\n * ## Overview\n *\n * Each line represents one kind of element. The `element_inheritance` and properties are joined\n * using `element_inheritance|properties` syntax.\n *\n * ## Element Inheritance\n *\n * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\n * Here the individual elements are separated by `,` (commas). Every element in the list\n * has identical properties.\n *\n * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\n * specified then `\"\"` (blank) element is assumed.\n *\n * NOTE: The blank element inherits from root `[Element]` element, the super element of all\n * elements.\n *\n * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\n *\n * ## Properties\n *\n * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\n * by a special character designating its type:\n *\n * - (no prefix): property is a string.\n * - `*`: property represents an event.\n * - `!`: property is a boolean.\n * - `#`: property is a number.\n * - `%`: property is an object.\n *\n * ## Query\n *\n * The class creates an internal squas representation which allows to easily answer the query of\n * if a given property exist on a given element.\n *\n * NOTE: We don't yet support querying for types or events.\n * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\n *       see dom_element_schema_registry_spec.ts\n */\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!\n//\n// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in\n// dom_security_schema.ts. Reach out to mprobst & rjamet for details.\n//\n// =================================================================================================\n\nvar SCHEMA = ['[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +\n/* added manually to avoid breaking changes */\n',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored', '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume', ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username', 'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username', 'audio^media|', 'br^[HTMLElement]|clear', 'base^[HTMLElement]|href,target', 'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^[HTMLElement]|#height,#width', 'content^[HTMLElement]|select', 'dl^[HTMLElement]|!compact', 'datalist^[HTMLElement]|', 'details^[HTMLElement]|!open', 'dialog^[HTMLElement]|!open,returnValue', 'dir^[HTMLElement]|!compact', 'div^[HTMLElement]|align', 'embed^[HTMLElement]|align,height,name,src,type,width', 'fieldset^[HTMLElement]|!disabled,name', 'font^[HTMLElement]|color,face,size', 'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^[HTMLElement]|align,color,!noShade,size,width', 'head^[HTMLElement]|', 'h1,h2,h3,h4,h5,h6^[HTMLElement]|align', 'html^[HTMLElement]|version', 'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'li^[HTMLElement]|type,#value', 'label^[HTMLElement]|htmlFor', 'legend^[HTMLElement]|align', 'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type', 'map^[HTMLElement]|name', 'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^[HTMLElement]|!compact', 'meta^[HTMLElement]|content,httpEquiv,name,scheme', 'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value', 'ins,del^[HTMLElement]|cite,dateTime', 'ol^[HTMLElement]|!compact,!reversed,#start,type', 'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^[HTMLElement]|!disabled,label', 'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value', 'output^[HTMLElement]|defaultValue,%htmlFor,name,value', 'p^[HTMLElement]|align', 'param^[HTMLElement]|name,type,value,valueType', 'picture^[HTMLElement]|', 'pre^[HTMLElement]|#width', 'progress^[HTMLElement]|#max,#value', 'q,blockquote,cite^[HTMLElement]|', 'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type', 'select^[HTMLElement]|autocomplete,!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'shadow^[HTMLElement]|', 'slot^[HTMLElement]|name', 'source^[HTMLElement]|media,sizes,src,srcset,type', 'span^[HTMLElement]|', 'style^[HTMLElement]|!disabled,media,type', 'caption^[HTMLElement]|align', 'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width', 'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign', 'template^[HTMLElement]|', 'textarea^[HTMLElement]|autocapitalize,autocomplete,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'title^[HTMLElement]|text', 'track^[HTMLElement]|!default,kind,label,src,srclang', 'ul^[HTMLElement]|!compact,type', 'unknown^[HTMLElement]|', 'video^media|#height,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan', 'data^[HTMLElement]|value', 'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name', 'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default', 'summary^[HTMLElement]|', 'time^[HTMLElement]|dateTime', ':svg:cursor^:svg:|'];\nvar _ATTR_TO_PROP = {\n  'class': 'className',\n  'for': 'htmlFor',\n  'formaction': 'formAction',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex'\n}; // Invert _ATTR_TO_PROP.\n\nvar _PROP_TO_ATTR = Object.keys(_ATTR_TO_PROP).reduce(function (inverted, attr) {\n  inverted[_ATTR_TO_PROP[attr]] = attr;\n  return inverted;\n}, {});\n\nvar DomElementSchemaRegistry = /*#__PURE__*/function (_ElementSchemaRegistr) {\n  _inherits(DomElementSchemaRegistry, _ElementSchemaRegistr);\n\n  var _super88 = _createSuper(DomElementSchemaRegistry);\n\n  function DomElementSchemaRegistry() {\n    var _this144;\n\n    _classCallCheck(this, DomElementSchemaRegistry);\n\n    _this144 = _super88.call(this);\n    _this144._schema = {}; // We don't allow binding to events for security reasons. Allowing event bindings would almost\n    // certainly introduce bad XSS vulnerabilities. Instead, we store events in a separate schema.\n\n    _this144._eventSchema = {};\n    SCHEMA.forEach(function (encodedType) {\n      var type = {};\n      var events = new Set();\n\n      var _encodedType$split = encodedType.split('|'),\n          _encodedType$split2 = _slicedToArray(_encodedType$split, 2),\n          strType = _encodedType$split2[0],\n          strProperties = _encodedType$split2[1];\n\n      var properties = strProperties.split(',');\n\n      var _strType$split = strType.split('^'),\n          _strType$split2 = _slicedToArray(_strType$split, 2),\n          typeNames = _strType$split2[0],\n          superName = _strType$split2[1];\n\n      typeNames.split(',').forEach(function (tag) {\n        _this144._schema[tag.toLowerCase()] = type;\n        _this144._eventSchema[tag.toLowerCase()] = events;\n      });\n\n      var superType = superName && _this144._schema[superName.toLowerCase()];\n\n      if (superType) {\n        Object.keys(superType).forEach(function (prop) {\n          type[prop] = superType[prop];\n        });\n\n        var _iterator12 = _createForOfIteratorHelper(_this144._eventSchema[superName.toLowerCase()]),\n            _step12;\n\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var superEvent = _step12.value;\n            events.add(superEvent);\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n      }\n\n      properties.forEach(function (property) {\n        if (property.length > 0) {\n          switch (property[0]) {\n            case '*':\n              events.add(property.substring(1));\n              break;\n\n            case '!':\n              type[property.substring(1)] = BOOLEAN;\n              break;\n\n            case '#':\n              type[property.substring(1)] = NUMBER;\n              break;\n\n            case '%':\n              type[property.substring(1)] = OBJECT;\n              break;\n\n            default:\n              type[property] = STRING;\n          }\n        }\n      });\n    });\n    return _this144;\n  }\n\n  _createClass(DomElementSchemaRegistry, [{\n    key: \"hasProperty\",\n    value: function hasProperty(tagName, propName, schemaMetas) {\n      if (schemaMetas.some(function (schema) {\n        return schema.name === NO_ERRORS_SCHEMA.name;\n      })) {\n        return true;\n      }\n\n      if (tagName.indexOf('-') > -1) {\n        if (isNgContainer(tagName) || isNgContent(tagName)) {\n          return false;\n        }\n\n        if (schemaMetas.some(function (schema) {\n          return schema.name === CUSTOM_ELEMENTS_SCHEMA.name;\n        })) {\n          // Can't tell now as we don't know which properties a custom element will get\n          // once it is instantiated\n          return true;\n        }\n      }\n\n      var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];\n\n      return !!elementProperties[propName];\n    }\n  }, {\n    key: \"hasElement\",\n    value: function hasElement(tagName, schemaMetas) {\n      if (schemaMetas.some(function (schema) {\n        return schema.name === NO_ERRORS_SCHEMA.name;\n      })) {\n        return true;\n      }\n\n      if (tagName.indexOf('-') > -1) {\n        if (isNgContainer(tagName) || isNgContent(tagName)) {\n          return true;\n        }\n\n        if (schemaMetas.some(function (schema) {\n          return schema.name === CUSTOM_ELEMENTS_SCHEMA.name;\n        })) {\n          // Allow any custom elements\n          return true;\n        }\n      }\n\n      return !!this._schema[tagName.toLowerCase()];\n    }\n    /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is based on a list of allowed tags|attributes. All attributes in the schema\n     * above are assumed to have the 'NONE' security context, i.e. that they are safe inert\n     * string values. Only specific well known attack vectors are assigned their appropriate context.\n     */\n\n  }, {\n    key: \"securityContext\",\n    value: function securityContext(tagName, propName, isAttribute) {\n      if (isAttribute) {\n        // NB: For security purposes, use the mapped property name, not the attribute name.\n        propName = this.getMappedPropName(propName);\n      } // Make sure comparisons are case insensitive, so that case differences between attribute and\n      // property names do not have a security impact.\n\n\n      tagName = tagName.toLowerCase();\n      propName = propName.toLowerCase();\n      var ctx = SECURITY_SCHEMA()[tagName + '|' + propName];\n\n      if (ctx) {\n        return ctx;\n      }\n\n      ctx = SECURITY_SCHEMA()['*|' + propName];\n      return ctx ? ctx : SecurityContext.NONE;\n    }\n  }, {\n    key: \"getMappedPropName\",\n    value: function getMappedPropName(propName) {\n      return _ATTR_TO_PROP[propName] || propName;\n    }\n  }, {\n    key: \"getDefaultComponentElementName\",\n    value: function getDefaultComponentElementName() {\n      return 'ng-component';\n    }\n  }, {\n    key: \"validateProperty\",\n    value: function validateProperty(name) {\n      if (name.toLowerCase().startsWith('on')) {\n        var msg = \"Binding to event property '\".concat(name, \"' is disallowed for security reasons, \") + \"please use (\".concat(name.slice(2), \")=...\") + \"\\nIf '\".concat(name, \"' is a directive input, make sure the directive is imported by the\") + \" current module.\";\n        return {\n          error: true,\n          msg: msg\n        };\n      } else {\n        return {\n          error: false\n        };\n      }\n    }\n  }, {\n    key: \"validateAttribute\",\n    value: function validateAttribute(name) {\n      if (name.toLowerCase().startsWith('on')) {\n        var msg = \"Binding to event attribute '\".concat(name, \"' is disallowed for security reasons, \") + \"please use (\".concat(name.slice(2), \")=...\");\n        return {\n          error: true,\n          msg: msg\n        };\n      } else {\n        return {\n          error: false\n        };\n      }\n    }\n  }, {\n    key: \"allKnownElementNames\",\n    value: function allKnownElementNames() {\n      return Object.keys(this._schema);\n    }\n  }, {\n    key: \"allKnownAttributesOfElement\",\n    value: function allKnownAttributesOfElement(tagName) {\n      var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown']; // Convert properties to attributes.\n\n\n      return Object.keys(elementProperties).map(function (prop) {\n        var _a;\n\n        return (_a = _PROP_TO_ATTR[prop]) !== null && _a !== void 0 ? _a : prop;\n      });\n    }\n  }, {\n    key: \"allKnownEventsOfElement\",\n    value: function allKnownEventsOfElement(tagName) {\n      var _a;\n\n      return Array.from((_a = this._eventSchema[tagName.toLowerCase()]) !== null && _a !== void 0 ? _a : []);\n    }\n  }, {\n    key: \"normalizeAnimationStyleProperty\",\n    value: function normalizeAnimationStyleProperty(propName) {\n      return dashCaseToCamelCase(propName);\n    }\n  }, {\n    key: \"normalizeAnimationStyleValue\",\n    value: function normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\n      var unit = '';\n      var strVal = val.toString().trim();\n      var errorMsg = null;\n\n      if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {\n        if (typeof val === 'number') {\n          unit = 'px';\n        } else {\n          var valAndSuffixMatch = val.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n\n          if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n            errorMsg = \"Please provide a CSS unit value for \".concat(userProvidedProp, \":\").concat(val);\n          }\n        }\n      }\n\n      return {\n        error: errorMsg,\n        value: strVal + unit\n      };\n    }\n  }]);\n\n  return DomElementSchemaRegistry;\n}(ElementSchemaRegistry);\n\nfunction _isPixelDimensionStyle(prop) {\n  switch (prop) {\n    case 'width':\n    case 'height':\n    case 'minWidth':\n    case 'minHeight':\n    case 'maxWidth':\n    case 'maxHeight':\n    case 'left':\n    case 'top':\n    case 'bottom':\n    case 'right':\n    case 'fontSize':\n    case 'outlineWidth':\n    case 'outlineOffset':\n    case 'paddingTop':\n    case 'paddingLeft':\n    case 'paddingBottom':\n    case 'paddingRight':\n    case 'marginTop':\n    case 'marginLeft':\n    case 'marginBottom':\n    case 'marginRight':\n    case 'borderRadius':\n    case 'borderWidth':\n    case 'borderTopWidth':\n    case 'borderLeftWidth':\n    case 'borderRightWidth':\n    case 'borderBottomWidth':\n    case 'textIndent':\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Set of tagName|propertyName corresponding to Trusted Types sinks. Properties applying to all\n * tags use '*'.\n *\n * Extracted from, and should be kept in sync with\n * https://w3c.github.io/webappsec-trusted-types/dist/spec/#integrations\n */\n\n\nvar TRUSTED_TYPES_SINKS = new Set([// NOTE: All strings in this set *must* be lowercase!\n// TrustedHTML\n'iframe|srcdoc', '*|innerhtml', '*|outerhtml', // NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.\n// TrustedScriptURL\n'embed|src', 'object|codebase', 'object|data']);\n/**\n * isTrustedTypesSink returns true if the given property on the given DOM tag is a Trusted Types\n * sink. In that case, use `ElementSchemaRegistry.securityContext` to determine which particular\n * Trusted Type is required for values passed to the sink:\n * - SecurityContext.HTML corresponds to TrustedHTML\n * - SecurityContext.RESOURCE_URL corresponds to TrustedScriptURL\n */\n\nfunction isTrustedTypesSink(tagName, propName) {\n  // Make sure comparisons are case insensitive, so that case differences between attribute and\n  // property names do not have a security impact.\n  tagName = tagName.toLowerCase();\n  propName = propName.toLowerCase();\n  return TRUSTED_TYPES_SINKS.has(tagName + '|' + propName) || TRUSTED_TYPES_SINKS.has('*|' + propName);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar PROPERTY_PARTS_SEPARATOR = '.';\nvar ATTRIBUTE_PREFIX = 'attr';\nvar CLASS_PREFIX = 'class';\nvar STYLE_PREFIX = 'style';\nvar TEMPLATE_ATTR_PREFIX$1 = '*';\nvar ANIMATE_PROP_PREFIX = 'animate-';\n/**\n * Parses bindings in templates and in the directive host area.\n */\n\nvar BindingParser = /*#__PURE__*/function () {\n  function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, errors) {\n    _classCallCheck(this, BindingParser);\n\n    this._exprParser = _exprParser;\n    this._interpolationConfig = _interpolationConfig;\n    this._schemaRegistry = _schemaRegistry;\n    this.errors = errors;\n  }\n\n  _createClass(BindingParser, [{\n    key: \"interpolationConfig\",\n    get: function get() {\n      return this._interpolationConfig;\n    }\n  }, {\n    key: \"createBoundHostProperties\",\n    value: function createBoundHostProperties(properties, sourceSpan) {\n      var boundProps = [];\n\n      for (var _i7 = 0, _Object$keys2 = Object.keys(properties); _i7 < _Object$keys2.length; _i7++) {\n        var propName = _Object$keys2[_i7];\n        var expression = properties[propName];\n\n        if (typeof expression === 'string') {\n          this.parsePropertyBinding(propName, expression, true, sourceSpan, sourceSpan.start.offset, undefined, [], // Use the `sourceSpan` for  `keySpan`. This isn't really accurate, but neither is the\n          // sourceSpan, as it represents the sourceSpan of the host itself rather than the\n          // source of the host binding (which doesn't exist in the template). Regardless,\n          // neither of these values are used in Ivy but are only here to satisfy the function\n          // signature. This should likely be refactored in the future so that `sourceSpan`\n          // isn't being used inaccurately.\n          boundProps, sourceSpan);\n        } else {\n          this._reportError(\"Value of the host property binding \\\"\".concat(propName, \"\\\" needs to be a string representing an expression but got \\\"\").concat(expression, \"\\\" (\").concat(typeof expression, \")\"), sourceSpan);\n        }\n      }\n\n      return boundProps;\n    }\n  }, {\n    key: \"createDirectiveHostPropertyAsts\",\n    value: function createDirectiveHostPropertyAsts(hostProperties, elementSelector, sourceSpan) {\n      var _this145 = this;\n\n      var boundProps = this.createBoundHostProperties(hostProperties, sourceSpan);\n      return boundProps && boundProps.map(function (prop) {\n        return _this145.createBoundElementProperty(elementSelector, prop);\n      });\n    }\n  }, {\n    key: \"createDirectiveHostEventAsts\",\n    value: function createDirectiveHostEventAsts(hostListeners, sourceSpan) {\n      var targetEvents = [];\n\n      for (var _i8 = 0, _Object$keys3 = Object.keys(hostListeners); _i8 < _Object$keys3.length; _i8++) {\n        var propName = _Object$keys3[_i8];\n        var expression = hostListeners[propName];\n\n        if (typeof expression === 'string') {\n          // Use the `sourceSpan` for  `keySpan` and `handlerSpan`. This isn't really accurate, but\n          // neither is the `sourceSpan`, as it represents the `sourceSpan` of the host itself\n          // rather than the source of the host binding (which doesn't exist in the template).\n          // Regardless, neither of these values are used in Ivy but are only here to satisfy the\n          // function signature. This should likely be refactored in the future so that `sourceSpan`\n          // isn't being used inaccurately.\n          this.parseEvent(propName, expression, sourceSpan, sourceSpan, [], targetEvents, sourceSpan);\n        } else {\n          this._reportError(\"Value of the host listener \\\"\".concat(propName, \"\\\" needs to be a string representing an expression but got \\\"\").concat(expression, \"\\\" (\").concat(typeof expression, \")\"), sourceSpan);\n        }\n      }\n\n      return targetEvents;\n    }\n  }, {\n    key: \"parseInterpolation\",\n    value: function parseInterpolation(value, sourceSpan) {\n      var sourceInfo = sourceSpan.start.toString();\n      var absoluteOffset = sourceSpan.fullStart.offset;\n\n      try {\n        var ast = this._exprParser.parseInterpolation(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n\n        if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n        return ast;\n      } catch (e) {\n        this._reportError(\"\".concat(e), sourceSpan);\n\n        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n      }\n    }\n    /**\n     * Similar to `parseInterpolation`, but treats the provided string as a single expression\n     * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\n     * This is used for parsing the switch expression in ICUs.\n     */\n\n  }, {\n    key: \"parseInterpolationExpression\",\n    value: function parseInterpolationExpression(expression, sourceSpan) {\n      var sourceInfo = sourceSpan.start.toString();\n      var absoluteOffset = sourceSpan.start.offset;\n\n      try {\n        var ast = this._exprParser.parseInterpolationExpression(expression, sourceInfo, absoluteOffset);\n\n        if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n        return ast;\n      } catch (e) {\n        this._reportError(\"\".concat(e), sourceSpan);\n\n        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n      }\n    }\n    /**\n     * Parses the bindings in a microsyntax expression, and converts them to\n     * `ParsedProperty` or `ParsedVariable`.\n     *\n     * @param tplKey template binding name\n     * @param tplValue template binding value\n     * @param sourceSpan span of template binding relative to entire the template\n     * @param absoluteValueOffset start of the tplValue relative to the entire template\n     * @param targetMatchableAttrs potential attributes to match in the template\n     * @param targetProps target property bindings in the template\n     * @param targetVars target variables in the template\n     */\n\n  }, {\n    key: \"parseInlineTemplateBinding\",\n    value: function parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars, isIvyAst) {\n      var absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX$1.length;\n\n      var bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);\n\n      var _iterator13 = _createForOfIteratorHelper(bindings),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var binding = _step13.value;\n          // sourceSpan is for the entire HTML attribute. bindingSpan is for a particular\n          // binding within the microsyntax expression so it's more narrow than sourceSpan.\n          var bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);\n          var key = binding.key.source;\n          var keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);\n\n          if (binding instanceof VariableBinding) {\n            var value = binding.value ? binding.value.source : '$implicit';\n            var valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : undefined;\n            targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));\n          } else if (binding.value) {\n            var srcSpan = isIvyAst ? bindingSpan : sourceSpan;\n\n            var _valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);\n\n            this._parsePropertyAst(key, binding.value, srcSpan, keySpan, _valueSpan, targetMatchableAttrs, targetProps);\n          } else {\n            targetMatchableAttrs.push([key, ''\n            /* value */\n            ]); // Since this is a literal attribute with no RHS, source span should be\n            // just the key span.\n\n            this.parseLiteralAttr(key, null\n            /* value */\n            , keySpan, absoluteValueOffset, undefined\n            /* valueSpan */\n            , targetMatchableAttrs, targetProps, keySpan);\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n    }\n    /**\n     * Parses the bindings in a microsyntax expression, e.g.\n     * ```\n     *    <tag *tplKey=\"let value1 = prop; let value2 = localVar\">\n     * ```\n     *\n     * @param tplKey template binding name\n     * @param tplValue template binding value\n     * @param sourceSpan span of template binding relative to entire the template\n     * @param absoluteKeyOffset start of the `tplKey`\n     * @param absoluteValueOffset start of the `tplValue`\n     */\n\n  }, {\n    key: \"_parseTemplateBindings\",\n    value: function _parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {\n      var _this146 = this;\n\n      var sourceInfo = sourceSpan.start.toString();\n\n      try {\n        var bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo, absoluteKeyOffset, absoluteValueOffset);\n\n        this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n\n        bindingsResult.warnings.forEach(function (warning) {\n          _this146._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);\n        });\n        return bindingsResult.templateBindings;\n      } catch (e) {\n        this._reportError(\"\".concat(e), sourceSpan);\n\n        return [];\n      }\n    }\n  }, {\n    key: \"parseLiteralAttr\",\n    value: function parseLiteralAttr(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, // TODO(atscott): keySpan is only optional here so VE template parser implementation does not\n    // have to change This should be required when VE is removed.\n    targetProps, keySpan) {\n      if (isAnimationLabel(name)) {\n        name = name.substring(1);\n\n        if (keySpan !== undefined) {\n          keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n        }\n\n        if (value) {\n          this._reportError(\"Assigning animation triggers via @prop=\\\"exp\\\" attributes with an expression is invalid.\" + \" Use property bindings (e.g. [@prop]=\\\"exp\\\") or use an attribute without a value (e.g. @prop) instead.\", sourceSpan, ParseErrorLevel.ERROR);\n        }\n\n        this._parseAnimation(name, value, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n      } else {\n        targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, '', absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, keySpan, valueSpan));\n      }\n    }\n  }, {\n    key: \"parsePropertyBinding\",\n    value: function parsePropertyBinding(name, expression, isHost, sourceSpan, absoluteOffset, valueSpan, // TODO(atscott): keySpan is only optional here so VE template parser implementation does not\n    // have to change This should be required when VE is removed.\n    targetMatchableAttrs, targetProps, keySpan) {\n      if (name.length === 0) {\n        this._reportError(\"Property name is missing in binding\", sourceSpan);\n      }\n\n      var isAnimationProp = false;\n\n      if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n        isAnimationProp = true;\n        name = name.substring(ANIMATE_PROP_PREFIX.length);\n\n        if (keySpan !== undefined) {\n          keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + ANIMATE_PROP_PREFIX.length, keySpan.end.offset));\n        }\n      } else if (isAnimationLabel(name)) {\n        isAnimationProp = true;\n        name = name.substring(1);\n\n        if (keySpan !== undefined) {\n          keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n        }\n      }\n\n      if (isAnimationProp) {\n        this._parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n      } else {\n        this._parsePropertyAst(name, this._parseBinding(expression, isHost, valueSpan || sourceSpan, absoluteOffset), sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n      }\n    }\n  }, {\n    key: \"parsePropertyInterpolation\",\n    value: function parsePropertyInterpolation(name, value, sourceSpan, valueSpan, targetMatchableAttrs, // TODO(atscott): keySpan is only optional here so VE template parser implementation does not\n    // have to change This should be required when VE is removed.\n    targetProps, keySpan) {\n      var expr = this.parseInterpolation(value, valueSpan || sourceSpan);\n\n      if (expr) {\n        this._parsePropertyAst(name, expr, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_parsePropertyAst\",\n    value: function _parsePropertyAst(name, ast, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps) {\n      targetMatchableAttrs.push([name, ast.source]);\n      targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.DEFAULT, sourceSpan, keySpan, valueSpan));\n    }\n  }, {\n    key: \"_parseAnimation\",\n    value: function _parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps) {\n      if (name.length === 0) {\n        this._reportError('Animation trigger is missing', sourceSpan);\n      } // This will occur when a @trigger is not paired with an expression.\n      // For animations it is valid to not have an expression since */void\n      // states will be applied by angular when the element is attached/detached\n\n\n      var ast = this._parseBinding(expression || 'undefined', false, valueSpan || sourceSpan, absoluteOffset);\n\n      targetMatchableAttrs.push([name, ast.source]);\n      targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan, keySpan, valueSpan));\n    }\n  }, {\n    key: \"_parseBinding\",\n    value: function _parseBinding(value, isHostBinding, sourceSpan, absoluteOffset) {\n      var sourceInfo = (sourceSpan && sourceSpan.start || '(unknown)').toString();\n\n      try {\n        var ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n        if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n        return ast;\n      } catch (e) {\n        this._reportError(\"\".concat(e), sourceSpan);\n\n        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n      }\n    }\n  }, {\n    key: \"createBoundElementProperty\",\n    value: function createBoundElementProperty(elementSelector, boundProp) {\n      var skipValidation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var mapPropertyName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n      if (boundProp.isAnimation) {\n        return new BoundElementProperty(boundProp.name, 4\n        /* Animation */\n        , SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);\n      }\n\n      var unit = null;\n      var bindingType = undefined;\n      var boundPropertyName = null;\n      var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n      var securityContexts = undefined; // Check for special cases (prefix style, attr, class)\n\n      if (parts.length > 1) {\n        if (parts[0] == ATTRIBUTE_PREFIX) {\n          boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);\n\n          if (!skipValidation) {\n            this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n          }\n\n          securityContexts = _calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);\n          var nsSeparatorIdx = boundPropertyName.indexOf(':');\n\n          if (nsSeparatorIdx > -1) {\n            var ns = boundPropertyName.substring(0, nsSeparatorIdx);\n            var name = boundPropertyName.substring(nsSeparatorIdx + 1);\n            boundPropertyName = mergeNsAndName(ns, name);\n          }\n\n          bindingType = 1\n          /* Attribute */\n          ;\n        } else if (parts[0] == CLASS_PREFIX) {\n          boundPropertyName = parts[1];\n          bindingType = 2\n          /* Class */\n          ;\n          securityContexts = [SecurityContext.NONE];\n        } else if (parts[0] == STYLE_PREFIX) {\n          unit = parts.length > 2 ? parts[2] : null;\n          boundPropertyName = parts[1];\n          bindingType = 3\n          /* Style */\n          ;\n          securityContexts = [SecurityContext.STYLE];\n        }\n      } // If not a special case, use the full property name\n\n\n      if (boundPropertyName === null) {\n        var mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);\n\n        boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;\n        securityContexts = _calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);\n        bindingType = 0\n        /* Property */\n        ;\n\n        if (!skipValidation) {\n          this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);\n        }\n      }\n\n      return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);\n    } // TODO: keySpan should be required but was made optional to avoid changing VE parser.\n\n  }, {\n    key: \"parseEvent\",\n    value: function parseEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {\n      if (name.length === 0) {\n        this._reportError(\"Event name is missing in binding\", sourceSpan);\n      }\n\n      if (isAnimationLabel(name)) {\n        name = name.substr(1);\n\n        if (keySpan !== undefined) {\n          keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n        }\n\n        this._parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan);\n      } else {\n        this._parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan);\n      }\n    }\n  }, {\n    key: \"calcPossibleSecurityContexts\",\n    value: function calcPossibleSecurityContexts(selector, propName, isAttribute) {\n      var prop = this._schemaRegistry.getMappedPropName(propName);\n\n      return _calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);\n    }\n  }, {\n    key: \"_parseAnimationEvent\",\n    value: function _parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan) {\n      var matches = splitAtPeriod(name, [name, '']);\n      var eventName = matches[0];\n      var phase = matches[1].toLowerCase();\n\n      var ast = this._parseAction(expression, handlerSpan);\n\n      targetEvents.push(new ParsedEvent(eventName, phase, 1\n      /* Animation */\n      , ast, sourceSpan, handlerSpan, keySpan));\n\n      if (eventName.length === 0) {\n        this._reportError(\"Animation event name is missing in binding\", sourceSpan);\n      }\n\n      if (phase) {\n        if (phase !== 'start' && phase !== 'done') {\n          this._reportError(\"The provided animation output phase value \\\"\".concat(phase, \"\\\" for \\\"@\").concat(eventName, \"\\\" is not supported (use start or done)\"), sourceSpan);\n        }\n      } else {\n        this._reportError(\"The animation trigger output event (@\".concat(eventName, \") is missing its phase value name (start or done are currently supported)\"), sourceSpan);\n      }\n    }\n  }, {\n    key: \"_parseRegularEvent\",\n    value: function _parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {\n      // long format: 'target: eventName'\n      var _splitAtColon3 = splitAtColon(name, [null, name]),\n          _splitAtColon4 = _slicedToArray(_splitAtColon3, 2),\n          target = _splitAtColon4[0],\n          eventName = _splitAtColon4[1];\n\n      var ast = this._parseAction(expression, handlerSpan);\n\n      targetMatchableAttrs.push([name, ast.source]);\n      targetEvents.push(new ParsedEvent(eventName, target, 0\n      /* Regular */\n      , ast, sourceSpan, handlerSpan, keySpan)); // Don't detect directives for event names for now,\n      // so don't add the event name to the matchableAttrs\n    }\n  }, {\n    key: \"_parseAction\",\n    value: function _parseAction(value, sourceSpan) {\n      var sourceInfo = (sourceSpan && sourceSpan.start || '(unknown').toString();\n      var absoluteOffset = sourceSpan && sourceSpan.start ? sourceSpan.start.offset : 0;\n\n      try {\n        var ast = this._exprParser.parseAction(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n\n        if (ast) {\n          this._reportExpressionParserErrors(ast.errors, sourceSpan);\n        }\n\n        if (!ast || ast.ast instanceof EmptyExpr) {\n          this._reportError(\"Empty expressions are not allowed\", sourceSpan);\n\n          return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n        }\n\n        return ast;\n      } catch (e) {\n        this._reportError(\"\".concat(e), sourceSpan);\n\n        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n      }\n    }\n  }, {\n    key: \"_reportError\",\n    value: function _reportError(message, sourceSpan) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseErrorLevel.ERROR;\n      this.errors.push(new ParseError(sourceSpan, message, level));\n    }\n  }, {\n    key: \"_reportExpressionParserErrors\",\n    value: function _reportExpressionParserErrors(errors, sourceSpan) {\n      var _iterator14 = _createForOfIteratorHelper(errors),\n          _step14;\n\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var _error = _step14.value;\n\n          this._reportError(_error.message, sourceSpan);\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n    }\n    /**\n     * @param propName the name of the property / attribute\n     * @param sourceSpan\n     * @param isAttr true when binding to an attribute\n     */\n\n  }, {\n    key: \"_validatePropertyOrAttributeName\",\n    value: function _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {\n      var report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);\n\n      if (report.error) {\n        this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);\n      }\n    }\n  }]);\n\n  return BindingParser;\n}();\n\nvar PipeCollector = /*#__PURE__*/function (_RecursiveAstVisitor2) {\n  _inherits(PipeCollector, _RecursiveAstVisitor2);\n\n  var _super89 = _createSuper(PipeCollector);\n\n  function PipeCollector() {\n    var _this147;\n\n    _classCallCheck(this, PipeCollector);\n\n    _this147 = _super89.apply(this, arguments);\n    _this147.pipes = new Map();\n    return _this147;\n  }\n\n  _createClass(PipeCollector, [{\n    key: \"visitPipe\",\n    value: function visitPipe(ast, context) {\n      this.pipes.set(ast.name, ast);\n      ast.exp.visit(this);\n      this.visitAll(ast.args, context);\n      return null;\n    }\n  }]);\n\n  return PipeCollector;\n}(RecursiveAstVisitor);\n\nfunction isAnimationLabel(name) {\n  return name[0] == '@';\n}\n\nfunction _calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {\n  var ctxs = [];\n  CssSelector.parse(selector).forEach(function (selector) {\n    var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n    var notElementNames = new Set(selector.notSelectors.filter(function (selector) {\n      return selector.isElementSelector();\n    }).map(function (selector) {\n      return selector.element;\n    }));\n    var possibleElementNames = elementNames.filter(function (elementName) {\n      return !notElementNames.has(elementName);\n    });\n    ctxs.push.apply(ctxs, _toConsumableArray(possibleElementNames.map(function (elementName) {\n      return registry.securityContext(elementName, propName, isAttribute);\n    })));\n  });\n  return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n/**\n * Compute a new ParseSourceSpan based off an original `sourceSpan` by using\n * absolute offsets from the specified `absoluteSpan`.\n *\n * @param sourceSpan original source span\n * @param absoluteSpan absolute source span to move to\n */\n\n\nfunction moveParseSourceSpan(sourceSpan, absoluteSpan) {\n  // The difference of two absolute offsets provide the relative offset\n  var startDiff = absoluteSpan.start - sourceSpan.start.offset;\n  var endDiff = absoluteSpan.end - sourceSpan.end.offset;\n  return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff), sourceSpan.fullStart.moveBy(startDiff), sourceSpan.details);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Some of the code comes from WebComponents.JS\n// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js\n\n\nfunction isStyleUrlResolvable(url) {\n  if (url == null || url.length === 0 || url[0] == '/') return false;\n  var schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n  return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n}\n\nvar URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar NG_CONTENT_SELECT_ATTR$1 = 'select';\nvar LINK_ELEMENT = 'link';\nvar LINK_STYLE_REL_ATTR = 'rel';\nvar LINK_STYLE_HREF_ATTR = 'href';\nvar LINK_STYLE_REL_VALUE = 'stylesheet';\nvar STYLE_ELEMENT = 'style';\nvar SCRIPT_ELEMENT = 'script';\nvar NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nvar NG_PROJECT_AS = 'ngProjectAs';\n\nfunction preparseElement(ast) {\n  var selectAttr = null;\n  var hrefAttr = null;\n  var relAttr = null;\n  var nonBindable = false;\n  var projectAs = '';\n  ast.attrs.forEach(function (attr) {\n    var lcAttrName = attr.name.toLowerCase();\n\n    if (lcAttrName == NG_CONTENT_SELECT_ATTR$1) {\n      selectAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n      hrefAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n      relAttr = attr.value;\n    } else if (attr.name == NG_NON_BINDABLE_ATTR) {\n      nonBindable = true;\n    } else if (attr.name == NG_PROJECT_AS) {\n      if (attr.value.length > 0) {\n        projectAs = attr.value;\n      }\n    }\n  });\n  selectAttr = normalizeNgContentSelect(selectAttr);\n  var nodeName = ast.name.toLowerCase();\n  var type = PreparsedElementType.OTHER;\n\n  if (isNgContent(nodeName)) {\n    type = PreparsedElementType.NG_CONTENT;\n  } else if (nodeName == STYLE_ELEMENT) {\n    type = PreparsedElementType.STYLE;\n  } else if (nodeName == SCRIPT_ELEMENT) {\n    type = PreparsedElementType.SCRIPT;\n  } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n    type = PreparsedElementType.STYLESHEET;\n  }\n\n  return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\n\nvar PreparsedElementType;\n\n(function (PreparsedElementType) {\n  PreparsedElementType[PreparsedElementType[\"NG_CONTENT\"] = 0] = \"NG_CONTENT\";\n  PreparsedElementType[PreparsedElementType[\"STYLE\"] = 1] = \"STYLE\";\n  PreparsedElementType[PreparsedElementType[\"STYLESHEET\"] = 2] = \"STYLESHEET\";\n  PreparsedElementType[PreparsedElementType[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  PreparsedElementType[PreparsedElementType[\"OTHER\"] = 4] = \"OTHER\";\n})(PreparsedElementType || (PreparsedElementType = {}));\n\nvar PreparsedElement = function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n  _classCallCheck(this, PreparsedElement);\n\n  this.type = type;\n  this.selectAttr = selectAttr;\n  this.hrefAttr = hrefAttr;\n  this.nonBindable = nonBindable;\n  this.projectAs = projectAs;\n};\n\nfunction normalizeNgContentSelect(selectAttr) {\n  if (selectAttr === null || selectAttr.length === 0) {\n    return '*';\n  }\n\n  return selectAttr;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar BIND_NAME_REGEXP = /^(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*)$/; // Group 1 = \"bind-\"\n\nvar KW_BIND_IDX = 1; // Group 2 = \"let-\"\n\nvar KW_LET_IDX = 2; // Group 3 = \"ref-/#\"\n\nvar KW_REF_IDX = 3; // Group 4 = \"on-\"\n\nvar KW_ON_IDX = 4; // Group 5 = \"bindon-\"\n\nvar KW_BINDON_IDX = 5; // Group 6 = \"@\"\n\nvar KW_AT_IDX = 6; // Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\n\nvar IDENT_KW_IDX = 7;\nvar BINDING_DELIMS = {\n  BANANA_BOX: {\n    start: '[(',\n    end: ')]'\n  },\n  PROPERTY: {\n    start: '[',\n    end: ']'\n  },\n  EVENT: {\n    start: '(',\n    end: ')'\n  }\n};\nvar TEMPLATE_ATTR_PREFIX = '*';\n\nfunction htmlAstToRender3Ast(htmlNodes, bindingParser, options) {\n  var transformer = new HtmlAstToIvyAst(bindingParser, options);\n  var ivyNodes = visitAll(transformer, htmlNodes); // Errors might originate in either the binding parser or the html to ivy transformer\n\n  var allErrors = bindingParser.errors.concat(transformer.errors);\n  var result = {\n    nodes: ivyNodes,\n    errors: allErrors,\n    styleUrls: transformer.styleUrls,\n    styles: transformer.styles,\n    ngContentSelectors: transformer.ngContentSelectors\n  };\n\n  if (options.collectCommentNodes) {\n    result.commentNodes = transformer.commentNodes;\n  }\n\n  return result;\n}\n\nvar HtmlAstToIvyAst = /*#__PURE__*/function () {\n  function HtmlAstToIvyAst(bindingParser, options) {\n    _classCallCheck(this, HtmlAstToIvyAst);\n\n    this.bindingParser = bindingParser;\n    this.options = options;\n    this.errors = [];\n    this.styles = [];\n    this.styleUrls = [];\n    this.ngContentSelectors = []; // This array will be populated if `Render3ParseOptions['collectCommentNodes']` is true\n\n    this.commentNodes = [];\n    this.inI18nBlock = false;\n  } // HTML visitor\n\n\n  _createClass(HtmlAstToIvyAst, [{\n    key: \"visitElement\",\n    value: function visitElement(element) {\n      var _this148 = this;\n\n      var isI18nRootElement = isI18nRootNode(element.i18n);\n\n      if (isI18nRootElement) {\n        if (this.inI18nBlock) {\n          this.reportError('Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.', element.sourceSpan);\n        }\n\n        this.inI18nBlock = true;\n      }\n\n      var preparsedElement = preparseElement(element);\n\n      if (preparsedElement.type === PreparsedElementType.SCRIPT) {\n        return null;\n      } else if (preparsedElement.type === PreparsedElementType.STYLE) {\n        var contents = textContents(element);\n\n        if (contents !== null) {\n          this.styles.push(contents);\n        }\n\n        return null;\n      } else if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n        this.styleUrls.push(preparsedElement.hrefAttr);\n        return null;\n      } // Whether the element is a `<ng-template>`\n\n\n      var isTemplateElement = isNgTemplate(element.name);\n      var parsedProperties = [];\n      var boundEvents = [];\n      var variables = [];\n      var references = [];\n      var attributes = [];\n      var i18nAttrsMeta = {};\n      var templateParsedProperties = [];\n      var templateVariables = []; // Whether the element has any *-attribute\n\n      var elementHasInlineTemplate = false;\n\n      var _iterator15 = _createForOfIteratorHelper(element.attrs),\n          _step15;\n\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var attribute = _step15.value;\n          var hasBinding = false;\n          var normalizedName = normalizeAttributeName(attribute.name); // `*attr` defines template bindings\n\n          var isTemplateBinding = false;\n\n          if (attribute.i18n) {\n            i18nAttrsMeta[attribute.name] = attribute.i18n;\n          }\n\n          if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n            // *-attributes\n            if (elementHasInlineTemplate) {\n              this.reportError(\"Can't have multiple template bindings on one element. Use only one attribute prefixed with *\", attribute.sourceSpan);\n            }\n\n            isTemplateBinding = true;\n            elementHasInlineTemplate = true;\n            var templateValue = attribute.value;\n            var templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);\n            var parsedVariables = [];\n            var absoluteValueOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : // If there is no value span the attribute does not have a value, like `attr` in\n            //`<div attr></div>`. In this case, point to one character beyond the last character of\n            // the attribute name.\n            attribute.sourceSpan.start.offset + attribute.name.length;\n            this.bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attribute.sourceSpan, absoluteValueOffset, [], templateParsedProperties, parsedVariables, true\n            /* isIvyAst */\n            );\n            templateVariables.push.apply(templateVariables, _toConsumableArray(parsedVariables.map(function (v) {\n              return new Variable(v.name, v.value, v.sourceSpan, v.keySpan, v.valueSpan);\n            })));\n          } else {\n            // Check for variables, events, property bindings, interpolation\n            hasBinding = this.parseAttribute(isTemplateElement, attribute, [], parsedProperties, boundEvents, variables, references);\n          }\n\n          if (!hasBinding && !isTemplateBinding) {\n            // don't include the bindings as attributes as well in the AST\n            attributes.push(this.visitAttribute(attribute));\n          }\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n\n      var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children);\n      var parsedElement;\n\n      if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n        // `<ng-content>`\n        if (element.children && !element.children.every(function (node) {\n          return isEmptyTextNode(node) || isCommentNode(node);\n        })) {\n          this.reportError(\"<ng-content> element cannot have content.\", element.sourceSpan);\n        }\n\n        var selector = preparsedElement.selectAttr;\n        var attrs = element.attrs.map(function (attr) {\n          return _this148.visitAttribute(attr);\n        });\n        parsedElement = new Content(selector, attrs, element.sourceSpan, element.i18n);\n        this.ngContentSelectors.push(selector);\n      } else if (isTemplateElement) {\n        // `<ng-template>`\n        var _attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n\n        parsedElement = new Template(element.name, attributes, _attrs.bound, boundEvents, [\n          /* no template attributes */\n        ], children, references, variables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n      } else {\n        var _attrs2 = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n\n        parsedElement = new Element$1(element.name, attributes, _attrs2.bound, boundEvents, children, references, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n      }\n\n      if (elementHasInlineTemplate) {\n        // If this node is an inline-template (e.g. has *ngFor) then we need to create a template\n        // node that contains this node.\n        // Moreover, if the node is an element, then we need to hoist its attributes to the template\n        // node for matching against content projection selectors.\n        var _attrs3 = this.extractAttributes('ng-template', templateParsedProperties, i18nAttrsMeta);\n\n        var templateAttrs = [];\n\n        _attrs3.literal.forEach(function (attr) {\n          return templateAttrs.push(attr);\n        });\n\n        _attrs3.bound.forEach(function (attr) {\n          return templateAttrs.push(attr);\n        });\n\n        var hoistedAttrs = parsedElement instanceof Element$1 ? {\n          attributes: parsedElement.attributes,\n          inputs: parsedElement.inputs,\n          outputs: parsedElement.outputs\n        } : {\n          attributes: [],\n          inputs: [],\n          outputs: []\n        }; // For <ng-template>s with structural directives on them, avoid passing i18n information to\n        // the wrapping template to prevent unnecessary i18n instructions from being generated. The\n        // necessary i18n meta information will be extracted from child elements.\n\n        var i18n = isTemplateElement && isI18nRootElement ? undefined : element.i18n; // TODO(pk): test for this case\n\n        parsedElement = new Template(parsedElement.name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs, [parsedElement], [\n          /* no references */\n        ], templateVariables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, i18n);\n      }\n\n      if (isI18nRootElement) {\n        this.inI18nBlock = false;\n      }\n\n      return parsedElement;\n    }\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute) {\n      return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {\n      return this._visitTextWithInterpolation(text.value, text.sourceSpan, text.i18n);\n    }\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(expansion) {\n      var _this149 = this;\n\n      if (!expansion.i18n) {\n        // do not generate Icu in case it was created\n        // outside of i18n block in a template\n        return null;\n      }\n\n      if (!isI18nRootNode(expansion.i18n)) {\n        throw new Error(\"Invalid type \\\"\".concat(expansion.i18n.constructor, \"\\\" for \\\"i18n\\\" property of \").concat(expansion.sourceSpan.toString(), \". Expected a \\\"Message\\\"\"));\n      }\n\n      var message = expansion.i18n;\n      var vars = {};\n      var placeholders = {}; // extract VARs from ICUs - we process them separately while\n      // assembling resulting message via goog.getMsg function, since\n      // we need to pass them to top-level goog.getMsg call\n\n      Object.keys(message.placeholders).forEach(function (key) {\n        var value = message.placeholders[key];\n\n        if (key.startsWith(I18N_ICU_VAR_PREFIX)) {\n          // Currently when the `plural` or `select` keywords in an ICU contain trailing spaces (e.g.\n          // `{count, select , ...}`), these spaces are also included into the key names in ICU vars\n          // (e.g. \"VAR_SELECT \"). These trailing spaces are not desirable, since they will later be\n          // converted into `_` symbols while normalizing placeholder names, which might lead to\n          // mismatches at runtime (i.e. placeholder will not be replaced with the correct value).\n          var formattedKey = key.trim();\n\n          var ast = _this149.bindingParser.parseInterpolationExpression(value.text, value.sourceSpan);\n\n          vars[formattedKey] = new BoundText(ast, value.sourceSpan);\n        } else {\n          placeholders[key] = _this149._visitTextWithInterpolation(value.text, value.sourceSpan);\n        }\n      });\n      return new Icu$1(vars, placeholders, expansion.sourceSpan, message);\n    }\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(expansionCase) {\n      return null;\n    }\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment) {\n      if (this.options.collectCommentNodes) {\n        this.commentNodes.push(new Comment$1(comment.value || '', comment.sourceSpan));\n      }\n\n      return null;\n    } // convert view engine `ParsedProperty` to a format suitable for IVY\n\n  }, {\n    key: \"extractAttributes\",\n    value: function extractAttributes(elementName, properties, i18nPropsMeta) {\n      var _this150 = this;\n\n      var bound = [];\n      var literal = [];\n      properties.forEach(function (prop) {\n        var i18n = i18nPropsMeta[prop.name];\n\n        if (prop.isLiteral) {\n          literal.push(new TextAttribute(prop.name, prop.expression.source || '', prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n));\n        } else {\n          // Note that validation is skipped and property mapping is disabled\n          // due to the fact that we need to make sure a given prop is not an\n          // input of a directive and directive matching happens at runtime.\n          var bep = _this150.bindingParser.createBoundElementProperty(elementName, prop,\n          /* skipValidation */\n          true,\n          /* mapPropertyName */\n          false);\n\n          bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n));\n        }\n      });\n      return {\n        bound: bound,\n        literal: literal\n      };\n    }\n  }, {\n    key: \"parseAttribute\",\n    value: function parseAttribute(isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references) {\n      var name = normalizeAttributeName(attribute.name);\n      var value = attribute.value;\n      var srcSpan = attribute.sourceSpan;\n      var absoluteOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : srcSpan.start.offset;\n\n      function createKeySpan(srcSpan, prefix, identifier) {\n        // We need to adjust the start location for the keySpan to account for the removed 'data-'\n        // prefix from `normalizeAttributeName`.\n        var normalizationAdjustment = attribute.name.length - name.length;\n        var keySpanStart = srcSpan.start.moveBy(prefix.length + normalizationAdjustment);\n        var keySpanEnd = keySpanStart.moveBy(identifier.length);\n        return new ParseSourceSpan(keySpanStart, keySpanEnd, keySpanStart, identifier);\n      }\n\n      var bindParts = name.match(BIND_NAME_REGEXP);\n\n      if (bindParts) {\n        if (bindParts[KW_BIND_IDX] != null) {\n          var identifier = bindParts[IDENT_KW_IDX];\n\n          var _keySpan = createKeySpan(srcSpan, bindParts[KW_BIND_IDX], identifier);\n\n          this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, _keySpan);\n        } else if (bindParts[KW_LET_IDX]) {\n          if (isTemplateElement) {\n            var _identifier = bindParts[IDENT_KW_IDX];\n\n            var _keySpan2 = createKeySpan(srcSpan, bindParts[KW_LET_IDX], _identifier);\n\n            this.parseVariable(_identifier, value, srcSpan, _keySpan2, attribute.valueSpan, variables);\n          } else {\n            this.reportError(\"\\\"let-\\\" is only supported on ng-template elements.\", srcSpan);\n          }\n        } else if (bindParts[KW_REF_IDX]) {\n          var _identifier2 = bindParts[IDENT_KW_IDX];\n\n          var _keySpan3 = createKeySpan(srcSpan, bindParts[KW_REF_IDX], _identifier2);\n\n          this.parseReference(_identifier2, value, srcSpan, _keySpan3, attribute.valueSpan, references);\n        } else if (bindParts[KW_ON_IDX]) {\n          var events = [];\n          var _identifier3 = bindParts[IDENT_KW_IDX];\n\n          var _keySpan4 = createKeySpan(srcSpan, bindParts[KW_ON_IDX], _identifier3);\n\n          this.bindingParser.parseEvent(_identifier3, value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, _keySpan4);\n          addEvents(events, boundEvents);\n        } else if (bindParts[KW_BINDON_IDX]) {\n          var _identifier4 = bindParts[IDENT_KW_IDX];\n\n          var _keySpan5 = createKeySpan(srcSpan, bindParts[KW_BINDON_IDX], _identifier4);\n\n          this.bindingParser.parsePropertyBinding(_identifier4, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, _keySpan5);\n          this.parseAssignmentEvent(_identifier4, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, _keySpan5);\n        } else if (bindParts[KW_AT_IDX]) {\n          var _keySpan6 = createKeySpan(srcSpan, '', name);\n\n          this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, _keySpan6);\n        }\n\n        return true;\n      } // We didn't see a kw-prefixed property binding, but we have not yet checked\n      // for the []/()/[()] syntax.\n\n\n      var delims = null;\n\n      if (name.startsWith(BINDING_DELIMS.BANANA_BOX.start)) {\n        delims = BINDING_DELIMS.BANANA_BOX;\n      } else if (name.startsWith(BINDING_DELIMS.PROPERTY.start)) {\n        delims = BINDING_DELIMS.PROPERTY;\n      } else if (name.startsWith(BINDING_DELIMS.EVENT.start)) {\n        delims = BINDING_DELIMS.EVENT;\n      }\n\n      if (delims !== null && // NOTE: older versions of the parser would match a start/end delimited\n      // binding iff the property name was terminated by the ending delimiter\n      // and the identifier in the binding was non-empty.\n      // TODO(ayazhafiz): update this to handle malformed bindings.\n      name.endsWith(delims.end) && name.length > delims.start.length + delims.end.length) {\n        var _identifier5 = name.substring(delims.start.length, name.length - delims.end.length);\n\n        var _keySpan7 = createKeySpan(srcSpan, delims.start, _identifier5);\n\n        if (delims.start === BINDING_DELIMS.BANANA_BOX.start) {\n          this.bindingParser.parsePropertyBinding(_identifier5, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, _keySpan7);\n          this.parseAssignmentEvent(_identifier5, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, _keySpan7);\n        } else if (delims.start === BINDING_DELIMS.PROPERTY.start) {\n          this.bindingParser.parsePropertyBinding(_identifier5, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, _keySpan7);\n        } else {\n          var _events = [];\n          this.bindingParser.parseEvent(_identifier5, value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, _events, _keySpan7);\n          addEvents(_events, boundEvents);\n        }\n\n        return true;\n      } // No explicit binding found.\n\n\n      var keySpan = createKeySpan(srcSpan, ''\n      /* prefix */\n      , name);\n      var hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n      return hasBinding;\n    }\n  }, {\n    key: \"_visitTextWithInterpolation\",\n    value: function _visitTextWithInterpolation(value, sourceSpan, i18n) {\n      var valueNoNgsp = replaceNgsp(value);\n      var expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan);\n      return expr ? new BoundText(expr, sourceSpan, i18n) : new Text$3(valueNoNgsp, sourceSpan);\n    }\n  }, {\n    key: \"parseVariable\",\n    value: function parseVariable(identifier, value, sourceSpan, keySpan, valueSpan, variables) {\n      if (identifier.indexOf('-') > -1) {\n        this.reportError(\"\\\"-\\\" is not allowed in variable names\", sourceSpan);\n      } else if (identifier.length === 0) {\n        this.reportError(\"Variable does not have a name\", sourceSpan);\n      }\n\n      variables.push(new Variable(identifier, value, sourceSpan, keySpan, valueSpan));\n    }\n  }, {\n    key: \"parseReference\",\n    value: function parseReference(identifier, value, sourceSpan, keySpan, valueSpan, references) {\n      if (identifier.indexOf('-') > -1) {\n        this.reportError(\"\\\"-\\\" is not allowed in reference names\", sourceSpan);\n      } else if (identifier.length === 0) {\n        this.reportError(\"Reference does not have a name\", sourceSpan);\n      } else if (references.some(function (reference) {\n        return reference.name === identifier;\n      })) {\n        this.reportError(\"Reference \\\"#\".concat(identifier, \"\\\" is defined more than once\"), sourceSpan);\n      }\n\n      references.push(new Reference(identifier, value, sourceSpan, keySpan, valueSpan));\n    }\n  }, {\n    key: \"parseAssignmentEvent\",\n    value: function parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents, keySpan) {\n      var events = [];\n      this.bindingParser.parseEvent(\"\".concat(name, \"Change\"), \"\".concat(expression, \"=$event\"), sourceSpan, valueSpan || sourceSpan, targetMatchableAttrs, events, keySpan);\n      addEvents(events, boundEvents);\n    }\n  }, {\n    key: \"reportError\",\n    value: function reportError(message, sourceSpan) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseErrorLevel.ERROR;\n      this.errors.push(new ParseError(sourceSpan, message, level));\n    }\n  }]);\n\n  return HtmlAstToIvyAst;\n}();\n\nvar NonBindableVisitor = /*#__PURE__*/function () {\n  function NonBindableVisitor() {\n    _classCallCheck(this, NonBindableVisitor);\n  }\n\n  _createClass(NonBindableVisitor, [{\n    key: \"visitElement\",\n    value: function visitElement(ast) {\n      var preparsedElement = preparseElement(ast);\n\n      if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {\n        // Skipping <script> for security reasons\n        // Skipping <style> and stylesheets as we already processed them\n        // in the StyleCompiler\n        return null;\n      }\n\n      var children = visitAll(this, ast.children, null);\n      return new Element$1(ast.name, visitAll(this, ast.attrs),\n      /* inputs */\n      [],\n      /* outputs */\n      [], children,\n      /* references */\n      [], ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);\n    }\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment) {\n      return null;\n    }\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute) {\n      return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {\n      return new Text$3(text.value, text.sourceSpan);\n    }\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(expansion) {\n      return null;\n    }\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(expansionCase) {\n      return null;\n    }\n  }]);\n\n  return NonBindableVisitor;\n}();\n\nvar NON_BINDABLE_VISITOR = new NonBindableVisitor();\n\nfunction normalizeAttributeName(attrName) {\n  return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n}\n\nfunction addEvents(events, boundEvents) {\n  boundEvents.push.apply(boundEvents, _toConsumableArray(events.map(function (e) {\n    return BoundEvent.fromParsedEvent(e);\n  })));\n}\n\nfunction isEmptyTextNode(node) {\n  return node instanceof Text && node.value.trim().length == 0;\n}\n\nfunction isCommentNode(node) {\n  return node instanceof Comment;\n}\n\nfunction textContents(node) {\n  if (node.children.length !== 1 || !(node.children[0] instanceof Text)) {\n    return null;\n  } else {\n    return node.children[0].value;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar TagType;\n\n(function (TagType) {\n  TagType[TagType[\"ELEMENT\"] = 0] = \"ELEMENT\";\n  TagType[TagType[\"TEMPLATE\"] = 1] = \"TEMPLATE\";\n})(TagType || (TagType = {}));\n/**\n * Generates an object that is used as a shared state between parent and all child contexts.\n */\n\n\nfunction setupRegistry() {\n  return {\n    getUniqueId: getSeqNumberGenerator(),\n    icus: new Map()\n  };\n}\n/**\n * I18nContext is a helper class which keeps track of all i18n-related aspects\n * (accumulates placeholders, bindings, etc) between i18nStart and i18nEnd instructions.\n *\n * When we enter a nested template, the top-level context is being passed down\n * to the nested component, which uses this context to generate a child instance\n * of I18nContext class (to handle nested template) and at the end, reconciles it back\n * with the parent context.\n *\n * @param index Instruction index of i18nStart, which initiates this context\n * @param ref Reference to a translation const that represents the content if thus context\n * @param level Nestng level defined for child contexts\n * @param templateIndex Instruction index of a template which this context belongs to\n * @param meta Meta information (id, meaning, description, etc) associated with this context\n */\n\n\nvar I18nContext = /*#__PURE__*/function () {\n  function I18nContext(index, ref) {\n    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var templateIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var meta = arguments.length > 4 ? arguments[4] : undefined;\n    var registry = arguments.length > 5 ? arguments[5] : undefined;\n\n    _classCallCheck(this, I18nContext);\n\n    this.index = index;\n    this.ref = ref;\n    this.level = level;\n    this.templateIndex = templateIndex;\n    this.meta = meta;\n    this.registry = registry;\n    this.bindings = new Set();\n    this.placeholders = new Map();\n    this.isEmitted = false;\n    this._unresolvedCtxCount = 0;\n    this._registry = registry || setupRegistry();\n    this.id = this._registry.getUniqueId();\n  }\n\n  _createClass(I18nContext, [{\n    key: \"appendTag\",\n    value: function appendTag(type, node, index, closed) {\n      if (node.isVoid && closed) {\n        return; // ignore \"close\" for void tags\n      }\n\n      var ph = node.isVoid || !closed ? node.startName : node.closeName;\n      var content = {\n        type: type,\n        index: index,\n        ctx: this.id,\n        isVoid: node.isVoid,\n        closed: closed\n      };\n      updatePlaceholderMap(this.placeholders, ph, content);\n    }\n  }, {\n    key: \"icus\",\n    get: function get() {\n      return this._registry.icus;\n    }\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.level === 0;\n    }\n  }, {\n    key: \"isResolved\",\n    get: function get() {\n      return this._unresolvedCtxCount === 0;\n    }\n  }, {\n    key: \"getSerializedPlaceholders\",\n    value: function getSerializedPlaceholders() {\n      var result = new Map();\n      this.placeholders.forEach(function (values, key) {\n        return result.set(key, values.map(serializePlaceholderValue));\n      });\n      return result;\n    } // public API to accumulate i18n-related content\n\n  }, {\n    key: \"appendBinding\",\n    value: function appendBinding(binding) {\n      this.bindings.add(binding);\n    }\n  }, {\n    key: \"appendIcu\",\n    value: function appendIcu(name, ref) {\n      updatePlaceholderMap(this._registry.icus, name, ref);\n    }\n  }, {\n    key: \"appendBoundText\",\n    value: function appendBoundText(node) {\n      var _this151 = this;\n\n      var phs = assembleBoundTextPlaceholders(node, this.bindings.size, this.id);\n      phs.forEach(function (values, key) {\n        return updatePlaceholderMap.apply(void 0, [_this151.placeholders, key].concat(_toConsumableArray(values)));\n      });\n    }\n  }, {\n    key: \"appendTemplate\",\n    value: function appendTemplate(node, index) {\n      // add open and close tags at the same time,\n      // since we process nested templates separately\n      this.appendTag(TagType.TEMPLATE, node, index, false);\n      this.appendTag(TagType.TEMPLATE, node, index, true);\n      this._unresolvedCtxCount++;\n    }\n  }, {\n    key: \"appendElement\",\n    value: function appendElement(node, index, closed) {\n      this.appendTag(TagType.ELEMENT, node, index, closed);\n    }\n  }, {\n    key: \"appendProjection\",\n    value: function appendProjection(node, index) {\n      // Add open and close tags at the same time, since `<ng-content>` has no content,\n      // so when we come across `<ng-content>` we can register both open and close tags.\n      // Note: runtime i18n logic doesn't distinguish `<ng-content>` tag placeholders and\n      // regular element tag placeholders, so we generate element placeholders for both types.\n      this.appendTag(TagType.ELEMENT, node, index, false);\n      this.appendTag(TagType.ELEMENT, node, index, true);\n    }\n    /**\n     * Generates an instance of a child context based on the root one,\n     * when we enter a nested template within I18n section.\n     *\n     * @param index Instruction index of corresponding i18nStart, which initiates this context\n     * @param templateIndex Instruction index of a template which this context belongs to\n     * @param meta Meta information (id, meaning, description, etc) associated with this context\n     *\n     * @returns I18nContext instance\n     */\n\n  }, {\n    key: \"forkChildContext\",\n    value: function forkChildContext(index, templateIndex, meta) {\n      return new I18nContext(index, this.ref, this.level + 1, templateIndex, meta, this._registry);\n    }\n    /**\n     * Reconciles child context into parent one once the end of the i18n block is reached (i18nEnd).\n     *\n     * @param context Child I18nContext instance to be reconciled with parent context.\n     */\n\n  }, {\n    key: \"reconcileChildContext\",\n    value: function reconcileChildContext(context) {\n      var _this152 = this;\n\n      // set the right context id for open and close\n      // template tags, so we can use it as sub-block ids\n      ['start', 'close'].forEach(function (op) {\n        var key = context.meta[\"\".concat(op, \"Name\")];\n        var phs = _this152.placeholders.get(key) || [];\n        var tag = phs.find(findTemplateFn(_this152.id, context.templateIndex));\n\n        if (tag) {\n          tag.ctx = context.id;\n        }\n      }); // reconcile placeholders\n\n      var childPhs = context.placeholders;\n      childPhs.forEach(function (values, key) {\n        var phs = _this152.placeholders.get(key);\n\n        if (!phs) {\n          _this152.placeholders.set(key, values);\n\n          return;\n        } // try to find matching template...\n\n\n        var tmplIdx = phs.findIndex(findTemplateFn(context.id, context.templateIndex));\n\n        if (tmplIdx >= 0) {\n          // ... if found - replace it with nested template content\n          var isCloseTag = key.startsWith('CLOSE');\n          var isTemplateTag = key.endsWith('NG-TEMPLATE');\n\n          if (isTemplateTag) {\n            // current template's content is placed before or after\n            // parent template tag, depending on the open/close atrribute\n            phs.splice.apply(phs, [tmplIdx + (isCloseTag ? 0 : 1), 0].concat(_toConsumableArray(values)));\n          } else {\n            var idx = isCloseTag ? values.length - 1 : 0;\n            values[idx].tmpl = phs[tmplIdx];\n            phs.splice.apply(phs, [tmplIdx, 1].concat(_toConsumableArray(values)));\n          }\n        } else {\n          // ... otherwise just append content to placeholder value\n          phs.push.apply(phs, _toConsumableArray(values));\n        }\n\n        _this152.placeholders.set(key, phs);\n      });\n      this._unresolvedCtxCount--;\n    }\n  }]);\n\n  return I18nContext;\n}(); //\n// Helper methods\n//\n\n\nfunction wrap(symbol, index, contextId, closed) {\n  var state = closed ? '/' : '';\n  return wrapI18nPlaceholder(\"\".concat(state).concat(symbol).concat(index), contextId);\n}\n\nfunction wrapTag(symbol, _ref8, closed) {\n  var index = _ref8.index,\n      ctx = _ref8.ctx,\n      isVoid = _ref8.isVoid;\n  return isVoid ? wrap(symbol, index, ctx) + wrap(symbol, index, ctx, true) : wrap(symbol, index, ctx, closed);\n}\n\nfunction findTemplateFn(ctx, templateIndex) {\n  return function (token) {\n    return typeof token === 'object' && token.type === TagType.TEMPLATE && token.index === templateIndex && token.ctx === ctx;\n  };\n}\n\nfunction serializePlaceholderValue(value) {\n  var element = function element(data, closed) {\n    return wrapTag('#', data, closed);\n  };\n\n  var template = function template(data, closed) {\n    return wrapTag('*', data, closed);\n  };\n\n  var projection = function projection(data, closed) {\n    return wrapTag('!', data, closed);\n  };\n\n  switch (value.type) {\n    case TagType.ELEMENT:\n      // close element tag\n      if (value.closed) {\n        return element(value, true) + (value.tmpl ? template(value.tmpl, true) : '');\n      } // open element tag that also initiates a template\n\n\n      if (value.tmpl) {\n        return template(value.tmpl) + element(value) + (value.isVoid ? template(value.tmpl, true) : '');\n      }\n\n      return element(value);\n\n    case TagType.TEMPLATE:\n      return template(value, value.closed);\n\n    default:\n      return value;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar IcuSerializerVisitor = /*#__PURE__*/function () {\n  function IcuSerializerVisitor() {\n    _classCallCheck(this, IcuSerializerVisitor);\n  }\n\n  _createClass(IcuSerializerVisitor, [{\n    key: \"visitText\",\n    value: function visitText(text) {\n      return text.value;\n    }\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container) {\n      var _this153 = this;\n\n      return container.children.map(function (child) {\n        return child.visit(_this153);\n      }).join('');\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {\n      var _this154 = this;\n\n      var strCases = Object.keys(icu.cases).map(function (k) {\n        return \"\".concat(k, \" {\").concat(icu.cases[k].visit(_this154), \"}\");\n      });\n      var result = \"{\".concat(icu.expressionPlaceholder, \", \").concat(icu.type, \", \").concat(strCases.join(' '), \"}\");\n      return result;\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph) {\n      var _this155 = this;\n\n      return ph.isVoid ? this.formatPh(ph.startName) : \"\".concat(this.formatPh(ph.startName)).concat(ph.children.map(function (child) {\n        return child.visit(_this155);\n      }).join('')).concat(this.formatPh(ph.closeName));\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph) {\n      return this.formatPh(ph.name);\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, context) {\n      return this.formatPh(ph.name);\n    }\n  }, {\n    key: \"formatPh\",\n    value: function formatPh(value) {\n      return \"{\".concat(formatI18nPlaceholderName(value,\n      /* useCamelCase */\n      false), \"}\");\n    }\n  }]);\n\n  return IcuSerializerVisitor;\n}();\n\nvar serializer = new IcuSerializerVisitor();\n\nfunction serializeIcuNode(icu) {\n  return icu.visit(serializer);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar TAG_TO_PLACEHOLDER_NAMES = {\n  'A': 'LINK',\n  'B': 'BOLD_TEXT',\n  'BR': 'LINE_BREAK',\n  'EM': 'EMPHASISED_TEXT',\n  'H1': 'HEADING_LEVEL1',\n  'H2': 'HEADING_LEVEL2',\n  'H3': 'HEADING_LEVEL3',\n  'H4': 'HEADING_LEVEL4',\n  'H5': 'HEADING_LEVEL5',\n  'H6': 'HEADING_LEVEL6',\n  'HR': 'HORIZONTAL_RULE',\n  'I': 'ITALIC_TEXT',\n  'LI': 'LIST_ITEM',\n  'LINK': 'MEDIA_LINK',\n  'OL': 'ORDERED_LIST',\n  'P': 'PARAGRAPH',\n  'Q': 'QUOTATION',\n  'S': 'STRIKETHROUGH_TEXT',\n  'SMALL': 'SMALL_TEXT',\n  'SUB': 'SUBSTRIPT',\n  'SUP': 'SUPERSCRIPT',\n  'TBODY': 'TABLE_BODY',\n  'TD': 'TABLE_CELL',\n  'TFOOT': 'TABLE_FOOTER',\n  'TH': 'TABLE_HEADER_CELL',\n  'THEAD': 'TABLE_HEADER',\n  'TR': 'TABLE_ROW',\n  'TT': 'MONOSPACED_TEXT',\n  'U': 'UNDERLINED_TEXT',\n  'UL': 'UNORDERED_LIST'\n};\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\n\nvar PlaceholderRegistry = /*#__PURE__*/function () {\n  function PlaceholderRegistry() {\n    _classCallCheck(this, PlaceholderRegistry);\n\n    // Count the occurrence of the base name top generate a unique name\n    this._placeHolderNameCounts = {}; // Maps signature to placeholder names\n\n    this._signatureToName = {};\n  }\n\n  _createClass(PlaceholderRegistry, [{\n    key: \"getStartTagPlaceholderName\",\n    value: function getStartTagPlaceholderName(tag, attrs, isVoid) {\n      var signature = this._hashTag(tag, attrs, isVoid);\n\n      if (this._signatureToName[signature]) {\n        return this._signatureToName[signature];\n      }\n\n      var upperTag = tag.toUpperCase();\n      var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\".concat(upperTag);\n\n      var name = this._generateUniqueName(isVoid ? baseName : \"START_\".concat(baseName));\n\n      this._signatureToName[signature] = name;\n      return name;\n    }\n  }, {\n    key: \"getCloseTagPlaceholderName\",\n    value: function getCloseTagPlaceholderName(tag) {\n      var signature = this._hashClosingTag(tag);\n\n      if (this._signatureToName[signature]) {\n        return this._signatureToName[signature];\n      }\n\n      var upperTag = tag.toUpperCase();\n      var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\".concat(upperTag);\n\n      var name = this._generateUniqueName(\"CLOSE_\".concat(baseName));\n\n      this._signatureToName[signature] = name;\n      return name;\n    }\n  }, {\n    key: \"getPlaceholderName\",\n    value: function getPlaceholderName(name, content) {\n      var upperName = name.toUpperCase();\n      var signature = \"PH: \".concat(upperName, \"=\").concat(content);\n\n      if (this._signatureToName[signature]) {\n        return this._signatureToName[signature];\n      }\n\n      var uniqueName = this._generateUniqueName(upperName);\n\n      this._signatureToName[signature] = uniqueName;\n      return uniqueName;\n    }\n  }, {\n    key: \"getUniquePlaceholder\",\n    value: function getUniquePlaceholder(name) {\n      return this._generateUniqueName(name.toUpperCase());\n    } // Generate a hash for a tag - does not take attribute order into account\n\n  }, {\n    key: \"_hashTag\",\n    value: function _hashTag(tag, attrs, isVoid) {\n      var start = \"<\".concat(tag);\n      var strAttrs = Object.keys(attrs).sort().map(function (name) {\n        return \" \".concat(name, \"=\").concat(attrs[name]);\n      }).join('');\n      var end = isVoid ? '/>' : \"></\".concat(tag, \">\");\n      return start + strAttrs + end;\n    }\n  }, {\n    key: \"_hashClosingTag\",\n    value: function _hashClosingTag(tag) {\n      return this._hashTag(\"/\".concat(tag), {}, false);\n    }\n  }, {\n    key: \"_generateUniqueName\",\n    value: function _generateUniqueName(base) {\n      var seen = this._placeHolderNameCounts.hasOwnProperty(base);\n\n      if (!seen) {\n        this._placeHolderNameCounts[base] = 1;\n        return base;\n      }\n\n      var id = this._placeHolderNameCounts[base];\n      this._placeHolderNameCounts[base] = id + 1;\n      return \"\".concat(base, \"_\").concat(id);\n    }\n  }]);\n\n  return PlaceholderRegistry;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _expParser = new Parser$1(new Lexer());\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n */\n\n\nfunction createI18nMessageFactory(interpolationConfig) {\n  var visitor = new _I18nVisitor(_expParser, interpolationConfig);\n  return function (nodes, meaning, description, customId, visitNodeFn) {\n    return visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n  };\n}\n\nfunction noopVisitNodeFn(_html, i18n) {\n  return i18n;\n}\n\nvar _I18nVisitor = /*#__PURE__*/function () {\n  function _I18nVisitor(_expressionParser, _interpolationConfig) {\n    _classCallCheck(this, _I18nVisitor);\n\n    this._expressionParser = _expressionParser;\n    this._interpolationConfig = _interpolationConfig;\n  }\n\n  _createClass(_I18nVisitor, [{\n    key: \"toI18nMessage\",\n    value: function toI18nMessage(nodes) {\n      var meaning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var description = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var customId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n      var visitNodeFn = arguments.length > 4 ? arguments[4] : undefined;\n      var context = {\n        isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,\n        icuDepth: 0,\n        placeholderRegistry: new PlaceholderRegistry(),\n        placeholderToContent: {},\n        placeholderToMessage: {},\n        visitNodeFn: visitNodeFn || noopVisitNodeFn\n      };\n      var i18nodes = visitAll(this, nodes, context);\n      return new Message(i18nodes, context.placeholderToContent, context.placeholderToMessage, meaning, description, customId);\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(el, context) {\n      var _a;\n\n      var children = visitAll(this, el.children, context);\n      var attrs = {};\n      el.attrs.forEach(function (attr) {\n        // Do not visit the attributes, translatable ones are top-level ASTs\n        attrs[attr.name] = attr.value;\n      });\n      var isVoid = getHtmlTagDefinition(el.name).isVoid;\n      var startPhName = context.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n      context.placeholderToContent[startPhName] = {\n        text: el.startSourceSpan.toString(),\n        sourceSpan: el.startSourceSpan\n      };\n      var closePhName = '';\n\n      if (!isVoid) {\n        closePhName = context.placeholderRegistry.getCloseTagPlaceholderName(el.name);\n        context.placeholderToContent[closePhName] = {\n          text: \"</\".concat(el.name, \">\"),\n          sourceSpan: (_a = el.endSourceSpan) !== null && _a !== void 0 ? _a : el.sourceSpan\n        };\n      }\n\n      var node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n      return context.visitNodeFn(el, node);\n    }\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute, context) {\n      var node = attribute.valueTokens === undefined || attribute.valueTokens.length === 1 ? new Text$2(attribute.value, attribute.valueSpan || attribute.sourceSpan) : this._visitTextWithInterpolation(attribute.valueTokens, attribute.valueSpan || attribute.sourceSpan, context, attribute.i18n);\n      return context.visitNodeFn(attribute, node);\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      var node = text.tokens.length === 1 ? new Text$2(text.value, text.sourceSpan) : this._visitTextWithInterpolation(text.tokens, text.sourceSpan, context, text.i18n);\n      return context.visitNodeFn(text, node);\n    }\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment, context) {\n      return null;\n    }\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(icu, context) {\n      var _this156 = this;\n\n      context.icuDepth++;\n      var i18nIcuCases = {};\n      var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n      icu.cases.forEach(function (caze) {\n        i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) {\n          return node.visit(_this156, context);\n        }), caze.expSourceSpan);\n      });\n      context.icuDepth--;\n\n      if (context.isIcu || context.icuDepth > 0) {\n        // Returns an ICU node when:\n        // - the message (vs a part of the message) is an ICU message, or\n        // - the ICU message is nested.\n        var expPh = context.placeholderRegistry.getUniquePlaceholder(\"VAR_\".concat(icu.type));\n        i18nIcu.expressionPlaceholder = expPh;\n        context.placeholderToContent[expPh] = {\n          text: icu.switchValue,\n          sourceSpan: icu.switchValueSourceSpan\n        };\n        return context.visitNodeFn(icu, i18nIcu);\n      } // Else returns a placeholder\n      // ICU placeholders should not be replaced with their original content but with the their\n      // translations.\n      // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n\n\n      var phName = context.placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n      context.placeholderToMessage[phName] = this.toI18nMessage([icu], '', '', '', undefined);\n      var node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n      return context.visitNodeFn(icu, node);\n    }\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(_icuCase, _context) {\n      throw new Error('Unreachable code');\n    }\n    /**\n     * Convert, text and interpolated tokens up into text and placeholder pieces.\n     *\n     * @param tokens The text and interpolated tokens.\n     * @param sourceSpan The span of the whole of the `text` string.\n     * @param context The current context of the visitor, used to compute and store placeholders.\n     * @param previousI18n Any i18n metadata associated with this `text` from a previous pass.\n     */\n\n  }, {\n    key: \"_visitTextWithInterpolation\",\n    value: function _visitTextWithInterpolation(tokens, sourceSpan, context, previousI18n) {\n      // Return a sequence of `Text` and `Placeholder` nodes grouped in a `Container`.\n      var nodes = []; // We will only create a container if there are actually interpolations,\n      // so this flag tracks that.\n\n      var hasInterpolation = false;\n\n      var _iterator16 = _createForOfIteratorHelper(tokens),\n          _step16;\n\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var token = _step16.value;\n\n          switch (token.type) {\n            case 8\n            /* INTERPOLATION */\n            :\n            case 17\n            /* ATTR_VALUE_INTERPOLATION */\n            :\n              hasInterpolation = true;\n              var expression = token.parts[1];\n              var baseName = extractPlaceholderName(expression) || 'INTERPOLATION';\n              var phName = context.placeholderRegistry.getPlaceholderName(baseName, expression);\n              context.placeholderToContent[phName] = {\n                text: token.parts.join(''),\n                sourceSpan: token.sourceSpan\n              };\n              nodes.push(new Placeholder(expression, phName, token.sourceSpan));\n              break;\n\n            default:\n              if (token.parts[0].length > 0) {\n                // This token is text or an encoded entity.\n                // If it is following on from a previous text node then merge it into that node\n                // Otherwise, if it is following an interpolation, then add a new node.\n                var previous = nodes[nodes.length - 1];\n\n                if (previous instanceof Text$2) {\n                  previous.value += token.parts[0];\n                  previous.sourceSpan = new ParseSourceSpan(previous.sourceSpan.start, token.sourceSpan.end, previous.sourceSpan.fullStart, previous.sourceSpan.details);\n                } else {\n                  nodes.push(new Text$2(token.parts[0], token.sourceSpan));\n                }\n              }\n\n              break;\n          }\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n\n      if (hasInterpolation) {\n        // Whitespace removal may have invalidated the interpolation source-spans.\n        reusePreviousSourceSpans(nodes, previousI18n);\n        return new Container(nodes, sourceSpan);\n      } else {\n        return nodes[0];\n      }\n    }\n  }]);\n\n  return _I18nVisitor;\n}();\n/**\n * Re-use the source-spans from `previousI18n` metadata for the `nodes`.\n *\n * Whitespace removal can invalidate the source-spans of interpolation nodes, so we\n * reuse the source-span stored from a previous pass before the whitespace was removed.\n *\n * @param nodes The `Text` and `Placeholder` nodes to be processed.\n * @param previousI18n Any i18n metadata for these `nodes` stored from a previous pass.\n */\n\n\nfunction reusePreviousSourceSpans(nodes, previousI18n) {\n  if (previousI18n instanceof Message) {\n    // The `previousI18n` is an i18n `Message`, so we are processing an `Attribute` with i18n\n    // metadata. The `Message` should consist only of a single `Container` that contains the\n    // parts (`Text` and `Placeholder`) to process.\n    assertSingleContainerMessage(previousI18n);\n    previousI18n = previousI18n.nodes[0];\n  }\n\n  if (previousI18n instanceof Container) {\n    // The `previousI18n` is a `Container`, which means that this is a second i18n extraction pass\n    // after whitespace has been removed from the AST nodes.\n    assertEquivalentNodes(previousI18n.children, nodes); // Reuse the source-spans from the first pass.\n\n    for (var i = 0; i < nodes.length; i++) {\n      nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;\n    }\n  }\n}\n/**\n * Asserts that the `message` contains exactly one `Container` node.\n */\n\n\nfunction assertSingleContainerMessage(message) {\n  var nodes = message.nodes;\n\n  if (nodes.length !== 1 || !(nodes[0] instanceof Container)) {\n    throw new Error('Unexpected previous i18n message - expected it to consist of only a single `Container` node.');\n  }\n}\n/**\n * Asserts that the `previousNodes` and `node` collections have the same number of elements and\n * corresponding elements have the same node type.\n */\n\n\nfunction assertEquivalentNodes(previousNodes, nodes) {\n  if (previousNodes.length !== nodes.length) {\n    throw new Error('The number of i18n message children changed between first and second pass.');\n  }\n\n  if (previousNodes.some(function (node, i) {\n    return nodes[i].constructor !== node.constructor;\n  })) {\n    throw new Error('The types of the i18n message children changed between first and second pass.');\n  }\n}\n\nvar _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\n\nfunction extractPlaceholderName(input) {\n  return input.split(_CUSTOM_PH_EXP)[2];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An i18n error.\n */\n\n\nvar I18nError = /*#__PURE__*/function (_ParseError3) {\n  _inherits(I18nError, _ParseError3);\n\n  var _super90 = _createSuper(I18nError);\n\n  function I18nError(span, msg) {\n    _classCallCheck(this, I18nError);\n\n    return _super90.call(this, span, msg);\n  }\n\n  return I18nError;\n}(ParseError);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar setI18nRefs = function setI18nRefs(htmlNode, i18nNode) {\n  if (htmlNode instanceof NodeWithI18n) {\n    if (i18nNode instanceof IcuPlaceholder && htmlNode.i18n instanceof Message) {\n      // This html node represents an ICU but this is a second processing pass, and the legacy id\n      // was computed in the previous pass and stored in the `i18n` property as a message.\n      // We are about to wipe out that property so capture the previous message to be reused when\n      // generating the message for this ICU later. See `_generateI18nMessage()`.\n      i18nNode.previousMessage = htmlNode.i18n;\n    }\n\n    htmlNode.i18n = i18nNode;\n  }\n\n  return i18nNode;\n};\n/**\n * This visitor walks over HTML parse tree and converts information stored in\n * i18n-related attributes (\"i18n\" and \"i18n-*\") into i18n meta object that is\n * stored with other element's and attribute's information.\n */\n\n\nvar I18nMetaVisitor = /*#__PURE__*/function () {\n  function I18nMetaVisitor() {\n    var interpolationConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_INTERPOLATION_CONFIG;\n    var keepI18nAttrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var enableI18nLegacyMessageIdFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, I18nMetaVisitor);\n\n    this.interpolationConfig = interpolationConfig;\n    this.keepI18nAttrs = keepI18nAttrs;\n    this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat; // whether visited nodes contain i18n information\n\n    this.hasI18nMeta = false;\n    this._errors = []; // i18n message generation factory\n\n    this._createI18nMessage = createI18nMessageFactory(this.interpolationConfig);\n  }\n\n  _createClass(I18nMetaVisitor, [{\n    key: \"_generateI18nMessage\",\n    value: function _generateI18nMessage(nodes) {\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var visitNodeFn = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this$_parseMetadata = this._parseMetadata(meta),\n          meaning = _this$_parseMetadata.meaning,\n          description = _this$_parseMetadata.description,\n          customId = _this$_parseMetadata.customId;\n\n      var message = this._createI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n\n      this._setMessageId(message, meta);\n\n      this._setLegacyIds(message, meta);\n\n      return message;\n    }\n  }, {\n    key: \"visitAllWithErrors\",\n    value: function visitAllWithErrors(nodes) {\n      var _this157 = this;\n\n      var result = nodes.map(function (node) {\n        return node.visit(_this157, null);\n      });\n      return new ParseTreeResult(result, this._errors);\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(element) {\n      var message = undefined;\n\n      if (hasI18nAttrs(element)) {\n        this.hasI18nMeta = true;\n        var attrs = [];\n        var attrsMeta = {};\n\n        var _iterator17 = _createForOfIteratorHelper(element.attrs),\n            _step17;\n\n        try {\n          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n            var _attr = _step17.value;\n\n            if (_attr.name === I18N_ATTR) {\n              // root 'i18n' node attribute\n              var i18n = element.i18n || _attr.value;\n              message = this._generateI18nMessage(element.children, i18n, setI18nRefs);\n\n              if (message.nodes.length === 0) {\n                // Ignore the message if it is empty.\n                message = undefined;\n              } // Store the message on the element\n\n\n              element.i18n = message;\n            } else if (_attr.name.startsWith(I18N_ATTR_PREFIX)) {\n              // 'i18n-*' attributes\n              var name = _attr.name.slice(I18N_ATTR_PREFIX.length);\n\n              if (isTrustedTypesSink(element.name, name)) {\n                this._reportError(_attr, \"Translating attribute '\".concat(name, \"' is disallowed for security reasons.\"));\n              } else {\n                attrsMeta[name] = _attr.value;\n              }\n            } else {\n              // non-i18n attributes\n              attrs.push(_attr);\n            }\n          } // set i18n meta for attributes\n\n        } catch (err) {\n          _iterator17.e(err);\n        } finally {\n          _iterator17.f();\n        }\n\n        if (Object.keys(attrsMeta).length) {\n          var _iterator18 = _createForOfIteratorHelper(attrs),\n              _step18;\n\n          try {\n            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n              var attr = _step18.value;\n              var meta = attrsMeta[attr.name]; // do not create translation for empty attributes\n\n              if (meta !== undefined && attr.value) {\n                attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);\n              }\n            }\n          } catch (err) {\n            _iterator18.e(err);\n          } finally {\n            _iterator18.f();\n          }\n        }\n\n        if (!this.keepI18nAttrs) {\n          // update element's attributes,\n          // keeping only non-i18n related ones\n          element.attrs = attrs;\n        }\n      }\n\n      visitAll(this, element.children, message);\n      return element;\n    }\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(expansion, currentMessage) {\n      var message;\n      var meta = expansion.i18n;\n      this.hasI18nMeta = true;\n\n      if (meta instanceof IcuPlaceholder) {\n        // set ICU placeholder name (e.g. \"ICU_1\"),\n        // generated while processing root element contents,\n        // so we can reference it when we output translation\n        var name = meta.name;\n        message = this._generateI18nMessage([expansion], meta);\n        var icu = icuFromI18nMessage(message);\n        icu.name = name;\n\n        if (currentMessage !== null) {\n          // Also update the placeholderToMessage map with this new message\n          currentMessage.placeholderToMessage[name] = message;\n        }\n      } else {\n        // ICU is a top level message, try to use metadata from container element if provided via\n        // `context` argument. Note: context may not be available for standalone ICUs (without\n        // wrapping element), so fallback to ICU metadata in this case.\n        message = this._generateI18nMessage([expansion], currentMessage || meta);\n      }\n\n      expansion.i18n = message;\n      return expansion;\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {\n      return text;\n    }\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute) {\n      return attribute;\n    }\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment) {\n      return comment;\n    }\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(expansionCase) {\n      return expansionCase;\n    }\n    /**\n     * Parse the general form `meta` passed into extract the explicit metadata needed to create a\n     * `Message`.\n     *\n     * There are three possibilities for the `meta` variable\n     * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.\n     * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.\n     * 4) other: ignore this and just process the message metadata as normal\n     *\n     * @param meta the bucket that holds information about the message\n     * @returns the parsed metadata.\n     */\n\n  }, {\n    key: \"_parseMetadata\",\n    value: function _parseMetadata(meta) {\n      return typeof meta === 'string' ? parseI18nMeta(meta) : meta instanceof Message ? meta : {};\n    }\n    /**\n     * Generate (or restore) message id if not specified already.\n     */\n\n  }, {\n    key: \"_setMessageId\",\n    value: function _setMessageId(message, meta) {\n      if (!message.id) {\n        message.id = meta instanceof Message && meta.id || decimalDigest(message);\n      }\n    }\n    /**\n     * Update the `message` with a `legacyId` if necessary.\n     *\n     * @param message the message whose legacy id should be set\n     * @param meta information about the message being processed\n     */\n\n  }, {\n    key: \"_setLegacyIds\",\n    value: function _setLegacyIds(message, meta) {\n      if (this.enableI18nLegacyMessageIdFormat) {\n        message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];\n      } else if (typeof meta !== 'string') {\n        // This occurs if we are doing the 2nd pass after whitespace removal (see `parseTemplate()` in\n        // `packages/compiler/src/render3/view/template.ts`).\n        // In that case we want to reuse the legacy message generated in the 1st pass (see\n        // `setI18nRefs()`).\n        var previousMessage = meta instanceof Message ? meta : meta instanceof IcuPlaceholder ? meta.previousMessage : undefined;\n        message.legacyIds = previousMessage ? previousMessage.legacyIds : [];\n      }\n    }\n  }, {\n    key: \"_reportError\",\n    value: function _reportError(node, msg) {\n      this._errors.push(new I18nError(node.sourceSpan, msg));\n    }\n  }]);\n\n  return I18nMetaVisitor;\n}();\n/** I18n separators for metadata **/\n\n\nvar I18N_MEANING_SEPARATOR = '|';\nvar I18N_ID_SEPARATOR = '@@';\n/**\n * Parses i18n metas like:\n *  - \"@@id\",\n *  - \"description[@@id]\",\n *  - \"meaning|description[@@id]\"\n * and returns an object with parsed output.\n *\n * @param meta String that represents i18n meta\n * @returns Object with id, meaning and description fields\n */\n\nfunction parseI18nMeta() {\n  var meta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var customId;\n  var meaning;\n  var description;\n  meta = meta.trim();\n\n  if (meta) {\n    var idIndex = meta.indexOf(I18N_ID_SEPARATOR);\n    var descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);\n    var meaningAndDesc;\n\n    var _ref9 = idIndex > -1 ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ''];\n\n    var _ref10 = _slicedToArray(_ref9, 2);\n\n    meaningAndDesc = _ref10[0];\n    customId = _ref10[1];\n\n    var _ref11 = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc];\n\n    var _ref12 = _slicedToArray(_ref11, 2);\n\n    meaning = _ref12[0];\n    description = _ref12[1];\n  }\n\n  return {\n    customId: customId,\n    meaning: meaning,\n    description: description\n  };\n} // Converts i18n meta information for a message (id, description, meaning)\n// to a JsDoc statement formatted as expected by the Closure compiler.\n\n\nfunction i18nMetaToJSDoc(meta) {\n  var tags = [];\n\n  if (meta.description) {\n    tags.push({\n      tagName: \"desc\"\n      /* Desc */\n      ,\n      text: meta.description\n    });\n  }\n\n  if (meta.meaning) {\n    tags.push({\n      tagName: \"meaning\"\n      /* Meaning */\n      ,\n      text: meta.meaning\n    });\n  }\n\n  return tags.length == 0 ? null : jsDocComment(tags);\n}\n/** Closure uses `goog.getMsg(message)` to lookup translations */\n\n\nvar GOOG_GET_MSG = 'goog.getMsg';\n\nfunction createGoogleGetMsgStatements(variable$1, message, closureVar, params) {\n  var messageString = serializeI18nMessageForGetMsg(message);\n  var args = [literal(messageString)];\n\n  if (Object.keys(params).length) {\n    args.push(mapLiteral(params, true));\n  } // /**\n  //  * @desc description of message\n  //  * @meaning meaning of message\n  //  */\n  // const MSG_... = goog.getMsg(..);\n  // I18N_X = MSG_...;\n\n\n  var googGetMsgStmt = closureVar.set(variable(GOOG_GET_MSG).callFn(args)).toConstDecl();\n  var metaComment = i18nMetaToJSDoc(message);\n\n  if (metaComment !== null) {\n    googGetMsgStmt.addLeadingComment(metaComment);\n  }\n\n  var i18nAssignmentStmt = new ExpressionStatement(variable$1.set(closureVar));\n  return [googGetMsgStmt, i18nAssignmentStmt];\n}\n/**\n * This visitor walks over i18n tree and generates its string representation, including ICUs and\n * placeholders in `{$placeholder}` (for plain messages) or `{PLACEHOLDER}` (inside ICUs) format.\n */\n\n\nvar GetMsgSerializerVisitor = /*#__PURE__*/function () {\n  function GetMsgSerializerVisitor() {\n    _classCallCheck(this, GetMsgSerializerVisitor);\n  }\n\n  _createClass(GetMsgSerializerVisitor, [{\n    key: \"formatPh\",\n    value: function formatPh(value) {\n      return \"{$\".concat(formatI18nPlaceholderName(value), \"}\");\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {\n      return text.value;\n    }\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container) {\n      var _this158 = this;\n\n      return container.children.map(function (child) {\n        return child.visit(_this158);\n      }).join('');\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {\n      return serializeIcuNode(icu);\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph) {\n      var _this159 = this;\n\n      return ph.isVoid ? this.formatPh(ph.startName) : \"\".concat(this.formatPh(ph.startName)).concat(ph.children.map(function (child) {\n        return child.visit(_this159);\n      }).join('')).concat(this.formatPh(ph.closeName));\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph) {\n      return this.formatPh(ph.name);\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, context) {\n      return this.formatPh(ph.name);\n    }\n  }]);\n\n  return GetMsgSerializerVisitor;\n}();\n\nvar serializerVisitor = new GetMsgSerializerVisitor();\n\nfunction serializeI18nMessageForGetMsg(message) {\n  return message.nodes.map(function (node) {\n    return node.visit(serializerVisitor, null);\n  }).join('');\n}\n\nfunction createLocalizeStatements(variable, message, params) {\n  var _serializeI18nMessage = serializeI18nMessageForLocalize(message),\n      messageParts = _serializeI18nMessage.messageParts,\n      placeHolders = _serializeI18nMessage.placeHolders;\n\n  var sourceSpan = getSourceSpan(message);\n  var expressions = placeHolders.map(function (ph) {\n    return params[ph.text];\n  });\n  var localizedString$1 = localizedString(message, messageParts, placeHolders, expressions, sourceSpan);\n  var variableInitialization = variable.set(localizedString$1);\n  return [new ExpressionStatement(variableInitialization)];\n}\n/**\n * This visitor walks over an i18n tree, capturing literal strings and placeholders.\n *\n * The result can be used for generating the `$localize` tagged template literals.\n */\n\n\nvar LocalizeSerializerVisitor = /*#__PURE__*/function () {\n  function LocalizeSerializerVisitor(placeholderToMessage, pieces) {\n    _classCallCheck(this, LocalizeSerializerVisitor);\n\n    this.placeholderToMessage = placeholderToMessage;\n    this.pieces = pieces;\n  }\n\n  _createClass(LocalizeSerializerVisitor, [{\n    key: \"visitText\",\n    value: function visitText(text) {\n      if (this.pieces[this.pieces.length - 1] instanceof LiteralPiece) {\n        // Two literal pieces in a row means that there was some comment node in-between.\n        this.pieces[this.pieces.length - 1].text += text.value;\n      } else {\n        var sourceSpan = new ParseSourceSpan(text.sourceSpan.fullStart, text.sourceSpan.end, text.sourceSpan.fullStart, text.sourceSpan.details);\n        this.pieces.push(new LiteralPiece(text.value, sourceSpan));\n      }\n    }\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container) {\n      var _this160 = this;\n\n      container.children.forEach(function (child) {\n        return child.visit(_this160);\n      });\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {\n      this.pieces.push(new LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph) {\n      var _this161 = this;\n\n      var _a, _b;\n\n      this.pieces.push(this.createPlaceholderPiece(ph.startName, (_a = ph.startSourceSpan) !== null && _a !== void 0 ? _a : ph.sourceSpan));\n\n      if (!ph.isVoid) {\n        ph.children.forEach(function (child) {\n          return child.visit(_this161);\n        });\n        this.pieces.push(this.createPlaceholderPiece(ph.closeName, (_b = ph.endSourceSpan) !== null && _b !== void 0 ? _b : ph.sourceSpan));\n      }\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph) {\n      this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph) {\n      this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan, this.placeholderToMessage[ph.name]));\n    }\n  }, {\n    key: \"createPlaceholderPiece\",\n    value: function createPlaceholderPiece(name, sourceSpan, associatedMessage) {\n      return new PlaceholderPiece(formatI18nPlaceholderName(name,\n      /* useCamelCase */\n      false), sourceSpan, associatedMessage);\n    }\n  }]);\n\n  return LocalizeSerializerVisitor;\n}();\n/**\n * Serialize an i18n message into two arrays: messageParts and placeholders.\n *\n * These arrays will be used to generate `$localize` tagged template literals.\n *\n * @param message The message to be serialized.\n * @returns an object containing the messageParts and placeholders.\n */\n\n\nfunction serializeI18nMessageForLocalize(message) {\n  var pieces = [];\n  var serializerVisitor = new LocalizeSerializerVisitor(message.placeholderToMessage, pieces);\n  message.nodes.forEach(function (node) {\n    return node.visit(serializerVisitor);\n  });\n  return processMessagePieces(pieces);\n}\n\nfunction getSourceSpan(message) {\n  var startNode = message.nodes[0];\n  var endNode = message.nodes[message.nodes.length - 1];\n  return new ParseSourceSpan(startNode.sourceSpan.fullStart, endNode.sourceSpan.end, startNode.sourceSpan.fullStart, startNode.sourceSpan.details);\n}\n/**\n * Convert the list of serialized MessagePieces into two arrays.\n *\n * One contains the literal string pieces and the other the placeholders that will be replaced by\n * expressions when rendering `$localize` tagged template literals.\n *\n * @param pieces The pieces to process.\n * @returns an object containing the messageParts and placeholders.\n */\n\n\nfunction processMessagePieces(pieces) {\n  var messageParts = [];\n  var placeHolders = [];\n\n  if (pieces[0] instanceof PlaceholderPiece) {\n    // The first piece was a placeholder so we need to add an initial empty message part.\n    messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));\n  }\n\n  for (var i = 0; i < pieces.length; i++) {\n    var part = pieces[i];\n\n    if (part instanceof LiteralPiece) {\n      messageParts.push(part);\n    } else {\n      placeHolders.push(part);\n\n      if (pieces[i - 1] instanceof PlaceholderPiece) {\n        // There were two placeholders in a row, so we need to add an empty message part.\n        messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));\n      }\n    }\n  }\n\n  if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {\n    // The last piece was a placeholder so we need to add a final empty message part.\n    messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));\n  }\n\n  return {\n    messageParts: messageParts,\n    placeHolders: placeHolders\n  };\n}\n\nfunction createEmptyMessagePart(location) {\n  return new LiteralPiece('', new ParseSourceSpan(location, location));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Selector attribute name of `<ng-content>`\n\n\nvar NG_CONTENT_SELECT_ATTR = 'select'; // Attribute name of `ngProjectAs`.\n\nvar NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs'; // Global symbols available only inside event bindings.\n\nvar EVENT_BINDING_SCOPE_GLOBALS = new Set(['$event']); // List of supported global targets for event listeners\n\nvar GLOBAL_TARGET_RESOLVERS = new Map([['window', Identifiers$1.resolveWindow], ['document', Identifiers$1.resolveDocument], ['body', Identifiers$1.resolveBody]]);\nvar LEADING_TRIVIA_CHARS = [' ', '\\n', '\\r', '\\t']; //  if (rf & flags) { .. }\n\nfunction renderFlagCheckIfStmt(flags, statements) {\n  return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);\n}\n\nfunction prepareEventListenerParameters(eventAst) {\n  var handlerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var type = eventAst.type,\n      name = eventAst.name,\n      target = eventAst.target,\n      phase = eventAst.phase,\n      handler = eventAst.handler;\n\n  if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {\n    throw new Error(\"Unexpected global target '\".concat(target, \"' defined for '\").concat(name, \"' event.\\n        Supported list of global targets: \").concat(Array.from(GLOBAL_TARGET_RESOLVERS.keys()), \".\"));\n  }\n\n  var eventArgumentName = '$event';\n  var implicitReceiverAccesses = new Set();\n  var implicitReceiverExpr = scope === null || scope.bindingLevel === 0 ? variable(CONTEXT_NAME) : scope.getOrCreateSharedContextVar(0);\n  var bindingExpr = convertActionBinding(scope, implicitReceiverExpr, handler, 'b', function () {\n    return error('Unexpected interpolation');\n  }, eventAst.handlerSpan, implicitReceiverAccesses, EVENT_BINDING_SCOPE_GLOBALS);\n  var statements = [];\n\n  if (scope) {\n    // `variableDeclarations` needs to run first, because\n    // `restoreViewStatement` depends on the result.\n    statements.push.apply(statements, _toConsumableArray(scope.variableDeclarations()));\n    statements.unshift.apply(statements, _toConsumableArray(scope.restoreViewStatement()));\n  }\n\n  statements.push.apply(statements, _toConsumableArray(bindingExpr.render3Stmts));\n  var eventName = type === 1\n  /* Animation */\n  ? prepareSyntheticListenerName(name, phase) : name;\n  var fnName = handlerName && sanitizeIdentifier(handlerName);\n  var fnArgs = [];\n\n  if (implicitReceiverAccesses.has(eventArgumentName)) {\n    fnArgs.push(new FnParam(eventArgumentName, DYNAMIC_TYPE));\n  }\n\n  var handlerFn = fn(fnArgs, statements, INFERRED_TYPE, null, fnName);\n  var params = [literal(eventName), handlerFn];\n\n  if (target) {\n    params.push(literal(false), // `useCapture` flag, defaults to `false`\n    importExpr(GLOBAL_TARGET_RESOLVERS.get(target)));\n  }\n\n  return params;\n}\n\nfunction createComponentDefConsts() {\n  return {\n    prepareStatements: [],\n    constExpressions: [],\n    i18nVarRefsCache: new Map()\n  };\n}\n\nvar TemplateDefinitionBuilder = /*#__PURE__*/function () {\n  function TemplateDefinitionBuilder(constantPool, parentBindingScope) {\n    var _this162 = this;\n\n    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var contextName = arguments.length > 3 ? arguments[3] : undefined;\n    var i18nContext = arguments.length > 4 ? arguments[4] : undefined;\n    var templateIndex = arguments.length > 5 ? arguments[5] : undefined;\n    var templateName = arguments.length > 6 ? arguments[6] : undefined;\n    var directiveMatcher = arguments.length > 7 ? arguments[7] : undefined;\n    var directives = arguments.length > 8 ? arguments[8] : undefined;\n    var pipeTypeByName = arguments.length > 9 ? arguments[9] : undefined;\n    var pipes = arguments.length > 10 ? arguments[10] : undefined;\n\n    var _namespace = arguments.length > 11 ? arguments[11] : undefined;\n\n    var relativeContextFilePath = arguments.length > 12 ? arguments[12] : undefined;\n    var i18nUseExternalIds = arguments.length > 13 ? arguments[13] : undefined;\n\n    var _constants = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : createComponentDefConsts();\n\n    _classCallCheck(this, TemplateDefinitionBuilder);\n\n    this.constantPool = constantPool;\n    this.level = level;\n    this.contextName = contextName;\n    this.i18nContext = i18nContext;\n    this.templateIndex = templateIndex;\n    this.templateName = templateName;\n    this.directiveMatcher = directiveMatcher;\n    this.directives = directives;\n    this.pipeTypeByName = pipeTypeByName;\n    this.pipes = pipes;\n    this._namespace = _namespace;\n    this.i18nUseExternalIds = i18nUseExternalIds;\n    this._constants = _constants;\n    this._dataIndex = 0;\n    this._bindingContext = 0;\n    this._prefixCode = [];\n    /**\n     * List of callbacks to generate creation mode instructions. We store them here as we process\n     * the template so bindings in listeners are resolved only once all nodes have been visited.\n     * This ensures all local refs and context variables are available for matching.\n     */\n\n    this._creationCodeFns = [];\n    /**\n     * List of callbacks to generate update mode instructions. We store them here as we process\n     * the template so bindings are resolved only once all nodes have been visited. This ensures\n     * all local refs and context variables are available for matching.\n     */\n\n    this._updateCodeFns = [];\n    /** Index of the currently-selected node. */\n\n    this._currentIndex = 0;\n    /** Temporary variable declarations generated from visiting pipes, literals, etc. */\n\n    this._tempVariables = [];\n    /**\n     * List of callbacks to build nested templates. Nested templates must not be visited until\n     * after the parent template has finished visiting all of its nodes. This ensures that all\n     * local ref bindings in nested templates are able to find local ref values if the refs\n     * are defined after the template declaration.\n     */\n\n    this._nestedTemplateFns = [];\n    this._unsupported = unsupported; // i18n context local to this template\n\n    this.i18n = null; // Number of slots to reserve for pureFunctions\n\n    this._pureFunctionSlots = 0; // Number of binding slots\n\n    this._bindingSlots = 0; // Projection slots found in the template. Projection slots can distribute projected\n    // nodes based on a selector, or can just use the wildcard selector to match\n    // all nodes which aren't matching any selector.\n\n    this._ngContentReservedSlots = []; // Number of non-default selectors found in all parent templates of this template. We need to\n    // track it to properly adjust projection slot index in the `projection` instruction.\n\n    this._ngContentSelectorsOffset = 0; // Expression that should be used as implicit receiver when converting template\n    // expressions to output AST.\n\n    this._implicitReceiverExpr = null; // These should be handled in the template or element directly.\n\n    this.visitReference = invalid;\n    this.visitVariable = invalid;\n    this.visitTextAttribute = invalid;\n    this.visitBoundAttribute = invalid;\n    this.visitBoundEvent = invalid;\n    this._bindingScope = parentBindingScope.nestedScope(level); // Turn the relative context file path into an identifier by replacing non-alphanumeric\n    // characters with underscores.\n\n    this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_') + '_';\n    this._valueConverter = new ValueConverter(constantPool, function () {\n      return _this162.allocateDataSlot();\n    }, function (numSlots) {\n      return _this162.allocatePureFunctionSlots(numSlots);\n    }, function (name, localName, slot, value) {\n      var pipeType = pipeTypeByName.get(name);\n\n      if (pipeType) {\n        _this162.pipes.add(pipeType);\n      }\n\n      _this162._bindingScope.set(_this162.level, localName, value);\n\n      _this162.creationInstruction(null, Identifiers$1.pipe, [literal(slot), literal(name)]);\n    });\n  }\n\n  _createClass(TemplateDefinitionBuilder, [{\n    key: \"buildTemplateFunction\",\n    value: function buildTemplateFunction(nodes, variables) {\n      var _this163 = this;\n\n      var ngContentSelectorsOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var i18n = arguments.length > 3 ? arguments[3] : undefined;\n      this._ngContentSelectorsOffset = ngContentSelectorsOffset;\n\n      if (this._namespace !== Identifiers$1.namespaceHTML) {\n        this.creationInstruction(null, this._namespace);\n      } // Create variable bindings\n\n\n      variables.forEach(function (v) {\n        return _this163.registerContextVariables(v);\n      }); // Initiate i18n context in case:\n      // - this template has parent i18n context\n      // - or the template has i18n meta associated with it,\n      //   but it's not initiated by the Element (e.g. <ng-template i18n>)\n\n      var initI18nContext = this.i18nContext || isI18nRootNode(i18n) && !isSingleI18nIcu(i18n) && !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n);\n      var selfClosingI18nInstruction = hasTextChildrenOnly(nodes);\n\n      if (initI18nContext) {\n        this.i18nStart(null, i18n, selfClosingI18nInstruction);\n      } // This is the initial pass through the nodes of this template. In this pass, we\n      // queue all creation mode and update mode instructions for generation in the second\n      // pass. It's necessary to separate the passes to ensure local refs are defined before\n      // resolving bindings. We also count bindings in this pass as we walk bound expressions.\n\n\n      visitAll$1(this, nodes); // Add total binding count to pure function count so pure function instructions are\n      // generated with the correct slot offset when update instructions are processed.\n\n      this._pureFunctionSlots += this._bindingSlots; // Pipes are walked in the first pass (to enqueue `pipe()` creation instructions and\n      // `pipeBind` update instructions), so we have to update the slot offsets manually\n      // to account for bindings.\n\n      this._valueConverter.updatePipeSlotOffsets(this._bindingSlots); // Nested templates must be processed before creation instructions so template()\n      // instructions can be generated with the correct internal const count.\n\n\n      this._nestedTemplateFns.forEach(function (buildTemplateFn) {\n        return buildTemplateFn();\n      }); // Output the `projectionDef` instruction when some `<ng-content>` tags are present.\n      // The `projectionDef` instruction is only emitted for the component template and\n      // is skipped for nested templates (<ng-template> tags).\n\n\n      if (this.level === 0 && this._ngContentReservedSlots.length) {\n        var parameters = []; // By default the `projectionDef` instructions creates one slot for the wildcard\n        // selector if no parameters are passed. Therefore we only want to allocate a new\n        // array for the projection slots if the default projection slot is not sufficient.\n\n        if (this._ngContentReservedSlots.length > 1 || this._ngContentReservedSlots[0] !== '*') {\n          var r3ReservedSlots = this._ngContentReservedSlots.map(function (s) {\n            return s !== '*' ? parseSelectorToR3Selector(s) : s;\n          });\n\n          parameters.push(this.constantPool.getConstLiteral(asLiteral(r3ReservedSlots), true));\n        } // Since we accumulate ngContent selectors while processing template elements,\n        // we *prepend* `projectionDef` to creation instructions block, to put it before\n        // any `projection` instructions\n\n\n        this.creationInstruction(null, Identifiers$1.projectionDef, parameters,\n        /* prepend */\n        true);\n      }\n\n      if (initI18nContext) {\n        this.i18nEnd(null, selfClosingI18nInstruction);\n      } // Generate all the creation mode instructions (e.g. resolve bindings in listeners)\n\n\n      var creationStatements = this._creationCodeFns.map(function (fn) {\n        return fn();\n      }); // Generate all the update mode instructions (e.g. resolve property or text bindings)\n\n\n      var updateStatements = this._updateCodeFns.map(function (fn) {\n        return fn();\n      }); //  Variable declaration must occur after binding resolution so we can generate context\n      //  instructions that build on each other.\n      // e.g. const b = nextContext().$implicit(); const b = nextContext();\n\n\n      var creationVariables = this._bindingScope.viewSnapshotStatements();\n\n      var updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);\n\n      var creationBlock = creationStatements.length > 0 ? [renderFlagCheckIfStmt(1\n      /* Create */\n      , creationVariables.concat(creationStatements))] : [];\n      var updateBlock = updateStatements.length > 0 ? [renderFlagCheckIfStmt(2\n      /* Update */\n      , updateVariables.concat(updateStatements))] : [];\n      return fn( // i.e. (rf: RenderFlags, ctx: any)\n      [new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [].concat(_toConsumableArray(this._prefixCode), creationBlock, updateBlock), INFERRED_TYPE, null, this.templateName);\n    } // LocalResolver\n\n  }, {\n    key: \"getLocal\",\n    value: function getLocal(name) {\n      return this._bindingScope.get(name);\n    } // LocalResolver\n\n  }, {\n    key: \"notifyImplicitReceiverUse\",\n    value: function notifyImplicitReceiverUse() {\n      this._bindingScope.notifyImplicitReceiverUse();\n    } // LocalResolver\n\n  }, {\n    key: \"maybeRestoreView\",\n    value: function maybeRestoreView() {\n      this._bindingScope.maybeRestoreView();\n    }\n  }, {\n    key: \"i18nTranslate\",\n    value: function i18nTranslate(message) {\n      var _this$_constants$prep;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var ref = arguments.length > 2 ? arguments[2] : undefined;\n      var transformFn = arguments.length > 3 ? arguments[3] : undefined;\n\n      var _ref = ref || this.i18nGenerateMainBlockVar(); // Closure Compiler requires const names to start with `MSG_` but disallows any other const to\n      // start with `MSG_`. We define a variable starting with `MSG_` just for the `goog.getMsg` call\n\n\n      var closureVar = this.i18nGenerateClosureVar(message.id);\n      var statements = getTranslationDeclStmts(message, _ref, closureVar, params, transformFn);\n\n      (_this$_constants$prep = this._constants.prepareStatements).push.apply(_this$_constants$prep, _toConsumableArray(statements));\n\n      return _ref;\n    }\n  }, {\n    key: \"registerContextVariables\",\n    value: function registerContextVariables(variable$1) {\n      var scopedName = this._bindingScope.freshReferenceName();\n\n      var retrievalLevel = this.level;\n      var lhs = variable(variable$1.name + scopedName);\n\n      this._bindingScope.set(retrievalLevel, variable$1.name, lhs, 1\n      /* CONTEXT */\n      , function (scope, relativeLevel) {\n        var rhs;\n\n        if (scope.bindingLevel === retrievalLevel) {\n          if (scope.isListenerScope() && scope.hasRestoreViewVariable()) {\n            // e.g. restoredCtx.\n            // We have to get the context from a view reference, if one is available, because\n            // the context that was passed in during creation may not be correct anymore.\n            // For more information see: https://github.com/angular/angular/pull/40360.\n            rhs = variable(RESTORED_VIEW_CONTEXT_NAME);\n            scope.notifyRestoredViewContextUse();\n          } else {\n            // e.g. ctx\n            rhs = variable(CONTEXT_NAME);\n          }\n        } else {\n          var sharedCtxVar = scope.getSharedContextName(retrievalLevel); // e.g. ctx_r0   OR  x(2);\n\n          rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);\n        } // e.g. const $item$ = x(2).$implicit;\n\n\n        return [lhs.set(rhs.prop(variable$1.value || IMPLICIT_REFERENCE)).toConstDecl()];\n      });\n    }\n  }, {\n    key: \"i18nAppendBindings\",\n    value: function i18nAppendBindings(expressions) {\n      var _this164 = this;\n\n      if (expressions.length > 0) {\n        expressions.forEach(function (expression) {\n          return _this164.i18n.appendBinding(expression);\n        });\n      }\n    }\n  }, {\n    key: \"i18nBindProps\",\n    value: function i18nBindProps(props) {\n      var _this165 = this;\n\n      var bound = {};\n      Object.keys(props).forEach(function (key) {\n        var prop = props[key];\n\n        if (prop instanceof Text$3) {\n          bound[key] = literal(prop.value);\n        } else {\n          var value = prop.value.visit(_this165._valueConverter);\n\n          _this165.allocateBindingSlots(value);\n\n          if (value instanceof Interpolation) {\n            var strings = value.strings,\n                expressions = value.expressions;\n            var _this165$i18n = _this165.i18n,\n                id = _this165$i18n.id,\n                bindings = _this165$i18n.bindings;\n            var label = assembleI18nBoundString(strings, bindings.size, id);\n\n            _this165.i18nAppendBindings(expressions);\n\n            bound[key] = literal(label);\n          }\n        }\n      });\n      return bound;\n    } // Generates top level vars for i18n blocks (i.e. `i18n_N`).\n\n  }, {\n    key: \"i18nGenerateMainBlockVar\",\n    value: function i18nGenerateMainBlockVar() {\n      return variable(this.constantPool.uniqueName(TRANSLATION_VAR_PREFIX));\n    } // Generates vars with Closure-specific names for i18n blocks (i.e. `MSG_XXX`).\n\n  }, {\n    key: \"i18nGenerateClosureVar\",\n    value: function i18nGenerateClosureVar(messageId) {\n      var name;\n      var suffix = this.fileBasedI18nSuffix.toUpperCase();\n\n      if (this.i18nUseExternalIds) {\n        var prefix = getTranslationConstPrefix(\"EXTERNAL_\");\n        var uniqueSuffix = this.constantPool.uniqueName(suffix);\n        name = \"\".concat(prefix).concat(sanitizeIdentifier(messageId), \"$$\").concat(uniqueSuffix);\n      } else {\n        var _prefix = getTranslationConstPrefix(suffix);\n\n        name = this.constantPool.uniqueName(_prefix);\n      }\n\n      return variable(name);\n    }\n  }, {\n    key: \"i18nUpdateRef\",\n    value: function i18nUpdateRef(context) {\n      var icus = context.icus,\n          meta = context.meta,\n          isRoot = context.isRoot,\n          isResolved = context.isResolved,\n          isEmitted = context.isEmitted;\n\n      if (isRoot && isResolved && !isEmitted && !isSingleI18nIcu(meta)) {\n        context.isEmitted = true;\n        var placeholders = context.getSerializedPlaceholders();\n        var icuMapping = {};\n        var params = placeholders.size ? placeholdersToParams(placeholders) : {};\n\n        if (icus.size) {\n          icus.forEach(function (refs, key) {\n            if (refs.length === 1) {\n              // if we have one ICU defined for a given\n              // placeholder - just output its reference\n              params[key] = refs[0];\n            } else {\n              // ... otherwise we need to activate post-processing\n              // to replace ICU placeholders with proper values\n              var placeholder = wrapI18nPlaceholder(\"\".concat(I18N_ICU_MAPPING_PREFIX).concat(key));\n              params[key] = literal(placeholder);\n              icuMapping[key] = literalArr(refs);\n            }\n          });\n        } // translation requires post processing in 2 cases:\n        // - if we have placeholders with multiple values (ex. `START_DIV`: [�#1�, �#2�, ...])\n        // - if we have multiple ICUs that refer to the same placeholder name\n\n\n        var needsPostprocessing = Array.from(placeholders.values()).some(function (value) {\n          return value.length > 1;\n        }) || Object.keys(icuMapping).length;\n        var transformFn;\n\n        if (needsPostprocessing) {\n          transformFn = function transformFn(raw) {\n            var args = [raw];\n\n            if (Object.keys(icuMapping).length) {\n              args.push(mapLiteral(icuMapping, true));\n            }\n\n            return instruction(null, Identifiers$1.i18nPostprocess, args);\n          };\n        }\n\n        this.i18nTranslate(meta, params, context.ref, transformFn);\n      }\n    }\n  }, {\n    key: \"i18nStart\",\n    value: function i18nStart() {\n      var span = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var meta = arguments.length > 1 ? arguments[1] : undefined;\n      var selfClosing = arguments.length > 2 ? arguments[2] : undefined;\n      var index = this.allocateDataSlot();\n      this.i18n = this.i18nContext ? this.i18nContext.forkChildContext(index, this.templateIndex, meta) : new I18nContext(index, this.i18nGenerateMainBlockVar(), 0, this.templateIndex, meta); // generate i18nStart instruction\n\n      var _this$i18n = this.i18n,\n          id = _this$i18n.id,\n          ref = _this$i18n.ref;\n      var params = [literal(index), this.addToConsts(ref)];\n\n      if (id > 0) {\n        // do not push 3rd argument (sub-block id)\n        // into i18nStart call for top level i18n context\n        params.push(literal(id));\n      }\n\n      this.creationInstruction(span, selfClosing ? Identifiers$1.i18n : Identifiers$1.i18nStart, params);\n    }\n  }, {\n    key: \"i18nEnd\",\n    value: function i18nEnd() {\n      var _this166 = this;\n\n      var span = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var selfClosing = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (!this.i18n) {\n        throw new Error('i18nEnd is executed with no i18n context present');\n      }\n\n      if (this.i18nContext) {\n        this.i18nContext.reconcileChildContext(this.i18n);\n        this.i18nUpdateRef(this.i18nContext);\n      } else {\n        this.i18nUpdateRef(this.i18n);\n      } // setup accumulated bindings\n\n\n      var _this$i18n2 = this.i18n,\n          index = _this$i18n2.index,\n          bindings = _this$i18n2.bindings;\n\n      if (bindings.size) {\n        var chainBindings = [];\n        bindings.forEach(function (binding) {\n          chainBindings.push({\n            sourceSpan: span,\n            value: function value() {\n              return _this166.convertPropertyBinding(binding);\n            }\n          });\n        }); // for i18n block, advance to the most recent element index (by taking the current number of\n        // elements and subtracting one) before invoking `i18nExp` instructions, to make sure the\n        // necessary lifecycle hooks of components/directives are properly flushed.\n\n        this.updateInstructionChainWithAdvance(this.getConstCount() - 1, Identifiers$1.i18nExp, chainBindings);\n        this.updateInstruction(span, Identifiers$1.i18nApply, [literal(index)]);\n      }\n\n      if (!selfClosing) {\n        this.creationInstruction(span, Identifiers$1.i18nEnd);\n      }\n\n      this.i18n = null; // reset local i18n context\n    }\n  }, {\n    key: \"i18nAttributesInstruction\",\n    value: function i18nAttributesInstruction(nodeIndex, attrs, sourceSpan) {\n      var _this167 = this;\n\n      var hasBindings = false;\n      var i18nAttrArgs = [];\n      var bindings = [];\n      attrs.forEach(function (attr) {\n        var message = attr.i18n;\n        var converted = attr.value.visit(_this167._valueConverter);\n\n        _this167.allocateBindingSlots(converted);\n\n        if (converted instanceof Interpolation) {\n          var placeholders = assembleBoundTextPlaceholders(message);\n          var params = placeholdersToParams(placeholders);\n          i18nAttrArgs.push(literal(attr.name), _this167.i18nTranslate(message, params));\n          converted.expressions.forEach(function (expression) {\n            hasBindings = true;\n            bindings.push({\n              sourceSpan: sourceSpan,\n              value: function value() {\n                return _this167.convertPropertyBinding(expression);\n              }\n            });\n          });\n        }\n      });\n\n      if (bindings.length > 0) {\n        this.updateInstructionChainWithAdvance(nodeIndex, Identifiers$1.i18nExp, bindings);\n      }\n\n      if (i18nAttrArgs.length > 0) {\n        var index = literal(this.allocateDataSlot());\n        var constIndex = this.addToConsts(literalArr(i18nAttrArgs));\n        this.creationInstruction(sourceSpan, Identifiers$1.i18nAttributes, [index, constIndex]);\n\n        if (hasBindings) {\n          this.updateInstruction(sourceSpan, Identifiers$1.i18nApply, [index]);\n        }\n      }\n    }\n  }, {\n    key: \"getNamespaceInstruction\",\n    value: function getNamespaceInstruction(namespaceKey) {\n      switch (namespaceKey) {\n        case 'math':\n          return Identifiers$1.namespaceMathML;\n\n        case 'svg':\n          return Identifiers$1.namespaceSVG;\n\n        default:\n          return Identifiers$1.namespaceHTML;\n      }\n    }\n  }, {\n    key: \"addNamespaceInstruction\",\n    value: function addNamespaceInstruction(nsInstruction, element) {\n      this._namespace = nsInstruction;\n      this.creationInstruction(element.startSourceSpan, nsInstruction);\n    }\n    /**\n     * Adds an update instruction for an interpolated property or attribute, such as\n     * `prop=\"{{value}}\"` or `attr.title=\"{{value}}\"`\n     */\n\n  }, {\n    key: \"interpolatedUpdateInstruction\",\n    value: function interpolatedUpdateInstruction(instruction, elementIndex, attrName, input, value, params) {\n      var _this168 = this;\n\n      this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, instruction, function () {\n        return [literal(attrName)].concat(_toConsumableArray(_this168.getUpdateInstructionArguments(value)), _toConsumableArray(params));\n      });\n    }\n  }, {\n    key: \"visitContent\",\n    value: function visitContent(ngContent) {\n      var slot = this.allocateDataSlot();\n      var projectionSlotIdx = this._ngContentSelectorsOffset + this._ngContentReservedSlots.length;\n      var parameters = [literal(slot)];\n\n      this._ngContentReservedSlots.push(ngContent.selector);\n\n      var nonContentSelectAttributes = ngContent.attributes.filter(function (attr) {\n        return attr.name.toLowerCase() !== NG_CONTENT_SELECT_ATTR;\n      });\n      var attributes = this.getAttributeExpressions(ngContent.name, nonContentSelectAttributes, [], []);\n\n      if (attributes.length > 0) {\n        parameters.push(literal(projectionSlotIdx), literalArr(attributes));\n      } else if (projectionSlotIdx !== 0) {\n        parameters.push(literal(projectionSlotIdx));\n      }\n\n      this.creationInstruction(ngContent.sourceSpan, Identifiers$1.projection, parameters);\n\n      if (this.i18n) {\n        this.i18n.appendProjection(ngContent.i18n, slot);\n      }\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(element) {\n      var _this169 = this;\n\n      var _a, _b;\n\n      var elementIndex = this.allocateDataSlot();\n      var stylingBuilder = new StylingBuilder(null);\n      var isNonBindableMode = false;\n      var isI18nRootElement = isI18nRootNode(element.i18n) && !isSingleI18nIcu(element.i18n);\n      var outputAttrs = [];\n\n      var _splitNsName = splitNsName(element.name),\n          _splitNsName2 = _slicedToArray(_splitNsName, 2),\n          namespaceKey = _splitNsName2[0],\n          elementName = _splitNsName2[1];\n\n      var isNgContainer$1 = isNgContainer(element.name); // Handle styling, i18n, ngNonBindable attributes\n\n      var _iterator19 = _createForOfIteratorHelper(element.attributes),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var attr = _step19.value;\n          var name = attr.name,\n              value = attr.value;\n\n          if (name === NON_BINDABLE_ATTR) {\n            isNonBindableMode = true;\n          } else if (name === 'style') {\n            stylingBuilder.registerStyleAttr(value);\n          } else if (name === 'class') {\n            stylingBuilder.registerClassAttr(value);\n          } else {\n            outputAttrs.push(attr);\n          }\n        } // Match directives on non i18n attributes\n\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      this.matchDirectives(element.name, element); // Regular element or ng-container creation mode\n\n      var parameters = [literal(elementIndex)];\n\n      if (!isNgContainer$1) {\n        parameters.push(literal(elementName));\n      } // Add the attributes\n\n\n      var allOtherInputs = [];\n      var boundI18nAttrs = [];\n      element.inputs.forEach(function (input) {\n        var stylingInputWasSet = stylingBuilder.registerBoundInput(input);\n\n        if (!stylingInputWasSet) {\n          if (input.type === 0\n          /* Property */\n          && input.i18n) {\n            boundI18nAttrs.push(input);\n          } else {\n            allOtherInputs.push(input);\n          }\n        }\n      }); // add attributes for directive and projection matching purposes\n\n      var attributes = this.getAttributeExpressions(element.name, outputAttrs, allOtherInputs, element.outputs, stylingBuilder, [], boundI18nAttrs);\n      parameters.push(this.addAttrsToConsts(attributes)); // local refs (ex.: <div #foo #bar=\"baz\">)\n\n      var refs = this.prepareRefsArray(element.references);\n      parameters.push(this.addToConsts(refs));\n      var wasInNamespace = this._namespace;\n      var currentNamespace = this.getNamespaceInstruction(namespaceKey); // If the namespace is changing now, include an instruction to change it\n      // during element creation.\n\n      if (currentNamespace !== wasInNamespace) {\n        this.addNamespaceInstruction(currentNamespace, element);\n      }\n\n      if (this.i18n) {\n        this.i18n.appendElement(element.i18n, elementIndex);\n      } // Note that we do not append text node instructions and ICUs inside i18n section,\n      // so we exclude them while calculating whether current element has children\n\n\n      var hasChildren = !isI18nRootElement && this.i18n ? !hasTextChildrenOnly(element.children) : element.children.length > 0;\n      var createSelfClosingInstruction = !stylingBuilder.hasBindingsWithPipes && element.outputs.length === 0 && boundI18nAttrs.length === 0 && !hasChildren;\n      var createSelfClosingI18nInstruction = !createSelfClosingInstruction && hasTextChildrenOnly(element.children);\n\n      if (createSelfClosingInstruction) {\n        this.creationInstruction(element.sourceSpan, isNgContainer$1 ? Identifiers$1.elementContainer : Identifiers$1.element, trimTrailingNulls(parameters));\n      } else {\n        this.creationInstruction(element.startSourceSpan, isNgContainer$1 ? Identifiers$1.elementContainerStart : Identifiers$1.elementStart, trimTrailingNulls(parameters));\n\n        if (isNonBindableMode) {\n          this.creationInstruction(element.startSourceSpan, Identifiers$1.disableBindings);\n        }\n\n        if (boundI18nAttrs.length > 0) {\n          this.i18nAttributesInstruction(elementIndex, boundI18nAttrs, (_a = element.startSourceSpan) !== null && _a !== void 0 ? _a : element.sourceSpan);\n        } // Generate Listeners (outputs)\n\n\n        if (element.outputs.length > 0) {\n          var listeners = element.outputs.map(function (outputAst) {\n            return {\n              sourceSpan: outputAst.sourceSpan,\n              params: _this169.prepareListenerParameter(element.name, outputAst, elementIndex)\n            };\n          });\n          this.creationInstructionChain(Identifiers$1.listener, listeners);\n        } // Note: it's important to keep i18n/i18nStart instructions after i18nAttributes and\n        // listeners, to make sure i18nAttributes instruction targets current element at runtime.\n\n\n        if (isI18nRootElement) {\n          this.i18nStart(element.startSourceSpan, element.i18n, createSelfClosingI18nInstruction);\n        }\n      } // the code here will collect all update-level styling instructions and add them to the\n      // update block of the template function AOT code. Instructions like `styleProp`,\n      // `styleMap`, `classMap`, `classProp`\n      // are all generated and assigned in the code below.\n\n\n      var stylingInstructions = stylingBuilder.buildUpdateLevelInstructions(this._valueConverter);\n      var limit = stylingInstructions.length - 1;\n\n      for (var i = 0; i <= limit; i++) {\n        var _instruction = stylingInstructions[i];\n        this._bindingSlots += this.processStylingUpdateInstruction(elementIndex, _instruction);\n      } // the reason why `undefined` is used is because the renderer understands this as a\n      // special value to symbolize that there is no RHS to this binding\n      // TODO (matsko): revisit this once FW-959 is approached\n\n\n      var emptyValueBindInstruction = literal(undefined);\n      var propertyBindings = [];\n      var attributeBindings = []; // Generate element input bindings\n\n      allOtherInputs.forEach(function (input) {\n        var inputType = input.type;\n\n        if (inputType === 4\n        /* Animation */\n        ) {\n          var _value2 = input.value.visit(_this169._valueConverter); // animation bindings can be presented in the following formats:\n          // 1. [@binding]=\"fooExp\"\n          // 2. [@binding]=\"{value:fooExp, params:{...}}\"\n          // 3. [@binding]\n          // 4. @binding\n          // All formats will be valid for when a synthetic binding is created.\n          // The reasoning for this is because the renderer should get each\n          // synthetic binding value in the order of the array that they are\n          // defined in...\n\n\n          var hasValue = _value2 instanceof LiteralPrimitive ? !!_value2.value : true;\n\n          _this169.allocateBindingSlots(_value2);\n\n          propertyBindings.push({\n            name: prepareSyntheticPropertyName(input.name),\n            sourceSpan: input.sourceSpan,\n            value: function value() {\n              return hasValue ? _this169.convertPropertyBinding(_value2) : emptyValueBindInstruction;\n            }\n          });\n        } else {\n          // we must skip attributes with associated i18n context, since these attributes are handled\n          // separately and corresponding `i18nExp` and `i18nApply` instructions will be generated\n          if (input.i18n) return;\n\n          var _value3 = input.value.visit(_this169._valueConverter);\n\n          if (_value3 !== undefined) {\n            var params = [];\n\n            var _splitNsName3 = splitNsName(input.name),\n                _splitNsName4 = _slicedToArray(_splitNsName3, 2),\n                attrNamespace = _splitNsName4[0],\n                attrName = _splitNsName4[1];\n\n            var isAttributeBinding = inputType === 1\n            /* Attribute */\n            ;\n            var sanitizationRef = resolveSanitizationFn(input.securityContext, isAttributeBinding);\n            if (sanitizationRef) params.push(sanitizationRef);\n\n            if (attrNamespace) {\n              var namespaceLiteral = literal(attrNamespace);\n\n              if (sanitizationRef) {\n                params.push(namespaceLiteral);\n              } else {\n                // If there wasn't a sanitization ref, we need to add\n                // an extra param so that we can pass in the namespace.\n                params.push(literal(null), namespaceLiteral);\n              }\n            }\n\n            _this169.allocateBindingSlots(_value3);\n\n            if (inputType === 0\n            /* Property */\n            ) {\n              if (_value3 instanceof Interpolation) {\n                // prop=\"{{value}}\" and friends\n                _this169.interpolatedUpdateInstruction(getPropertyInterpolationExpression(_value3), elementIndex, attrName, input, _value3, params);\n              } else {\n                // [prop]=\"value\"\n                // Collect all the properties so that we can chain into a single function at the end.\n                propertyBindings.push({\n                  name: attrName,\n                  sourceSpan: input.sourceSpan,\n                  value: function value() {\n                    return _this169.convertPropertyBinding(_value3);\n                  },\n                  params: params\n                });\n              }\n            } else if (inputType === 1\n            /* Attribute */\n            ) {\n              if (_value3 instanceof Interpolation && getInterpolationArgsLength(_value3) > 1) {\n                // attr.name=\"text{{value}}\" and friends\n                _this169.interpolatedUpdateInstruction(getAttributeInterpolationExpression(_value3), elementIndex, attrName, input, _value3, params);\n              } else {\n                var boundValue = _value3 instanceof Interpolation ? _value3.expressions[0] : _value3; // [attr.name]=\"value\" or attr.name=\"{{value}}\"\n                // Collect the attribute bindings so that they can be chained at the end.\n\n                attributeBindings.push({\n                  name: attrName,\n                  sourceSpan: input.sourceSpan,\n                  value: function value() {\n                    return _this169.convertPropertyBinding(boundValue);\n                  },\n                  params: params\n                });\n              }\n            } else {\n              // class prop\n              _this169.updateInstructionWithAdvance(elementIndex, input.sourceSpan, Identifiers$1.classProp, function () {\n                return [literal(elementIndex), literal(attrName), _this169.convertPropertyBinding(_value3)].concat(params);\n              });\n            }\n          }\n        }\n      });\n\n      if (propertyBindings.length > 0) {\n        this.updateInstructionChainWithAdvance(elementIndex, Identifiers$1.property, propertyBindings);\n      }\n\n      if (attributeBindings.length > 0) {\n        this.updateInstructionChainWithAdvance(elementIndex, Identifiers$1.attribute, attributeBindings);\n      } // Traverse element child nodes\n\n\n      visitAll$1(this, element.children);\n\n      if (!isI18nRootElement && this.i18n) {\n        this.i18n.appendElement(element.i18n, elementIndex, true);\n      }\n\n      if (!createSelfClosingInstruction) {\n        // Finish element construction mode.\n        var span = (_b = element.endSourceSpan) !== null && _b !== void 0 ? _b : element.sourceSpan;\n\n        if (isI18nRootElement) {\n          this.i18nEnd(span, createSelfClosingI18nInstruction);\n        }\n\n        if (isNonBindableMode) {\n          this.creationInstruction(span, Identifiers$1.enableBindings);\n        }\n\n        this.creationInstruction(span, isNgContainer$1 ? Identifiers$1.elementContainerEnd : Identifiers$1.elementEnd);\n      }\n    }\n  }, {\n    key: \"visitTemplate\",\n    value: function visitTemplate(template) {\n      var _this170 = this;\n\n      var _a;\n\n      var NG_TEMPLATE_TAG_NAME = 'ng-template';\n      var templateIndex = this.allocateDataSlot();\n\n      if (this.i18n) {\n        this.i18n.appendTemplate(template.i18n, templateIndex);\n      }\n\n      var tagNameWithoutNamespace = template.tagName ? splitNsName(template.tagName)[1] : template.tagName;\n      var contextName = \"\".concat(this.contextName).concat(template.tagName ? '_' + sanitizeIdentifier(template.tagName) : '', \"_\").concat(templateIndex);\n      var templateName = \"\".concat(contextName, \"_Template\");\n      var parameters = [literal(templateIndex), variable(templateName), // We don't care about the tag's namespace here, because we infer\n      // it based on the parent nodes inside the template instruction.\n      literal(tagNameWithoutNamespace)]; // find directives matching on a given <ng-template> node\n\n      this.matchDirectives(NG_TEMPLATE_TAG_NAME, template); // prepare attributes parameter (including attributes used for directive matching)\n\n      var attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, template.attributes, template.inputs, template.outputs, undefined\n      /* styles */\n      , template.templateAttrs);\n      parameters.push(this.addAttrsToConsts(attrsExprs)); // local refs (ex.: <ng-template #foo>)\n\n      if (template.references && template.references.length) {\n        var refs = this.prepareRefsArray(template.references);\n        parameters.push(this.addToConsts(refs));\n        parameters.push(importExpr(Identifiers$1.templateRefExtractor));\n      } // Create the template function\n\n\n      var templateVisitor = new TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, templateIndex, templateName, this.directiveMatcher, this.directives, this.pipeTypeByName, this.pipes, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds, this._constants); // Nested templates must not be visited until after their parent templates have completed\n      // processing, so they are queued here until after the initial pass. Otherwise, we wouldn't\n      // be able to support bindings in nested templates to local refs that occur after the\n      // template definition. e.g. <div *ngIf=\"showing\">{{ foo }}</div>  <div #foo></div>\n\n      this._nestedTemplateFns.push(function () {\n        var templateFunctionExpr = templateVisitor.buildTemplateFunction(template.children, template.variables, _this170._ngContentReservedSlots.length + _this170._ngContentSelectorsOffset, template.i18n);\n\n        _this170.constantPool.statements.push(templateFunctionExpr.toDeclStmt(templateName));\n\n        if (templateVisitor._ngContentReservedSlots.length) {\n          var _this170$_ngContentRe;\n\n          (_this170$_ngContentRe = _this170._ngContentReservedSlots).push.apply(_this170$_ngContentRe, _toConsumableArray(templateVisitor._ngContentReservedSlots));\n        }\n      }); // e.g. template(1, MyComp_Template_1)\n\n\n      this.creationInstruction(template.sourceSpan, Identifiers$1.templateCreate, function () {\n        parameters.splice(2, 0, literal(templateVisitor.getConstCount()), literal(templateVisitor.getVarCount()));\n        return trimTrailingNulls(parameters);\n      }); // handle property bindings e.g. ɵɵproperty('ngForOf', ctx.items), et al;\n\n      this.templatePropertyBindings(templateIndex, template.templateAttrs); // Only add normal input/output binding instructions on explicit <ng-template> elements.\n\n      if (tagNameWithoutNamespace === NG_TEMPLATE_TAG_NAME) {\n        var _partitionArray = partitionArray(template.inputs, hasI18nMeta),\n            _partitionArray2 = _slicedToArray(_partitionArray, 2),\n            i18nInputs = _partitionArray2[0],\n            inputs = _partitionArray2[1]; // Add i18n attributes that may act as inputs to directives. If such attributes are present,\n        // generate `i18nAttributes` instruction. Note: we generate it only for explicit <ng-template>\n        // elements, in case of inline templates, corresponding instructions will be generated in the\n        // nested template function.\n\n\n        if (i18nInputs.length > 0) {\n          this.i18nAttributesInstruction(templateIndex, i18nInputs, (_a = template.startSourceSpan) !== null && _a !== void 0 ? _a : template.sourceSpan);\n        } // Add the input bindings\n\n\n        if (inputs.length > 0) {\n          this.templatePropertyBindings(templateIndex, inputs);\n        } // Generate listeners for directive output\n\n\n        if (template.outputs.length > 0) {\n          var listeners = template.outputs.map(function (outputAst) {\n            return {\n              sourceSpan: outputAst.sourceSpan,\n              params: _this170.prepareListenerParameter('ng_template', outputAst, templateIndex)\n            };\n          });\n          this.creationInstructionChain(Identifiers$1.listener, listeners);\n        }\n      }\n    }\n  }, {\n    key: \"visitBoundText\",\n    value: function visitBoundText(text) {\n      var _this171 = this;\n\n      if (this.i18n) {\n        var _value4 = text.value.visit(this._valueConverter);\n\n        this.allocateBindingSlots(_value4);\n\n        if (_value4 instanceof Interpolation) {\n          this.i18n.appendBoundText(text.i18n);\n          this.i18nAppendBindings(_value4.expressions);\n        }\n\n        return;\n      }\n\n      var nodeIndex = this.allocateDataSlot();\n      this.creationInstruction(text.sourceSpan, Identifiers$1.text, [literal(nodeIndex)]);\n      var value = text.value.visit(this._valueConverter);\n      this.allocateBindingSlots(value);\n\n      if (value instanceof Interpolation) {\n        this.updateInstructionWithAdvance(nodeIndex, text.sourceSpan, getTextInterpolationExpression(value), function () {\n          return _this171.getUpdateInstructionArguments(value);\n        });\n      } else {\n        error('Text nodes should be interpolated and never bound directly.');\n      }\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {\n      // when a text element is located within a translatable\n      // block, we exclude this text element from instructions set,\n      // since it will be captured in i18n content and processed at runtime\n      if (!this.i18n) {\n        this.creationInstruction(text.sourceSpan, Identifiers$1.text, [literal(this.allocateDataSlot()), literal(text.value)]);\n      }\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {\n      var initWasInvoked = false; // if an ICU was created outside of i18n block, we still treat\n      // it as a translatable entity and invoke i18nStart and i18nEnd\n      // to generate i18n context and the necessary instructions\n\n      if (!this.i18n) {\n        initWasInvoked = true;\n        this.i18nStart(null, icu.i18n, true);\n      }\n\n      var i18n = this.i18n;\n      var vars = this.i18nBindProps(icu.vars);\n      var placeholders = this.i18nBindProps(icu.placeholders); // output ICU directly and keep ICU reference in context\n\n      var message = icu.i18n; // we always need post-processing function for ICUs, to make sure that:\n      // - all placeholders in a form of {PLACEHOLDER} are replaced with actual values (note:\n      // `goog.getMsg` does not process ICUs and uses the `{PLACEHOLDER}` format for placeholders\n      // inside ICUs)\n      // - all ICU vars (such as `VAR_SELECT` or `VAR_PLURAL`) are replaced with correct values\n\n      var transformFn = function transformFn(raw) {\n        var params = Object.assign(Object.assign({}, vars), placeholders);\n        var formatted = i18nFormatPlaceholderNames(params,\n        /* useCamelCase */\n        false);\n        return instruction(null, Identifiers$1.i18nPostprocess, [raw, mapLiteral(formatted, true)]);\n      }; // in case the whole i18n message is a single ICU - we do not need to\n      // create a separate top-level translation, we can use the root ref instead\n      // and make this ICU a top-level translation\n      // note: ICU placeholders are replaced with actual values in `i18nPostprocess` function\n      // separately, so we do not pass placeholders into `i18nTranslate` function.\n\n\n      if (isSingleI18nIcu(i18n.meta)) {\n        this.i18nTranslate(message,\n        /* placeholders */\n        {}, i18n.ref, transformFn);\n      } else {\n        // output ICU directly and keep ICU reference in context\n        var ref = this.i18nTranslate(message,\n        /* placeholders */\n        {},\n        /* ref */\n        undefined, transformFn);\n        i18n.appendIcu(icuFromI18nMessage(message).name, ref);\n      }\n\n      if (initWasInvoked) {\n        this.i18nEnd(null, true);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"allocateDataSlot\",\n    value: function allocateDataSlot() {\n      return this._dataIndex++;\n    }\n  }, {\n    key: \"getConstCount\",\n    value: function getConstCount() {\n      return this._dataIndex;\n    }\n  }, {\n    key: \"getVarCount\",\n    value: function getVarCount() {\n      return this._pureFunctionSlots;\n    }\n  }, {\n    key: \"getConsts\",\n    value: function getConsts() {\n      return this._constants;\n    }\n  }, {\n    key: \"getNgContentSelectors\",\n    value: function getNgContentSelectors() {\n      return this._ngContentReservedSlots.length ? this.constantPool.getConstLiteral(asLiteral(this._ngContentReservedSlots), true) : null;\n    }\n  }, {\n    key: \"bindingContext\",\n    value: function bindingContext() {\n      return \"\".concat(this._bindingContext++);\n    }\n  }, {\n    key: \"templatePropertyBindings\",\n    value: function templatePropertyBindings(templateIndex, attrs) {\n      var _this172 = this;\n\n      var propertyBindings = [];\n      attrs.forEach(function (input) {\n        if (input instanceof BoundAttribute) {\n          var _value5 = input.value.visit(_this172._valueConverter);\n\n          if (_value5 !== undefined) {\n            _this172.allocateBindingSlots(_value5);\n\n            if (_value5 instanceof Interpolation) {\n              // Params typically contain attribute namespace and value sanitizer, which is applicable\n              // for regular HTML elements, but not applicable for <ng-template> (since props act as\n              // inputs to directives), so keep params array empty.\n              var params = []; // prop=\"{{value}}\" case\n\n              _this172.interpolatedUpdateInstruction(getPropertyInterpolationExpression(_value5), templateIndex, input.name, input, _value5, params);\n            } else {\n              // [prop]=\"value\" case\n              propertyBindings.push({\n                name: input.name,\n                sourceSpan: input.sourceSpan,\n                value: function value() {\n                  return _this172.convertPropertyBinding(_value5);\n                }\n              });\n            }\n          }\n        }\n      });\n\n      if (propertyBindings.length > 0) {\n        this.updateInstructionChainWithAdvance(templateIndex, Identifiers$1.property, propertyBindings);\n      }\n    } // Bindings must only be resolved after all local refs have been visited, so all\n    // instructions are queued in callbacks that execute once the initial pass has completed.\n    // Otherwise, we wouldn't be able to support local refs that are defined after their\n    // bindings. e.g. {{ foo }} <div #foo></div>\n\n  }, {\n    key: \"instructionFn\",\n    value: function instructionFn(fns, span, reference, paramsOrFn) {\n      var prepend = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      fns[prepend ? 'unshift' : 'push'](function () {\n        var params = Array.isArray(paramsOrFn) ? paramsOrFn : paramsOrFn();\n        return instruction(span, reference, params).toStmt();\n      });\n    }\n  }, {\n    key: \"processStylingUpdateInstruction\",\n    value: function processStylingUpdateInstruction(elementIndex, instruction) {\n      var _this173 = this;\n\n      var allocateBindingSlots = 0;\n\n      if (instruction) {\n        var calls = [];\n        instruction.calls.forEach(function (call) {\n          allocateBindingSlots += call.allocateBindingSlots;\n          calls.push({\n            sourceSpan: call.sourceSpan,\n            value: function value() {\n              return call.params(function (value) {\n                return call.supportsInterpolation && value instanceof Interpolation ? _this173.getUpdateInstructionArguments(value) : _this173.convertPropertyBinding(value);\n              });\n            }\n          });\n        });\n        this.updateInstructionChainWithAdvance(elementIndex, instruction.reference, calls);\n      }\n\n      return allocateBindingSlots;\n    }\n  }, {\n    key: \"creationInstruction\",\n    value: function creationInstruction(span, reference, paramsOrFn, prepend) {\n      this.instructionFn(this._creationCodeFns, span, reference, paramsOrFn || [], prepend);\n    }\n  }, {\n    key: \"creationInstructionChain\",\n    value: function creationInstructionChain(reference, calls) {\n      var span = calls.length ? calls[0].sourceSpan : null;\n\n      this._creationCodeFns.push(function () {\n        return chainedInstruction(reference, calls.map(function (call) {\n          return call.params();\n        }), span).toStmt();\n      });\n    }\n  }, {\n    key: \"updateInstructionWithAdvance\",\n    value: function updateInstructionWithAdvance(nodeIndex, span, reference, paramsOrFn) {\n      this.addAdvanceInstructionIfNecessary(nodeIndex, span);\n      this.updateInstruction(span, reference, paramsOrFn);\n    }\n  }, {\n    key: \"updateInstruction\",\n    value: function updateInstruction(span, reference, paramsOrFn) {\n      this.instructionFn(this._updateCodeFns, span, reference, paramsOrFn || []);\n    }\n  }, {\n    key: \"updateInstructionChain\",\n    value: function updateInstructionChain(reference, bindings) {\n      var span = bindings.length ? bindings[0].sourceSpan : null;\n\n      this._updateCodeFns.push(function () {\n        var calls = bindings.map(function (property) {\n          var value = property.value();\n          var fnParams = Array.isArray(value) ? value : [value];\n\n          if (property.params) {\n            fnParams.push.apply(fnParams, _toConsumableArray(property.params));\n          }\n\n          if (property.name) {\n            // We want the property name to always be the first function parameter.\n            fnParams.unshift(literal(property.name));\n          }\n\n          return fnParams;\n        });\n        return chainedInstruction(reference, calls, span).toStmt();\n      });\n    }\n  }, {\n    key: \"updateInstructionChainWithAdvance\",\n    value: function updateInstructionChainWithAdvance(nodeIndex, reference, bindings) {\n      this.addAdvanceInstructionIfNecessary(nodeIndex, bindings.length ? bindings[0].sourceSpan : null);\n      this.updateInstructionChain(reference, bindings);\n    }\n  }, {\n    key: \"addAdvanceInstructionIfNecessary\",\n    value: function addAdvanceInstructionIfNecessary(nodeIndex, span) {\n      if (nodeIndex !== this._currentIndex) {\n        var delta = nodeIndex - this._currentIndex;\n\n        if (delta < 1) {\n          throw new Error('advance instruction can only go forwards');\n        }\n\n        this.instructionFn(this._updateCodeFns, span, Identifiers$1.advance, [literal(delta)]);\n        this._currentIndex = nodeIndex;\n      }\n    }\n  }, {\n    key: \"allocatePureFunctionSlots\",\n    value: function allocatePureFunctionSlots(numSlots) {\n      var originalSlots = this._pureFunctionSlots;\n      this._pureFunctionSlots += numSlots;\n      return originalSlots;\n    }\n  }, {\n    key: \"allocateBindingSlots\",\n    value: function allocateBindingSlots(value) {\n      this._bindingSlots += value instanceof Interpolation ? value.expressions.length : 1;\n    }\n    /**\n     * Gets an expression that refers to the implicit receiver. The implicit\n     * receiver is always the root level context.\n     */\n\n  }, {\n    key: \"getImplicitReceiverExpr\",\n    value: function getImplicitReceiverExpr() {\n      if (this._implicitReceiverExpr) {\n        return this._implicitReceiverExpr;\n      }\n\n      return this._implicitReceiverExpr = this.level === 0 ? variable(CONTEXT_NAME) : this._bindingScope.getOrCreateSharedContextVar(0);\n    }\n  }, {\n    key: \"convertPropertyBinding\",\n    value: function convertPropertyBinding(value) {\n      var _this$_tempVariables;\n\n      var convertedPropertyBinding = _convertPropertyBinding(this, this.getImplicitReceiverExpr(), value, this.bindingContext(), BindingForm.Expression, function () {\n        return error('Unexpected interpolation');\n      });\n\n      var valExpr = convertedPropertyBinding.currValExpr;\n\n      (_this$_tempVariables = this._tempVariables).push.apply(_this$_tempVariables, _toConsumableArray(convertedPropertyBinding.stmts));\n\n      return valExpr;\n    }\n    /**\n     * Gets a list of argument expressions to pass to an update instruction expression. Also updates\n     * the temp variables state with temp variables that were identified as needing to be created\n     * while visiting the arguments.\n     * @param value The original expression we will be resolving an arguments list from.\n     */\n\n  }, {\n    key: \"getUpdateInstructionArguments\",\n    value: function getUpdateInstructionArguments(value) {\n      var _this$_tempVariables2;\n\n      var _convertUpdateArgumen = convertUpdateArguments(this, this.getImplicitReceiverExpr(), value, this.bindingContext()),\n          args = _convertUpdateArgumen.args,\n          stmts = _convertUpdateArgumen.stmts;\n\n      (_this$_tempVariables2 = this._tempVariables).push.apply(_this$_tempVariables2, _toConsumableArray(stmts));\n\n      return args;\n    }\n  }, {\n    key: \"matchDirectives\",\n    value: function matchDirectives(elementName, elOrTpl) {\n      var _this174 = this;\n\n      if (this.directiveMatcher) {\n        var selector = createCssSelector(elementName, getAttrsForDirectiveMatching(elOrTpl));\n        this.directiveMatcher.match(selector, function (cssSelector, staticType) {\n          _this174.directives.add(staticType);\n        });\n      }\n    }\n    /**\n     * Prepares all attribute expression values for the `TAttributes` array.\n     *\n     * The purpose of this function is to properly construct an attributes array that\n     * is passed into the `elementStart` (or just `element`) functions. Because there\n     * are many different types of attributes, the array needs to be constructed in a\n     * special way so that `elementStart` can properly evaluate them.\n     *\n     * The format looks like this:\n     *\n     * ```\n     * attrs = [prop, value, prop2, value2,\n     *   PROJECT_AS, selector,\n     *   CLASSES, class1, class2,\n     *   STYLES, style1, value1, style2, value2,\n     *   BINDINGS, name1, name2, name3,\n     *   TEMPLATE, name4, name5, name6,\n     *   I18N, name7, name8, ...]\n     * ```\n     *\n     * Note that this function will fully ignore all synthetic (@foo) attribute values\n     * because those values are intended to always be generated as property instructions.\n     */\n\n  }, {\n    key: \"getAttributeExpressions\",\n    value: function getAttributeExpressions(elementName, renderAttributes, inputs, outputs, styles) {\n      var templateAttrs = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n      var boundI18nAttrs = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n      var alreadySeen = new Set();\n      var attrExprs = [];\n      var ngProjectAsAttr;\n\n      var _iterator20 = _createForOfIteratorHelper(renderAttributes),\n          _step20;\n\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n          var attr = _step20.value;\n\n          if (attr.name === NG_PROJECT_AS_ATTR_NAME) {\n            ngProjectAsAttr = attr;\n          } // Note that static i18n attributes aren't in the i18n array,\n          // because they're treated in the same way as regular attributes.\n\n\n          if (attr.i18n) {\n            // When i18n attributes are present on elements with structural directives\n            // (e.g. `<div *ngIf title=\"Hello\" i18n-title>`), we want to avoid generating\n            // duplicate i18n translation blocks for `ɵɵtemplate` and `ɵɵelement` instruction\n            // attributes. So we do a cache lookup to see if suitable i18n translation block\n            // already exists.\n            var i18nVarRefsCache = this._constants.i18nVarRefsCache;\n            var i18nVarRef = void 0;\n\n            if (i18nVarRefsCache.has(attr.i18n)) {\n              i18nVarRef = i18nVarRefsCache.get(attr.i18n);\n            } else {\n              i18nVarRef = this.i18nTranslate(attr.i18n);\n              i18nVarRefsCache.set(attr.i18n, i18nVarRef);\n            }\n\n            attrExprs.push(literal(attr.name), i18nVarRef);\n          } else {\n            attrExprs.push.apply(attrExprs, _toConsumableArray(getAttributeNameLiterals(attr.name)).concat([trustedConstAttribute(elementName, attr)]));\n          }\n        } // Keep ngProjectAs next to the other name, value pairs so we can verify that we match\n        // ngProjectAs marker in the attribute name slot.\n\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n\n      if (ngProjectAsAttr) {\n        attrExprs.push.apply(attrExprs, _toConsumableArray(getNgProjectAsLiteral(ngProjectAsAttr)));\n      }\n\n      function addAttrExpr(key, value) {\n        if (typeof key === 'string') {\n          if (!alreadySeen.has(key)) {\n            attrExprs.push.apply(attrExprs, _toConsumableArray(getAttributeNameLiterals(key)));\n            value !== undefined && attrExprs.push(value);\n            alreadySeen.add(key);\n          }\n        } else {\n          attrExprs.push(literal(key));\n        }\n      } // it's important that this occurs before BINDINGS and TEMPLATE because once `elementStart`\n      // comes across the BINDINGS or TEMPLATE markers then it will continue reading each value as\n      // as single property value cell by cell.\n\n\n      if (styles) {\n        styles.populateInitialStylingAttrs(attrExprs);\n      }\n\n      if (inputs.length || outputs.length) {\n        var attrsLengthBeforeInputs = attrExprs.length;\n\n        for (var i = 0; i < inputs.length; i++) {\n          var input = inputs[i]; // We don't want the animation and attribute bindings in the\n          // attributes array since they aren't used for directive matching.\n\n          if (input.type !== 4\n          /* Animation */\n          && input.type !== 1\n          /* Attribute */\n          ) {\n            addAttrExpr(input.name);\n          }\n        }\n\n        for (var _i9 = 0; _i9 < outputs.length; _i9++) {\n          var output = outputs[_i9];\n\n          if (output.type !== 1\n          /* Animation */\n          ) {\n            addAttrExpr(output.name);\n          }\n        } // this is a cheap way of adding the marker only after all the input/output\n        // values have been filtered (by not including the animation ones) and added\n        // to the expressions. The marker is important because it tells the runtime\n        // code that this is where attributes without values start...\n\n\n        if (attrExprs.length !== attrsLengthBeforeInputs) {\n          attrExprs.splice(attrsLengthBeforeInputs, 0, literal(3\n          /* Bindings */\n          ));\n        }\n      }\n\n      if (templateAttrs.length) {\n        attrExprs.push(literal(4\n        /* Template */\n        ));\n        templateAttrs.forEach(function (attr) {\n          return addAttrExpr(attr.name);\n        });\n      }\n\n      if (boundI18nAttrs.length) {\n        attrExprs.push(literal(6\n        /* I18n */\n        ));\n        boundI18nAttrs.forEach(function (attr) {\n          return addAttrExpr(attr.name);\n        });\n      }\n\n      return attrExprs;\n    }\n  }, {\n    key: \"addToConsts\",\n    value: function addToConsts(expression) {\n      if (isNull(expression)) {\n        return TYPED_NULL_EXPR;\n      }\n\n      var consts = this._constants.constExpressions; // Try to reuse a literal that's already in the array, if possible.\n\n      for (var i = 0; i < consts.length; i++) {\n        if (consts[i].isEquivalent(expression)) {\n          return literal(i);\n        }\n      }\n\n      return literal(consts.push(expression) - 1);\n    }\n  }, {\n    key: \"addAttrsToConsts\",\n    value: function addAttrsToConsts(attrs) {\n      return attrs.length > 0 ? this.addToConsts(literalArr(attrs)) : TYPED_NULL_EXPR;\n    }\n  }, {\n    key: \"prepareRefsArray\",\n    value: function prepareRefsArray(references) {\n      var _this175 = this;\n\n      if (!references || references.length === 0) {\n        return TYPED_NULL_EXPR;\n      }\n\n      var refsParam = flatten(references.map(function (reference) {\n        var slot = _this175.allocateDataSlot(); // Generate the update temporary.\n\n\n        var variableName = _this175._bindingScope.freshReferenceName();\n\n        var retrievalLevel = _this175.level;\n        var lhs = variable(variableName);\n\n        _this175._bindingScope.set(retrievalLevel, reference.name, lhs, 0\n        /* DEFAULT */\n        , function (scope, relativeLevel) {\n          // e.g. nextContext(2);\n          var nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : []; // e.g. const $foo$ = reference(1);\n\n          var refExpr = lhs.set(importExpr(Identifiers$1.reference).callFn([literal(slot)]));\n          return nextContextStmt.concat(refExpr.toConstDecl());\n        }, true);\n\n        return [reference.name, reference.value];\n      }));\n      return asLiteral(refsParam);\n    }\n  }, {\n    key: \"prepareListenerParameter\",\n    value: function prepareListenerParameter(tagName, outputAst, index) {\n      var _this176 = this;\n\n      return function () {\n        var eventName = outputAst.name;\n        var bindingFnName = outputAst.type === 1\n        /* Animation */\n        ? // synthetic @listener.foo values are treated the exact same as are standard listeners\n        prepareSyntheticListenerFunctionName(eventName, outputAst.phase) : sanitizeIdentifier(eventName);\n        var handlerName = \"\".concat(_this176.templateName, \"_\").concat(tagName, \"_\").concat(bindingFnName, \"_\").concat(index, \"_listener\");\n\n        var scope = _this176._bindingScope.nestedScope(_this176._bindingScope.bindingLevel, EVENT_BINDING_SCOPE_GLOBALS);\n\n        return prepareEventListenerParameters(outputAst, handlerName, scope);\n      };\n    }\n  }]);\n\n  return TemplateDefinitionBuilder;\n}();\n\nvar ValueConverter = /*#__PURE__*/function (_AstMemoryEfficientTr) {\n  _inherits(ValueConverter, _AstMemoryEfficientTr);\n\n  var _super91 = _createSuper(ValueConverter);\n\n  function ValueConverter(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {\n    var _this177;\n\n    _classCallCheck(this, ValueConverter);\n\n    _this177 = _super91.call(this);\n    _this177.constantPool = constantPool;\n    _this177.allocateSlot = allocateSlot;\n    _this177.allocatePureFunctionSlots = allocatePureFunctionSlots;\n    _this177.definePipe = definePipe;\n    _this177._pipeBindExprs = [];\n    return _this177;\n  } // AstMemoryEfficientTransformer\n\n\n  _createClass(ValueConverter, [{\n    key: \"visitPipe\",\n    value: function visitPipe(pipe, context) {\n      // Allocate a slot to create the pipe\n      var slot = this.allocateSlot();\n      var slotPseudoLocal = \"PIPE:\".concat(slot); // Allocate one slot for the result plus one slot per pipe argument\n\n      var pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe.args.length);\n      var target = new PropertyRead(pipe.span, pipe.sourceSpan, pipe.nameSpan, new ImplicitReceiver(pipe.span, pipe.sourceSpan), slotPseudoLocal);\n\n      var _pipeBindingCallInfo = pipeBindingCallInfo(pipe.args),\n          identifier = _pipeBindingCallInfo.identifier,\n          isVarLength = _pipeBindingCallInfo.isVarLength;\n\n      this.definePipe(pipe.name, slotPseudoLocal, slot, importExpr(identifier));\n      var args = [pipe.exp].concat(_toConsumableArray(pipe.args));\n      var convertedArgs = isVarLength ? this.visitAll([new LiteralArray(pipe.span, pipe.sourceSpan, args)]) : this.visitAll(args);\n      var pipeBindExpr = new Call(pipe.span, pipe.sourceSpan, target, [new LiteralPrimitive(pipe.span, pipe.sourceSpan, slot), new LiteralPrimitive(pipe.span, pipe.sourceSpan, pureFunctionSlot)].concat(_toConsumableArray(convertedArgs)), null);\n\n      this._pipeBindExprs.push(pipeBindExpr);\n\n      return pipeBindExpr;\n    }\n  }, {\n    key: \"updatePipeSlotOffsets\",\n    value: function updatePipeSlotOffsets(bindingSlots) {\n      this._pipeBindExprs.forEach(function (pipe) {\n        // update the slot offset arg (index 1) to account for binding slots\n        var slotOffset = pipe.args[1];\n        slotOffset.value += bindingSlots;\n      });\n    }\n  }, {\n    key: \"visitLiteralArray\",\n    value: function visitLiteralArray(array, context) {\n      var _this178 = this;\n\n      return new BuiltinFunctionCall(array.span, array.sourceSpan, this.visitAll(array.expressions), function (values) {\n        // If the literal has calculated (non-literal) elements transform it into\n        // calls to literal factories that compose the literal and will cache intermediate\n        // values.\n        var literal = literalArr(values);\n        return getLiteralFactory(_this178.constantPool, literal, _this178.allocatePureFunctionSlots);\n      });\n    }\n  }, {\n    key: \"visitLiteralMap\",\n    value: function visitLiteralMap(map, context) {\n      var _this179 = this;\n\n      return new BuiltinFunctionCall(map.span, map.sourceSpan, this.visitAll(map.values), function (values) {\n        // If the literal has calculated (non-literal) elements  transform it into\n        // calls to literal factories that compose the literal and will cache intermediate\n        // values.\n        var literal = literalMap(values.map(function (value, index) {\n          return {\n            key: map.keys[index].key,\n            value: value,\n            quoted: map.keys[index].quoted\n          };\n        }));\n        return getLiteralFactory(_this179.constantPool, literal, _this179.allocatePureFunctionSlots);\n      });\n    }\n  }]);\n\n  return ValueConverter;\n}(AstMemoryEfficientTransformer); // Pipes always have at least one parameter, the value they operate on\n\n\nvar pipeBindingIdentifiers = [Identifiers$1.pipeBind1, Identifiers$1.pipeBind2, Identifiers$1.pipeBind3, Identifiers$1.pipeBind4];\n\nfunction pipeBindingCallInfo(args) {\n  var identifier = pipeBindingIdentifiers[args.length];\n  return {\n    identifier: identifier || Identifiers$1.pipeBindV,\n    isVarLength: !identifier\n  };\n}\n\nvar pureFunctionIdentifiers = [Identifiers$1.pureFunction0, Identifiers$1.pureFunction1, Identifiers$1.pureFunction2, Identifiers$1.pureFunction3, Identifiers$1.pureFunction4, Identifiers$1.pureFunction5, Identifiers$1.pureFunction6, Identifiers$1.pureFunction7, Identifiers$1.pureFunction8];\n\nfunction pureFunctionCallInfo(args) {\n  var identifier = pureFunctionIdentifiers[args.length];\n  return {\n    identifier: identifier || Identifiers$1.pureFunctionV,\n    isVarLength: !identifier\n  };\n}\n\nfunction instruction(span, reference, params) {\n  return importExpr(reference, null, span).callFn(params, span);\n} // e.g. x(2);\n\n\nfunction generateNextContextExpr(relativeLevelDiff) {\n  return importExpr(Identifiers$1.nextContext).callFn(relativeLevelDiff > 1 ? [literal(relativeLevelDiff)] : []);\n}\n\nfunction getLiteralFactory(constantPool, literal$1, allocateSlots) {\n  var _constantPool$getLite = constantPool.getLiteralFactory(literal$1),\n      literalFactory = _constantPool$getLite.literalFactory,\n      literalFactoryArguments = _constantPool$getLite.literalFactoryArguments; // Allocate 1 slot for the result plus 1 per argument\n\n\n  var startSlot = allocateSlots(1 + literalFactoryArguments.length);\n\n  var _pureFunctionCallInfo = pureFunctionCallInfo(literalFactoryArguments),\n      identifier = _pureFunctionCallInfo.identifier,\n      isVarLength = _pureFunctionCallInfo.isVarLength; // Literal factories are pure functions that only need to be re-invoked when the parameters\n  // change.\n\n\n  var args = [literal(startSlot), literalFactory];\n\n  if (isVarLength) {\n    args.push(literalArr(literalFactoryArguments));\n  } else {\n    args.push.apply(args, _toConsumableArray(literalFactoryArguments));\n  }\n\n  return importExpr(identifier).callFn(args);\n}\n/**\n * Gets an array of literals that can be added to an expression\n * to represent the name and namespace of an attribute. E.g.\n * `:xlink:href` turns into `[AttributeMarker.NamespaceURI, 'xlink', 'href']`.\n *\n * @param name Name of the attribute, including the namespace.\n */\n\n\nfunction getAttributeNameLiterals(name) {\n  var _splitNsName5 = splitNsName(name),\n      _splitNsName6 = _slicedToArray(_splitNsName5, 2),\n      attributeNamespace = _splitNsName6[0],\n      attributeName = _splitNsName6[1];\n\n  var nameLiteral = literal(attributeName);\n\n  if (attributeNamespace) {\n    return [literal(0\n    /* NamespaceURI */\n    ), literal(attributeNamespace), nameLiteral];\n  }\n\n  return [nameLiteral];\n}\n/** The prefix used to get a shared context in BindingScope's map. */\n\n\nvar SHARED_CONTEXT_KEY = '$$shared_ctx$$';\n\nvar BindingScope = /*#__PURE__*/function () {\n  function BindingScope() {\n    var bindingLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var globals = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, BindingScope);\n\n    this.bindingLevel = bindingLevel;\n    this.parent = parent;\n    this.globals = globals;\n    /** Keeps a map from local variables to their BindingData. */\n\n    this.map = new Map();\n    this.referenceNameIndex = 0;\n    this.restoreViewVariable = null;\n    this.usesRestoredViewContext = false;\n\n    if (globals !== undefined) {\n      var _iterator21 = _createForOfIteratorHelper(globals),\n          _step21;\n\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var name = _step21.value;\n          this.set(0, name, variable(name));\n        }\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n    }\n  }\n\n  _createClass(BindingScope, [{\n    key: \"get\",\n    value: function get(name) {\n      var current = this;\n\n      while (current) {\n        var value = current.map.get(name);\n\n        if (value != null) {\n          if (current !== this) {\n            // make a local copy and reset the `declare` state\n            value = {\n              retrievalLevel: value.retrievalLevel,\n              lhs: value.lhs,\n              declareLocalCallback: value.declareLocalCallback,\n              declare: false,\n              priority: value.priority\n            }; // Cache the value locally.\n\n            this.map.set(name, value); // Possibly generate a shared context var\n\n            this.maybeGenerateSharedContextVar(value);\n            this.maybeRestoreView();\n          }\n\n          if (value.declareLocalCallback && !value.declare) {\n            value.declare = true;\n          }\n\n          return value.lhs;\n        }\n\n        current = current.parent;\n      } // If we get to this point, we are looking for a property on the top level component\n      // - If level === 0, we are on the top and don't need to re-declare `ctx`.\n      // - If level > 0, we are in an embedded view. We need to retrieve the name of the\n      // local var we used to store the component context, e.g. const $comp$ = x();\n\n\n      return this.bindingLevel === 0 ? null : this.getComponentProperty(name);\n    }\n    /**\n     * Create a local variable for later reference.\n     *\n     * @param retrievalLevel The level from which this value can be retrieved\n     * @param name Name of the variable.\n     * @param lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param priority The sorting priority of this var\n     * @param declareLocalCallback The callback to invoke when declaring this local var\n     * @param localRef Whether or not this is a local ref\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(retrievalLevel, name, lhs) {\n      var priority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var declareLocalCallback = arguments.length > 4 ? arguments[4] : undefined;\n      var localRef = arguments.length > 5 ? arguments[5] : undefined;\n\n      if (this.map.has(name)) {\n        if (localRef) {\n          // Do not throw an error if it's a local ref and do not update existing value,\n          // so the first defined ref is always returned.\n          return this;\n        }\n\n        error(\"The name \".concat(name, \" is already defined in scope to be \").concat(this.map.get(name)));\n      }\n\n      this.map.set(name, {\n        retrievalLevel: retrievalLevel,\n        lhs: lhs,\n        declare: false,\n        declareLocalCallback: declareLocalCallback,\n        priority: priority\n      });\n      return this;\n    } // Implemented as part of LocalResolver.\n\n  }, {\n    key: \"getLocal\",\n    value: function getLocal(name) {\n      return this.get(name);\n    } // Implemented as part of LocalResolver.\n\n  }, {\n    key: \"notifyImplicitReceiverUse\",\n    value: function notifyImplicitReceiverUse() {\n      if (this.bindingLevel !== 0) {\n        // Since the implicit receiver is accessed in an embedded view, we need to\n        // ensure that we declare a shared context variable for the current template\n        // in the update variables.\n        this.map.get(SHARED_CONTEXT_KEY + 0).declare = true;\n      }\n    }\n  }, {\n    key: \"nestedScope\",\n    value: function nestedScope(level, globals) {\n      var newScope = new BindingScope(level, this, globals);\n      if (level > 0) newScope.generateSharedContextVar(0);\n      return newScope;\n    }\n    /**\n     * Gets or creates a shared context variable and returns its expression. Note that\n     * this does not mean that the shared variable will be declared. Variables in the\n     * binding scope will be only declared if they are used.\n     */\n\n  }, {\n    key: \"getOrCreateSharedContextVar\",\n    value: function getOrCreateSharedContextVar(retrievalLevel) {\n      var bindingKey = SHARED_CONTEXT_KEY + retrievalLevel;\n\n      if (!this.map.has(bindingKey)) {\n        this.generateSharedContextVar(retrievalLevel);\n      } // Shared context variables are always generated as \"ReadVarExpr\".\n\n\n      return this.map.get(bindingKey).lhs;\n    }\n  }, {\n    key: \"getSharedContextName\",\n    value: function getSharedContextName(retrievalLevel) {\n      var sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel); // Shared context variables are always generated as \"ReadVarExpr\".\n\n      return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;\n    }\n  }, {\n    key: \"maybeGenerateSharedContextVar\",\n    value: function maybeGenerateSharedContextVar(value) {\n      if (value.priority === 1\n      /* CONTEXT */\n      && value.retrievalLevel < this.bindingLevel) {\n        var sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);\n\n        if (sharedCtxObj) {\n          sharedCtxObj.declare = true;\n        } else {\n          this.generateSharedContextVar(value.retrievalLevel);\n        }\n      }\n    }\n  }, {\n    key: \"generateSharedContextVar\",\n    value: function generateSharedContextVar(retrievalLevel) {\n      var lhs = variable(CONTEXT_NAME + this.freshReferenceName());\n      this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {\n        retrievalLevel: retrievalLevel,\n        lhs: lhs,\n        declareLocalCallback: function declareLocalCallback(scope, relativeLevel) {\n          // const ctx_r0 = nextContext(2);\n          return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];\n        },\n        declare: false,\n        priority: 2\n        /* SHARED_CONTEXT */\n\n      });\n    }\n  }, {\n    key: \"getComponentProperty\",\n    value: function getComponentProperty(name) {\n      var componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);\n      componentValue.declare = true;\n      this.maybeRestoreView();\n      return componentValue.lhs.prop(name);\n    }\n  }, {\n    key: \"maybeRestoreView\",\n    value: function maybeRestoreView() {\n      // View restoration is required for listener instructions inside embedded views, because\n      // they only run in creation mode and they can have references to the context object.\n      // If the context object changes in update mode, the reference will be incorrect, because\n      // it was established during creation.\n      if (this.isListenerScope()) {\n        if (!this.parent.restoreViewVariable) {\n          // parent saves variable to generate a shared `const $s$ = getCurrentView();` instruction\n          this.parent.restoreViewVariable = variable(this.parent.freshReferenceName());\n        }\n\n        this.restoreViewVariable = this.parent.restoreViewVariable;\n      }\n    }\n  }, {\n    key: \"restoreViewStatement\",\n    value: function restoreViewStatement() {\n      var statements = [];\n\n      if (this.restoreViewVariable) {\n        var restoreCall = instruction(null, Identifiers$1.restoreView, [this.restoreViewVariable]); // Either `const restoredCtx = restoreView($state$);` or `restoreView($state$);`\n        // depending on whether it is being used.\n\n        statements.push(this.usesRestoredViewContext ? variable(RESTORED_VIEW_CONTEXT_NAME).set(restoreCall).toConstDecl() : restoreCall.toStmt());\n      }\n\n      return statements;\n    }\n  }, {\n    key: \"viewSnapshotStatements\",\n    value: function viewSnapshotStatements() {\n      // const $state$ = getCurrentView();\n      return this.restoreViewVariable ? [this.restoreViewVariable.set(instruction(null, Identifiers$1.getCurrentView, [])).toConstDecl()] : [];\n    }\n  }, {\n    key: \"isListenerScope\",\n    value: function isListenerScope() {\n      return this.parent && this.parent.bindingLevel === this.bindingLevel;\n    }\n  }, {\n    key: \"variableDeclarations\",\n    value: function variableDeclarations() {\n      var _this180 = this;\n\n      var currentContextLevel = 0;\n      return Array.from(this.map.values()).filter(function (value) {\n        return value.declare;\n      }).sort(function (a, b) {\n        return b.retrievalLevel - a.retrievalLevel || b.priority - a.priority;\n      }).reduce(function (stmts, value) {\n        var levelDiff = _this180.bindingLevel - value.retrievalLevel;\n        var currStmts = value.declareLocalCallback(_this180, levelDiff - currentContextLevel);\n        currentContextLevel = levelDiff;\n        return stmts.concat(currStmts);\n      }, []);\n    }\n  }, {\n    key: \"freshReferenceName\",\n    value: function freshReferenceName() {\n      var current = this; // Find the top scope as it maintains the global reference count\n\n      while (current.parent) {\n        current = current.parent;\n      }\n\n      var ref = \"\".concat(REFERENCE_PREFIX).concat(current.referenceNameIndex++);\n      return ref;\n    }\n  }, {\n    key: \"hasRestoreViewVariable\",\n    value: function hasRestoreViewVariable() {\n      return !!this.restoreViewVariable;\n    }\n  }, {\n    key: \"notifyRestoredViewContextUse\",\n    value: function notifyRestoredViewContextUse() {\n      this.usesRestoredViewContext = true;\n    }\n  }], [{\n    key: \"createRootScope\",\n    value: function createRootScope() {\n      return new BindingScope();\n    }\n  }]);\n\n  return BindingScope;\n}();\n/**\n * Creates a `CssSelector` given a tag name and a map of attributes\n */\n\n\nfunction createCssSelector(elementName, attributes) {\n  var cssSelector = new CssSelector();\n  var elementNameNoNs = splitNsName(elementName)[1];\n  cssSelector.setElement(elementNameNoNs);\n  Object.getOwnPropertyNames(attributes).forEach(function (name) {\n    var nameNoNs = splitNsName(name)[1];\n    var value = attributes[name];\n    cssSelector.addAttribute(nameNoNs, value);\n\n    if (name.toLowerCase() === 'class') {\n      var classes = value.trim().split(/\\s+/);\n      classes.forEach(function (className) {\n        return cssSelector.addClassName(className);\n      });\n    }\n  });\n  return cssSelector;\n}\n/**\n * Creates an array of expressions out of an `ngProjectAs` attributes\n * which can be added to the instruction parameters.\n */\n\n\nfunction getNgProjectAsLiteral(attribute) {\n  // Parse the attribute value into a CssSelectorList. Note that we only take the\n  // first selector, because we don't support multiple selectors in ngProjectAs.\n  var parsedR3Selector = parseSelectorToR3Selector(attribute.value)[0];\n  return [literal(5\n  /* ProjectAs */\n  ), asLiteral(parsedR3Selector)];\n}\n/**\n * Gets the instruction to generate for an interpolated property\n * @param interpolation An Interpolation AST\n */\n\n\nfunction getPropertyInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers$1.propertyInterpolate;\n\n    case 3:\n      return Identifiers$1.propertyInterpolate1;\n\n    case 5:\n      return Identifiers$1.propertyInterpolate2;\n\n    case 7:\n      return Identifiers$1.propertyInterpolate3;\n\n    case 9:\n      return Identifiers$1.propertyInterpolate4;\n\n    case 11:\n      return Identifiers$1.propertyInterpolate5;\n\n    case 13:\n      return Identifiers$1.propertyInterpolate6;\n\n    case 15:\n      return Identifiers$1.propertyInterpolate7;\n\n    case 17:\n      return Identifiers$1.propertyInterpolate8;\n\n    default:\n      return Identifiers$1.propertyInterpolateV;\n  }\n}\n/**\n * Gets the instruction to generate for an interpolated attribute\n * @param interpolation An Interpolation AST\n */\n\n\nfunction getAttributeInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 3:\n      return Identifiers$1.attributeInterpolate1;\n\n    case 5:\n      return Identifiers$1.attributeInterpolate2;\n\n    case 7:\n      return Identifiers$1.attributeInterpolate3;\n\n    case 9:\n      return Identifiers$1.attributeInterpolate4;\n\n    case 11:\n      return Identifiers$1.attributeInterpolate5;\n\n    case 13:\n      return Identifiers$1.attributeInterpolate6;\n\n    case 15:\n      return Identifiers$1.attributeInterpolate7;\n\n    case 17:\n      return Identifiers$1.attributeInterpolate8;\n\n    default:\n      return Identifiers$1.attributeInterpolateV;\n  }\n}\n/**\n * Gets the instruction to generate for interpolated text.\n * @param interpolation An Interpolation AST\n */\n\n\nfunction getTextInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers$1.textInterpolate;\n\n    case 3:\n      return Identifiers$1.textInterpolate1;\n\n    case 5:\n      return Identifiers$1.textInterpolate2;\n\n    case 7:\n      return Identifiers$1.textInterpolate3;\n\n    case 9:\n      return Identifiers$1.textInterpolate4;\n\n    case 11:\n      return Identifiers$1.textInterpolate5;\n\n    case 13:\n      return Identifiers$1.textInterpolate6;\n\n    case 15:\n      return Identifiers$1.textInterpolate7;\n\n    case 17:\n      return Identifiers$1.textInterpolate8;\n\n    default:\n      return Identifiers$1.textInterpolateV;\n  }\n}\n/**\n * Parse a template into render3 `Node`s and additional metadata, with no other dependencies.\n *\n * @param template text of the template to parse\n * @param templateUrl URL to use for source mapping of the parsed template\n * @param options options to modify how the template is parsed\n */\n\n\nfunction parseTemplate(template, templateUrl) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var interpolationConfig = options.interpolationConfig,\n      preserveWhitespaces = options.preserveWhitespaces,\n      enableI18nLegacyMessageIdFormat = options.enableI18nLegacyMessageIdFormat;\n  var bindingParser = makeBindingParser(interpolationConfig);\n  var htmlParser = new HtmlParser();\n  var parseResult = htmlParser.parse(template, templateUrl, Object.assign(Object.assign({\n    leadingTriviaChars: LEADING_TRIVIA_CHARS\n  }, options), {\n    tokenizeExpansionForms: true\n  }));\n\n  if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors && parseResult.errors.length > 0) {\n    var _parsedTemplate = {\n      interpolationConfig: interpolationConfig,\n      preserveWhitespaces: preserveWhitespaces,\n      errors: parseResult.errors,\n      nodes: [],\n      styleUrls: [],\n      styles: [],\n      ngContentSelectors: []\n    };\n\n    if (options.collectCommentNodes) {\n      _parsedTemplate.commentNodes = [];\n    }\n\n    return _parsedTemplate;\n  }\n\n  var rootNodes = parseResult.rootNodes; // process i18n meta information (scan attributes, generate ids)\n  // before we run whitespace removal process, because existing i18n\n  // extraction process (ng extract-i18n) relies on a raw content to generate\n  // message ids\n\n  var i18nMetaVisitor = new I18nMetaVisitor(interpolationConfig,\n  /* keepI18nAttrs */\n  !preserveWhitespaces, enableI18nLegacyMessageIdFormat);\n  var i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);\n\n  if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors && i18nMetaResult.errors.length > 0) {\n    var _parsedTemplate2 = {\n      interpolationConfig: interpolationConfig,\n      preserveWhitespaces: preserveWhitespaces,\n      errors: i18nMetaResult.errors,\n      nodes: [],\n      styleUrls: [],\n      styles: [],\n      ngContentSelectors: []\n    };\n\n    if (options.collectCommentNodes) {\n      _parsedTemplate2.commentNodes = [];\n    }\n\n    return _parsedTemplate2;\n  }\n\n  rootNodes = i18nMetaResult.rootNodes;\n\n  if (!preserveWhitespaces) {\n    rootNodes = visitAll(new WhitespaceVisitor(), rootNodes); // run i18n meta visitor again in case whitespaces are removed (because that might affect\n    // generated i18n message content) and first pass indicated that i18n content is present in a\n    // template. During this pass i18n IDs generated at the first pass will be preserved, so we can\n    // mimic existing extraction process (ng extract-i18n)\n\n    if (i18nMetaVisitor.hasI18nMeta) {\n      rootNodes = visitAll(new I18nMetaVisitor(interpolationConfig,\n      /* keepI18nAttrs */\n      false), rootNodes);\n    }\n  }\n\n  var _htmlAstToRender3Ast = htmlAstToRender3Ast(rootNodes, bindingParser, {\n    collectCommentNodes: !!options.collectCommentNodes\n  }),\n      nodes = _htmlAstToRender3Ast.nodes,\n      errors = _htmlAstToRender3Ast.errors,\n      styleUrls = _htmlAstToRender3Ast.styleUrls,\n      styles = _htmlAstToRender3Ast.styles,\n      ngContentSelectors = _htmlAstToRender3Ast.ngContentSelectors,\n      commentNodes = _htmlAstToRender3Ast.commentNodes;\n\n  errors.push.apply(errors, _toConsumableArray(parseResult.errors).concat(_toConsumableArray(i18nMetaResult.errors)));\n  var parsedTemplate = {\n    interpolationConfig: interpolationConfig,\n    preserveWhitespaces: preserveWhitespaces,\n    errors: errors.length > 0 ? errors : null,\n    nodes: nodes,\n    styleUrls: styleUrls,\n    styles: styles,\n    ngContentSelectors: ngContentSelectors\n  };\n\n  if (options.collectCommentNodes) {\n    parsedTemplate.commentNodes = commentNodes;\n  }\n\n  return parsedTemplate;\n}\n\nvar elementRegistry = new DomElementSchemaRegistry();\n/**\n * Construct a `BindingParser` with a default configuration.\n */\n\nfunction makeBindingParser() {\n  var interpolationConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_INTERPOLATION_CONFIG;\n  return new BindingParser(new IvyParser(new Lexer()), interpolationConfig, elementRegistry, []);\n}\n\nfunction resolveSanitizationFn(context, isAttribute) {\n  switch (context) {\n    case SecurityContext.HTML:\n      return importExpr(Identifiers$1.sanitizeHtml);\n\n    case SecurityContext.SCRIPT:\n      return importExpr(Identifiers$1.sanitizeScript);\n\n    case SecurityContext.STYLE:\n      // the compiler does not fill in an instruction for [style.prop?] binding\n      // values because the style algorithm knows internally what props are subject\n      // to sanitization (only [attr.style] values are explicitly sanitized)\n      return isAttribute ? importExpr(Identifiers$1.sanitizeStyle) : null;\n\n    case SecurityContext.URL:\n      return importExpr(Identifiers$1.sanitizeUrl);\n\n    case SecurityContext.RESOURCE_URL:\n      return importExpr(Identifiers$1.sanitizeResourceUrl);\n\n    default:\n      return null;\n  }\n}\n\nfunction trustedConstAttribute(tagName, attr) {\n  var value = asLiteral(attr.value);\n\n  if (isTrustedTypesSink(tagName, attr.name)) {\n    switch (elementRegistry.securityContext(tagName, attr.name,\n    /* isAttribute */\n    true)) {\n      case SecurityContext.HTML:\n        return taggedTemplate(importExpr(Identifiers$1.trustConstantHtml), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);\n      // NB: no SecurityContext.SCRIPT here, as the corresponding tags are stripped by the compiler.\n\n      case SecurityContext.RESOURCE_URL:\n        return taggedTemplate(importExpr(Identifiers$1.trustConstantResourceUrl), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);\n\n      default:\n        return value;\n    }\n  } else {\n    return value;\n  }\n}\n\nfunction isSingleElementTemplate(children) {\n  return children.length === 1 && children[0] instanceof Element$1;\n}\n\nfunction isTextNode(node) {\n  return node instanceof Text$3 || node instanceof BoundText || node instanceof Icu$1;\n}\n\nfunction hasTextChildrenOnly(children) {\n  return children.every(isTextNode);\n}\n/** Name of the global variable that is used to determine if we use Closure translations or not */\n\n\nvar NG_I18N_CLOSURE_MODE = 'ngI18nClosureMode';\n/**\n * Generate statements that define a given translation message.\n *\n * ```\n * var I18N_1;\n * if (typeof ngI18nClosureMode !== undefined && ngI18nClosureMode) {\n *     var MSG_EXTERNAL_XXX = goog.getMsg(\n *          \"Some message with {$interpolation}!\",\n *          { \"interpolation\": \"\\uFFFD0\\uFFFD\" }\n *     );\n *     I18N_1 = MSG_EXTERNAL_XXX;\n * }\n * else {\n *     I18N_1 = $localize`Some message with ${'\\uFFFD0\\uFFFD'}!`;\n * }\n * ```\n *\n * @param message The original i18n AST message node\n * @param variable The variable that will be assigned the translation, e.g. `I18N_1`.\n * @param closureVar The variable for Closure `goog.getMsg` calls, e.g. `MSG_EXTERNAL_XXX`.\n * @param params Object mapping placeholder names to their values (e.g.\n * `{ \"interpolation\": \"\\uFFFD0\\uFFFD\" }`).\n * @param transformFn Optional transformation function that will be applied to the translation (e.g.\n * post-processing).\n * @returns An array of statements that defined a given translation.\n */\n\nfunction getTranslationDeclStmts(message, variable, closureVar) {\n  var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var transformFn = arguments.length > 4 ? arguments[4] : undefined;\n  var statements = [declareI18nVariable(variable), ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable, message, closureVar, i18nFormatPlaceholderNames(params,\n  /* useCamelCase */\n  true)), createLocalizeStatements(variable, message, i18nFormatPlaceholderNames(params,\n  /* useCamelCase */\n  false)))];\n\n  if (transformFn) {\n    statements.push(new ExpressionStatement(variable.set(transformFn(variable))));\n  }\n\n  return statements;\n}\n/**\n * Create the expression that will be used to guard the closure mode block\n * It is equivalent to:\n *\n * ```\n * typeof ngI18nClosureMode !== undefined && ngI18nClosureMode\n * ```\n */\n\n\nfunction createClosureModeGuard() {\n  return typeofExpr(variable(NG_I18N_CLOSURE_MODE)).notIdentical(literal('undefined', STRING_TYPE)).and(variable(NG_I18N_CLOSURE_MODE));\n}\n\nfunction flatten(list) {\n  return list.reduce(function (flat, item) {\n    var flatItem = Array.isArray(item) ? flatten(item) : item;\n    return flat.concat(flatItem);\n  }, []);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This regex matches any binding names that contain the \"attr.\" prefix, e.g. \"attr.required\"\n// If there is a match, the first matching group will contain the attribute name to bind.\n\n\nvar ATTR_REGEX = /attr\\.([^\\]]+)/;\nvar COMPONENT_VARIABLE = '%COMP%';\nvar HOST_ATTR = \"_nghost-\".concat(COMPONENT_VARIABLE);\nvar CONTENT_ATTR = \"_ngcontent-\".concat(COMPONENT_VARIABLE);\n\nfunction baseDirectiveFields(meta, constantPool, bindingParser) {\n  var definitionMap = new DefinitionMap();\n  var selectors = parseSelectorToR3Selector(meta.selector); // e.g. `type: MyDirective`\n\n  definitionMap.set('type', meta.internalType); // e.g. `selectors: [['', 'someDir', '']]`\n\n  if (selectors.length > 0) {\n    definitionMap.set('selectors', asLiteral(selectors));\n  }\n\n  if (meta.queries.length > 0) {\n    // e.g. `contentQueries: (rf, ctx, dirIndex) => { ... }\n    definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool, meta.name));\n  }\n\n  if (meta.viewQueries.length) {\n    definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));\n  } // e.g. `hostBindings: (rf, ctx) => { ... }\n\n\n  definitionMap.set('hostBindings', createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || '', meta.name, definitionMap)); // e.g 'inputs: {a: 'a'}`\n\n  definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true)); // e.g 'outputs: {a: 'a'}`\n\n  definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));\n\n  if (meta.exportAs !== null) {\n    definitionMap.set('exportAs', literalArr(meta.exportAs.map(function (e) {\n      return literal(e);\n    })));\n  }\n\n  return definitionMap;\n}\n/**\n * Add features to the definition map.\n */\n\n\nfunction addFeatures(definitionMap, meta) {\n  // e.g. `features: [NgOnChangesFeature]`\n  var features = [];\n  var providers = meta.providers;\n  var viewProviders = meta.viewProviders;\n\n  if (providers || viewProviders) {\n    var args = [providers || new LiteralArrayExpr([])];\n\n    if (viewProviders) {\n      args.push(viewProviders);\n    }\n\n    features.push(importExpr(Identifiers$1.ProvidersFeature).callFn(args));\n  }\n\n  if (meta.usesInheritance) {\n    features.push(importExpr(Identifiers$1.InheritDefinitionFeature));\n  }\n\n  if (meta.fullInheritance) {\n    features.push(importExpr(Identifiers$1.CopyDefinitionFeature));\n  }\n\n  if (meta.lifecycle.usesOnChanges) {\n    features.push(importExpr(Identifiers$1.NgOnChangesFeature));\n  }\n\n  if (features.length) {\n    definitionMap.set('features', literalArr(features));\n  }\n}\n/**\n * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.\n */\n\n\nfunction compileDirectiveFromMetadata(meta, constantPool, bindingParser) {\n  var definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n  addFeatures(definitionMap, meta);\n  var expression = importExpr(Identifiers$1.defineDirective).callFn([definitionMap.toLiteralMap()], undefined, true);\n  var type = createDirectiveType(meta);\n  return {\n    expression: expression,\n    type: type,\n    statements: []\n  };\n}\n/**\n * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.\n */\n\n\nfunction compileComponentFromMetadata(meta, constantPool, bindingParser) {\n  var definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n  addFeatures(definitionMap, meta);\n  var selector = meta.selector && CssSelector.parse(meta.selector);\n  var firstSelector = selector && selector[0]; // e.g. `attr: [\"class\", \".my.app\"]`\n  // This is optional an only included if the first selector of a component specifies attributes.\n\n  if (firstSelector) {\n    var selectorAttributes = firstSelector.getAttrs();\n\n    if (selectorAttributes.length) {\n      definitionMap.set('attrs', constantPool.getConstLiteral(literalArr(selectorAttributes.map(function (value) {\n        return value != null ? literal(value) : literal(undefined);\n      })),\n      /* forceShared */\n      true));\n    }\n  } // Generate the CSS matcher that recognize directive\n\n\n  var directiveMatcher = null;\n\n  if (meta.directives.length > 0) {\n    var matcher = new SelectorMatcher();\n\n    var _iterator22 = _createForOfIteratorHelper(meta.directives),\n        _step22;\n\n    try {\n      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n        var _step22$value = _step22.value,\n            _selector = _step22$value.selector,\n            _type = _step22$value.type;\n        matcher.addSelectables(CssSelector.parse(_selector), _type);\n      }\n    } catch (err) {\n      _iterator22.e(err);\n    } finally {\n      _iterator22.f();\n    }\n\n    directiveMatcher = matcher;\n  } // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`\n\n\n  var templateTypeName = meta.name;\n  var templateName = templateTypeName ? \"\".concat(templateTypeName, \"_Template\") : null;\n  var directivesUsed = new Set();\n  var pipesUsed = new Set();\n  var changeDetection = meta.changeDetection;\n  var template = meta.template;\n  var templateBuilder = new TemplateDefinitionBuilder(constantPool, BindingScope.createRootScope(), 0, templateTypeName, null, null, templateName, directiveMatcher, directivesUsed, meta.pipes, pipesUsed, Identifiers$1.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds);\n  var templateFunctionExpression = templateBuilder.buildTemplateFunction(template.nodes, []); // We need to provide this so that dynamically generated components know what\n  // projected content blocks to pass through to the component when it is instantiated.\n\n  var ngContentSelectors = templateBuilder.getNgContentSelectors();\n\n  if (ngContentSelectors) {\n    definitionMap.set('ngContentSelectors', ngContentSelectors);\n  } // e.g. `decls: 2`\n\n\n  definitionMap.set('decls', literal(templateBuilder.getConstCount())); // e.g. `vars: 2`\n\n  definitionMap.set('vars', literal(templateBuilder.getVarCount())); // Generate `consts` section of ComponentDef:\n  // - either as an array:\n  //   `consts: [['one', 'two'], ['three', 'four']]`\n  // - or as a factory function in case additional statements are present (to support i18n):\n  //   `consts: function() { var i18n_0; if (ngI18nClosureMode) {...} else {...} return [i18n_0]; }`\n\n  var _templateBuilder$getC = templateBuilder.getConsts(),\n      constExpressions = _templateBuilder$getC.constExpressions,\n      prepareStatements = _templateBuilder$getC.prepareStatements;\n\n  if (constExpressions.length > 0) {\n    var constsExpr = literalArr(constExpressions); // Prepare statements are present - turn `consts` into a function.\n\n    if (prepareStatements.length > 0) {\n      constsExpr = fn([], [].concat(_toConsumableArray(prepareStatements), [new ReturnStatement(constsExpr)]));\n    }\n\n    definitionMap.set('consts', constsExpr);\n  }\n\n  definitionMap.set('template', templateFunctionExpression); // e.g. `directives: [MyDirective]`\n\n  if (directivesUsed.size) {\n    var directivesList = literalArr(Array.from(directivesUsed));\n    var directivesExpr = compileDeclarationList(directivesList, meta.declarationListEmitMode);\n    definitionMap.set('directives', directivesExpr);\n  } // e.g. `pipes: [MyPipe]`\n\n\n  if (pipesUsed.size) {\n    var pipesList = literalArr(Array.from(pipesUsed));\n    var pipesExpr = compileDeclarationList(pipesList, meta.declarationListEmitMode);\n    definitionMap.set('pipes', pipesExpr);\n  }\n\n  if (meta.encapsulation === null) {\n    meta.encapsulation = ViewEncapsulation.Emulated;\n  } // e.g. `styles: [str1, str2]`\n\n\n  if (meta.styles && meta.styles.length) {\n    var styleValues = meta.encapsulation == ViewEncapsulation.Emulated ? compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) : meta.styles;\n    var strings = styleValues.map(function (str) {\n      return constantPool.getConstLiteral(literal(str));\n    });\n    definitionMap.set('styles', literalArr(strings));\n  } else if (meta.encapsulation === ViewEncapsulation.Emulated) {\n    // If there is no style, don't generate css selectors on elements\n    meta.encapsulation = ViewEncapsulation.None;\n  } // Only set view encapsulation if it's not the default value\n\n\n  if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n    definitionMap.set('encapsulation', literal(meta.encapsulation));\n  } // e.g. `animation: [trigger('123', [])]`\n\n\n  if (meta.animations !== null) {\n    definitionMap.set('data', literalMap([{\n      key: 'animation',\n      value: meta.animations,\n      quoted: false\n    }]));\n  } // Only set the change detection flag if it's defined and it's not the default.\n\n\n  if (changeDetection != null && changeDetection !== ChangeDetectionStrategy.Default) {\n    definitionMap.set('changeDetection', literal(changeDetection));\n  }\n\n  var expression = importExpr(Identifiers$1.defineComponent).callFn([definitionMap.toLiteralMap()], undefined, true);\n  var type = createComponentType(meta);\n  return {\n    expression: expression,\n    type: type,\n    statements: []\n  };\n}\n/**\n * Creates the type specification from the component meta. This type is inserted into .d.ts files\n * to be consumed by upstream compilations.\n */\n\n\nfunction createComponentType(meta) {\n  var typeParams = createDirectiveTypeParams(meta);\n  typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));\n  return expressionType(importExpr(Identifiers$1.ComponentDeclaration, typeParams));\n}\n/**\n * Compiles the array literal of declarations into an expression according to the provided emit\n * mode.\n */\n\n\nfunction compileDeclarationList(list, mode) {\n  switch (mode) {\n    case 0\n    /* Direct */\n    :\n      // directives: [MyDir],\n      return list;\n\n    case 1\n    /* Closure */\n    :\n      // directives: function () { return [MyDir]; }\n      return fn([], [new ReturnStatement(list)]);\n\n    case 2\n    /* ClosureResolved */\n    :\n      // directives: function () { return [MyDir].map(ng.resolveForwardRef); }\n      var resolvedList = list.prop('map').callFn([importExpr(Identifiers$1.resolveForwardRef)]);\n      return fn([], [new ReturnStatement(resolvedList)]);\n  }\n}\n\nfunction prepareQueryParams(query, constantPool) {\n  var parameters = [getQueryPredicate(query, constantPool), literal(toQueryFlags(query))];\n\n  if (query.read) {\n    parameters.push(query.read);\n  }\n\n  return parameters;\n}\n/**\n * Translates query flags into `TQueryFlags` type in packages/core/src/render3/interfaces/query.ts\n * @param query\n */\n\n\nfunction toQueryFlags(query) {\n  return (query.descendants ? 1\n  /* descendants */\n  : 0\n  /* none */\n  ) | (query.static ? 2\n  /* isStatic */\n  : 0\n  /* none */\n  ) | (query.emitDistinctChangesOnly ? 4\n  /* emitDistinctChangesOnly */\n  : 0\n  /* none */\n  );\n}\n\nfunction convertAttributesToExpressions(attributes) {\n  var values = [];\n\n  var _iterator23 = _createForOfIteratorHelper(Object.getOwnPropertyNames(attributes)),\n      _step23;\n\n  try {\n    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n      var key = _step23.value;\n      var value = attributes[key];\n      values.push(literal(key), value);\n    }\n  } catch (err) {\n    _iterator23.e(err);\n  } finally {\n    _iterator23.f();\n  }\n\n  return values;\n} // Define and update any content queries\n\n\nfunction createContentQueriesFunction(queries, constantPool, name) {\n  var createStatements = [];\n  var updateStatements = [];\n  var tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n\n  var _iterator24 = _createForOfIteratorHelper(queries),\n      _step24;\n\n  try {\n    for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n      var query = _step24.value;\n      // creation, e.g. r3.contentQuery(dirIndex, somePredicate, true, null);\n      createStatements.push(importExpr(Identifiers$1.contentQuery).callFn([variable('dirIndex')].concat(_toConsumableArray(prepareQueryParams(query, constantPool)))).toStmt()); // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));\n\n      var temporary = tempAllocator();\n      var getQueryList = importExpr(Identifiers$1.loadQuery).callFn([]);\n      var refresh = importExpr(Identifiers$1.queryRefresh).callFn([temporary.set(getQueryList)]);\n      var updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop('first') : temporary);\n      updateStatements.push(refresh.and(updateDirective).toStmt());\n    }\n  } catch (err) {\n    _iterator24.e(err);\n  } finally {\n    _iterator24.f();\n  }\n\n  var contentQueriesFnName = name ? \"\".concat(name, \"_ContentQueries\") : null;\n  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null), new FnParam('dirIndex', null)], [renderFlagCheckIfStmt(1\n  /* Create */\n  , createStatements), renderFlagCheckIfStmt(2\n  /* Update */\n  , updateStatements)], INFERRED_TYPE, null, contentQueriesFnName);\n}\n\nfunction stringAsType(str) {\n  return expressionType(literal(str));\n}\n\nfunction stringMapAsType(map) {\n  var mapValues = Object.keys(map).map(function (key) {\n    var value = Array.isArray(map[key]) ? map[key][0] : map[key];\n    return {\n      key: key,\n      value: literal(value),\n      quoted: true\n    };\n  });\n  return expressionType(literalMap(mapValues));\n}\n\nfunction stringArrayAsType(arr) {\n  return arr.length > 0 ? expressionType(literalArr(arr.map(function (value) {\n    return literal(value);\n  }))) : NONE_TYPE;\n}\n\nfunction createDirectiveTypeParams(meta) {\n  // On the type side, remove newlines from the selector as it will need to fit into a TypeScript\n  // string literal, which must be on one line.\n  var selectorForType = meta.selector !== null ? meta.selector.replace(/\\n/g, '') : null;\n  return [typeWithParameters(meta.type.type, meta.typeArgumentCount), selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE, meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE, stringMapAsType(meta.inputs), stringMapAsType(meta.outputs), stringArrayAsType(meta.queries.map(function (q) {\n    return q.propertyName;\n  }))];\n}\n/**\n * Creates the type specification from the directive meta. This type is inserted into .d.ts files\n * to be consumed by upstream compilations.\n */\n\n\nfunction createDirectiveType(meta) {\n  var typeParams = createDirectiveTypeParams(meta);\n  return expressionType(importExpr(Identifiers$1.DirectiveDeclaration, typeParams));\n} // Define and update any view queries\n\n\nfunction createViewQueriesFunction(viewQueries, constantPool, name) {\n  var createStatements = [];\n  var updateStatements = [];\n  var tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n  viewQueries.forEach(function (query) {\n    // creation, e.g. r3.viewQuery(somePredicate, true);\n    var queryDefinition = importExpr(Identifiers$1.viewQuery).callFn(prepareQueryParams(query, constantPool));\n    createStatements.push(queryDefinition.toStmt()); // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));\n\n    var temporary = tempAllocator();\n    var getQueryList = importExpr(Identifiers$1.loadQuery).callFn([]);\n    var refresh = importExpr(Identifiers$1.queryRefresh).callFn([temporary.set(getQueryList)]);\n    var updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop('first') : temporary);\n    updateStatements.push(refresh.and(updateDirective).toStmt());\n  });\n  var viewQueryFnName = name ? \"\".concat(name, \"_Query\") : null;\n  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [renderFlagCheckIfStmt(1\n  /* Create */\n  , createStatements), renderFlagCheckIfStmt(2\n  /* Update */\n  , updateStatements)], INFERRED_TYPE, null, viewQueryFnName);\n} // Return a host binding function or null if one is not necessary.\n\n\nfunction createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {\n  var bindingContext = variable(CONTEXT_NAME);\n  var styleBuilder = new StylingBuilder(bindingContext);\n  var _hostBindingsMetadata = hostBindingsMetadata.specialAttributes,\n      styleAttr = _hostBindingsMetadata.styleAttr,\n      classAttr = _hostBindingsMetadata.classAttr;\n\n  if (styleAttr !== undefined) {\n    styleBuilder.registerStyleAttr(styleAttr);\n  }\n\n  if (classAttr !== undefined) {\n    styleBuilder.registerClassAttr(classAttr);\n  }\n\n  var createStatements = [];\n  var updateStatements = [];\n  var hostBindingSourceSpan = typeSourceSpan; // Calculate host event bindings\n\n  var eventBindings = bindingParser.createDirectiveHostEventAsts(hostBindingsMetadata.listeners, hostBindingSourceSpan);\n\n  if (eventBindings && eventBindings.length) {\n    var listeners = createHostListeners(eventBindings, name);\n    createStatements.push.apply(createStatements, _toConsumableArray(listeners));\n  } // Calculate the host property bindings\n\n\n  var bindings = bindingParser.createBoundHostProperties(hostBindingsMetadata.properties, hostBindingSourceSpan);\n  var allOtherBindings = []; // We need to calculate the total amount of binding slots required by\n  // all the instructions together before any value conversions happen.\n  // Value conversions may require additional slots for interpolation and\n  // bindings with pipes. These calculates happen after this block.\n\n  var totalHostVarsCount = 0;\n  bindings && bindings.forEach(function (binding) {\n    var stylingInputWasSet = styleBuilder.registerInputBasedOnName(binding.name, binding.expression, hostBindingSourceSpan);\n\n    if (stylingInputWasSet) {\n      totalHostVarsCount += MIN_STYLING_BINDING_SLOTS_REQUIRED;\n    } else {\n      allOtherBindings.push(binding);\n      totalHostVarsCount++;\n    }\n  });\n  var valueConverter;\n\n  var getValueConverter = function getValueConverter() {\n    if (!valueConverter) {\n      var hostVarsCountFn = function hostVarsCountFn(numSlots) {\n        var originalVarsCount = totalHostVarsCount;\n        totalHostVarsCount += numSlots;\n        return originalVarsCount;\n      };\n\n      valueConverter = new ValueConverter(constantPool, function () {\n        return error('Unexpected node');\n      }, // new nodes are illegal here\n      hostVarsCountFn, function () {\n        return error('Unexpected pipe');\n      }); // pipes are illegal here\n    }\n\n    return valueConverter;\n  };\n\n  var propertyBindings = [];\n  var attributeBindings = [];\n  var syntheticHostBindings = [];\n  allOtherBindings.forEach(function (binding) {\n    // resolve literal arrays and literal objects\n    var value = binding.expression.visit(getValueConverter());\n    var bindingExpr = bindingFn(bindingContext, value);\n\n    var _getBindingNameAndIns = getBindingNameAndInstruction(binding),\n        bindingName = _getBindingNameAndIns.bindingName,\n        instruction = _getBindingNameAndIns.instruction,\n        isAttribute = _getBindingNameAndIns.isAttribute;\n\n    var securityContexts = bindingParser.calcPossibleSecurityContexts(selector, bindingName, isAttribute).filter(function (context) {\n      return context !== SecurityContext.NONE;\n    });\n    var sanitizerFn = null;\n\n    if (securityContexts.length) {\n      if (securityContexts.length === 2 && securityContexts.indexOf(SecurityContext.URL) > -1 && securityContexts.indexOf(SecurityContext.RESOURCE_URL) > -1) {\n        // Special case for some URL attributes (such as \"src\" and \"href\") that may be a part\n        // of different security contexts. In this case we use special sanitization function and\n        // select the actual sanitizer at runtime based on a tag name that is provided while\n        // invoking sanitization function.\n        sanitizerFn = importExpr(Identifiers$1.sanitizeUrlOrResourceUrl);\n      } else {\n        sanitizerFn = resolveSanitizationFn(securityContexts[0], isAttribute);\n      }\n    }\n\n    var instructionParams = [literal(bindingName), bindingExpr.currValExpr];\n\n    if (sanitizerFn) {\n      instructionParams.push(sanitizerFn);\n    }\n\n    updateStatements.push.apply(updateStatements, _toConsumableArray(bindingExpr.stmts));\n\n    if (instruction === Identifiers$1.hostProperty) {\n      propertyBindings.push(instructionParams);\n    } else if (instruction === Identifiers$1.attribute) {\n      attributeBindings.push(instructionParams);\n    } else if (instruction === Identifiers$1.syntheticHostProperty) {\n      syntheticHostBindings.push(instructionParams);\n    } else {\n      updateStatements.push(importExpr(instruction).callFn(instructionParams).toStmt());\n    }\n  });\n\n  if (propertyBindings.length > 0) {\n    updateStatements.push(chainedInstruction(Identifiers$1.hostProperty, propertyBindings).toStmt());\n  }\n\n  if (attributeBindings.length > 0) {\n    updateStatements.push(chainedInstruction(Identifiers$1.attribute, attributeBindings).toStmt());\n  }\n\n  if (syntheticHostBindings.length > 0) {\n    updateStatements.push(chainedInstruction(Identifiers$1.syntheticHostProperty, syntheticHostBindings).toStmt());\n  } // since we're dealing with directives/components and both have hostBinding\n  // functions, we need to generate a special hostAttrs instruction that deals\n  // with both the assignment of styling as well as static attributes to the host\n  // element. The instruction below will instruct all initial styling (styling\n  // that is inside of a host binding within a directive/component) to be attached\n  // to the host element alongside any of the provided host attributes that were\n  // collected earlier.\n\n\n  var hostAttrs = convertAttributesToExpressions(hostBindingsMetadata.attributes);\n  styleBuilder.assignHostAttrs(hostAttrs, definitionMap);\n\n  if (styleBuilder.hasBindings) {\n    // finally each binding that was registered in the statement above will need to be added to\n    // the update block of a component/directive templateFn/hostBindingsFn so that the bindings\n    // are evaluated and updated for the element.\n    styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach(function (instruction) {\n      if (instruction.calls.length > 0) {\n        var calls = [];\n        instruction.calls.forEach(function (call) {\n          // we subtract a value of `1` here because the binding slot was already allocated\n          // at the top of this method when all the input bindings were counted.\n          totalHostVarsCount += Math.max(call.allocateBindingSlots - MIN_STYLING_BINDING_SLOTS_REQUIRED, 0);\n          calls.push(convertStylingCall(call, bindingContext, bindingFn));\n        });\n        updateStatements.push(chainedInstruction(instruction.reference, calls).toStmt());\n      }\n    });\n  }\n\n  if (totalHostVarsCount) {\n    definitionMap.set('hostVars', literal(totalHostVarsCount));\n  }\n\n  if (createStatements.length > 0 || updateStatements.length > 0) {\n    var hostBindingsFnName = name ? \"\".concat(name, \"_HostBindings\") : null;\n    var statements = [];\n\n    if (createStatements.length > 0) {\n      statements.push(renderFlagCheckIfStmt(1\n      /* Create */\n      , createStatements));\n    }\n\n    if (updateStatements.length > 0) {\n      statements.push(renderFlagCheckIfStmt(2\n      /* Update */\n      , updateStatements));\n    }\n\n    return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], statements, INFERRED_TYPE, null, hostBindingsFnName);\n  }\n\n  return null;\n}\n\nfunction bindingFn(implicit, value) {\n  return _convertPropertyBinding(null, implicit, value, 'b', BindingForm.Expression, function () {\n    return error('Unexpected interpolation');\n  });\n}\n\nfunction convertStylingCall(call, bindingContext, bindingFn) {\n  return call.params(function (value) {\n    return bindingFn(bindingContext, value).currValExpr;\n  });\n}\n\nfunction getBindingNameAndInstruction(binding) {\n  var bindingName = binding.name;\n  var instruction; // Check to see if this is an attr binding or a property binding\n\n  var attrMatches = bindingName.match(ATTR_REGEX);\n\n  if (attrMatches) {\n    bindingName = attrMatches[1];\n    instruction = Identifiers$1.attribute;\n  } else {\n    if (binding.isAnimation) {\n      bindingName = prepareSyntheticPropertyName(bindingName); // host bindings that have a synthetic property (e.g. @foo) should always be rendered\n      // in the context of the component and not the parent. Therefore there is a special\n      // compatibility instruction available for this purpose.\n\n      instruction = Identifiers$1.syntheticHostProperty;\n    } else {\n      instruction = Identifiers$1.hostProperty;\n    }\n  }\n\n  return {\n    bindingName: bindingName,\n    instruction: instruction,\n    isAttribute: !!attrMatches\n  };\n}\n\nfunction createHostListeners(eventBindings, name) {\n  var listeners = [];\n  var syntheticListeners = [];\n  var instructions = [];\n  eventBindings.forEach(function (binding) {\n    var bindingName = binding.name && sanitizeIdentifier(binding.name);\n    var bindingFnName = binding.type === 1\n    /* Animation */\n    ? prepareSyntheticListenerFunctionName(bindingName, binding.targetOrPhase) : bindingName;\n    var handlerName = name && bindingName ? \"\".concat(name, \"_\").concat(bindingFnName, \"_HostBindingHandler\") : null;\n    var params = prepareEventListenerParameters(BoundEvent.fromParsedEvent(binding), handlerName);\n\n    if (binding.type == 1\n    /* Animation */\n    ) {\n      syntheticListeners.push(params);\n    } else {\n      listeners.push(params);\n    }\n  });\n\n  if (syntheticListeners.length > 0) {\n    instructions.push(chainedInstruction(Identifiers$1.syntheticHostListener, syntheticListeners).toStmt());\n  }\n\n  if (listeners.length > 0) {\n    instructions.push(chainedInstruction(Identifiers$1.listener, listeners).toStmt());\n  }\n\n  return instructions;\n}\n\nvar HOST_REG_EXP = /^(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\))$/;\n\nfunction parseHostBindings(host) {\n  var attributes = {};\n  var listeners = {};\n  var properties = {};\n  var specialAttributes = {};\n\n  for (var _i10 = 0, _Object$keys4 = Object.keys(host); _i10 < _Object$keys4.length; _i10++) {\n    var key = _Object$keys4[_i10];\n    var value = host[key];\n    var matches = key.match(HOST_REG_EXP);\n\n    if (matches === null) {\n      switch (key) {\n        case 'class':\n          if (typeof value !== 'string') {\n            // TODO(alxhub): make this a diagnostic.\n            throw new Error(\"Class binding must be string\");\n          }\n\n          specialAttributes.classAttr = value;\n          break;\n\n        case 'style':\n          if (typeof value !== 'string') {\n            // TODO(alxhub): make this a diagnostic.\n            throw new Error(\"Style binding must be string\");\n          }\n\n          specialAttributes.styleAttr = value;\n          break;\n\n        default:\n          if (typeof value === 'string') {\n            attributes[key] = literal(value);\n          } else {\n            attributes[key] = value;\n          }\n\n      }\n    } else if (matches[1\n    /* Binding */\n    ] != null) {\n      if (typeof value !== 'string') {\n        // TODO(alxhub): make this a diagnostic.\n        throw new Error(\"Property binding must be string\");\n      } // synthetic properties (the ones that have a `@` as a prefix)\n      // are still treated the same as regular properties. Therefore\n      // there is no point in storing them in a separate map.\n\n\n      properties[matches[1\n      /* Binding */\n      ]] = value;\n    } else if (matches[2\n    /* Event */\n    ] != null) {\n      if (typeof value !== 'string') {\n        // TODO(alxhub): make this a diagnostic.\n        throw new Error(\"Event binding must be string\");\n      }\n\n      listeners[matches[2\n      /* Event */\n      ]] = value;\n    }\n  }\n\n  return {\n    attributes: attributes,\n    listeners: listeners,\n    properties: properties,\n    specialAttributes: specialAttributes\n  };\n}\n/**\n * Verifies host bindings and returns the list of errors (if any). Empty array indicates that a\n * given set of host bindings has no errors.\n *\n * @param bindings set of host bindings to verify.\n * @param sourceSpan source span where host bindings were defined.\n * @returns array of errors associated with a given set of host bindings.\n */\n\n\nfunction verifyHostBindings(bindings, sourceSpan) {\n  // TODO: abstract out host bindings verification logic and use it instead of\n  // creating events and properties ASTs to detect errors (FW-996)\n  var bindingParser = makeBindingParser();\n  bindingParser.createDirectiveHostEventAsts(bindings.listeners, sourceSpan);\n  bindingParser.createBoundHostProperties(bindings.properties, sourceSpan);\n  return bindingParser.errors;\n}\n\nfunction compileStyles(styles, selector, hostSelector) {\n  var shadowCss = new ShadowCss();\n  return styles.map(function (style) {\n    return shadowCss.shimCssText(style, selector, hostSelector);\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An interface for retrieving documents by URL that the compiler uses to\n * load templates.\n *\n * This is an abstract class, rather than an interface, so that it can be used\n * as injection token.\n */\n\n\nvar ResourceLoader = function ResourceLoader() {\n  _classCallCheck(this, ResourceLoader);\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CompilerFacadeImpl = /*#__PURE__*/function () {\n  function CompilerFacadeImpl() {\n    var jitEvaluator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new JitEvaluator();\n\n    _classCallCheck(this, CompilerFacadeImpl);\n\n    this.jitEvaluator = jitEvaluator;\n    this.FactoryTarget = FactoryTarget$1;\n    this.ResourceLoader = ResourceLoader;\n    this.elementSchemaRegistry = new DomElementSchemaRegistry();\n  }\n\n  _createClass(CompilerFacadeImpl, [{\n    key: \"compilePipe\",\n    value: function compilePipe(angularCoreEnv, sourceMapUrl, facade) {\n      var metadata = {\n        name: facade.name,\n        type: wrapReference(facade.type),\n        internalType: new WrappedNodeExpr(facade.type),\n        typeArgumentCount: 0,\n        deps: null,\n        pipeName: facade.pipeName,\n        pure: facade.pure\n      };\n      var res = compilePipeFromMetadata(metadata);\n      return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n  }, {\n    key: \"compilePipeDeclaration\",\n    value: function compilePipeDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n      var meta = convertDeclarePipeFacadeToMetadata(declaration);\n      var res = compilePipeFromMetadata(meta);\n      return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n  }, {\n    key: \"compileInjectable\",\n    value: function compileInjectable(angularCoreEnv, sourceMapUrl, facade) {\n      var _a;\n\n      var _compileInjectable2 = _compileInjectable({\n        name: facade.name,\n        type: wrapReference(facade.type),\n        internalType: new WrappedNodeExpr(facade.type),\n        typeArgumentCount: facade.typeArgumentCount,\n        providedIn: computeProvidedIn(facade.providedIn),\n        useClass: convertToProviderExpression(facade, USE_CLASS),\n        useFactory: wrapExpression(facade, USE_FACTORY),\n        useValue: convertToProviderExpression(facade, USE_VALUE),\n        useExisting: convertToProviderExpression(facade, USE_EXISTING),\n        deps: (_a = facade.deps) === null || _a === void 0 ? void 0 : _a.map(convertR3DependencyMetadata)\n      },\n      /* resolveForwardRefs */\n      true),\n          expression = _compileInjectable2.expression,\n          statements = _compileInjectable2.statements;\n\n      return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n    }\n  }, {\n    key: \"compileInjectableDeclaration\",\n    value: function compileInjectableDeclaration(angularCoreEnv, sourceMapUrl, facade) {\n      var _a;\n\n      var _compileInjectable3 = _compileInjectable({\n        name: facade.type.name,\n        type: wrapReference(facade.type),\n        internalType: new WrappedNodeExpr(facade.type),\n        typeArgumentCount: 0,\n        providedIn: computeProvidedIn(facade.providedIn),\n        useClass: convertToProviderExpression(facade, USE_CLASS),\n        useFactory: wrapExpression(facade, USE_FACTORY),\n        useValue: convertToProviderExpression(facade, USE_VALUE),\n        useExisting: convertToProviderExpression(facade, USE_EXISTING),\n        deps: (_a = facade.deps) === null || _a === void 0 ? void 0 : _a.map(convertR3DeclareDependencyMetadata)\n      },\n      /* resolveForwardRefs */\n      true),\n          expression = _compileInjectable3.expression,\n          statements = _compileInjectable3.statements;\n\n      return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n    }\n  }, {\n    key: \"compileInjector\",\n    value: function compileInjector(angularCoreEnv, sourceMapUrl, facade) {\n      var meta = {\n        name: facade.name,\n        type: wrapReference(facade.type),\n        internalType: new WrappedNodeExpr(facade.type),\n        providers: new WrappedNodeExpr(facade.providers),\n        imports: facade.imports.map(function (i) {\n          return new WrappedNodeExpr(i);\n        })\n      };\n\n      var res = _compileInjector(meta);\n\n      return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n  }, {\n    key: \"compileInjectorDeclaration\",\n    value: function compileInjectorDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n      var meta = convertDeclareInjectorFacadeToMetadata(declaration);\n\n      var res = _compileInjector(meta);\n\n      return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n  }, {\n    key: \"compileNgModule\",\n    value: function compileNgModule(angularCoreEnv, sourceMapUrl, facade) {\n      var meta = {\n        type: wrapReference(facade.type),\n        internalType: new WrappedNodeExpr(facade.type),\n        adjacentType: new WrappedNodeExpr(facade.type),\n        bootstrap: facade.bootstrap.map(wrapReference),\n        declarations: facade.declarations.map(wrapReference),\n        imports: facade.imports.map(wrapReference),\n        exports: facade.exports.map(wrapReference),\n        emitInline: true,\n        containsForwardDecls: false,\n        schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,\n        id: facade.id ? new WrappedNodeExpr(facade.id) : null\n      };\n\n      var res = _compileNgModule(meta);\n\n      return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n  }, {\n    key: \"compileNgModuleDeclaration\",\n    value: function compileNgModuleDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n      var expression = compileNgModuleDeclarationExpression(declaration);\n      return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, []);\n    }\n  }, {\n    key: \"compileDirective\",\n    value: function compileDirective(angularCoreEnv, sourceMapUrl, facade) {\n      var meta = convertDirectiveFacadeToMetadata(facade);\n      return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n    }\n  }, {\n    key: \"compileDirectiveDeclaration\",\n    value: function compileDirectiveDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n      var typeSourceSpan = this.createParseSourceSpan('Directive', declaration.type.name, sourceMapUrl);\n      var meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);\n      return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n    }\n  }, {\n    key: \"compileDirectiveFromMeta\",\n    value: function compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta) {\n      var constantPool = new ConstantPool();\n      var bindingParser = makeBindingParser();\n      var res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);\n      return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n    }\n  }, {\n    key: \"compileComponent\",\n    value: function compileComponent(angularCoreEnv, sourceMapUrl, facade) {\n      // Parse the template and check for errors.\n      var _parseJitTemplate = parseJitTemplate(facade.template, facade.name, sourceMapUrl, facade.preserveWhitespaces, facade.interpolation),\n          template = _parseJitTemplate.template,\n          interpolation = _parseJitTemplate.interpolation; // Compile the component metadata, including template, into an expression.\n\n\n      var meta = Object.assign(Object.assign(Object.assign({}, facade), convertDirectiveFacadeToMetadata(facade)), {\n        selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(),\n        template: template,\n        declarationListEmitMode: 0\n        /* Direct */\n        ,\n        styles: [].concat(_toConsumableArray(facade.styles), _toConsumableArray(template.styles)),\n        encapsulation: facade.encapsulation,\n        interpolation: interpolation,\n        changeDetection: facade.changeDetection,\n        animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,\n        viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) : null,\n        relativeContextFilePath: '',\n        i18nUseExternalIds: true\n      });\n      var jitExpressionSourceMap = \"ng:///\".concat(facade.name, \".js\");\n      return this.compileComponentFromMeta(angularCoreEnv, jitExpressionSourceMap, meta);\n    }\n  }, {\n    key: \"compileComponentDeclaration\",\n    value: function compileComponentDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n      var typeSourceSpan = this.createParseSourceSpan('Component', declaration.type.name, sourceMapUrl);\n      var meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);\n      return this.compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta);\n    }\n  }, {\n    key: \"compileComponentFromMeta\",\n    value: function compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta) {\n      var constantPool = new ConstantPool();\n      var bindingParser = makeBindingParser(meta.interpolation);\n      var res = compileComponentFromMetadata(meta, constantPool, bindingParser);\n      return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n    }\n  }, {\n    key: \"compileFactory\",\n    value: function compileFactory(angularCoreEnv, sourceMapUrl, meta) {\n      var factoryRes = compileFactoryFunction({\n        name: meta.name,\n        type: wrapReference(meta.type),\n        internalType: new WrappedNodeExpr(meta.type),\n        typeArgumentCount: meta.typeArgumentCount,\n        deps: convertR3DependencyMetadataArray(meta.deps),\n        target: meta.target\n      });\n      return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);\n    }\n  }, {\n    key: \"compileFactoryDeclaration\",\n    value: function compileFactoryDeclaration(angularCoreEnv, sourceMapUrl, meta) {\n      var factoryRes = compileFactoryFunction({\n        name: meta.type.name,\n        type: wrapReference(meta.type),\n        internalType: new WrappedNodeExpr(meta.type),\n        typeArgumentCount: 0,\n        deps: Array.isArray(meta.deps) ? meta.deps.map(convertR3DeclareDependencyMetadata) : meta.deps,\n        target: meta.target\n      });\n      return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);\n    }\n  }, {\n    key: \"createParseSourceSpan\",\n    value: function createParseSourceSpan(kind, typeName, sourceUrl) {\n      return r3JitTypeSourceSpan(kind, typeName, sourceUrl);\n    }\n    /**\n     * JIT compiles an expression and returns the result of executing that expression.\n     *\n     * @param def the definition which will be compiled and executed to get the value to patch\n     * @param context an object map of @angular/core symbol names to symbols which will be available\n     * in the context of the compiled expression\n     * @param sourceUrl a URL to use for the source map of the compiled expression\n     * @param preStatements a collection of statements that should be evaluated before the expression.\n     */\n\n  }, {\n    key: \"jitExpression\",\n    value: function jitExpression(def, context, sourceUrl, preStatements) {\n      // The ConstantPool may contain Statements which declare variables used in the final expression.\n      // Therefore, its statements need to precede the actual JIT operation. The final statement is a\n      // declaration of $def which is set to the expression being compiled.\n      var statements = [].concat(_toConsumableArray(preStatements), [new DeclareVarStmt('$def', def, undefined, [StmtModifier.Exported])]);\n      var res = this.jitEvaluator.evaluateStatements(sourceUrl, statements, new R3JitReflector(context),\n      /* enableSourceMaps */\n      true);\n      return res['$def'];\n    }\n  }]);\n\n  return CompilerFacadeImpl;\n}();\n\nvar USE_CLASS = Object.keys({\n  useClass: null\n})[0];\nvar USE_FACTORY = Object.keys({\n  useFactory: null\n})[0];\nvar USE_VALUE = Object.keys({\n  useValue: null\n})[0];\nvar USE_EXISTING = Object.keys({\n  useExisting: null\n})[0];\n\nfunction convertToR3QueryMetadata(facade) {\n  return Object.assign(Object.assign({}, facade), {\n    predicate: convertQueryPredicate(facade.predicate),\n    read: facade.read ? new WrappedNodeExpr(facade.read) : null,\n    static: facade.static,\n    emitDistinctChangesOnly: facade.emitDistinctChangesOnly\n  });\n}\n\nfunction convertQueryDeclarationToMetadata(declaration) {\n  var _a, _b, _c, _d;\n\n  return {\n    propertyName: declaration.propertyName,\n    first: (_a = declaration.first) !== null && _a !== void 0 ? _a : false,\n    predicate: convertQueryPredicate(declaration.predicate),\n    descendants: (_b = declaration.descendants) !== null && _b !== void 0 ? _b : false,\n    read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,\n    static: (_c = declaration.static) !== null && _c !== void 0 ? _c : false,\n    emitDistinctChangesOnly: (_d = declaration.emitDistinctChangesOnly) !== null && _d !== void 0 ? _d : true\n  };\n}\n\nfunction convertQueryPredicate(predicate) {\n  return Array.isArray(predicate) ? // The predicate is an array of strings so pass it through.\n  predicate : // The predicate is a type - assume that we will need to unwrap any `forwardRef()` calls.\n  createMayBeForwardRefExpression(new WrappedNodeExpr(predicate), 1\n  /* Wrapped */\n  );\n}\n\nfunction convertDirectiveFacadeToMetadata(facade) {\n  var inputsFromMetadata = parseInputOutputs(facade.inputs || []);\n  var outputsFromMetadata = parseInputOutputs(facade.outputs || []);\n  var propMetadata = facade.propMetadata;\n  var inputsFromType = {};\n  var outputsFromType = {};\n\n  var _loop = function _loop(field) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach(function (ann) {\n        if (isInput(ann)) {\n          inputsFromType[field] = ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;\n        } else if (isOutput(ann)) {\n          outputsFromType[field] = ann.bindingPropertyName || field;\n        }\n      });\n    }\n  };\n\n  for (var field in propMetadata) {\n    _loop(field);\n  }\n\n  return Object.assign(Object.assign({}, facade), {\n    typeArgumentCount: 0,\n    typeSourceSpan: facade.typeSourceSpan,\n    type: wrapReference(facade.type),\n    internalType: new WrappedNodeExpr(facade.type),\n    deps: null,\n    host: extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host),\n    inputs: Object.assign(Object.assign({}, inputsFromMetadata), inputsFromType),\n    outputs: Object.assign(Object.assign({}, outputsFromMetadata), outputsFromType),\n    queries: facade.queries.map(convertToR3QueryMetadata),\n    providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,\n    viewQueries: facade.viewQueries.map(convertToR3QueryMetadata),\n    fullInheritance: false\n  });\n}\n\nfunction convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    typeSourceSpan: typeSourceSpan,\n    internalType: new WrappedNodeExpr(declaration.type),\n    selector: (_a = declaration.selector) !== null && _a !== void 0 ? _a : null,\n    inputs: (_b = declaration.inputs) !== null && _b !== void 0 ? _b : {},\n    outputs: (_c = declaration.outputs) !== null && _c !== void 0 ? _c : {},\n    host: convertHostDeclarationToMetadata(declaration.host),\n    queries: ((_d = declaration.queries) !== null && _d !== void 0 ? _d : []).map(convertQueryDeclarationToMetadata),\n    viewQueries: ((_e = declaration.viewQueries) !== null && _e !== void 0 ? _e : []).map(convertQueryDeclarationToMetadata),\n    providers: declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) : null,\n    exportAs: (_f = declaration.exportAs) !== null && _f !== void 0 ? _f : null,\n    usesInheritance: (_g = declaration.usesInheritance) !== null && _g !== void 0 ? _g : false,\n    lifecycle: {\n      usesOnChanges: (_h = declaration.usesOnChanges) !== null && _h !== void 0 ? _h : false\n    },\n    deps: null,\n    typeArgumentCount: 0,\n    fullInheritance: false\n  };\n}\n\nfunction convertHostDeclarationToMetadata() {\n  var host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _a, _b, _c;\n\n  return {\n    attributes: convertOpaqueValuesToExpressions((_a = host.attributes) !== null && _a !== void 0 ? _a : {}),\n    listeners: (_b = host.listeners) !== null && _b !== void 0 ? _b : {},\n    properties: (_c = host.properties) !== null && _c !== void 0 ? _c : {},\n    specialAttributes: {\n      classAttr: host.classAttribute,\n      styleAttr: host.styleAttribute\n    }\n  };\n}\n\nfunction convertOpaqueValuesToExpressions(obj) {\n  var result = {};\n\n  for (var _i11 = 0, _Object$keys5 = Object.keys(obj); _i11 < _Object$keys5.length; _i11++) {\n    var key = _Object$keys5[_i11];\n    result[key] = new WrappedNodeExpr(obj[key]);\n  }\n\n  return result;\n}\n\nfunction convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl) {\n  var _a, _b, _c, _d, _e, _f;\n\n  var _parseJitTemplate2 = parseJitTemplate(declaration.template, declaration.type.name, sourceMapUrl, (_a = declaration.preserveWhitespaces) !== null && _a !== void 0 ? _a : false, declaration.interpolation),\n      template = _parseJitTemplate2.template,\n      interpolation = _parseJitTemplate2.interpolation;\n\n  return Object.assign(Object.assign({}, convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan)), {\n    template: template,\n    styles: (_b = declaration.styles) !== null && _b !== void 0 ? _b : [],\n    directives: ((_c = declaration.components) !== null && _c !== void 0 ? _c : []).concat((_d = declaration.directives) !== null && _d !== void 0 ? _d : []).map(convertUsedDirectiveDeclarationToMetadata),\n    pipes: convertUsedPipesToMetadata(declaration.pipes),\n    viewProviders: declaration.viewProviders !== undefined ? new WrappedNodeExpr(declaration.viewProviders) : null,\n    animations: declaration.animations !== undefined ? new WrappedNodeExpr(declaration.animations) : null,\n    changeDetection: (_e = declaration.changeDetection) !== null && _e !== void 0 ? _e : ChangeDetectionStrategy.Default,\n    encapsulation: (_f = declaration.encapsulation) !== null && _f !== void 0 ? _f : ViewEncapsulation.Emulated,\n    interpolation: interpolation,\n    declarationListEmitMode: 2\n    /* ClosureResolved */\n    ,\n    relativeContextFilePath: '',\n    i18nUseExternalIds: true\n  });\n}\n\nfunction convertUsedDirectiveDeclarationToMetadata(declaration) {\n  var _a, _b, _c;\n\n  return {\n    selector: declaration.selector,\n    type: new WrappedNodeExpr(declaration.type),\n    inputs: (_a = declaration.inputs) !== null && _a !== void 0 ? _a : [],\n    outputs: (_b = declaration.outputs) !== null && _b !== void 0 ? _b : [],\n    exportAs: (_c = declaration.exportAs) !== null && _c !== void 0 ? _c : null\n  };\n}\n\nfunction convertUsedPipesToMetadata(declaredPipes) {\n  var pipes = new Map();\n\n  if (declaredPipes === undefined) {\n    return pipes;\n  }\n\n  for (var _i12 = 0, _Object$keys6 = Object.keys(declaredPipes); _i12 < _Object$keys6.length; _i12++) {\n    var pipeName = _Object$keys6[_i12];\n    var pipeType = declaredPipes[pipeName];\n    pipes.set(pipeName, new WrappedNodeExpr(pipeType));\n  }\n\n  return pipes;\n}\n\nfunction parseJitTemplate(template, typeName, sourceMapUrl, preserveWhitespaces, interpolation) {\n  var interpolationConfig = interpolation ? InterpolationConfig.fromArray(interpolation) : DEFAULT_INTERPOLATION_CONFIG; // Parse the template and check for errors.\n\n  var parsed = parseTemplate(template, sourceMapUrl, {\n    preserveWhitespaces: preserveWhitespaces,\n    interpolationConfig: interpolationConfig\n  });\n\n  if (parsed.errors !== null) {\n    var errors = parsed.errors.map(function (err) {\n      return err.toString();\n    }).join(', ');\n    throw new Error(\"Errors during JIT compilation of template for \".concat(typeName, \": \").concat(errors));\n  }\n\n  return {\n    template: parsed,\n    interpolation: interpolationConfig\n  };\n}\n/**\n * Convert the expression, if present to an `R3ProviderExpression`.\n *\n * In JIT mode we do not want the compiler to wrap the expression in a `forwardRef()` call because,\n * if it is referencing a type that has not yet been defined, it will have already been wrapped in\n * a `forwardRef()` - either by the application developer or during partial-compilation. Thus we can\n * use `ForwardRefHandling.None`.\n */\n\n\nfunction convertToProviderExpression(obj, property) {\n  if (obj.hasOwnProperty(property)) {\n    return createMayBeForwardRefExpression(new WrappedNodeExpr(obj[property]), 0\n    /* None */\n    );\n  } else {\n    return undefined;\n  }\n}\n\nfunction wrapExpression(obj, property) {\n  if (obj.hasOwnProperty(property)) {\n    return new WrappedNodeExpr(obj[property]);\n  } else {\n    return undefined;\n  }\n}\n\nfunction computeProvidedIn(providedIn) {\n  var expression = typeof providedIn === 'function' ? new WrappedNodeExpr(providedIn) : new LiteralExpr(providedIn !== null && providedIn !== void 0 ? providedIn : null); // See `convertToProviderExpression()` for why this uses `ForwardRefHandling.None`.\n\n  return createMayBeForwardRefExpression(expression, 0\n  /* None */\n  );\n}\n\nfunction convertR3DependencyMetadataArray(facades) {\n  return facades == null ? null : facades.map(convertR3DependencyMetadata);\n}\n\nfunction convertR3DependencyMetadata(facade) {\n  var isAttributeDep = facade.attribute != null; // both `null` and `undefined`\n\n  var rawToken = facade.token === null ? null : new WrappedNodeExpr(facade.token); // In JIT mode, if the dep is an `@Attribute()` then we use the attribute name given in\n  // `attribute` rather than the `token`.\n\n  var token = isAttributeDep ? new WrappedNodeExpr(facade.attribute) : rawToken;\n  return createR3DependencyMetadata(token, isAttributeDep, facade.host, facade.optional, facade.self, facade.skipSelf);\n}\n\nfunction convertR3DeclareDependencyMetadata(facade) {\n  var _a, _b, _c, _d, _e;\n\n  var isAttributeDep = (_a = facade.attribute) !== null && _a !== void 0 ? _a : false;\n  var token = facade.token === null ? null : new WrappedNodeExpr(facade.token);\n  return createR3DependencyMetadata(token, isAttributeDep, (_b = facade.host) !== null && _b !== void 0 ? _b : false, (_c = facade.optional) !== null && _c !== void 0 ? _c : false, (_d = facade.self) !== null && _d !== void 0 ? _d : false, (_e = facade.skipSelf) !== null && _e !== void 0 ? _e : false);\n}\n\nfunction createR3DependencyMetadata(token, isAttributeDep, host, optional, self, skipSelf) {\n  // If the dep is an `@Attribute()` the `attributeNameType` ought to be the `unknown` type.\n  // But types are not available at runtime so we just use a literal `\"<unknown>\"` string as a dummy\n  // marker.\n  var attributeNameType = isAttributeDep ? literal('unknown') : null;\n  return {\n    token: token,\n    attributeNameType: attributeNameType,\n    host: host,\n    optional: optional,\n    self: self,\n    skipSelf: skipSelf\n  };\n}\n\nfunction extractHostBindings(propMetadata, sourceSpan, host) {\n  // First parse the declarations from the metadata.\n  var bindings = parseHostBindings(host || {}); // After that check host bindings for errors\n\n  var errors = verifyHostBindings(bindings, sourceSpan);\n\n  if (errors.length) {\n    throw new Error(errors.map(function (error) {\n      return error.msg;\n    }).join('\\n'));\n  } // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.\n\n\n  var _loop2 = function _loop2(field) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach(function (ann) {\n        if (isHostBinding(ann)) {\n          // Since this is a decorator, we know that the value is a class member. Always access it\n          // through `this` so that further down the line it can't be confused for a literal value\n          // (e.g. if there's a property called `true`).\n          bindings.properties[ann.hostPropertyName || field] = getSafePropertyAccessString('this', field);\n        } else if (isHostListener(ann)) {\n          bindings.listeners[ann.eventName || field] = \"\".concat(field, \"(\").concat((ann.args || []).join(','), \")\");\n        }\n      });\n    }\n  };\n\n  for (var field in propMetadata) {\n    _loop2(field);\n  }\n\n  return bindings;\n}\n\nfunction isHostBinding(value) {\n  return value.ngMetadataName === 'HostBinding';\n}\n\nfunction isHostListener(value) {\n  return value.ngMetadataName === 'HostListener';\n}\n\nfunction isInput(value) {\n  return value.ngMetadataName === 'Input';\n}\n\nfunction isOutput(value) {\n  return value.ngMetadataName === 'Output';\n}\n\nfunction parseInputOutputs(values) {\n  return values.reduce(function (map, value) {\n    var _value$split$map = value.split(',').map(function (piece) {\n      return piece.trim();\n    }),\n        _value$split$map2 = _slicedToArray(_value$split$map, 2),\n        field = _value$split$map2[0],\n        property = _value$split$map2[1];\n\n    map[field] = property || field;\n    return map;\n  }, {});\n}\n\nfunction convertDeclarePipeFacadeToMetadata(declaration) {\n  var _a;\n\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    internalType: new WrappedNodeExpr(declaration.type),\n    typeArgumentCount: 0,\n    pipeName: declaration.name,\n    deps: null,\n    pure: (_a = declaration.pure) !== null && _a !== void 0 ? _a : true\n  };\n}\n\nfunction convertDeclareInjectorFacadeToMetadata(declaration) {\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    internalType: new WrappedNodeExpr(declaration.type),\n    providers: declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) : null,\n    imports: declaration.imports !== undefined ? declaration.imports.map(function (i) {\n      return new WrappedNodeExpr(i);\n    }) : []\n  };\n}\n\nfunction publishFacade(global) {\n  var ng = global.ng || (global.ng = {});\n  ng.ɵcompilerFacade = new CompilerFacadeImpl();\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar VERSION = new Version('13.1.0');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar CompilerConfig = function CompilerConfig() {\n  var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref13$defaultEncapsu = _ref13.defaultEncapsulation,\n      defaultEncapsulation = _ref13$defaultEncapsu === void 0 ? ViewEncapsulation.Emulated : _ref13$defaultEncapsu,\n      _ref13$useJit = _ref13.useJit,\n      useJit = _ref13$useJit === void 0 ? true : _ref13$useJit,\n      _ref13$jitDevMode = _ref13.jitDevMode,\n      jitDevMode = _ref13$jitDevMode === void 0 ? false : _ref13$jitDevMode,\n      _ref13$missingTransla = _ref13.missingTranslation,\n      missingTranslation = _ref13$missingTransla === void 0 ? null : _ref13$missingTransla,\n      preserveWhitespaces = _ref13.preserveWhitespaces,\n      strictInjectionParameters = _ref13.strictInjectionParameters;\n\n  _classCallCheck(this, CompilerConfig);\n\n  this.defaultEncapsulation = defaultEncapsulation;\n  this.useJit = !!useJit;\n  this.jitDevMode = !!jitDevMode;\n  this.missingTranslation = missingTranslation;\n  this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));\n  this.strictInjectionParameters = strictInjectionParameters === true;\n};\n\nfunction preserveWhitespacesDefault(preserveWhitespacesOption) {\n  var defaultSetting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _I18N_ATTR = 'i18n';\nvar _I18N_ATTR_PREFIX = 'i18n-';\nvar _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nvar MEANING_SEPARATOR = '|';\nvar ID_SEPARATOR = '@@';\nvar i18nCommentsWarned = false;\n/**\n * Extract translatable messages from an html AST\n */\n\nfunction extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\n  var visitor = new _Visitor(implicitTags, implicitAttrs);\n  return visitor.extract(nodes, interpolationConfig);\n}\n\nfunction mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\n  var visitor = new _Visitor(implicitTags, implicitAttrs);\n  return visitor.merge(nodes, translations, interpolationConfig);\n}\n\nvar ExtractionResult = function ExtractionResult(messages, errors) {\n  _classCallCheck(this, ExtractionResult);\n\n  this.messages = messages;\n  this.errors = errors;\n};\n\nvar _VisitorMode;\n\n(function (_VisitorMode) {\n  _VisitorMode[_VisitorMode[\"Extract\"] = 0] = \"Extract\";\n  _VisitorMode[_VisitorMode[\"Merge\"] = 1] = \"Merge\";\n})(_VisitorMode || (_VisitorMode = {}));\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * @internal\n */\n\n\nvar _Visitor = /*#__PURE__*/function () {\n  function _Visitor(_implicitTags, _implicitAttrs) {\n    _classCallCheck(this, _Visitor);\n\n    this._implicitTags = _implicitTags;\n    this._implicitAttrs = _implicitAttrs;\n  }\n  /**\n   * Extracts the messages from the tree\n   */\n\n\n  _createClass(_Visitor, [{\n    key: \"extract\",\n    value: function extract(nodes, interpolationConfig) {\n      var _this181 = this;\n\n      this._init(_VisitorMode.Extract, interpolationConfig);\n\n      nodes.forEach(function (node) {\n        return node.visit(_this181, null);\n      });\n\n      if (this._inI18nBlock) {\n        this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n      }\n\n      return new ExtractionResult(this._messages, this._errors);\n    }\n    /**\n     * Returns a tree where all translatable nodes are translated\n     */\n\n  }, {\n    key: \"merge\",\n    value: function merge(nodes, translations, interpolationConfig) {\n      this._init(_VisitorMode.Merge, interpolationConfig);\n\n      this._translations = translations; // Construct a single fake root element\n\n      var wrapper = new Element('wrapper', [], nodes, undefined, undefined, undefined);\n      var translatedNode = wrapper.visit(this, null);\n\n      if (this._inI18nBlock) {\n        this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n      }\n\n      return new ParseTreeResult(translatedNode.children, this._errors);\n    }\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(icuCase, context) {\n      // Parse cases for translatable html attributes\n      var expression = visitAll(this, icuCase.expression, context);\n\n      if (this._mode === _VisitorMode.Merge) {\n        return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n      }\n    }\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(icu, context) {\n      this._mayBeAddBlockChildren(icu);\n\n      var wasInIcu = this._inIcu;\n\n      if (!this._inIcu) {\n        // nested ICU messages should not be extracted but top-level translated as a whole\n        if (this._isInTranslatableSection) {\n          this._addMessage([icu]);\n        }\n\n        this._inIcu = true;\n      }\n\n      var cases = visitAll(this, icu.cases, context);\n\n      if (this._mode === _VisitorMode.Merge) {\n        icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n      }\n\n      this._inIcu = wasInIcu;\n      return icu;\n    }\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment, context) {\n      var isOpening = _isOpeningComment(comment);\n\n      if (isOpening && this._isInTranslatableSection) {\n        this._reportError(comment, 'Could not start a block inside a translatable section');\n\n        return;\n      }\n\n      var isClosing = _isClosingComment(comment);\n\n      if (isClosing && !this._inI18nBlock) {\n        this._reportError(comment, 'Trying to close an unopened block');\n\n        return;\n      }\n\n      if (!this._inI18nNode && !this._inIcu) {\n        if (!this._inI18nBlock) {\n          if (isOpening) {\n            // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\n            if (!i18nCommentsWarned && console && console.warn) {\n              i18nCommentsWarned = true;\n              var details = comment.sourceSpan.details ? \", \".concat(comment.sourceSpan.details) : ''; // TODO(ocombe): use a log service once there is a public one available\n\n              console.warn(\"I18n comments are deprecated, use an <ng-container> element instead (\".concat(comment.sourceSpan.start).concat(details, \")\"));\n            }\n\n            this._inI18nBlock = true;\n            this._blockStartDepth = this._depth;\n            this._blockChildren = [];\n            this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n\n            this._openTranslatableSection(comment);\n          }\n        } else {\n          if (isClosing) {\n            if (this._depth == this._blockStartDepth) {\n              this._closeTranslatableSection(comment, this._blockChildren);\n\n              this._inI18nBlock = false;\n\n              var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc); // merge attributes in sections\n\n\n              var nodes = this._translateMessage(comment, message);\n\n              return visitAll(this, nodes);\n            } else {\n              this._reportError(comment, 'I18N blocks should not cross element boundaries');\n\n              return;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      if (this._isInTranslatableSection) {\n        this._mayBeAddBlockChildren(text);\n      }\n\n      return text;\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(el, context) {\n      var _this182 = this;\n\n      this._mayBeAddBlockChildren(el);\n\n      this._depth++;\n      var wasInI18nNode = this._inI18nNode;\n      var wasInImplicitNode = this._inImplicitNode;\n      var childNodes = [];\n      var translatedChildNodes = undefined; // Extract:\n      // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n      // - ICU messages\n\n      var i18nAttr = _getI18nAttr(el);\n\n      var i18nMeta = i18nAttr ? i18nAttr.value : '';\n      var isImplicit = this._implicitTags.some(function (tag) {\n        return el.name === tag;\n      }) && !this._inIcu && !this._isInTranslatableSection;\n      var isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n      this._inImplicitNode = wasInImplicitNode || isImplicit;\n\n      if (!this._isInTranslatableSection && !this._inIcu) {\n        if (i18nAttr || isTopLevelImplicit) {\n          this._inI18nNode = true;\n\n          var message = this._addMessage(el.children, i18nMeta);\n\n          translatedChildNodes = this._translateMessage(el, message);\n        }\n\n        if (this._mode == _VisitorMode.Extract) {\n          var isTranslatable = i18nAttr || isTopLevelImplicit;\n          if (isTranslatable) this._openTranslatableSection(el);\n          visitAll(this, el.children);\n          if (isTranslatable) this._closeTranslatableSection(el, el.children);\n        }\n      } else {\n        if (i18nAttr || isTopLevelImplicit) {\n          this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\n        }\n\n        if (this._mode == _VisitorMode.Extract) {\n          // Descend into child nodes for extraction\n          visitAll(this, el.children);\n        }\n      }\n\n      if (this._mode === _VisitorMode.Merge) {\n        var visitNodes = translatedChildNodes || el.children;\n        visitNodes.forEach(function (child) {\n          var visited = child.visit(_this182, context);\n\n          if (visited && !_this182._isInTranslatableSection) {\n            // Do not add the children from translatable sections (= i18n blocks here)\n            // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n            childNodes = childNodes.concat(visited);\n          }\n        });\n      }\n\n      this._visitAttributesOf(el);\n\n      this._depth--;\n      this._inI18nNode = wasInI18nNode;\n      this._inImplicitNode = wasInImplicitNode;\n\n      if (this._mode === _VisitorMode.Merge) {\n        var translatedAttrs = this._translateAttributes(el);\n\n        return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute, context) {\n      throw new Error('unreachable code');\n    }\n  }, {\n    key: \"_init\",\n    value: function _init(mode, interpolationConfig) {\n      this._mode = mode;\n      this._inI18nBlock = false;\n      this._inI18nNode = false;\n      this._depth = 0;\n      this._inIcu = false;\n      this._msgCountAtSectionStart = undefined;\n      this._errors = [];\n      this._messages = [];\n      this._inImplicitNode = false;\n      this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n    } // looks for translatable attributes\n\n  }, {\n    key: \"_visitAttributesOf\",\n    value: function _visitAttributesOf(el) {\n      var _this183 = this;\n\n      var explicitAttrNameToValue = {};\n      var implicitAttrNames = this._implicitAttrs[el.name] || [];\n      el.attrs.filter(function (attr) {\n        return attr.name.startsWith(_I18N_ATTR_PREFIX);\n      }).forEach(function (attr) {\n        return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;\n      });\n      el.attrs.forEach(function (attr) {\n        if (attr.name in explicitAttrNameToValue) {\n          _this183._addMessage([attr], explicitAttrNameToValue[attr.name]);\n        } else if (implicitAttrNames.some(function (name) {\n          return attr.name === name;\n        })) {\n          _this183._addMessage([attr]);\n        }\n      });\n    } // add a translatable message\n\n  }, {\n    key: \"_addMessage\",\n    value: function _addMessage(ast, msgMeta) {\n      if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {\n        // Do not create empty messages\n        return null;\n      }\n\n      var _parseMessageMeta2 = _parseMessageMeta(msgMeta),\n          meaning = _parseMessageMeta2.meaning,\n          description = _parseMessageMeta2.description,\n          id = _parseMessageMeta2.id;\n\n      var message = this._createI18nMessage(ast, meaning, description, id);\n\n      this._messages.push(message);\n\n      return message;\n    } // Translates the given message given the `TranslationBundle`\n    // This is used for translating elements / blocks - see `_translateAttributes` for attributes\n    // no-op when called in extraction mode (returns [])\n\n  }, {\n    key: \"_translateMessage\",\n    value: function _translateMessage(el, message) {\n      if (message && this._mode === _VisitorMode.Merge) {\n        var nodes = this._translations.get(message);\n\n        if (nodes) {\n          return nodes;\n        }\n\n        this._reportError(el, \"Translation unavailable for message id=\\\"\".concat(this._translations.digest(message), \"\\\"\"));\n      }\n\n      return [];\n    } // translate the attributes of an element and remove i18n specific attributes\n\n  }, {\n    key: \"_translateAttributes\",\n    value: function _translateAttributes(el) {\n      var _this184 = this;\n\n      var attributes = el.attrs;\n      var i18nParsedMessageMeta = {};\n      attributes.forEach(function (attr) {\n        if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n          i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _parseMessageMeta(attr.value);\n        }\n      });\n      var translatedAttributes = [];\n      attributes.forEach(function (attr) {\n        if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n          // strip i18n specific attributes\n          return;\n        }\n\n        if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\n          var _i18nParsedMessageMet = i18nParsedMessageMeta[attr.name],\n              meaning = _i18nParsedMessageMet.meaning,\n              description = _i18nParsedMessageMet.description,\n              id = _i18nParsedMessageMet.id;\n\n          var message = _this184._createI18nMessage([attr], meaning, description, id);\n\n          var nodes = _this184._translations.get(message);\n\n          if (nodes) {\n            if (nodes.length == 0) {\n              translatedAttributes.push(new Attribute(attr.name, '', attr.sourceSpan, undefined\n              /* keySpan */\n              , undefined\n              /* valueSpan */\n              , undefined\n              /* valueTokens */\n              , undefined\n              /* i18n */\n              ));\n            } else if (nodes[0] instanceof Text) {\n              var value = nodes[0].value;\n              translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan, undefined\n              /* keySpan */\n              , undefined\n              /* valueSpan */\n              , undefined\n              /* valueTokens */\n              , undefined\n              /* i18n */\n              ));\n            } else {\n              _this184._reportError(el, \"Unexpected translation for attribute \\\"\".concat(attr.name, \"\\\" (id=\\\"\").concat(id || _this184._translations.digest(message), \"\\\")\"));\n            }\n          } else {\n            _this184._reportError(el, \"Translation unavailable for attribute \\\"\".concat(attr.name, \"\\\" (id=\\\"\").concat(id || _this184._translations.digest(message), \"\\\")\"));\n          }\n        } else {\n          translatedAttributes.push(attr);\n        }\n      });\n      return translatedAttributes;\n    }\n    /**\n     * Add the node as a child of the block when:\n     * - we are in a block,\n     * - we are not inside a ICU message (those are handled separately),\n     * - the node is a \"direct child\" of the block\n     */\n\n  }, {\n    key: \"_mayBeAddBlockChildren\",\n    value: function _mayBeAddBlockChildren(node) {\n      if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n        this._blockChildren.push(node);\n      }\n    }\n    /**\n     * Marks the start of a section, see `_closeTranslatableSection`\n     */\n\n  }, {\n    key: \"_openTranslatableSection\",\n    value: function _openTranslatableSection(node) {\n      if (this._isInTranslatableSection) {\n        this._reportError(node, 'Unexpected section start');\n      } else {\n        this._msgCountAtSectionStart = this._messages.length;\n      }\n    }\n    /**\n     * A translatable section could be:\n     * - the content of translatable element,\n     * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n     */\n\n  }, {\n    key: \"_isInTranslatableSection\",\n    get: function get() {\n      return this._msgCountAtSectionStart !== void 0;\n    }\n    /**\n     * Terminates a section.\n     *\n     * If a section has only one significant children (comments not significant) then we should not\n     * keep the message from this children:\n     *\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n     * - one for the <p> content with meaning and description,\n     * - another one for the ICU message.\n     *\n     * In this case the last message is discarded as it contains less information (the AST is\n     * otherwise identical).\n     *\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\n     * ICU message here)\n     */\n\n  }, {\n    key: \"_closeTranslatableSection\",\n    value: function _closeTranslatableSection(node, directChildren) {\n      if (!this._isInTranslatableSection) {\n        this._reportError(node, 'Unexpected section end');\n\n        return;\n      }\n\n      var startIndex = this._msgCountAtSectionStart;\n      var significantChildren = directChildren.reduce(function (count, node) {\n        return count + (node instanceof Comment ? 0 : 1);\n      }, 0);\n\n      if (significantChildren == 1) {\n        for (var i = this._messages.length - 1; i >= startIndex; i--) {\n          var ast = this._messages[i].nodes;\n\n          if (!(ast.length == 1 && ast[0] instanceof Text$2)) {\n            this._messages.splice(i, 1);\n\n            break;\n          }\n        }\n      }\n\n      this._msgCountAtSectionStart = undefined;\n    }\n  }, {\n    key: \"_reportError\",\n    value: function _reportError(node, msg) {\n      this._errors.push(new I18nError(node.sourceSpan, msg));\n    }\n  }]);\n\n  return _Visitor;\n}();\n\nfunction _isOpeningComment(n) {\n  return !!(n instanceof Comment && n.value && n.value.startsWith('i18n'));\n}\n\nfunction _isClosingComment(n) {\n  return !!(n instanceof Comment && n.value && n.value === '/i18n');\n}\n\nfunction _getI18nAttr(p) {\n  return p.attrs.find(function (attr) {\n    return attr.name === _I18N_ATTR;\n  }) || null;\n}\n\nfunction _parseMessageMeta(i18n) {\n  if (!i18n) return {\n    meaning: '',\n    description: '',\n    id: ''\n  };\n  var idIndex = i18n.indexOf(ID_SEPARATOR);\n  var descIndex = i18n.indexOf(MEANING_SEPARATOR);\n\n  var _ref14 = idIndex > -1 ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''],\n      _ref15 = _slicedToArray(_ref14, 2),\n      meaningAndDesc = _ref15[0],\n      id = _ref15[1];\n\n  var _ref16 = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc],\n      _ref17 = _slicedToArray(_ref16, 2),\n      meaning = _ref17[0],\n      description = _ref17[1];\n\n  return {\n    meaning: meaning,\n    description: description,\n    id: id.trim()\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar XmlTagDefinition = /*#__PURE__*/function () {\n  function XmlTagDefinition() {\n    _classCallCheck(this, XmlTagDefinition);\n\n    this.closedByParent = false;\n    this.isVoid = false;\n    this.ignoreFirstLf = false;\n    this.canSelfClose = true;\n    this.preventNamespaceInheritance = false;\n  }\n\n  _createClass(XmlTagDefinition, [{\n    key: \"requireExtraParent\",\n    value: function requireExtraParent(currentParent) {\n      return false;\n    }\n  }, {\n    key: \"isClosedByChild\",\n    value: function isClosedByChild(name) {\n      return false;\n    }\n  }, {\n    key: \"getContentType\",\n    value: function getContentType() {\n      return TagContentType.PARSABLE_DATA;\n    }\n  }]);\n\n  return XmlTagDefinition;\n}();\n\nvar _TAG_DEFINITION = new XmlTagDefinition();\n\nfunction getXmlTagDefinition(tagName) {\n  return _TAG_DEFINITION;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar XmlParser = /*#__PURE__*/function (_Parser2) {\n  _inherits(XmlParser, _Parser2);\n\n  var _super92 = _createSuper(XmlParser);\n\n  function XmlParser() {\n    _classCallCheck(this, XmlParser);\n\n    return _super92.call(this, getXmlTagDefinition);\n  }\n\n  _createClass(XmlParser, [{\n    key: \"parse\",\n    value: function parse(source, url, options) {\n      return _get(_getPrototypeOf(XmlParser.prototype), \"parse\", this).call(this, source, url, options);\n    }\n  }]);\n\n  return XmlParser;\n}(Parser);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _VERSION$1 = '1.2';\nvar _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:1.2'; // TODO(vicb): make this a param (s/_/-/)\n\nvar _DEFAULT_SOURCE_LANG$1 = 'en';\nvar _PLACEHOLDER_TAG$2 = 'x';\nvar _MARKER_TAG$1 = 'mrk';\nvar _FILE_TAG = 'file';\nvar _SOURCE_TAG$1 = 'source';\nvar _SEGMENT_SOURCE_TAG = 'seg-source';\nvar _ALT_TRANS_TAG = 'alt-trans';\nvar _TARGET_TAG$1 = 'target';\nvar _UNIT_TAG$1 = 'trans-unit';\nvar _CONTEXT_GROUP_TAG = 'context-group';\nvar _CONTEXT_TAG = 'context'; // https://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html\n// https://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html\n\nvar Xliff = /*#__PURE__*/function (_Serializer2) {\n  _inherits(Xliff, _Serializer2);\n\n  var _super93 = _createSuper(Xliff);\n\n  function Xliff() {\n    _classCallCheck(this, Xliff);\n\n    return _super93.apply(this, arguments);\n  }\n\n  _createClass(Xliff, [{\n    key: \"write\",\n    value: function write(messages, locale) {\n      var visitor = new _WriteVisitor$1();\n      var transUnits = [];\n      messages.forEach(function (message) {\n        var _transUnit$children;\n\n        var contextTags = [];\n        message.sources.forEach(function (source) {\n          var contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, {\n            purpose: 'location'\n          });\n          contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, {\n            'context-type': 'sourcefile'\n          }, [new Text$1(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, {\n            'context-type': 'linenumber'\n          }, [new Text$1(\"\".concat(source.startLine))]), new CR(8));\n          contextTags.push(new CR(8), contextGroupTag);\n        });\n        var transUnit = new Tag(_UNIT_TAG$1, {\n          id: message.id,\n          datatype: 'html'\n        });\n\n        (_transUnit$children = transUnit.children).push.apply(_transUnit$children, [new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes))].concat(contextTags));\n\n        if (message.description) {\n          transUnit.children.push(new CR(8), new Tag('note', {\n            priority: '1',\n            from: 'description'\n          }, [new Text$1(message.description)]));\n        }\n\n        if (message.meaning) {\n          transUnit.children.push(new CR(8), new Tag('note', {\n            priority: '1',\n            from: 'meaning'\n          }, [new Text$1(message.meaning)]));\n        }\n\n        transUnit.children.push(new CR(6));\n        transUnits.push(new CR(6), transUnit);\n      });\n      var body = new Tag('body', {}, [].concat(transUnits, [new CR(4)]));\n      var file = new Tag('file', {\n        'source-language': locale || _DEFAULT_SOURCE_LANG$1,\n        datatype: 'plaintext',\n        original: 'ng2.template'\n      }, [new CR(4), body, new CR(2)]);\n      var xliff = new Tag('xliff', {\n        version: _VERSION$1,\n        xmlns: _XMLNS$1\n      }, [new CR(2), file, new CR()]);\n      return serialize([new Declaration({\n        version: '1.0',\n        encoding: 'UTF-8'\n      }), new CR(), xliff, new CR()]);\n    }\n  }, {\n    key: \"load\",\n    value: function load(content, url) {\n      // xliff to xml nodes\n      var xliffParser = new XliffParser();\n\n      var _xliffParser$parse = xliffParser.parse(content, url),\n          locale = _xliffParser$parse.locale,\n          msgIdToHtml = _xliffParser$parse.msgIdToHtml,\n          errors = _xliffParser$parse.errors; // xml nodes to i18n nodes\n\n\n      var i18nNodesByMsgId = {};\n      var converter = new XmlToI18n$2();\n      Object.keys(msgIdToHtml).forEach(function (msgId) {\n        var _converter$convert = converter.convert(msgIdToHtml[msgId], url),\n            i18nNodes = _converter$convert.i18nNodes,\n            e = _converter$convert.errors;\n\n        errors.push.apply(errors, _toConsumableArray(e));\n        i18nNodesByMsgId[msgId] = i18nNodes;\n      });\n\n      if (errors.length) {\n        throw new Error(\"xliff parse errors:\\n\".concat(errors.join('\\n')));\n      }\n\n      return {\n        locale: locale,\n        i18nNodesByMsgId: i18nNodesByMsgId\n      };\n    }\n  }, {\n    key: \"digest\",\n    value: function digest(message) {\n      return digest$1(message);\n    }\n  }]);\n\n  return Xliff;\n}(Serializer);\n\nvar _WriteVisitor$1 = /*#__PURE__*/function () {\n  function _WriteVisitor$1() {\n    _classCallCheck(this, _WriteVisitor$1);\n  }\n\n  _createClass(_WriteVisitor$1, [{\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      return [new Text$1(text.value)];\n    }\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container, context) {\n      var _this185 = this;\n\n      var nodes = [];\n      container.children.forEach(function (node) {\n        return nodes.push.apply(nodes, _toConsumableArray(node.visit(_this185)));\n      });\n      return nodes;\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu, context) {\n      var _this186 = this;\n\n      var nodes = [new Text$1(\"{\".concat(icu.expressionPlaceholder, \", \").concat(icu.type, \", \"))];\n      Object.keys(icu.cases).forEach(function (c) {\n        nodes.push.apply(nodes, [new Text$1(\"\".concat(c, \" {\"))].concat(_toConsumableArray(icu.cases[c].visit(_this186)), [new Text$1(\"} \")]));\n      });\n      nodes.push(new Text$1(\"}\"));\n      return nodes;\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph, context) {\n      var ctype = getCtypeForTag(ph.tag);\n\n      if (ph.isVoid) {\n        // void tags have no children nor closing tags\n        return [new Tag(_PLACEHOLDER_TAG$2, {\n          id: ph.startName,\n          ctype: ctype,\n          'equiv-text': \"<\".concat(ph.tag, \"/>\")\n        })];\n      }\n\n      var startTagPh = new Tag(_PLACEHOLDER_TAG$2, {\n        id: ph.startName,\n        ctype: ctype,\n        'equiv-text': \"<\".concat(ph.tag, \">\")\n      });\n      var closeTagPh = new Tag(_PLACEHOLDER_TAG$2, {\n        id: ph.closeName,\n        ctype: ctype,\n        'equiv-text': \"</\".concat(ph.tag, \">\")\n      });\n      return [startTagPh].concat(_toConsumableArray(this.serialize(ph.children)), [closeTagPh]);\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph, context) {\n      return [new Tag(_PLACEHOLDER_TAG$2, {\n        id: ph.name,\n        'equiv-text': \"{{\".concat(ph.value, \"}}\")\n      })];\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, context) {\n      var equivText = \"{\".concat(ph.value.expression, \", \").concat(ph.value.type, \", \").concat(Object.keys(ph.value.cases).map(function (value) {\n        return value + ' {...}';\n      }).join(' '), \"}\");\n      return [new Tag(_PLACEHOLDER_TAG$2, {\n        id: ph.name,\n        'equiv-text': equivText\n      })];\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(nodes) {\n      var _ref18,\n          _this187 = this;\n\n      return (_ref18 = []).concat.apply(_ref18, _toConsumableArray(nodes.map(function (node) {\n        return node.visit(_this187);\n      })));\n    }\n  }]);\n\n  return _WriteVisitor$1;\n}(); // TODO(vicb): add error management (structure)\n// Extract messages as xml nodes from the xliff file\n\n\nvar XliffParser = /*#__PURE__*/function () {\n  function XliffParser() {\n    _classCallCheck(this, XliffParser);\n\n    this._locale = null;\n  }\n\n  _createClass(XliffParser, [{\n    key: \"parse\",\n    value: function parse(xliff, url) {\n      this._unitMlString = null;\n      this._msgIdToHtml = {};\n      var xml = new XmlParser().parse(xliff, url);\n      this._errors = xml.errors;\n      visitAll(this, xml.rootNodes, null);\n      return {\n        msgIdToHtml: this._msgIdToHtml,\n        errors: this._errors,\n        locale: this._locale\n      };\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(element, context) {\n      switch (element.name) {\n        case _UNIT_TAG$1:\n          this._unitMlString = null;\n          var idAttr = element.attrs.find(function (attr) {\n            return attr.name === 'id';\n          });\n\n          if (!idAttr) {\n            this._addError(element, \"<\".concat(_UNIT_TAG$1, \"> misses the \\\"id\\\" attribute\"));\n          } else {\n            var id = idAttr.value;\n\n            if (this._msgIdToHtml.hasOwnProperty(id)) {\n              this._addError(element, \"Duplicated translations for msg \".concat(id));\n            } else {\n              visitAll(this, element.children, null);\n\n              if (typeof this._unitMlString === 'string') {\n                this._msgIdToHtml[id] = this._unitMlString;\n              } else {\n                this._addError(element, \"Message \".concat(id, \" misses a translation\"));\n              }\n            }\n          }\n\n          break;\n        // ignore those tags\n\n        case _SOURCE_TAG$1:\n        case _SEGMENT_SOURCE_TAG:\n        case _ALT_TRANS_TAG:\n          break;\n\n        case _TARGET_TAG$1:\n          var innerTextStart = element.startSourceSpan.end.offset;\n          var innerTextEnd = element.endSourceSpan.start.offset;\n          var content = element.startSourceSpan.start.file.content;\n          var innerText = content.slice(innerTextStart, innerTextEnd);\n          this._unitMlString = innerText;\n          break;\n\n        case _FILE_TAG:\n          var localeAttr = element.attrs.find(function (attr) {\n            return attr.name === 'target-language';\n          });\n\n          if (localeAttr) {\n            this._locale = localeAttr.value;\n          }\n\n          visitAll(this, element.children, null);\n          break;\n\n        default:\n          // TODO(vicb): assert file structure, xliff version\n          // For now only recurse on unhandled nodes\n          visitAll(this, element.children, null);\n      }\n    }\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute, context) {}\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {}\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment, context) {}\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(expansion, context) {}\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(expansionCase, context) {}\n  }, {\n    key: \"_addError\",\n    value: function _addError(node, message) {\n      this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n  }]);\n\n  return XliffParser;\n}(); // Convert ml nodes (xliff syntax) to i18n nodes\n\n\nvar XmlToI18n$2 = /*#__PURE__*/function () {\n  function XmlToI18n$2() {\n    _classCallCheck(this, XmlToI18n$2);\n  }\n\n  _createClass(XmlToI18n$2, [{\n    key: \"convert\",\n    value: function convert(message, url) {\n      var _ref19;\n\n      var xmlIcu = new XmlParser().parse(message, url, {\n        tokenizeExpansionForms: true\n      });\n      this._errors = xmlIcu.errors;\n      var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : (_ref19 = []).concat.apply(_ref19, _toConsumableArray(visitAll(this, xmlIcu.rootNodes)));\n      return {\n        i18nNodes: i18nNodes,\n        errors: this._errors\n      };\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      return new Text$2(text.value, text.sourceSpan);\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(el, context) {\n      if (el.name === _PLACEHOLDER_TAG$2) {\n        var nameAttr = el.attrs.find(function (attr) {\n          return attr.name === 'id';\n        });\n\n        if (nameAttr) {\n          return new Placeholder('', nameAttr.value, el.sourceSpan);\n        }\n\n        this._addError(el, \"<\".concat(_PLACEHOLDER_TAG$2, \"> misses the \\\"id\\\" attribute\"));\n\n        return null;\n      }\n\n      if (el.name === _MARKER_TAG$1) {\n        var _ref20;\n\n        return (_ref20 = []).concat.apply(_ref20, _toConsumableArray(visitAll(this, el.children)));\n      }\n\n      this._addError(el, \"Unexpected tag\");\n\n      return null;\n    }\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(icu, context) {\n      var caseMap = {};\n      visitAll(this, icu.cases).forEach(function (c) {\n        caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n      });\n      return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(icuCase, context) {\n      return {\n        value: icuCase.value,\n        nodes: visitAll(this, icuCase.expression)\n      };\n    }\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment, context) {}\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute, context) {}\n  }, {\n    key: \"_addError\",\n    value: function _addError(node, message) {\n      this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n  }]);\n\n  return XmlToI18n$2;\n}();\n\nfunction getCtypeForTag(tag) {\n  switch (tag.toLowerCase()) {\n    case 'br':\n      return 'lb';\n\n    case 'img':\n      return 'image';\n\n    default:\n      return \"x-\".concat(tag);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _VERSION = '2.0';\nvar _XMLNS = 'urn:oasis:names:tc:xliff:document:2.0'; // TODO(vicb): make this a param (s/_/-/)\n\nvar _DEFAULT_SOURCE_LANG = 'en';\nvar _PLACEHOLDER_TAG$1 = 'ph';\nvar _PLACEHOLDER_SPANNING_TAG = 'pc';\nvar _MARKER_TAG = 'mrk';\nvar _XLIFF_TAG = 'xliff';\nvar _SOURCE_TAG = 'source';\nvar _TARGET_TAG = 'target';\nvar _UNIT_TAG = 'unit'; // https://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html\n\nvar Xliff2 = /*#__PURE__*/function (_Serializer3) {\n  _inherits(Xliff2, _Serializer3);\n\n  var _super94 = _createSuper(Xliff2);\n\n  function Xliff2() {\n    _classCallCheck(this, Xliff2);\n\n    return _super94.apply(this, arguments);\n  }\n\n  _createClass(Xliff2, [{\n    key: \"write\",\n    value: function write(messages, locale) {\n      var visitor = new _WriteVisitor();\n      var units = [];\n      messages.forEach(function (message) {\n        var unit = new Tag(_UNIT_TAG, {\n          id: message.id\n        });\n        var notes = new Tag('notes');\n\n        if (message.description || message.meaning) {\n          if (message.description) {\n            notes.children.push(new CR(8), new Tag('note', {\n              category: 'description'\n            }, [new Text$1(message.description)]));\n          }\n\n          if (message.meaning) {\n            notes.children.push(new CR(8), new Tag('note', {\n              category: 'meaning'\n            }, [new Text$1(message.meaning)]));\n          }\n        }\n\n        message.sources.forEach(function (source) {\n          notes.children.push(new CR(8), new Tag('note', {\n            category: 'location'\n          }, [new Text$1(\"\".concat(source.filePath, \":\").concat(source.startLine).concat(source.endLine !== source.startLine ? ',' + source.endLine : ''))]));\n        });\n        notes.children.push(new CR(6));\n        unit.children.push(new CR(6), notes);\n        var segment = new Tag('segment');\n        segment.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(6));\n        unit.children.push(new CR(6), segment, new CR(4));\n        units.push(new CR(4), unit);\n      });\n      var file = new Tag('file', {\n        'original': 'ng.template',\n        id: 'ngi18n'\n      }, [].concat(units, [new CR(2)]));\n      var xliff = new Tag(_XLIFF_TAG, {\n        version: _VERSION,\n        xmlns: _XMLNS,\n        srcLang: locale || _DEFAULT_SOURCE_LANG\n      }, [new CR(2), file, new CR()]);\n      return serialize([new Declaration({\n        version: '1.0',\n        encoding: 'UTF-8'\n      }), new CR(), xliff, new CR()]);\n    }\n  }, {\n    key: \"load\",\n    value: function load(content, url) {\n      // xliff to xml nodes\n      var xliff2Parser = new Xliff2Parser();\n\n      var _xliff2Parser$parse = xliff2Parser.parse(content, url),\n          locale = _xliff2Parser$parse.locale,\n          msgIdToHtml = _xliff2Parser$parse.msgIdToHtml,\n          errors = _xliff2Parser$parse.errors; // xml nodes to i18n nodes\n\n\n      var i18nNodesByMsgId = {};\n      var converter = new XmlToI18n$1();\n      Object.keys(msgIdToHtml).forEach(function (msgId) {\n        var _converter$convert2 = converter.convert(msgIdToHtml[msgId], url),\n            i18nNodes = _converter$convert2.i18nNodes,\n            e = _converter$convert2.errors;\n\n        errors.push.apply(errors, _toConsumableArray(e));\n        i18nNodesByMsgId[msgId] = i18nNodes;\n      });\n\n      if (errors.length) {\n        throw new Error(\"xliff2 parse errors:\\n\".concat(errors.join('\\n')));\n      }\n\n      return {\n        locale: locale,\n        i18nNodesByMsgId: i18nNodesByMsgId\n      };\n    }\n  }, {\n    key: \"digest\",\n    value: function digest(message) {\n      return decimalDigest(message);\n    }\n  }]);\n\n  return Xliff2;\n}(Serializer);\n\nvar _WriteVisitor = /*#__PURE__*/function () {\n  function _WriteVisitor() {\n    _classCallCheck(this, _WriteVisitor);\n  }\n\n  _createClass(_WriteVisitor, [{\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      return [new Text$1(text.value)];\n    }\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container, context) {\n      var _this188 = this;\n\n      var nodes = [];\n      container.children.forEach(function (node) {\n        return nodes.push.apply(nodes, _toConsumableArray(node.visit(_this188)));\n      });\n      return nodes;\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu, context) {\n      var _this189 = this;\n\n      var nodes = [new Text$1(\"{\".concat(icu.expressionPlaceholder, \", \").concat(icu.type, \", \"))];\n      Object.keys(icu.cases).forEach(function (c) {\n        nodes.push.apply(nodes, [new Text$1(\"\".concat(c, \" {\"))].concat(_toConsumableArray(icu.cases[c].visit(_this189)), [new Text$1(\"} \")]));\n      });\n      nodes.push(new Text$1(\"}\"));\n      return nodes;\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph, context) {\n      var _ref21,\n          _this190 = this;\n\n      var type = getTypeForTag(ph.tag);\n\n      if (ph.isVoid) {\n        var tagPh = new Tag(_PLACEHOLDER_TAG$1, {\n          id: (this._nextPlaceholderId++).toString(),\n          equiv: ph.startName,\n          type: type,\n          disp: \"<\".concat(ph.tag, \"/>\")\n        });\n        return [tagPh];\n      }\n\n      var tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {\n        id: (this._nextPlaceholderId++).toString(),\n        equivStart: ph.startName,\n        equivEnd: ph.closeName,\n        type: type,\n        dispStart: \"<\".concat(ph.tag, \">\"),\n        dispEnd: \"</\".concat(ph.tag, \">\")\n      });\n\n      var nodes = (_ref21 = []).concat.apply(_ref21, _toConsumableArray(ph.children.map(function (node) {\n        return node.visit(_this190);\n      })));\n\n      if (nodes.length) {\n        nodes.forEach(function (node) {\n          return tagPc.children.push(node);\n        });\n      } else {\n        tagPc.children.push(new Text$1(''));\n      }\n\n      return [tagPc];\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph, context) {\n      var idStr = (this._nextPlaceholderId++).toString();\n      return [new Tag(_PLACEHOLDER_TAG$1, {\n        id: idStr,\n        equiv: ph.name,\n        disp: \"{{\".concat(ph.value, \"}}\")\n      })];\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, context) {\n      var cases = Object.keys(ph.value.cases).map(function (value) {\n        return value + ' {...}';\n      }).join(' ');\n      var idStr = (this._nextPlaceholderId++).toString();\n      return [new Tag(_PLACEHOLDER_TAG$1, {\n        id: idStr,\n        equiv: ph.name,\n        disp: \"{\".concat(ph.value.expression, \", \").concat(ph.value.type, \", \").concat(cases, \"}\")\n      })];\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(nodes) {\n      var _ref22,\n          _this191 = this;\n\n      this._nextPlaceholderId = 0;\n      return (_ref22 = []).concat.apply(_ref22, _toConsumableArray(nodes.map(function (node) {\n        return node.visit(_this191);\n      })));\n    }\n  }]);\n\n  return _WriteVisitor;\n}(); // Extract messages as xml nodes from the xliff file\n\n\nvar Xliff2Parser = /*#__PURE__*/function () {\n  function Xliff2Parser() {\n    _classCallCheck(this, Xliff2Parser);\n\n    this._locale = null;\n  }\n\n  _createClass(Xliff2Parser, [{\n    key: \"parse\",\n    value: function parse(xliff, url) {\n      this._unitMlString = null;\n      this._msgIdToHtml = {};\n      var xml = new XmlParser().parse(xliff, url);\n      this._errors = xml.errors;\n      visitAll(this, xml.rootNodes, null);\n      return {\n        msgIdToHtml: this._msgIdToHtml,\n        errors: this._errors,\n        locale: this._locale\n      };\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(element, context) {\n      switch (element.name) {\n        case _UNIT_TAG:\n          this._unitMlString = null;\n          var idAttr = element.attrs.find(function (attr) {\n            return attr.name === 'id';\n          });\n\n          if (!idAttr) {\n            this._addError(element, \"<\".concat(_UNIT_TAG, \"> misses the \\\"id\\\" attribute\"));\n          } else {\n            var id = idAttr.value;\n\n            if (this._msgIdToHtml.hasOwnProperty(id)) {\n              this._addError(element, \"Duplicated translations for msg \".concat(id));\n            } else {\n              visitAll(this, element.children, null);\n\n              if (typeof this._unitMlString === 'string') {\n                this._msgIdToHtml[id] = this._unitMlString;\n              } else {\n                this._addError(element, \"Message \".concat(id, \" misses a translation\"));\n              }\n            }\n          }\n\n          break;\n\n        case _SOURCE_TAG:\n          // ignore source message\n          break;\n\n        case _TARGET_TAG:\n          var innerTextStart = element.startSourceSpan.end.offset;\n          var innerTextEnd = element.endSourceSpan.start.offset;\n          var content = element.startSourceSpan.start.file.content;\n          var innerText = content.slice(innerTextStart, innerTextEnd);\n          this._unitMlString = innerText;\n          break;\n\n        case _XLIFF_TAG:\n          var localeAttr = element.attrs.find(function (attr) {\n            return attr.name === 'trgLang';\n          });\n\n          if (localeAttr) {\n            this._locale = localeAttr.value;\n          }\n\n          var versionAttr = element.attrs.find(function (attr) {\n            return attr.name === 'version';\n          });\n\n          if (versionAttr) {\n            var version = versionAttr.value;\n\n            if (version !== '2.0') {\n              this._addError(element, \"The XLIFF file version \".concat(version, \" is not compatible with XLIFF 2.0 serializer\"));\n            } else {\n              visitAll(this, element.children, null);\n            }\n          }\n\n          break;\n\n        default:\n          visitAll(this, element.children, null);\n      }\n    }\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute, context) {}\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {}\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment, context) {}\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(expansion, context) {}\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(expansionCase, context) {}\n  }, {\n    key: \"_addError\",\n    value: function _addError(node, message) {\n      this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n  }]);\n\n  return Xliff2Parser;\n}(); // Convert ml nodes (xliff syntax) to i18n nodes\n\n\nvar XmlToI18n$1 = /*#__PURE__*/function () {\n  function XmlToI18n$1() {\n    _classCallCheck(this, XmlToI18n$1);\n  }\n\n  _createClass(XmlToI18n$1, [{\n    key: \"convert\",\n    value: function convert(message, url) {\n      var _ref23;\n\n      var xmlIcu = new XmlParser().parse(message, url, {\n        tokenizeExpansionForms: true\n      });\n      this._errors = xmlIcu.errors;\n      var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : (_ref23 = []).concat.apply(_ref23, _toConsumableArray(visitAll(this, xmlIcu.rootNodes)));\n      return {\n        i18nNodes: i18nNodes,\n        errors: this._errors\n      };\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      return new Text$2(text.value, text.sourceSpan);\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(el, context) {\n      var _this192 = this,\n          _ref24;\n\n      switch (el.name) {\n        case _PLACEHOLDER_TAG$1:\n          var nameAttr = el.attrs.find(function (attr) {\n            return attr.name === 'equiv';\n          });\n\n          if (nameAttr) {\n            return [new Placeholder('', nameAttr.value, el.sourceSpan)];\n          }\n\n          this._addError(el, \"<\".concat(_PLACEHOLDER_TAG$1, \"> misses the \\\"equiv\\\" attribute\"));\n\n          break;\n\n        case _PLACEHOLDER_SPANNING_TAG:\n          var startAttr = el.attrs.find(function (attr) {\n            return attr.name === 'equivStart';\n          });\n          var endAttr = el.attrs.find(function (attr) {\n            return attr.name === 'equivEnd';\n          });\n\n          if (!startAttr) {\n            this._addError(el, \"<\".concat(_PLACEHOLDER_TAG$1, \"> misses the \\\"equivStart\\\" attribute\"));\n          } else if (!endAttr) {\n            this._addError(el, \"<\".concat(_PLACEHOLDER_TAG$1, \"> misses the \\\"equivEnd\\\" attribute\"));\n          } else {\n            var startId = startAttr.value;\n            var endId = endAttr.value;\n            var nodes = [];\n            return nodes.concat.apply(nodes, [new Placeholder('', startId, el.sourceSpan)].concat(_toConsumableArray(el.children.map(function (node) {\n              return node.visit(_this192, null);\n            })), [new Placeholder('', endId, el.sourceSpan)]));\n          }\n\n          break;\n\n        case _MARKER_TAG:\n          return (_ref24 = []).concat.apply(_ref24, _toConsumableArray(visitAll(this, el.children)));\n\n        default:\n          this._addError(el, \"Unexpected tag\");\n\n      }\n\n      return null;\n    }\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(icu, context) {\n      var caseMap = {};\n      visitAll(this, icu.cases).forEach(function (c) {\n        caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n      });\n      return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(icuCase, context) {\n      var _ref25;\n\n      return {\n        value: icuCase.value,\n        nodes: (_ref25 = []).concat.apply(_ref25, _toConsumableArray(visitAll(this, icuCase.expression)))\n      };\n    }\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment, context) {}\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute, context) {}\n  }, {\n    key: \"_addError\",\n    value: function _addError(node, message) {\n      this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n  }]);\n\n  return XmlToI18n$1;\n}();\n\nfunction getTypeForTag(tag) {\n  switch (tag.toLowerCase()) {\n    case 'br':\n    case 'b':\n    case 'i':\n    case 'u':\n      return 'fmt';\n\n    case 'img':\n      return 'image';\n\n    case 'a':\n      return 'link';\n\n    default:\n      return 'other';\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar _TRANSLATIONS_TAG = 'translationbundle';\nvar _TRANSLATION_TAG = 'translation';\nvar _PLACEHOLDER_TAG = 'ph';\n\nvar Xtb = /*#__PURE__*/function (_Serializer4) {\n  _inherits(Xtb, _Serializer4);\n\n  var _super95 = _createSuper(Xtb);\n\n  function Xtb() {\n    _classCallCheck(this, Xtb);\n\n    return _super95.apply(this, arguments);\n  }\n\n  _createClass(Xtb, [{\n    key: \"write\",\n    value: function write(messages, locale) {\n      throw new Error('Unsupported');\n    }\n  }, {\n    key: \"load\",\n    value: function load(content, url) {\n      // xtb to xml nodes\n      var xtbParser = new XtbParser();\n\n      var _xtbParser$parse = xtbParser.parse(content, url),\n          locale = _xtbParser$parse.locale,\n          msgIdToHtml = _xtbParser$parse.msgIdToHtml,\n          errors = _xtbParser$parse.errors; // xml nodes to i18n nodes\n\n\n      var i18nNodesByMsgId = {};\n      var converter = new XmlToI18n(); // Because we should be able to load xtb files that rely on features not supported by angular,\n      // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n      // converted\n\n      Object.keys(msgIdToHtml).forEach(function (msgId) {\n        var valueFn = function valueFn() {\n          var _converter$convert3 = converter.convert(msgIdToHtml[msgId], url),\n              i18nNodes = _converter$convert3.i18nNodes,\n              errors = _converter$convert3.errors;\n\n          if (errors.length) {\n            throw new Error(\"xtb parse errors:\\n\".concat(errors.join('\\n')));\n          }\n\n          return i18nNodes;\n        };\n\n        createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n      });\n\n      if (errors.length) {\n        throw new Error(\"xtb parse errors:\\n\".concat(errors.join('\\n')));\n      }\n\n      return {\n        locale: locale,\n        i18nNodesByMsgId: i18nNodesByMsgId\n      };\n    }\n  }, {\n    key: \"digest\",\n    value: function digest(message) {\n      return _digest2(message);\n    }\n  }, {\n    key: \"createNameMapper\",\n    value: function createNameMapper(message) {\n      return new SimplePlaceholderMapper(message, toPublicName);\n    }\n  }]);\n\n  return Xtb;\n}(Serializer);\n\nfunction createLazyProperty(messages, id, valueFn) {\n  Object.defineProperty(messages, id, {\n    configurable: true,\n    enumerable: true,\n    get: function get() {\n      var value = valueFn();\n      Object.defineProperty(messages, id, {\n        enumerable: true,\n        value: value\n      });\n      return value;\n    },\n    set: function set(_) {\n      throw new Error('Could not overwrite an XTB translation');\n    }\n  });\n} // Extract messages as xml nodes from the xtb file\n\n\nvar XtbParser = /*#__PURE__*/function () {\n  function XtbParser() {\n    _classCallCheck(this, XtbParser);\n\n    this._locale = null;\n  }\n\n  _createClass(XtbParser, [{\n    key: \"parse\",\n    value: function parse(xtb, url) {\n      this._bundleDepth = 0;\n      this._msgIdToHtml = {}; // We can not parse the ICU messages at this point as some messages might not originate\n      // from Angular that could not be lex'd.\n\n      var xml = new XmlParser().parse(xtb, url);\n      this._errors = xml.errors;\n      visitAll(this, xml.rootNodes);\n      return {\n        msgIdToHtml: this._msgIdToHtml,\n        errors: this._errors,\n        locale: this._locale\n      };\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(element, context) {\n      switch (element.name) {\n        case _TRANSLATIONS_TAG:\n          this._bundleDepth++;\n\n          if (this._bundleDepth > 1) {\n            this._addError(element, \"<\".concat(_TRANSLATIONS_TAG, \"> elements can not be nested\"));\n          }\n\n          var langAttr = element.attrs.find(function (attr) {\n            return attr.name === 'lang';\n          });\n\n          if (langAttr) {\n            this._locale = langAttr.value;\n          }\n\n          visitAll(this, element.children, null);\n          this._bundleDepth--;\n          break;\n\n        case _TRANSLATION_TAG:\n          var idAttr = element.attrs.find(function (attr) {\n            return attr.name === 'id';\n          });\n\n          if (!idAttr) {\n            this._addError(element, \"<\".concat(_TRANSLATION_TAG, \"> misses the \\\"id\\\" attribute\"));\n          } else {\n            var id = idAttr.value;\n\n            if (this._msgIdToHtml.hasOwnProperty(id)) {\n              this._addError(element, \"Duplicated translations for msg \".concat(id));\n            } else {\n              var innerTextStart = element.startSourceSpan.end.offset;\n              var innerTextEnd = element.endSourceSpan.start.offset;\n              var content = element.startSourceSpan.start.file.content;\n              var innerText = content.slice(innerTextStart, innerTextEnd);\n              this._msgIdToHtml[id] = innerText;\n            }\n          }\n\n          break;\n\n        default:\n          this._addError(element, 'Unexpected tag');\n\n      }\n    }\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute, context) {}\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {}\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment, context) {}\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(expansion, context) {}\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(expansionCase, context) {}\n  }, {\n    key: \"_addError\",\n    value: function _addError(node, message) {\n      this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n  }]);\n\n  return XtbParser;\n}(); // Convert ml nodes (xtb syntax) to i18n nodes\n\n\nvar XmlToI18n = /*#__PURE__*/function () {\n  function XmlToI18n() {\n    _classCallCheck(this, XmlToI18n);\n  }\n\n  _createClass(XmlToI18n, [{\n    key: \"convert\",\n    value: function convert(message, url) {\n      var xmlIcu = new XmlParser().parse(message, url, {\n        tokenizeExpansionForms: true\n      });\n      this._errors = xmlIcu.errors;\n      var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : visitAll(this, xmlIcu.rootNodes);\n      return {\n        i18nNodes: i18nNodes,\n        errors: this._errors\n      };\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      return new Text$2(text.value, text.sourceSpan);\n    }\n  }, {\n    key: \"visitExpansion\",\n    value: function visitExpansion(icu, context) {\n      var caseMap = {};\n      visitAll(this, icu.cases).forEach(function (c) {\n        caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n      });\n      return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n  }, {\n    key: \"visitExpansionCase\",\n    value: function visitExpansionCase(icuCase, context) {\n      return {\n        value: icuCase.value,\n        nodes: visitAll(this, icuCase.expression)\n      };\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(el, context) {\n      if (el.name === _PLACEHOLDER_TAG) {\n        var nameAttr = el.attrs.find(function (attr) {\n          return attr.name === 'name';\n        });\n\n        if (nameAttr) {\n          return new Placeholder('', nameAttr.value, el.sourceSpan);\n        }\n\n        this._addError(el, \"<\".concat(_PLACEHOLDER_TAG, \"> misses the \\\"name\\\" attribute\"));\n      } else {\n        this._addError(el, \"Unexpected tag\");\n      }\n\n      return null;\n    }\n  }, {\n    key: \"visitComment\",\n    value: function visitComment(comment, context) {}\n  }, {\n    key: \"visitAttribute\",\n    value: function visitAttribute(attribute, context) {}\n  }, {\n    key: \"_addError\",\n    value: function _addError(node, message) {\n      this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n  }]);\n\n  return XmlToI18n;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A container for translated messages\n */\n\n\nvar TranslationBundle = /*#__PURE__*/function () {\n  function TranslationBundle() {\n    var _i18nNodesByMsgId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var locale = arguments.length > 1 ? arguments[1] : undefined;\n    var digest = arguments.length > 2 ? arguments[2] : undefined;\n    var mapperFactory = arguments.length > 3 ? arguments[3] : undefined;\n    var missingTranslationStrategy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : MissingTranslationStrategy.Warning;\n    var console = arguments.length > 5 ? arguments[5] : undefined;\n\n    _classCallCheck(this, TranslationBundle);\n\n    this._i18nNodesByMsgId = _i18nNodesByMsgId;\n    this.digest = digest;\n    this.mapperFactory = mapperFactory;\n    this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);\n  } // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n\n\n  _createClass(TranslationBundle, [{\n    key: \"get\",\n    value: // Returns the translation as HTML nodes from the given source message.\n    function get(srcMsg) {\n      var html = this._i18nToHtml.convert(srcMsg);\n\n      if (html.errors.length) {\n        throw new Error(html.errors.join('\\n'));\n      }\n\n      return html.nodes;\n    }\n  }, {\n    key: \"has\",\n    value: function has(srcMsg) {\n      return this.digest(srcMsg) in this._i18nNodesByMsgId;\n    }\n  }], [{\n    key: \"load\",\n    value: function load(content, url, serializer, missingTranslationStrategy, console) {\n      var _serializer$load = serializer.load(content, url),\n          locale = _serializer$load.locale,\n          i18nNodesByMsgId = _serializer$load.i18nNodesByMsgId;\n\n      var digestFn = function digestFn(m) {\n        return serializer.digest(m);\n      };\n\n      var mapperFactory = function mapperFactory(m) {\n        return serializer.createNameMapper(m);\n      };\n\n      return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n    }\n  }]);\n\n  return TranslationBundle;\n}();\n\nvar I18nToHtmlVisitor = /*#__PURE__*/function () {\n  function I18nToHtmlVisitor() {\n    var _i18nNodesByMsgId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _locale = arguments.length > 1 ? arguments[1] : undefined;\n\n    var _digest = arguments.length > 2 ? arguments[2] : undefined;\n\n    var _mapperFactory = arguments.length > 3 ? arguments[3] : undefined;\n\n    var _missingTranslationStrategy = arguments.length > 4 ? arguments[4] : undefined;\n\n    var _console = arguments.length > 5 ? arguments[5] : undefined;\n\n    _classCallCheck(this, I18nToHtmlVisitor);\n\n    this._i18nNodesByMsgId = _i18nNodesByMsgId;\n    this._locale = _locale;\n    this._digest = _digest;\n    this._mapperFactory = _mapperFactory;\n    this._missingTranslationStrategy = _missingTranslationStrategy;\n    this._console = _console;\n    this._contextStack = [];\n    this._errors = [];\n  }\n\n  _createClass(I18nToHtmlVisitor, [{\n    key: \"convert\",\n    value: function convert(srcMsg) {\n      this._contextStack.length = 0;\n      this._errors.length = 0; // i18n to text\n\n      var text = this._convertToText(srcMsg); // text to html\n\n\n      var url = srcMsg.nodes[0].sourceSpan.start.file.url;\n      var html = new HtmlParser().parse(text, url, {\n        tokenizeExpansionForms: true\n      });\n      return {\n        nodes: html.rootNodes,\n        errors: [].concat(_toConsumableArray(this._errors), _toConsumableArray(html.errors))\n      };\n    }\n  }, {\n    key: \"visitText\",\n    value: function visitText(text, context) {\n      // `convert()` uses an `HtmlParser` to return `html.Node`s\n      // we should then make sure that any special characters are escaped\n      return escapeXml(text.value);\n    }\n  }, {\n    key: \"visitContainer\",\n    value: function visitContainer(container, context) {\n      var _this193 = this;\n\n      return container.children.map(function (n) {\n        return n.visit(_this193);\n      }).join('');\n    }\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu, context) {\n      var _this194 = this;\n\n      var cases = Object.keys(icu.cases).map(function (k) {\n        return \"\".concat(k, \" {\").concat(icu.cases[k].visit(_this194), \"}\");\n      }); // TODO(vicb): Once all format switch to using expression placeholders\n      // we should throw when the placeholder is not in the source message\n\n      var exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ? this._srcMsg.placeholders[icu.expression].text : icu.expression;\n      return \"{\".concat(exp, \", \").concat(icu.type, \", \").concat(cases.join(' '), \"}\");\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph, context) {\n      var phName = this._mapper(ph.name);\n\n      if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n        return this._srcMsg.placeholders[phName].text;\n      }\n\n      if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n        return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n      }\n\n      this._addError(ph, \"Unknown placeholder \\\"\".concat(ph.name, \"\\\"\"));\n\n      return '';\n    } // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph, context) {\n      var _this195 = this;\n\n      var tag = \"\".concat(ph.tag);\n      var attrs = Object.keys(ph.attrs).map(function (name) {\n        return \"\".concat(name, \"=\\\"\").concat(ph.attrs[name], \"\\\"\");\n      }).join(' ');\n\n      if (ph.isVoid) {\n        return \"<\".concat(tag, \" \").concat(attrs, \"/>\");\n      }\n\n      var children = ph.children.map(function (c) {\n        return c.visit(_this195);\n      }).join('');\n      return \"<\".concat(tag, \" \").concat(attrs, \">\").concat(children, \"</\").concat(tag, \">\");\n    } // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, context) {\n      // An ICU placeholder references the source message to be serialized\n      return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n    }\n    /**\n     * Convert a source message to a translated text string:\n     * - text nodes are replaced with their translation,\n     * - placeholders are replaced with their content,\n     * - ICU nodes are converted to ICU expressions.\n     */\n\n  }, {\n    key: \"_convertToText\",\n    value: function _convertToText(srcMsg) {\n      var _this196 = this;\n\n      var id = this._digest(srcMsg);\n\n      var mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n      var nodes;\n\n      this._contextStack.push({\n        msg: this._srcMsg,\n        mapper: this._mapper\n      });\n\n      this._srcMsg = srcMsg;\n\n      if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n        // When there is a translation use its nodes as the source\n        // And create a mapper to convert serialized placeholder names to internal names\n        nodes = this._i18nNodesByMsgId[id];\n\n        this._mapper = function (name) {\n          return mapper ? mapper.toInternalName(name) : name;\n        };\n      } else {\n        // When no translation has been found\n        // - report an error / a warning / nothing,\n        // - use the nodes from the original message\n        // - placeholders are already internal and need no mapper\n        if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n          var ctx = this._locale ? \" for locale \\\"\".concat(this._locale, \"\\\"\") : '';\n\n          this._addError(srcMsg.nodes[0], \"Missing translation for message \\\"\".concat(id, \"\\\"\").concat(ctx));\n        } else if (this._console && this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n          var _ctx = this._locale ? \" for locale \\\"\".concat(this._locale, \"\\\"\") : '';\n\n          this._console.warn(\"Missing translation for message \\\"\".concat(id, \"\\\"\").concat(_ctx));\n        }\n\n        nodes = srcMsg.nodes;\n\n        this._mapper = function (name) {\n          return name;\n        };\n      }\n\n      var text = nodes.map(function (node) {\n        return node.visit(_this196);\n      }).join('');\n\n      var context = this._contextStack.pop();\n\n      this._srcMsg = context.msg;\n      this._mapper = context.mapper;\n      return text;\n    }\n  }, {\n    key: \"_addError\",\n    value: function _addError(el, msg) {\n      this._errors.push(new I18nError(el.sourceSpan, msg));\n    }\n  }]);\n\n  return I18nToHtmlVisitor;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar I18NHtmlParser = /*#__PURE__*/function () {\n  function I18NHtmlParser(_htmlParser, translations, translationsFormat) {\n    var missingTranslation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : MissingTranslationStrategy.Warning;\n    var console = arguments.length > 4 ? arguments[4] : undefined;\n\n    _classCallCheck(this, I18NHtmlParser);\n\n    this._htmlParser = _htmlParser;\n\n    if (translations) {\n      var _serializer = createSerializer(translationsFormat);\n\n      this._translationBundle = TranslationBundle.load(translations, 'i18n', _serializer, missingTranslation, console);\n    } else {\n      this._translationBundle = new TranslationBundle({}, null, digest$1, undefined, missingTranslation, console);\n    }\n  }\n\n  _createClass(I18NHtmlParser, [{\n    key: \"parse\",\n    value: function parse(source, url) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n\n      var parseResult = this._htmlParser.parse(source, url, Object.assign({\n        interpolationConfig: interpolationConfig\n      }, options));\n\n      if (parseResult.errors.length) {\n        return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n      }\n\n      return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n    }\n  }]);\n\n  return I18NHtmlParser;\n}();\n\nfunction createSerializer(format) {\n  format = (format || 'xlf').toLowerCase();\n\n  switch (format) {\n    case 'xmb':\n      return new Xmb();\n\n    case 'xtb':\n      return new Xtb();\n\n    case 'xliff2':\n    case 'xlf2':\n      return new Xliff2();\n\n    case 'xliff':\n    case 'xlf':\n    default:\n      return new Xliff();\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A container for message extracted from the templates.\n */\n\n\nvar MessageBundle = /*#__PURE__*/function () {\n  function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {\n    var _locale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    _classCallCheck(this, MessageBundle);\n\n    this._htmlParser = _htmlParser;\n    this._implicitTags = _implicitTags;\n    this._implicitAttrs = _implicitAttrs;\n    this._locale = _locale;\n    this._messages = [];\n  }\n\n  _createClass(MessageBundle, [{\n    key: \"updateFromTemplate\",\n    value: function updateFromTemplate(html, url, interpolationConfig) {\n      var _this$_messages;\n\n      var htmlParserResult = this._htmlParser.parse(html, url, {\n        tokenizeExpansionForms: true,\n        interpolationConfig: interpolationConfig\n      });\n\n      if (htmlParserResult.errors.length) {\n        return htmlParserResult.errors;\n      }\n\n      var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n\n      if (i18nParserResult.errors.length) {\n        return i18nParserResult.errors;\n      }\n\n      (_this$_messages = this._messages).push.apply(_this$_messages, _toConsumableArray(i18nParserResult.messages));\n\n      return [];\n    } // Return the message in the internal format\n    // The public (serialized) format might be different, see the `write` method.\n\n  }, {\n    key: \"getMessages\",\n    value: function getMessages() {\n      return this._messages;\n    }\n  }, {\n    key: \"write\",\n    value: function write(serializer, filterSources) {\n      var messages = {};\n      var mapperVisitor = new MapPlaceholderNames(); // Deduplicate messages based on their ID\n\n      this._messages.forEach(function (message) {\n        var id = serializer.digest(message);\n\n        if (!messages.hasOwnProperty(id)) {\n          messages[id] = message;\n        } else {\n          var _messages$id$sources;\n\n          (_messages$id$sources = messages[id].sources).push.apply(_messages$id$sources, _toConsumableArray(message.sources));\n        }\n      }); // Transform placeholder names using the serializer mapping\n\n\n      var msgList = Object.keys(messages).map(function (id) {\n        var mapper = serializer.createNameMapper(messages[id]);\n        var src = messages[id];\n        var nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n        var transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);\n        transformedMessage.sources = src.sources;\n\n        if (filterSources) {\n          transformedMessage.sources.forEach(function (source) {\n            return source.filePath = filterSources(source.filePath);\n          });\n        }\n\n        return transformedMessage;\n      });\n      return serializer.write(msgList, this._locale);\n    }\n  }]);\n\n  return MessageBundle;\n}(); // Transform an i18n AST by renaming the placeholder nodes with the given mapper\n\n\nvar MapPlaceholderNames = /*#__PURE__*/function (_CloneVisitor) {\n  _inherits(MapPlaceholderNames, _CloneVisitor);\n\n  var _super96 = _createSuper(MapPlaceholderNames);\n\n  function MapPlaceholderNames() {\n    _classCallCheck(this, MapPlaceholderNames);\n\n    return _super96.apply(this, arguments);\n  }\n\n  _createClass(MapPlaceholderNames, [{\n    key: \"convert\",\n    value: function convert(nodes, mapper) {\n      var _this197 = this;\n\n      return mapper ? nodes.map(function (n) {\n        return n.visit(_this197, mapper);\n      }) : nodes;\n    }\n  }, {\n    key: \"visitTagPlaceholder\",\n    value: function visitTagPlaceholder(ph, mapper) {\n      var _this198 = this;\n\n      var startName = mapper.toPublicName(ph.startName);\n      var closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;\n      var children = ph.children.map(function (n) {\n        return n.visit(_this198, mapper);\n      });\n      return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n    }\n  }, {\n    key: \"visitPlaceholder\",\n    value: function visitPlaceholder(ph, mapper) {\n      return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n    }\n  }, {\n    key: \"visitIcuPlaceholder\",\n    value: function visitIcuPlaceholder(ph, mapper) {\n      return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n    }\n  }]);\n\n  return MapPlaceholderNames;\n}(CloneVisitor);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar FactoryTarget;\n\n(function (FactoryTarget) {\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Processes `Target`s with a given set of directives and performs a binding operation, which\n * returns an object similar to TypeScript's `ts.TypeChecker` that contains knowledge about the\n * target.\n */\n\n\nvar R3TargetBinder = /*#__PURE__*/function () {\n  function R3TargetBinder(directiveMatcher) {\n    _classCallCheck(this, R3TargetBinder);\n\n    this.directiveMatcher = directiveMatcher;\n  }\n  /**\n   * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains\n   * metadata about the types referenced in the template.\n   */\n\n\n  _createClass(R3TargetBinder, [{\n    key: \"bind\",\n    value: function bind(target) {\n      if (!target.template) {\n        // TODO(alxhub): handle targets which contain things like HostBindings, etc.\n        throw new Error('Binding without a template not yet supported');\n      } // First, parse the template into a `Scope` structure. This operation captures the syntactic\n      // scopes in the template and makes them available for later use.\n\n\n      var scope = Scope.apply(target.template); // Use the `Scope` to extract the entities present at every level of the template.\n\n      var templateEntities = extractTemplateEntities(scope); // Next, perform directive matching on the template using the `DirectiveBinder`. This returns:\n      //   - directives: Map of nodes (elements & ng-templates) to the directives on them.\n      //   - bindings: Map of inputs, outputs, and attributes to the directive/element that claims\n      //     them. TODO(alxhub): handle multiple directives claiming an input/output/etc.\n      //   - references: Map of #references to their targets.\n\n      var _DirectiveBinder$appl = DirectiveBinder.apply(target.template, this.directiveMatcher),\n          directives = _DirectiveBinder$appl.directives,\n          bindings = _DirectiveBinder$appl.bindings,\n          references = _DirectiveBinder$appl.references; // Finally, run the TemplateBinder to bind references, variables, and other entities within the\n      // template. This extracts all the metadata that doesn't depend on directive matching.\n\n\n      var _TemplateBinder$apply = TemplateBinder.applyWithScope(target.template, scope),\n          expressions = _TemplateBinder$apply.expressions,\n          symbols = _TemplateBinder$apply.symbols,\n          nestingLevel = _TemplateBinder$apply.nestingLevel,\n          usedPipes = _TemplateBinder$apply.usedPipes;\n\n      return new R3BoundTarget(target, directives, bindings, references, expressions, symbols, nestingLevel, templateEntities, usedPipes);\n    }\n  }]);\n\n  return R3TargetBinder;\n}();\n/**\n * Represents a binding scope within a template.\n *\n * Any variables, references, or other named entities declared within the template will\n * be captured and available by name in `namedEntities`. Additionally, child templates will\n * be analyzed and have their child `Scope`s available in `childScopes`.\n */\n\n\nvar Scope = /*#__PURE__*/function () {\n  function Scope(parentScope, template) {\n    _classCallCheck(this, Scope);\n\n    this.parentScope = parentScope;\n    this.template = template;\n    /**\n     * Named members of the `Scope`, such as `Reference`s or `Variable`s.\n     */\n\n    this.namedEntities = new Map();\n    /**\n     * Child `Scope`s for immediately nested `Template`s.\n     */\n\n    this.childScopes = new Map();\n  }\n\n  _createClass(Scope, [{\n    key: \"ingest\",\n    value:\n    /**\n     * Internal method to process the template and populate the `Scope`.\n     */\n    function ingest(template) {\n      var _this199 = this;\n\n      if (template instanceof Template) {\n        // Variables on an <ng-template> are defined in the inner scope.\n        template.variables.forEach(function (node) {\n          return _this199.visitVariable(node);\n        }); // Process the nodes of the template.\n\n        template.children.forEach(function (node) {\n          return node.visit(_this199);\n        });\n      } else {\n        // No overarching `Template` instance, so process the nodes directly.\n        template.forEach(function (node) {\n          return node.visit(_this199);\n        });\n      }\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(element) {\n      var _this200 = this;\n\n      // `Element`s in the template may have `Reference`s which are captured in the scope.\n      element.references.forEach(function (node) {\n        return _this200.visitReference(node);\n      }); // Recurse into the `Element`'s children.\n\n      element.children.forEach(function (node) {\n        return node.visit(_this200);\n      });\n    }\n  }, {\n    key: \"visitTemplate\",\n    value: function visitTemplate(template) {\n      var _this201 = this;\n\n      // References on a <ng-template> are defined in the outer scope, so capture them before\n      // processing the template's child scope.\n      template.references.forEach(function (node) {\n        return _this201.visitReference(node);\n      }); // Next, create an inner scope and process the template within it.\n\n      var scope = new Scope(this, template);\n      scope.ingest(template);\n      this.childScopes.set(template, scope);\n    }\n  }, {\n    key: \"visitVariable\",\n    value: function visitVariable(variable) {\n      // Declare the variable if it's not already.\n      this.maybeDeclare(variable);\n    }\n  }, {\n    key: \"visitReference\",\n    value: function visitReference(reference) {\n      // Declare the variable if it's not already.\n      this.maybeDeclare(reference);\n    } // Unused visitors.\n\n  }, {\n    key: \"visitContent\",\n    value: function visitContent(content) {}\n  }, {\n    key: \"visitBoundAttribute\",\n    value: function visitBoundAttribute(attr) {}\n  }, {\n    key: \"visitBoundEvent\",\n    value: function visitBoundEvent(event) {}\n  }, {\n    key: \"visitBoundText\",\n    value: function visitBoundText(text) {}\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {}\n  }, {\n    key: \"visitTextAttribute\",\n    value: function visitTextAttribute(attr) {}\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {}\n  }, {\n    key: \"maybeDeclare\",\n    value: function maybeDeclare(thing) {\n      // Declare something with a name, as long as that name isn't taken.\n      if (!this.namedEntities.has(thing.name)) {\n        this.namedEntities.set(thing.name, thing);\n      }\n    }\n    /**\n     * Look up a variable within this `Scope`.\n     *\n     * This can recurse into a parent `Scope` if it's available.\n     */\n\n  }, {\n    key: \"lookup\",\n    value: function lookup(name) {\n      if (this.namedEntities.has(name)) {\n        // Found in the local scope.\n        return this.namedEntities.get(name);\n      } else if (this.parentScope !== null) {\n        // Not in the local scope, but there's a parent scope so check there.\n        return this.parentScope.lookup(name);\n      } else {\n        // At the top level and it wasn't found.\n        return null;\n      }\n    }\n    /**\n     * Get the child scope for a `Template`.\n     *\n     * This should always be defined.\n     */\n\n  }, {\n    key: \"getChildScope\",\n    value: function getChildScope(template) {\n      var res = this.childScopes.get(template);\n\n      if (res === undefined) {\n        throw new Error(\"Assertion error: child scope for \".concat(template, \" not found\"));\n      }\n\n      return res;\n    }\n  }], [{\n    key: \"newRootScope\",\n    value: function newRootScope() {\n      return new Scope(null, null);\n    }\n    /**\n     * Process a template (either as a `Template` sub-template with variables, or a plain array of\n     * template `Node`s) and construct its `Scope`.\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply(template) {\n      var scope = Scope.newRootScope();\n      scope.ingest(template);\n      return scope;\n    }\n  }]);\n\n  return Scope;\n}();\n/**\n * Processes a template and matches directives on nodes (elements and templates).\n *\n * Usually used via the static `apply()` method.\n */\n\n\nvar DirectiveBinder = /*#__PURE__*/function () {\n  function DirectiveBinder(matcher, directives, bindings, references) {\n    _classCallCheck(this, DirectiveBinder);\n\n    this.matcher = matcher;\n    this.directives = directives;\n    this.bindings = bindings;\n    this.references = references;\n  }\n  /**\n   * Process a template (list of `Node`s) and perform directive matching against each node.\n   *\n   * @param template the list of template `Node`s to match (recursively).\n   * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for\n   * this template.\n   * @returns three maps which contain information about directives in the template: the\n   * `directives` map which lists directives matched on each node, the `bindings` map which\n   * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`\n   * map which resolves #references (`Reference`s) within the template to the named directive or\n   * template node.\n   */\n\n\n  _createClass(DirectiveBinder, [{\n    key: \"ingest\",\n    value: function ingest(template) {\n      var _this202 = this;\n\n      template.forEach(function (node) {\n        return node.visit(_this202);\n      });\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(element) {\n      this.visitElementOrTemplate(element.name, element);\n    }\n  }, {\n    key: \"visitTemplate\",\n    value: function visitTemplate(template) {\n      this.visitElementOrTemplate('ng-template', template);\n    }\n  }, {\n    key: \"visitElementOrTemplate\",\n    value: function visitElementOrTemplate(elementName, node) {\n      var _this203 = this;\n\n      // First, determine the HTML shape of the node for the purpose of directive matching.\n      // Do this by building up a `CssSelector` for the node.\n      var cssSelector = createCssSelector(elementName, getAttrsForDirectiveMatching(node)); // Next, use the `SelectorMatcher` to get the list of directives on the node.\n\n      var directives = [];\n      this.matcher.match(cssSelector, function (_, directive) {\n        return directives.push(directive);\n      });\n\n      if (directives.length > 0) {\n        this.directives.set(node, directives);\n      } // Resolve any references that are created on this node.\n\n\n      node.references.forEach(function (ref) {\n        var dirTarget = null; // If the reference expression is empty, then it matches the \"primary\" directive on the node\n        // (if there is one). Otherwise it matches the host node itself (either an element or\n        // <ng-template> node).\n\n        if (ref.value.trim() === '') {\n          // This could be a reference to a component if there is one.\n          dirTarget = directives.find(function (dir) {\n            return dir.isComponent;\n          }) || null;\n        } else {\n          // This should be a reference to a directive exported via exportAs.\n          dirTarget = directives.find(function (dir) {\n            return dir.exportAs !== null && dir.exportAs.some(function (value) {\n              return value === ref.value;\n            });\n          }) || null; // Check if a matching directive was found.\n\n          if (dirTarget === null) {\n            // No matching directive was found - this reference points to an unknown target. Leave it\n            // unmapped.\n            return;\n          }\n        }\n\n        if (dirTarget !== null) {\n          // This reference points to a directive.\n          _this203.references.set(ref, {\n            directive: dirTarget,\n            node: node\n          });\n        } else {\n          // This reference points to the node itself.\n          _this203.references.set(ref, node);\n        }\n      });\n\n      var setAttributeBinding = function setAttributeBinding(attribute, ioType) {\n        var dir = directives.find(function (dir) {\n          return dir[ioType].hasBindingPropertyName(attribute.name);\n        });\n        var binding = dir !== undefined ? dir : node;\n\n        _this203.bindings.set(attribute, binding);\n      }; // Node inputs (bound attributes) and text attributes can be bound to an\n      // input on a directive.\n\n\n      node.inputs.forEach(function (input) {\n        return setAttributeBinding(input, 'inputs');\n      });\n      node.attributes.forEach(function (attr) {\n        return setAttributeBinding(attr, 'inputs');\n      });\n\n      if (node instanceof Template) {\n        node.templateAttrs.forEach(function (attr) {\n          return setAttributeBinding(attr, 'inputs');\n        });\n      } // Node outputs (bound events) can be bound to an output on a directive.\n\n\n      node.outputs.forEach(function (output) {\n        return setAttributeBinding(output, 'outputs');\n      }); // Recurse into the node's children.\n\n      node.children.forEach(function (child) {\n        return child.visit(_this203);\n      });\n    } // Unused visitors.\n\n  }, {\n    key: \"visitContent\",\n    value: function visitContent(content) {}\n  }, {\n    key: \"visitVariable\",\n    value: function visitVariable(variable) {}\n  }, {\n    key: \"visitReference\",\n    value: function visitReference(reference) {}\n  }, {\n    key: \"visitTextAttribute\",\n    value: function visitTextAttribute(attribute) {}\n  }, {\n    key: \"visitBoundAttribute\",\n    value: function visitBoundAttribute(attribute) {}\n  }, {\n    key: \"visitBoundEvent\",\n    value: function visitBoundEvent(attribute) {}\n  }, {\n    key: \"visitBoundAttributeOrEvent\",\n    value: function visitBoundAttributeOrEvent(node) {}\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {}\n  }, {\n    key: \"visitBoundText\",\n    value: function visitBoundText(text) {}\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {}\n  }], [{\n    key: \"apply\",\n    value: function apply(template, selectorMatcher) {\n      var directives = new Map();\n      var bindings = new Map();\n      var references = new Map();\n      var matcher = new DirectiveBinder(selectorMatcher, directives, bindings, references);\n      matcher.ingest(template);\n      return {\n        directives: directives,\n        bindings: bindings,\n        references: references\n      };\n    }\n  }]);\n\n  return DirectiveBinder;\n}();\n/**\n * Processes a template and extract metadata about expressions and symbols within.\n *\n * This is a companion to the `DirectiveBinder` that doesn't require knowledge of directives matched\n * within the template in order to operate.\n *\n * Expressions are visited by the superclass `RecursiveAstVisitor`, with custom logic provided\n * by overridden methods from that visitor.\n */\n\n\nvar TemplateBinder = /*#__PURE__*/function (_RecursiveAstVisitor3) {\n  _inherits(TemplateBinder, _RecursiveAstVisitor3);\n\n  var _super97 = _createSuper(TemplateBinder);\n\n  function TemplateBinder(bindings, symbols, usedPipes, nestingLevel, scope, template, level) {\n    var _this204;\n\n    _classCallCheck(this, TemplateBinder);\n\n    _this204 = _super97.call(this);\n    _this204.bindings = bindings;\n    _this204.symbols = symbols;\n    _this204.usedPipes = usedPipes;\n    _this204.nestingLevel = nestingLevel;\n    _this204.scope = scope;\n    _this204.template = template;\n    _this204.level = level;\n    _this204.pipesUsed = []; // Save a bit of processing time by constructing this closure in advance.\n\n    _this204.visitNode = function (node) {\n      return node.visit(_assertThisInitialized(_this204));\n    };\n\n    return _this204;\n  } // This method is defined to reconcile the type of TemplateBinder since both\n  // RecursiveAstVisitor and Visitor define the visit() method in their\n  // interfaces.\n\n\n  _createClass(TemplateBinder, [{\n    key: \"visit\",\n    value: function visit(node, context) {\n      if (node instanceof AST) {\n        node.visit(this, context);\n      } else {\n        node.visit(this);\n      }\n    }\n    /**\n     * Process a template and extract metadata about expressions and symbols within.\n     *\n     * @param template the nodes of the template to process\n     * @param scope the `Scope` of the template being processed.\n     * @returns three maps which contain metadata about the template: `expressions` which interprets\n     * special `AST` nodes in expressions as pointing to references or variables declared within the\n     * template, `symbols` which maps those variables and references to the nested `Template` which\n     * declares them, if any, and `nestingLevel` which associates each `Template` with a integer\n     * nesting level (how many levels deep within the template structure the `Template` is), starting\n     * at 1.\n     */\n\n  }, {\n    key: \"ingest\",\n    value: function ingest(template) {\n      if (template instanceof Template) {\n        // For <ng-template>s, process only variables and child nodes. Inputs, outputs, templateAttrs,\n        // and references were all processed in the scope of the containing template.\n        template.variables.forEach(this.visitNode);\n        template.children.forEach(this.visitNode); // Set the nesting level.\n\n        this.nestingLevel.set(template, this.level);\n      } else {\n        // Visit each node from the top-level template.\n        template.forEach(this.visitNode);\n      }\n    }\n  }, {\n    key: \"visitElement\",\n    value: function visitElement(element) {\n      // Visit the inputs, outputs, and children of the element.\n      element.inputs.forEach(this.visitNode);\n      element.outputs.forEach(this.visitNode);\n      element.children.forEach(this.visitNode);\n    }\n  }, {\n    key: \"visitTemplate\",\n    value: function visitTemplate(template) {\n      // First, visit inputs, outputs and template attributes of the template node.\n      template.inputs.forEach(this.visitNode);\n      template.outputs.forEach(this.visitNode);\n      template.templateAttrs.forEach(this.visitNode); // References are also evaluated in the outer context.\n\n      template.references.forEach(this.visitNode); // Next, recurse into the template using its scope, and bumping the nesting level up by one.\n\n      var childScope = this.scope.getChildScope(template);\n      var binder = new TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.nestingLevel, childScope, template, this.level + 1);\n      binder.ingest(template);\n    }\n  }, {\n    key: \"visitVariable\",\n    value: function visitVariable(variable) {\n      // Register the `Variable` as a symbol in the current `Template`.\n      if (this.template !== null) {\n        this.symbols.set(variable, this.template);\n      }\n    }\n  }, {\n    key: \"visitReference\",\n    value: function visitReference(reference) {\n      // Register the `Reference` as a symbol in the current `Template`.\n      if (this.template !== null) {\n        this.symbols.set(reference, this.template);\n      }\n    } // Unused template visitors\n\n  }, {\n    key: \"visitText\",\n    value: function visitText(text) {}\n  }, {\n    key: \"visitContent\",\n    value: function visitContent(content) {}\n  }, {\n    key: \"visitTextAttribute\",\n    value: function visitTextAttribute(attribute) {}\n  }, {\n    key: \"visitIcu\",\n    value: function visitIcu(icu) {\n      var _this205 = this;\n\n      Object.keys(icu.vars).forEach(function (key) {\n        return icu.vars[key].visit(_this205);\n      });\n      Object.keys(icu.placeholders).forEach(function (key) {\n        return icu.placeholders[key].visit(_this205);\n      });\n    } // The remaining visitors are concerned with processing AST expressions within template bindings\n\n  }, {\n    key: \"visitBoundAttribute\",\n    value: function visitBoundAttribute(attribute) {\n      attribute.value.visit(this);\n    }\n  }, {\n    key: \"visitBoundEvent\",\n    value: function visitBoundEvent(event) {\n      event.handler.visit(this);\n    }\n  }, {\n    key: \"visitBoundText\",\n    value: function visitBoundText(text) {\n      text.value.visit(this);\n    }\n  }, {\n    key: \"visitPipe\",\n    value: function visitPipe(ast, context) {\n      this.usedPipes.add(ast.name);\n      return _get(_getPrototypeOf(TemplateBinder.prototype), \"visitPipe\", this).call(this, ast, context);\n    } // These five types of AST expressions can refer to expression roots, which could be variables\n    // or references in the current scope.\n\n  }, {\n    key: \"visitPropertyRead\",\n    value: function visitPropertyRead(ast, context) {\n      this.maybeMap(context, ast, ast.name);\n      return _get(_getPrototypeOf(TemplateBinder.prototype), \"visitPropertyRead\", this).call(this, ast, context);\n    }\n  }, {\n    key: \"visitSafePropertyRead\",\n    value: function visitSafePropertyRead(ast, context) {\n      this.maybeMap(context, ast, ast.name);\n      return _get(_getPrototypeOf(TemplateBinder.prototype), \"visitSafePropertyRead\", this).call(this, ast, context);\n    }\n  }, {\n    key: \"visitPropertyWrite\",\n    value: function visitPropertyWrite(ast, context) {\n      this.maybeMap(context, ast, ast.name);\n      return _get(_getPrototypeOf(TemplateBinder.prototype), \"visitPropertyWrite\", this).call(this, ast, context);\n    }\n  }, {\n    key: \"maybeMap\",\n    value: function maybeMap(scope, ast, name) {\n      // If the receiver of the expression isn't the `ImplicitReceiver`, this isn't the root of an\n      // `AST` expression that maps to a `Variable` or `Reference`.\n      if (!(ast.receiver instanceof ImplicitReceiver)) {\n        return;\n      } // Check whether the name exists in the current scope. If so, map it. Otherwise, the name is\n      // probably a property on the top-level component context.\n\n\n      var target = this.scope.lookup(name);\n\n      if (target !== null) {\n        this.bindings.set(ast, target);\n      }\n    }\n  }], [{\n    key: \"applyWithScope\",\n    value: function applyWithScope(template, scope) {\n      var expressions = new Map();\n      var symbols = new Map();\n      var nestingLevel = new Map();\n      var usedPipes = new Set(); // The top-level template has nesting level 0.\n\n      var binder = new TemplateBinder(expressions, symbols, usedPipes, nestingLevel, scope, template instanceof Template ? template : null, 0);\n      binder.ingest(template);\n      return {\n        expressions: expressions,\n        symbols: symbols,\n        nestingLevel: nestingLevel,\n        usedPipes: usedPipes\n      };\n    }\n  }]);\n\n  return TemplateBinder;\n}(RecursiveAstVisitor);\n/**\n * Metadata container for a `Target` that allows queries for specific bits of metadata.\n *\n * See `BoundTarget` for documentation on the individual methods.\n */\n\n\nvar R3BoundTarget = /*#__PURE__*/function () {\n  function R3BoundTarget(target, directives, bindings, references, exprTargets, symbols, nestingLevel, templateEntities, usedPipes) {\n    _classCallCheck(this, R3BoundTarget);\n\n    this.target = target;\n    this.directives = directives;\n    this.bindings = bindings;\n    this.references = references;\n    this.exprTargets = exprTargets;\n    this.symbols = symbols;\n    this.nestingLevel = nestingLevel;\n    this.templateEntities = templateEntities;\n    this.usedPipes = usedPipes;\n  }\n\n  _createClass(R3BoundTarget, [{\n    key: \"getEntitiesInTemplateScope\",\n    value: function getEntitiesInTemplateScope(template) {\n      var _a;\n\n      return (_a = this.templateEntities.get(template)) !== null && _a !== void 0 ? _a : new Set();\n    }\n  }, {\n    key: \"getDirectivesOfNode\",\n    value: function getDirectivesOfNode(node) {\n      return this.directives.get(node) || null;\n    }\n  }, {\n    key: \"getReferenceTarget\",\n    value: function getReferenceTarget(ref) {\n      return this.references.get(ref) || null;\n    }\n  }, {\n    key: \"getConsumerOfBinding\",\n    value: function getConsumerOfBinding(binding) {\n      return this.bindings.get(binding) || null;\n    }\n  }, {\n    key: \"getExpressionTarget\",\n    value: function getExpressionTarget(expr) {\n      return this.exprTargets.get(expr) || null;\n    }\n  }, {\n    key: \"getTemplateOfSymbol\",\n    value: function getTemplateOfSymbol(symbol) {\n      return this.symbols.get(symbol) || null;\n    }\n  }, {\n    key: \"getNestingLevel\",\n    value: function getNestingLevel(template) {\n      return this.nestingLevel.get(template) || 0;\n    }\n  }, {\n    key: \"getUsedDirectives\",\n    value: function getUsedDirectives() {\n      var set = new Set();\n      this.directives.forEach(function (dirs) {\n        return dirs.forEach(function (dir) {\n          return set.add(dir);\n        });\n      });\n      return Array.from(set.values());\n    }\n  }, {\n    key: \"getUsedPipes\",\n    value: function getUsedPipes() {\n      return Array.from(this.usedPipes);\n    }\n  }]);\n\n  return R3BoundTarget;\n}();\n\nfunction extractTemplateEntities(rootScope) {\n  var entityMap = new Map();\n\n  function extractScopeEntities(scope) {\n    if (entityMap.has(scope.template)) {\n      return entityMap.get(scope.template);\n    }\n\n    var currentEntities = scope.namedEntities;\n    var templateEntities;\n\n    if (scope.parentScope !== null) {\n      templateEntities = new Map([].concat(_toConsumableArray(extractScopeEntities(scope.parentScope)), _toConsumableArray(currentEntities)));\n    } else {\n      templateEntities = new Map(currentEntities);\n    }\n\n    entityMap.set(scope.template, templateEntities);\n    return templateEntities;\n  }\n\n  var scopesToProcess = [rootScope];\n\n  while (scopesToProcess.length > 0) {\n    var scope = scopesToProcess.pop();\n\n    var _iterator25 = _createForOfIteratorHelper(scope.childScopes.values()),\n        _step25;\n\n    try {\n      for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n        var childScope = _step25.value;\n        scopesToProcess.push(childScope);\n      }\n    } catch (err) {\n      _iterator25.e(err);\n    } finally {\n      _iterator25.f();\n    }\n\n    extractScopeEntities(scope);\n  }\n\n  var templateEntities = new Map();\n\n  var _iterator26 = _createForOfIteratorHelper(entityMap),\n      _step26;\n\n  try {\n    for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n      var _step26$value = _slicedToArray(_step26.value, 2),\n          template = _step26$value[0],\n          entities = _step26$value[1];\n\n      templateEntities.set(template, new Set(entities.values()));\n    }\n  } catch (err) {\n    _iterator26.e(err);\n  } finally {\n    _iterator26.f();\n  }\n\n  return templateEntities;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction compileClassMetadata(metadata) {\n  var _a, _b; // Generate an ngDevMode guarded call to setClassMetadata with the class identifier and its\n  // metadata.\n\n\n  var fnCall = importExpr(Identifiers$1.setClassMetadata).callFn([metadata.type, metadata.decorators, (_a = metadata.ctorParameters) !== null && _a !== void 0 ? _a : literal(null), (_b = metadata.propDecorators) !== null && _b !== void 0 ? _b : literal(null)]);\n  var iife = fn([], [devOnlyGuardedExpression(fnCall).toStmt()]);\n  return iife.callFn([]);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\n\n\nvar MINIMUM_PARTIAL_LINKER_VERSION$6 = '12.0.0';\n\nfunction compileDeclareClassMetadata(metadata) {\n  var definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$6));\n  definitionMap.set('version', literal('13.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n  definitionMap.set('type', metadata.type);\n  definitionMap.set('decorators', metadata.decorators);\n  definitionMap.set('ctorParameters', metadata.ctorParameters);\n  definitionMap.set('propDecorators', metadata.propDecorators);\n  return importExpr(Identifiers$1.declareClassMetadata).callFn([definitionMap.toLiteralMap()]);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Creates an array literal expression from the given array, mapping all values to an expression\n * using the provided mapping function. If the array is empty or null, then null is returned.\n *\n * @param values The array to transfer into literal array expression.\n * @param mapper The logic to use for creating an expression for the array's values.\n * @returns An array literal expression representing `values`, or null if `values` is empty or\n * is itself null.\n */\n\n\nfunction toOptionalLiteralArray(values, mapper) {\n  if (values === null || values.length === 0) {\n    return null;\n  }\n\n  return literalArr(values.map(function (value) {\n    return mapper(value);\n  }));\n}\n/**\n * Creates an object literal expression from the given object, mapping all values to an expression\n * using the provided mapping function. If the object has no keys, then null is returned.\n *\n * @param object The object to transfer into an object literal expression.\n * @param mapper The logic to use for creating an expression for the object's values.\n * @returns An object literal expression representing `object`, or null if `object` does not have\n * any keys.\n */\n\n\nfunction toOptionalLiteralMap(object, mapper) {\n  var entries = Object.keys(object).map(function (key) {\n    var value = object[key];\n    return {\n      key: key,\n      value: mapper(value),\n      quoted: true\n    };\n  });\n\n  if (entries.length > 0) {\n    return literalMap(entries);\n  } else {\n    return null;\n  }\n}\n\nfunction compileDependencies(deps) {\n  if (deps === 'invalid') {\n    // The `deps` can be set to the string \"invalid\"  by the `unwrapConstructorDependencies()`\n    // function, which tries to convert `ConstructorDeps` into `R3DependencyMetadata[]`.\n    return literal('invalid');\n  } else if (deps === null) {\n    return literal(null);\n  } else {\n    return literalArr(deps.map(compileDependency));\n  }\n}\n\nfunction compileDependency(dep) {\n  var depMeta = new DefinitionMap();\n  depMeta.set('token', dep.token);\n\n  if (dep.attributeNameType !== null) {\n    depMeta.set('attribute', literal(true));\n  }\n\n  if (dep.host) {\n    depMeta.set('host', literal(true));\n  }\n\n  if (dep.optional) {\n    depMeta.set('optional', literal(true));\n  }\n\n  if (dep.self) {\n    depMeta.set('self', literal(true));\n  }\n\n  if (dep.skipSelf) {\n    depMeta.set('skipSelf', literal(true));\n  }\n\n  return depMeta.toLiteralMap();\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\n\n\nvar MINIMUM_PARTIAL_LINKER_VERSION$5 = '12.0.0';\n/**\n * Compile a directive declaration defined by the `R3DirectiveMetadata`.\n */\n\nfunction compileDeclareDirectiveFromMetadata(meta) {\n  var definitionMap = createDirectiveDefinitionMap(meta);\n  var expression = importExpr(Identifiers$1.declareDirective).callFn([definitionMap.toLiteralMap()]);\n  var type = createDirectiveType(meta);\n  return {\n    expression: expression,\n    type: type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for a directive into a `DefinitionMap`. This allows for reusing\n * this logic for components, as they extend the directive metadata.\n */\n\n\nfunction createDirectiveDefinitionMap(meta) {\n  var definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$5));\n  definitionMap.set('version', literal('13.1.0')); // e.g. `type: MyDirective`\n\n  definitionMap.set('type', meta.internalType); // e.g. `selector: 'some-dir'`\n\n  if (meta.selector !== null) {\n    definitionMap.set('selector', literal(meta.selector));\n  }\n\n  definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true));\n  definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));\n  definitionMap.set('host', compileHostMetadata(meta.host));\n  definitionMap.set('providers', meta.providers);\n\n  if (meta.queries.length > 0) {\n    definitionMap.set('queries', literalArr(meta.queries.map(compileQuery)));\n  }\n\n  if (meta.viewQueries.length > 0) {\n    definitionMap.set('viewQueries', literalArr(meta.viewQueries.map(compileQuery)));\n  }\n\n  if (meta.exportAs !== null) {\n    definitionMap.set('exportAs', asLiteral(meta.exportAs));\n  }\n\n  if (meta.usesInheritance) {\n    definitionMap.set('usesInheritance', literal(true));\n  }\n\n  if (meta.lifecycle.usesOnChanges) {\n    definitionMap.set('usesOnChanges', literal(true));\n  }\n\n  definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n  return definitionMap;\n}\n/**\n * Compiles the metadata of a single query into its partial declaration form as declared\n * by `R3DeclareQueryMetadata`.\n */\n\n\nfunction compileQuery(query) {\n  var meta = new DefinitionMap();\n  meta.set('propertyName', literal(query.propertyName));\n\n  if (query.first) {\n    meta.set('first', literal(true));\n  }\n\n  meta.set('predicate', Array.isArray(query.predicate) ? asLiteral(query.predicate) : convertFromMaybeForwardRefExpression(query.predicate));\n\n  if (!query.emitDistinctChangesOnly) {\n    // `emitDistinctChangesOnly` is special because we expect it to be `true`.\n    // Therefore we explicitly emit the field, and explicitly place it only when it's `false`.\n    meta.set('emitDistinctChangesOnly', literal(false));\n  } else {// The linker will assume that an absent `emitDistinctChangesOnly` flag is by default `true`.\n  }\n\n  if (query.descendants) {\n    meta.set('descendants', literal(true));\n  }\n\n  meta.set('read', query.read);\n\n  if (query.static) {\n    meta.set('static', literal(true));\n  }\n\n  return meta.toLiteralMap();\n}\n/**\n * Compiles the host metadata into its partial declaration form as declared\n * in `R3DeclareDirectiveMetadata['host']`\n */\n\n\nfunction compileHostMetadata(meta) {\n  var hostMetadata = new DefinitionMap();\n  hostMetadata.set('attributes', toOptionalLiteralMap(meta.attributes, function (expression) {\n    return expression;\n  }));\n  hostMetadata.set('listeners', toOptionalLiteralMap(meta.listeners, literal));\n  hostMetadata.set('properties', toOptionalLiteralMap(meta.properties, literal));\n\n  if (meta.specialAttributes.styleAttr) {\n    hostMetadata.set('styleAttribute', literal(meta.specialAttributes.styleAttr));\n  }\n\n  if (meta.specialAttributes.classAttr) {\n    hostMetadata.set('classAttribute', literal(meta.specialAttributes.classAttr));\n  }\n\n  if (hostMetadata.values.length > 0) {\n    return hostMetadata.toLiteralMap();\n  } else {\n    return null;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Compile a component declaration defined by the `R3ComponentMetadata`.\n */\n\n\nfunction compileDeclareComponentFromMetadata(meta, template, additionalTemplateInfo) {\n  var definitionMap = createComponentDefinitionMap(meta, template, additionalTemplateInfo);\n  var expression = importExpr(Identifiers$1.declareComponent).callFn([definitionMap.toLiteralMap()]);\n  var type = createComponentType(meta);\n  return {\n    expression: expression,\n    type: type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for a component into a `DefinitionMap`.\n */\n\n\nfunction createComponentDefinitionMap(meta, template, templateInfo) {\n  var definitionMap = createDirectiveDefinitionMap(meta);\n  definitionMap.set('template', getTemplateExpression(template, templateInfo));\n\n  if (templateInfo.isInline) {\n    definitionMap.set('isInline', literal(true));\n  }\n\n  definitionMap.set('styles', toOptionalLiteralArray(meta.styles, literal));\n  definitionMap.set('components', compileUsedDirectiveMetadata(meta, function (directive) {\n    return directive.isComponent === true;\n  }));\n  definitionMap.set('directives', compileUsedDirectiveMetadata(meta, function (directive) {\n    return directive.isComponent !== true;\n  }));\n  definitionMap.set('pipes', compileUsedPipeMetadata(meta));\n  definitionMap.set('viewProviders', meta.viewProviders);\n  definitionMap.set('animations', meta.animations);\n\n  if (meta.changeDetection !== undefined) {\n    definitionMap.set('changeDetection', importExpr(Identifiers$1.ChangeDetectionStrategy).prop(ChangeDetectionStrategy[meta.changeDetection]));\n  }\n\n  if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n    definitionMap.set('encapsulation', importExpr(Identifiers$1.ViewEncapsulation).prop(ViewEncapsulation[meta.encapsulation]));\n  }\n\n  if (meta.interpolation !== DEFAULT_INTERPOLATION_CONFIG) {\n    definitionMap.set('interpolation', literalArr([literal(meta.interpolation.start), literal(meta.interpolation.end)]));\n  }\n\n  if (template.preserveWhitespaces === true) {\n    definitionMap.set('preserveWhitespaces', literal(true));\n  }\n\n  return definitionMap;\n}\n\nfunction getTemplateExpression(template, templateInfo) {\n  // If the template has been defined using a direct literal, we use that expression directly\n  // without any modifications. This is ensures proper source mapping from the partially\n  // compiled code to the source file declaring the template. Note that this does not capture\n  // template literals referenced indirectly through an identifier.\n  if (templateInfo.inlineTemplateLiteralExpression !== null) {\n    return templateInfo.inlineTemplateLiteralExpression;\n  } // If the template is defined inline but not through a literal, the template has been resolved\n  // through static interpretation. We create a literal but cannot provide any source span. Note\n  // that we cannot use the expression defining the template because the linker expects the template\n  // to be defined as a literal in the declaration.\n\n\n  if (templateInfo.isInline) {\n    return literal(templateInfo.content, null, null);\n  } // The template is external so we must synthesize an expression node with\n  // the appropriate source-span.\n\n\n  var contents = templateInfo.content;\n  var file = new ParseSourceFile(contents, templateInfo.sourceUrl);\n  var start = new ParseLocation(file, 0, 0, 0);\n  var end = computeEndLocation(file, contents);\n  var span = new ParseSourceSpan(start, end);\n  return literal(contents, null, span);\n}\n\nfunction computeEndLocation(file, contents) {\n  var length = contents.length;\n  var lineStart = 0;\n  var lastLineStart = 0;\n  var line = 0;\n\n  do {\n    lineStart = contents.indexOf('\\n', lastLineStart);\n\n    if (lineStart !== -1) {\n      lastLineStart = lineStart + 1;\n      line++;\n    }\n  } while (lineStart !== -1);\n\n  return new ParseLocation(file, length, line, length - lastLineStart);\n}\n/**\n * Compiles the directives as registered in the component metadata into an array literal of the\n * individual directives. If the component does not use any directives, then null is returned.\n */\n\n\nfunction compileUsedDirectiveMetadata(meta, predicate) {\n  var wrapType = meta.declarationListEmitMode !== 0\n  /* Direct */\n  ? generateForwardRef : function (expr) {\n    return expr;\n  };\n  var directives = meta.directives.filter(predicate);\n  return toOptionalLiteralArray(directives, function (directive) {\n    var dirMeta = new DefinitionMap();\n    dirMeta.set('type', wrapType(directive.type));\n    dirMeta.set('selector', literal(directive.selector));\n    dirMeta.set('inputs', toOptionalLiteralArray(directive.inputs, literal));\n    dirMeta.set('outputs', toOptionalLiteralArray(directive.outputs, literal));\n    dirMeta.set('exportAs', toOptionalLiteralArray(directive.exportAs, literal));\n    return dirMeta.toLiteralMap();\n  });\n}\n/**\n * Compiles the pipes as registered in the component metadata into an object literal, where the\n * pipe's name is used as key and a reference to its type as value. If the component does not use\n * any pipes, then null is returned.\n */\n\n\nfunction compileUsedPipeMetadata(meta) {\n  if (meta.pipes.size === 0) {\n    return null;\n  }\n\n  var wrapType = meta.declarationListEmitMode !== 0\n  /* Direct */\n  ? generateForwardRef : function (expr) {\n    return expr;\n  };\n  var entries = [];\n\n  var _iterator27 = _createForOfIteratorHelper(meta.pipes),\n      _step27;\n\n  try {\n    for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n      var _step27$value = _slicedToArray(_step27.value, 2),\n          name = _step27$value[0],\n          pipe = _step27$value[1];\n\n      entries.push({\n        key: name,\n        value: wrapType(pipe),\n        quoted: true\n      });\n    }\n  } catch (err) {\n    _iterator27.e(err);\n  } finally {\n    _iterator27.f();\n  }\n\n  return literalMap(entries);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\n\n\nvar MINIMUM_PARTIAL_LINKER_VERSION$4 = '12.0.0';\n\nfunction compileDeclareFactoryFunction(meta) {\n  var definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$4));\n  definitionMap.set('version', literal('13.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n  definitionMap.set('type', meta.internalType);\n  definitionMap.set('deps', compileDependencies(meta.deps));\n  definitionMap.set('target', importExpr(Identifiers$1.FactoryTarget).prop(FactoryTarget$1[meta.target]));\n  return {\n    expression: importExpr(Identifiers$1.declareFactory).callFn([definitionMap.toLiteralMap()]),\n    statements: [],\n    type: createFactoryType(meta)\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\n\n\nvar MINIMUM_PARTIAL_LINKER_VERSION$3 = '12.0.0';\n/**\n * Compile a Injectable declaration defined by the `R3InjectableMetadata`.\n */\n\nfunction compileDeclareInjectableFromMetadata(meta) {\n  var definitionMap = createInjectableDefinitionMap(meta);\n  var expression = importExpr(Identifiers$1.declareInjectable).callFn([definitionMap.toLiteralMap()]);\n  var type = createInjectableType(meta);\n  return {\n    expression: expression,\n    type: type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for a Injectable into a `DefinitionMap`.\n */\n\n\nfunction createInjectableDefinitionMap(meta) {\n  var definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$3));\n  definitionMap.set('version', literal('13.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n  definitionMap.set('type', meta.internalType); // Only generate providedIn property if it has a non-null value\n\n  if (meta.providedIn !== undefined) {\n    var providedIn = convertFromMaybeForwardRefExpression(meta.providedIn);\n\n    if (providedIn.value !== null) {\n      definitionMap.set('providedIn', providedIn);\n    }\n  }\n\n  if (meta.useClass !== undefined) {\n    definitionMap.set('useClass', convertFromMaybeForwardRefExpression(meta.useClass));\n  }\n\n  if (meta.useExisting !== undefined) {\n    definitionMap.set('useExisting', convertFromMaybeForwardRefExpression(meta.useExisting));\n  }\n\n  if (meta.useValue !== undefined) {\n    definitionMap.set('useValue', convertFromMaybeForwardRefExpression(meta.useValue));\n  } // Factories do not contain `ForwardRef`s since any types are already wrapped in a function call\n  // so the types will not be eagerly evaluated. Therefore we do not need to process this expression\n  // with `convertFromProviderExpression()`.\n\n\n  if (meta.useFactory !== undefined) {\n    definitionMap.set('useFactory', meta.useFactory);\n  }\n\n  if (meta.deps !== undefined) {\n    definitionMap.set('deps', literalArr(meta.deps.map(compileDependency)));\n  }\n\n  return definitionMap;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\n\n\nvar MINIMUM_PARTIAL_LINKER_VERSION$2 = '12.0.0';\n\nfunction compileDeclareInjectorFromMetadata(meta) {\n  var definitionMap = createInjectorDefinitionMap(meta);\n  var expression = importExpr(Identifiers$1.declareInjector).callFn([definitionMap.toLiteralMap()]);\n  var type = createInjectorType(meta);\n  return {\n    expression: expression,\n    type: type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for an Injector into a `DefinitionMap`.\n */\n\n\nfunction createInjectorDefinitionMap(meta) {\n  var definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$2));\n  definitionMap.set('version', literal('13.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n  definitionMap.set('type', meta.internalType);\n  definitionMap.set('providers', meta.providers);\n\n  if (meta.imports.length > 0) {\n    definitionMap.set('imports', literalArr(meta.imports));\n  }\n\n  return definitionMap;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\n\n\nvar MINIMUM_PARTIAL_LINKER_VERSION$1 = '12.0.0';\n\nfunction compileDeclareNgModuleFromMetadata(meta) {\n  var definitionMap = createNgModuleDefinitionMap(meta);\n  var expression = importExpr(Identifiers$1.declareNgModule).callFn([definitionMap.toLiteralMap()]);\n  var type = createNgModuleType(meta);\n  return {\n    expression: expression,\n    type: type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for an NgModule into a `DefinitionMap`.\n */\n\n\nfunction createNgModuleDefinitionMap(meta) {\n  var definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$1));\n  definitionMap.set('version', literal('13.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n  definitionMap.set('type', meta.internalType); // We only generate the keys in the metadata if the arrays contain values.\n  // We must wrap the arrays inside a function if any of the values are a forward reference to a\n  // not-yet-declared class. This is to support JIT execution of the `ɵɵngDeclareNgModule()` call.\n  // In the linker these wrappers are stripped and then reapplied for the `ɵɵdefineNgModule()` call.\n\n  if (meta.bootstrap.length > 0) {\n    definitionMap.set('bootstrap', refsToArray(meta.bootstrap, meta.containsForwardDecls));\n  }\n\n  if (meta.declarations.length > 0) {\n    definitionMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));\n  }\n\n  if (meta.imports.length > 0) {\n    definitionMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));\n  }\n\n  if (meta.exports.length > 0) {\n    definitionMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));\n  }\n\n  if (meta.schemas !== null && meta.schemas.length > 0) {\n    definitionMap.set('schemas', literalArr(meta.schemas.map(function (ref) {\n      return ref.value;\n    })));\n  }\n\n  if (meta.id !== null) {\n    definitionMap.set('id', meta.id);\n  }\n\n  return definitionMap;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\n\n\nvar MINIMUM_PARTIAL_LINKER_VERSION = '12.0.0';\n/**\n * Compile a Pipe declaration defined by the `R3PipeMetadata`.\n */\n\nfunction compileDeclarePipeFromMetadata(meta) {\n  var definitionMap = createPipeDefinitionMap(meta);\n  var expression = importExpr(Identifiers$1.declarePipe).callFn([definitionMap.toLiteralMap()]);\n  var type = createPipeType(meta);\n  return {\n    expression: expression,\n    type: type,\n    statements: []\n  };\n}\n/**\n * Gathers the declaration fields for a Pipe into a `DefinitionMap`.\n */\n\n\nfunction createPipeDefinitionMap(meta) {\n  var definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION));\n  definitionMap.set('version', literal('13.1.0'));\n  definitionMap.set('ngImport', importExpr(Identifiers$1.core)); // e.g. `type: MyPipe`\n\n  definitionMap.set('type', meta.internalType); // e.g. `name: \"myPipe\"`\n\n  definitionMap.set('name', literal(meta.pipeName));\n\n  if (meta.pure === false) {\n    // e.g. `pure: false`\n    definitionMap.set('pure', literal(meta.pure));\n  }\n\n  return definitionMap;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n// This function call has a global side effects and publishes the compiler into global namespace for\n// the late binding of the Compiler to the @angular/core for jit compilation.\n\n\npublishFacade(_global);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { AST, ASTWithName, ASTWithSource, AbsoluteSourceSpan, ArrayType, AssertNotNull, AstMemoryEfficientTransformer, AstPath, AstTransformer, Attribute, Binary, BinaryOperator, BinaryOperatorExpr, BindingPipe, BoundElementProperty, BuiltinMethod, BuiltinType, BuiltinTypeName, BuiltinVar, CUSTOM_ELEMENTS_SCHEMA, Call, CastExpr, Chain, ChangeDetectionStrategy, ClassField, ClassMethod, ClassStmt, CommaExpr, Comment, CompilerConfig, Conditional, ConditionalExpr, ConstantPool, CssSelector, DEFAULT_INTERPOLATION_CONFIG, DYNAMIC_TYPE, DeclareFunctionStmt, DeclareVarStmt, DomElementSchemaRegistry, EOF, Element, ElementSchemaRegistry, EmitterVisitorContext, EmptyExpr, Expansion, ExpansionCase, Expression, ExpressionBinding, ExpressionStatement, ExpressionType, ExternalExpr, ExternalReference, FactoryTarget$1 as FactoryTarget, FunctionExpr, HtmlParser, HtmlTagDefinition, I18NHtmlParser, Identifiers, IfStmt, ImplicitReceiver, InstantiateExpr, Interpolation, InterpolationConfig, InvokeFunctionExpr, IvyParser, JSDocComment, JitEvaluator, KeyedRead, KeyedWrite, LeadingComment, Lexer, LiteralArray, LiteralArrayExpr, LiteralExpr, LiteralMap, LiteralMapExpr, LiteralPrimitive, LocalizedString, MapType, MessageBundle, NONE_TYPE, NO_ERRORS_SCHEMA, NodeWithI18n, NonNullAssert, NotExpr, ParseError, ParseErrorLevel, ParseLocation, ParseSourceFile, ParseSourceSpan, ParseSpan, ParseTreeResult, ParsedEvent, ParsedProperty, ParsedPropertyType, ParsedVariable, Parser$1 as Parser, ParserError, PrefixNot, PropertyRead, PropertyWrite, Quote, R3BoundTarget, Identifiers$1 as R3Identifiers, R3TargetBinder, ReadKeyExpr, ReadPropExpr, ReadVarExpr, RecursiveAstVisitor, RecursiveVisitor, ResourceLoader, ReturnStatement, STRING_TYPE, SafeKeyedRead, SafePropertyRead, SelectorContext, SelectorListContext, SelectorMatcher, Serializer, SplitInterpolation, Statement, StmtModifier, TagContentType, TaggedTemplateExpr, TemplateBindingParseResult, TemplateLiteral, TemplateLiteralElement, Text, ThisReceiver, ThrowStmt, BoundAttribute as TmplAstBoundAttribute, BoundEvent as TmplAstBoundEvent, BoundText as TmplAstBoundText, Content as TmplAstContent, Element$1 as TmplAstElement, Icu$1 as TmplAstIcu, RecursiveVisitor$1 as TmplAstRecursiveVisitor, Reference as TmplAstReference, Template as TmplAstTemplate, Text$3 as TmplAstText, TextAttribute as TmplAstTextAttribute, Variable as TmplAstVariable, Token, TokenType, TreeError, TryCatchStmt, Type, TypeofExpr, Unary, UnaryOperator, UnaryOperatorExpr, VERSION, VariableBinding, Version, ViewEncapsulation, WrappedNodeExpr, WriteKeyExpr, WritePropExpr, WriteVarExpr, Xliff, Xliff2, Xmb, XmlParser, Xtb, _ParseAST, collectExternalReferences, compileClassMetadata, compileComponentFromMetadata, compileDeclareClassMetadata, compileDeclareComponentFromMetadata, compileDeclareDirectiveFromMetadata, compileDeclareFactoryFunction, compileDeclareInjectableFromMetadata, compileDeclareInjectorFromMetadata, compileDeclareNgModuleFromMetadata, compileDeclarePipeFromMetadata, compileDirectiveFromMetadata, compileFactoryFunction, _compileInjectable as compileInjectable, _compileInjector as compileInjector, _compileNgModule as compileNgModule, compilePipeFromMetadata, computeMsgId, core, createInjectableType, createMayBeForwardRefExpression, devOnlyGuardedExpression, emitDistinctChangesOnlyDefaultValue, findNode, getHtmlTagDefinition, getNsPrefix, getParseErrors, getSafePropertyAccessString, identifierName, isIdentifier, isNgContainer, isNgContent, isNgTemplate, isSyntaxError, jsDocComment, leadingComment, literalMap, makeBindingParser, mergeNsAndName, output_ast as outputAst, parseHostBindings, parseTemplate, preserveWhitespacesDefault, publishFacade, r3JitTypeSourceSpan, sanitizeIdentifier, splitNsName, syntaxError, verifyHostBindings, visitAll };","map":{"version":3,"sources":["C:/dev/saltiest/node_modules/@angular/compiler/fesm2015/compiler.mjs"],"names":["TagContentType","splitNsName","elementName","colonIndex","indexOf","Error","slice","isNgContainer","tagName","isNgContent","isNgTemplate","getNsPrefix","fullName","mergeNsAndName","prefix","localName","HtmlTagDefinition","closedByChildren","implicitNamespacePrefix","contentType","PARSABLE_DATA","closedByParent","isVoid","ignoreFirstLf","preventNamespaceInheritance","canSelfClose","length","forEach","name","toLowerCase","overrideType","undefined","default","_DEFAULT_TAG_DEFINITION","TAG_DEFINITIONS","getHtmlTagDefinition","_a","_b","RAW_TEXT","ESCAPABLE_RAW_TEXT","svg","_SELECTOR_REGEXP","RegExp","CssSelector","element","classNames","attrs","notSelectors","attr","result","escaping","i","char","charAt","replace","hasElementSelector","classAttr","join","attrName","attrValue","push","concat","value","res","klass","escapeAttribute","notSelector","selector","results","_addResult","cssSel","cssSelector","match","current","inNot","lastIndex","exec","tag","addAttribute","substr","addClassName","setElement","attribute","unescapeAttribute","SelectorMatcher","_elementMap","Map","_elementPartialMap","_classMap","_classPartialMap","_attrValueMap","_attrValuePartialMap","_listContexts","cssSelectors","callbackCtxt","listContext","SelectorListContext","_addSelectable","matcher","selectable","SelectorContext","isTerminal","_addTerminal","_addPartial","className","terminalMap","terminalValuesMap","get","set","partialMap","partialValuesMap","map","terminalList","matchedCallback","alreadyMatched","_matchTerminal","_matchPartial","selectables","starSelectables","finalize","nestedSelector","notMatcher","addSelectables","selectors","cbContext","callback","createNotMatcher","createInject","makeMetadataFactory","token","createInjectionToken","desc","_desc","ɵprov","createAttribute","attributeName","emitDistinctChangesOnlyDefaultValue","createContentChildren","data","Object","assign","first","isViewQuery","descendants","emitDistinctChangesOnly","createContentChild","createViewChildren","createViewChild","createDirective","dir","ViewEncapsulation","ChangeDetectionStrategy","createComponent","c","changeDetection","Default","createPipe","p","pure","createInput","bindingPropertyName","createOutput","createHostBinding","hostPropertyName","createHostListener","eventName","args","createNgModule","ngModule","createInjectable","injectable","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","createOptional","createSelf","createSkipSelf","createHost","Type$1","Function","SecurityContext","MissingTranslationStrategy","props","factory","values","ngMetadataName","isTypeOf","obj","parserSelectorToSimpleSelector","classes","parserSelectorToNegativeSelector","parserSelectorToR3Selector","positive","negative","parseSelectorToR3Selector","parse","core","freeze","__proto__","Type","DASH_CASE_REGEXP","dashCaseToCamelCase","input","m","toUpperCase","splitAtColon","defaultValues","_splitAt","splitAtPeriod","character","characterIndex","trim","visitValue","visitor","context","Array","isArray","visitArray","isStrictStringMap","visitStringMap","visitPrimitive","visitOther","isDefined","val","noUndefined","ValueTransformer","arr","keys","key","SyncAsync","assertSync","isPromise","then","cb","all","syncAsyncValues","some","Promise","error","msg","escapeRegExp","s","STRING_MAP_PROTO","getPrototypeOf","utf8Encode","str","encoded","index","codePoint","charCodeAt","low","stringify","overriddenName","toString","newLineIndex","substring","resolveForwardRef","type","hasOwnProperty","Version","full","splits","split","major","minor","patch","__window","window","__self","self","WorkerGlobalScope","__global","global","_global","newArray","size","list","partitionArray","conditionFn","truthy","falsy","item","BigInteger","digits","other","clone","addToSelf","maxNrOfDigits","Math","max","carry","digitSum","BigIntForMultiplication","powerOfTwos","num","product","zero","multiplyByAndAddTo","exponent","getMultipliedByPowerOfTwo","previousPower","add","BigIntExponentiation","base","exponents","one","multiplyBy","digest$1","message","id","computeDigest","sha1","serializeNodes","nodes","meaning","decimalDigest","computeDecimalDigest","_SerializerIgnoreIcuExpVisitor","parts","a","visit","computeMsgId","_SerializerVisitor","text","container","children","child","icu","strCases","cases","k","expression","ph","startName","closeName","serializerVisitor$1","utf8","words32","bytesToWords32","Endian","Big","len","w","b","d","e","h0","h1","h2","h3","h4","j","rol32","fkVal","fk","f","temp","reduce","add32","bytesToHexString","words32ToByteString","fingerprint","hi","hash32","lo","msgFingerprint","meaningFingerprint","add64","rol64","wordsToDecimalString","bytes","wordAt","Little","mix","sub32","add32to64","high","ah","al","bh","bl","l","h","count","endian","byteAt","word","word32ToByteString","hex","base256","decimal","toThePowerOf","TypeModifier","modifiers","modifier","BuiltinTypeName","BuiltinType","visitBuiltinType","ExpressionType","typeParams","visitExpressionType","ArrayType","of","visitArrayType","MapType","valueType","visitMapType","DYNAMIC_TYPE","Dynamic","INFERRED_TYPE","Inferred","BOOL_TYPE","Bool","INT_TYPE","Int","NUMBER_TYPE","Number","STRING_TYPE","String","FUNCTION_TYPE","NONE_TYPE","None","UnaryOperator","BinaryOperator","nullSafeIsEquivalent","isEquivalent","areAllEquivalentPredicate","equivalentPredicate","areAllEquivalent","baseElement","otherElement","Expression","sourceSpan","ReadPropExpr","ReadKeyExpr","params","InvokeFunctionExpr","InstantiateExpr","trueCase","falseCase","ConditionalExpr","rhs","BinaryOperatorExpr","Equals","NotEquals","Identical","NotIdentical","Minus","Plus","Divide","Multiply","Modulo","And","parens","BitwiseAnd","Or","Lower","LowerEquals","Bigger","BiggerEquals","equals","TYPED_NULL_EXPR","CastExpr","NullishCoalesce","ExpressionStatement","BuiltinVar","ReadVarExpr","builtin","visitReadVarExpr","WriteVarExpr","TypeofExpr","expr","visitTypeofExpr","isConstant","WrappedNodeExpr","node","visitWrappedNodeExpr","visitWriteVarExpr","DeclareVarStmt","toDeclStmt","StmtModifier","Final","WriteKeyExpr","receiver","visitWriteKeyExpr","WritePropExpr","visitWritePropExpr","BuiltinMethod","fn","visitInvokeFunctionExpr","TaggedTemplateExpr","template","elements","expressions","visitTaggedTemplateExpr","classExpr","visitInstantiateExpr","LiteralExpr","visitLiteralExpr","TemplateLiteral","TemplateLiteralElement","rawText","escapeForTemplateLiteral","escapeSlashes","LiteralPiece","PlaceholderPiece","associatedMessage","MEANING_SEPARATOR$1","ID_SEPARATOR$1","LEGACY_ID_INDICATOR","LocalizedString","metaBlock","messageParts","placeHolderNames","visitLocalizedString","description","customId","legacyIds","legacyId","createCookedRawString","getMessagePartSourceSpan","_c","_d","partIndex","placeholder","messagePart","messageString","escapeStartingColon","escapeColons","range","cooked","raw","ExternalExpr","moduleName","runtime","visitExternalExpr","ExternalReference","condition","visitConditionalExpr","NotExpr","visitNotExpr","AssertNotNull","visitAssertNotNullExpr","visitCastExpr","FnParam","param","FunctionExpr","statements","visitFunctionExpr","DeclareFunctionStmt","UnaryOperatorExpr","operator","visitUnaryOperatorExpr","lhs","visitBinaryOperatorExpr","visitReadPropExpr","visitReadKeyExpr","LiteralArrayExpr","entries","every","visitLiteralArrayExpr","LiteralMapEntry","quoted","LiteralMapExpr","visitLiteralMapExpr","CommaExpr","visitCommaExpr","THIS_EXPR","This","SUPER_EXPR","Super","CATCH_ERROR_VAR$1","CatchError","CATCH_STACK_VAR$1","CatchStack","NULL_EXPR","LeadingComment","multiline","trailingNewline","JSDocComment","tags","serializeTags","Statement","leadingComments","leadingComment","stmt","visitDeclareVarStmt","visitDeclareFunctionStmt","visitExpressionStmt","ReturnStatement","visitReturnStmt","AbstractClassPart","ClassField","initializer","ClassMethod","body","ClassGetter","ClassStmt","parent","fields","getters","constructorMethod","methods","visitDeclareClassStmt","IfStmt","visitIfStmt","TryCatchStmt","bodyStmts","catchStmts","visitTryCatchStmt","ThrowStmt","visitThrowStmt","AstTransformer$1","ast","transformExpr","visitExpression","visitAllExpressions","visitAllStatements","entry","mapType","exprs","transformStmt","getter","ctorMethod","method","stmts","visitStatement","RecursiveAstVisitor$1","visitType","findReadVarNames","_ReadVarVisitor","varNames","arguments","Set","collectExternalReferences","_FindExternalReferencesVisitor","externalReferences","applySourceSpanToStatementIfNeeded","transformer","_ApplySourceSpanTransformer","applySourceSpanToExpressionIfNeeded","create","constructor","prototype","prop","_clone","jsDocComment","variable","importExpr","importType","typeModifiers","expressionType","typeofExpr","literalArr","literalMap","unary","not","assertNotNull","ifStmt","thenClause","elseClause","taggedTemplate","literal","localizedString","placeholderNames","isNull","exp","tagToString","out","output_ast","CATCH_ERROR_VAR","CATCH_STACK_VAR","AstTransformer","RecursiveAstVisitor","CONSTANT_PREFIX","UNKNOWN_VALUE_KEY","KEY_CONTEXT","POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS","FixupExpression","resolved","original","shared","ConstantPool","isClosureCompilerEnabled","literals","literalFactories","injectorDefinitions","directiveDefinitions","componentDefinitions","pipeDefinitions","nextNameIndex","forceShared","isLongStringLiteral","keyOf","fixup","newValue","freshName","definition","usage","callFn","kind","ctx","definitions","definitionsOf","property","propertyNameOf","argumentsForKey","_getLiteralFactory","expressionForKey","resultMap","literalFactory","literalFactoryArguments","filter","resultExpressions","getConstLiteral","parameters","isVariable","pureFunctionDeclaration","uniqueName","KeyVisitor","invalid$1","mapKey","quote","mapEntry","arg","CORE$1","Identifiers$1","NEW_METHOD","TRANSFORM_METHOD","PATCH_DEPS","namespaceHTML","namespaceMathML","namespaceSVG","elementStart","elementEnd","advance","syntheticHostProperty","syntheticHostListener","attributeInterpolate1","attributeInterpolate2","attributeInterpolate3","attributeInterpolate4","attributeInterpolate5","attributeInterpolate6","attributeInterpolate7","attributeInterpolate8","attributeInterpolateV","classProp","elementContainerStart","elementContainerEnd","elementContainer","styleMap","styleMapInterpolate1","styleMapInterpolate2","styleMapInterpolate3","styleMapInterpolate4","styleMapInterpolate5","styleMapInterpolate6","styleMapInterpolate7","styleMapInterpolate8","styleMapInterpolateV","classMap","classMapInterpolate1","classMapInterpolate2","classMapInterpolate3","classMapInterpolate4","classMapInterpolate5","classMapInterpolate6","classMapInterpolate7","classMapInterpolate8","classMapInterpolateV","styleProp","stylePropInterpolate1","stylePropInterpolate2","stylePropInterpolate3","stylePropInterpolate4","stylePropInterpolate5","stylePropInterpolate6","stylePropInterpolate7","stylePropInterpolate8","stylePropInterpolateV","nextContext","templateCreate","enableBindings","disableBindings","getCurrentView","textInterpolate","textInterpolate1","textInterpolate2","textInterpolate3","textInterpolate4","textInterpolate5","textInterpolate6","textInterpolate7","textInterpolate8","textInterpolateV","restoreView","pureFunction0","pureFunction1","pureFunction2","pureFunction3","pureFunction4","pureFunction5","pureFunction6","pureFunction7","pureFunction8","pureFunctionV","pipeBind1","pipeBind2","pipeBind3","pipeBind4","pipeBindV","hostProperty","propertyInterpolate","propertyInterpolate1","propertyInterpolate2","propertyInterpolate3","propertyInterpolate4","propertyInterpolate5","propertyInterpolate6","propertyInterpolate7","propertyInterpolate8","propertyInterpolateV","i18n","i18nAttributes","i18nExp","i18nStart","i18nEnd","i18nApply","i18nPostprocess","pipe","projection","projectionDef","reference","inject","injectAttribute","directiveInject","invalidFactory","invalidFactoryDep","templateRefExtractor","forwardRef","ɵɵdefineInjectable","declareInjectable","InjectableDeclaration","resolveWindow","resolveDocument","resolveBody","defineComponent","declareComponent","setComponentScope","ComponentDeclaration","FactoryDeclaration","declareFactory","FactoryTarget","defineDirective","declareDirective","DirectiveDeclaration","InjectorDef","InjectorDeclaration","defineInjector","declareInjector","NgModuleDeclaration","ModuleWithProviders","defineNgModule","declareNgModule","setNgModuleScope","PipeDeclaration","definePipe","declarePipe","declareClassMetadata","setClassMetadata","queryRefresh","viewQuery","loadQuery","contentQuery","NgOnChangesFeature","InheritDefinitionFeature","CopyDefinitionFeature","ProvidersFeature","listener","getInheritedFactory","sanitizeHtml","sanitizeStyle","sanitizeResourceUrl","sanitizeScript","sanitizeUrl","sanitizeUrlOrResourceUrl","trustConstantHtml","trustConstantResourceUrl","VERSION$1","JS_B64_PREFIX","SourceMapGenerator","file","sourcesContent","lines","lastCol0","hasMappings","url","content","has","col0","sourceUrl","sourceLine0","sourceCol0","currentLine","sourcesIndex","sources","from","mappings","lastSourceIndex","lastSourceLine0","lastSourceCol0","segments","segment","segAsStr","toBase64VLQ","toBase64String","JSON","b64","i1","i2","i3","toBase64Digit","digit","B64_DIGITS","_SINGLE_QUOTE_ESCAPE_STRING_RE","_LEGAL_IDENTIFIER_RE","_INDENT_WITH","_EmittedLine","indent","partsLength","srcSpans","EmitterVisitorContext","_indent","_classes","_preambleLineCount","_lines","lastPart","print","_currentLine","part","newLine","lineIsEmpty","pop","clazz","sourceLines","_createIndent","genFilePath","startsAtLine","firstOffsetMapped","mapFirstOffsetIfNeeded","addSource","addMapping","addLine","line","lineIdx","spans","spanIdx","span","source","start","sourceLine","sourceCol","col","column","emittedLine","columnsLeft","AbstractEmitterVisitor","_escapeDollarInStrings","comment","println","printLeadingComments","hasElseCase","removeEmptyLastLine","incIndent","decIndent","lineWasEmpty","varName","escapeIdentifier","head","serializeI18nHead","serializeI18nTemplatePart","opStr","visitAllObjects","separator","handler","incrementedIndent","lineLength","escapeDollar","alwaysQuote","requiresQuotes","test","typeWithParameters","numParams","ANIMATE_SYMBOL_PREFIX","prepareSyntheticPropertyName","prepareSyntheticListenerName","phase","getSafePropertyAccessString","accessor","escapedName","prepareSyntheticListenerFunctionName","jitOnlyGuardedExpression","guardedExpression","devOnlyGuardedExpression","guard","guardExpr","guardNotDefined","guardUndefinedOrTrue","wrapReference","wrapped","refsToArray","refs","shouldForwardDeclare","ref","createMayBeForwardRefExpression","convertFromMaybeForwardRefExpression","generateForwardRef","R3FactoryDelegateType","FactoryTarget$1","compileFactoryFunction","meta","t","baseFactoryVar","typeForCtor","isDelegatedFactoryMetadata","internalType","ctorExpr","deps","injectDependencies","target","retExpr","makeConditionalFactory","nonCtorExpr","r","ctorStmt","toStmt","delegateArgs","delegateDeps","factoryExpr","delegateType","Class","delegate","isExpressionFactoryMetadata","getInheritedFactoryCall","baseFactory","factoryFn","createFactoryType","ctorDepsType","createCtorDepsType","typeArgumentCount","dep","compileInjectDependency","attributeNameType","flags","skipSelf","host","optional","Pipe","flagsParam","injectArgs","injectFn","getInjectFn","hasTypes","attributeTypes","createCtorDepType","Component","Directive","NgModule","Injectable","Comment$1","_visitor","Text$3","visitText","BoundText","visitBoundText","TextAttribute","keySpan","valueSpan","visitTextAttribute","BoundAttribute","securityContext","unit","visitBoundAttribute","BoundEvent","handlerSpan","visitBoundEvent","event","targetOrPhase","Element$1","attributes","inputs","outputs","references","startSourceSpan","endSourceSpan","visitElement","Template","templateAttrs","variables","visitTemplate","Content","visitContent","Variable","visitVariable","Reference","visitReference","Icu$1","vars","placeholders","visitIcu","NullVisitor","RecursiveVisitor$1","visitAll$1","TransformVisitor","newAttributes","transformAll","newInputs","newOutputs","newChildren","newReferences","newTemplateAttrs","newVariables","newNode","changed","Message","placeholderToMessage","serializeMessage","filePath","startLine","startCol","endLine","end","endCol","Text$2","Container","visitContainer","Icu","TagPlaceholder","visitTagPlaceholder","Placeholder","visitPlaceholder","IcuPlaceholder","visitIcuPlaceholder","CloneVisitor","n","expressionPlaceholder","RecurseVisitor","messageNodes","LocalizeMessageStringVisitor","Serializer","SimplePlaceholderMapper","mapName","internalToPublic","publicToNextId","publicToInternal","internalName","publicName","visitPlaceholderName","nextId","_Visitor$2","strAttrs","_serializeAttributes","strChildren","decl","doctype","rootTag","dtd","serialize","Declaration","unescapedAttrs","escapeXml","visitDeclaration","Doctype","visitDoctype","Tag","visitTag","Text$1","unescapedValue","CR","ws","_ESCAPED_CHARS","_MESSAGES_TAG","_MESSAGE_TAG","_PLACEHOLDER_TAG$3","_EXAMPLE_TAG","_SOURCE_TAG$2","_DOCTYPE","Xmb","messages","locale","exampleVisitor","ExampleVisitor","_Visitor$1","rootNode","sourceTags","version","encoding","addDefaultExamples","digest","toPublicName","startTagAsText","startEx","startTagPh","closeTagAsText","closeEx","closeTagPh","interpolationAsText","exTag","icuExpression","icuType","icuCases","icuAsText","exText","CLOSURE_TRANSLATION_VAR_PREFIX","TRANSLATION_VAR_PREFIX","I18N_ATTR","I18N_ATTR_PREFIX","I18N_ICU_VAR_PREFIX","I18N_ICU_MAPPING_PREFIX","I18N_PLACEHOLDER_SYMBOL","isI18nAttribute","startsWith","isI18nRootNode","isSingleI18nIcu","hasI18nMeta","hasI18nAttrs","icuFromI18nMessage","wrapI18nPlaceholder","contextId","blockId","assembleI18nBoundString","strings","bindingStartIndex","acc","lastIdx","getSeqNumberGenerator","startsAt","placeholdersToParams","updatePlaceholderMap","assembleBoundTextPlaceholders","startIdx","find","idx","i18nFormatPlaceholderNames","useCamelCase","_params","formatI18nPlaceholderName","chunks","postfix","shift","getTranslationConstPrefix","extra","declareI18nVariable","UNSAFE_OBJECT_KEY_NAME_REGEXP","TEMPORARY_NAME","CONTEXT_NAME","RENDER_FLAGS","REFERENCE_PREFIX","IMPLICIT_REFERENCE","NON_BINDABLE_ATTR","RESTORED_VIEW_CONTEXT_NAME","temporaryAllocator","unsupported","feature","invalid","asLiteral","conditionallyCreateMapObjectLiteral","keepDeclared","getOwnPropertyNames","mapToExpression","declaredName","minifiedName","needsDeclaredName","includes","trimTrailingNulls","getQueryPredicate","query","constantPool","predicate","DefinitionMap","getAttrsForDirectiveMatching","elOrTpl","attributesMap","o","chainedInstruction","calls","getInterpolationArgsLength","interpolation","compileInjectable","resolveForwardRefs","factoryMeta","useClass","useClassOnSelf","delegateToFactory","useFactory","useValue","useExisting","injectableProps","providedIn","toLiteralMap","createInjectableType","unwrapForwardRefs","createFactoryFunction","unwrappedType","assertArrayOfStrings","identifier","UNUSABLE_INTERPOLATION_REGEXPS","assertInterpolationSymbols","regexp","InterpolationConfig","markers","DEFAULT_INTERPOLATION_CONFIG","$EOF","$BSPACE","$TAB","$LF","$VTAB","$FF","$CR","$SPACE","$BANG","$DQ","$HASH","$$","$PERCENT","$AMPERSAND","$SQ","$LPAREN","$RPAREN","$STAR","$PLUS","$COMMA","$MINUS","$PERIOD","$SLASH","$COLON","$SEMICOLON","$LT","$EQ","$GT","$QUESTION","$0","$7","$9","$A","$E","$F","$X","$Z","$LBRACKET","$BACKSLASH","$RBRACKET","$CARET","$_","$a","$b","$e","$f","$n","$r","$t","$u","$v","$x","$z","$LBRACE","$BAR","$RBRACE","$NBSP","$PIPE","$TILDA","$AT","$BT","isWhitespace","code","isDigit","isAsciiLetter","isAsciiHexDigit","isNewLine","isOctalDigit","isQuote","ParseLocation","offset","delta","ch","priorLine","lastIndexOf","fromCharCode","maxChars","maxLines","startOffset","endOffset","ctxChars","ctxLines","before","after","ParseSourceFile","ParseSourceSpan","fullStart","details","ParseErrorLevel","ParseError","level","ERROR","getContext","contextualMessage","r3JitTypeSourceSpan","typeName","sourceFileName","sourceFile","syntaxError","parseErrors","ERROR_SYNTAX_ERROR","ERROR_PARSE_ERRORS","isSyntaxError","getParseErrors","_anonymousTypeIndex","identifierName","compileIdentifier","sanitizeIdentifier","makeTemplateObjectPolyfill","AbstractJsEmitterVisitor","pushClass","_visitClassConstructor","_visitClassGetter","_visitClassMethod","popClass","_visitParams","fnExpr","currentClass","ConcatArray","SubscribeObservable","Bind","policy","getPolicy","trustedTypes","createPolicy","createScript","trustedScriptFromString","script","newTrustedFunctionForJIT","fnArgs","fnBody","bind","JitEvaluator","refResolver","createSourceMaps","converter","JitEmitterVisitor","createRoot","isUseStrictStatement","createReturnStmt","evaluateCode","getArgs","createSourceMap","toSource","fnArgNames","fnArgValues","argName","emptyFn","headerLines","toSourceMapGenerator","toJsComment","executeFunction","_evalArgNames","_evalArgValues","_evalExportedVars","resultVar","_emitReferenceToExternal","resolveExternalReference","hasModifier","Exported","statement","compileInjector","definitionMap","providers","imports","createInjectorType","R3JitReflector","compileNgModule","bootstrap","declarations","exports","schemas","containsForwardDecls","emitInline","setNgModuleScopeCall","generateSetNgModuleScopeCall","createNgModuleType","compileNgModuleDeclarationExpression","moduleType","tupleTypeOf","adjacentType","scopeMap","fnCall","guardedCall","iife","iifeCall","types","compilePipeFromMetadata","metadata","definitionMapValues","pipeName","createPipeType","ParserError","errLocation","ctxLocation","ParseSpan","absoluteOffset","AbsoluteSourceSpan","AST","ASTWithName","nameSpan","Quote","uninterpretedExpression","location","visitQuote","EmptyExpr","ImplicitReceiver","visitImplicitReceiver","ThisReceiver","visitThisReceiver","call","Chain","visitChain","Conditional","trueExp","falseExp","visitConditional","PropertyRead","visitPropertyRead","PropertyWrite","visitPropertyWrite","SafePropertyRead","visitSafePropertyRead","KeyedRead","visitKeyedRead","SafeKeyedRead","visitSafeKeyedRead","KeyedWrite","visitKeyedWrite","BindingPipe","visitPipe","LiteralPrimitive","visitLiteralPrimitive","LiteralArray","visitLiteralArray","LiteralMap","visitLiteralMap","Interpolation","visitInterpolation","Binary","operation","left","right","visitBinary","Unary","binaryOp","binaryLeft","binaryRight","visitUnary","PrefixNot","visitPrefixNot","NonNullAssert","visitNonNullAssert","Call","argumentSpan","visitCall","ASTWithSource","errors","visitASTWithSource","VariableBinding","ExpressionBinding","visitAll","asts","createPlus","createMinus","AstMemoryEfficientTransformer","modified","ParsedProperty","isLiteral","ParsedPropertyType","LITERAL_ATTR","isAnimation","ANIMATION","ParsedEvent","ParsedVariable","BoundElementProperty","CORE","Identifiers","ANALYZE_FOR_ENTRY_COMPONENTS","ElementRef","NgModuleRef","ViewContainerRef","ChangeDetectorRef","QueryList","TemplateRef","Renderer2","CodegenComponentFactoryResolver","ComponentFactoryResolver","ComponentFactory","ComponentRef","NgModuleFactory","createModuleFactory","moduleDef","moduleProviderDef","RegisterModuleFactoryFn","INJECTOR","Injector","LOCALE_ID","TRANSLATIONS_FORMAT","inlineInterpolate","interpolate","EMPTY_ARRAY","EMPTY_MAP","Renderer","RendererType2","ViewDefinition","createComponentFactory","EventHandlerVars","ConvertActionBindingResult","allowDefault","render3Stmts","convertActionBinding","localResolver","implicitReceiver","action","bindingId","interpolationFunction","baseSourceSpan","implicitReceiverAccesses","globals","DefaultLocalResolver","actionWithoutBuiltins","convertPropertyBindingBuiltins","createLiteralArrayConverter","argCount","createLiteralMapConverter","createPipeConverter","_AstToIrVisitor","actionStmts","flattenStatements","_Mode","prependTemporaryDecls","temporaryCount","usesImplicitReceiver","notifyImplicitReceiverUse","preventDefaultVar","lastStatement","returnExpr","convertStmtIntoExpression","createPreventDefaultVar","cast","notIdentical","converterFactory","convertBuiltins","ConvertPropertyBindingResult","currValExpr","BindingForm","convertPropertyBinding","expressionWithoutBuiltins","form","outputExpr","getStatementsFromVisitor","TrySimple","createCurrValueExpr","convertUpdateArguments","contextVariableExpression","expressionWithArgumentsToExtract","temporaryDeclaration","_BuiltinAstConverter","temporaryName","temporaryNumber","unshift","ensureStatementMode","mode","ensureExpressionMode","convertToStatementIfNeeded","_converterFactory","BuiltinFunctionCall","_localResolver","_implicitReceiver","_nodeMap","_resultMap","_currentTemporary","op","_visit","convertSourceSpan","convertNullishCoalesce","conditional","leftMostSafe","leftMostSafeNode","convertSafeAccess","maybeRestoreView","getLocal","prevUsesImplicitReceiver","_getLocal","addImplicitReceiverAccess","varExpr","localExpr","convertedArgs","temporary","needsTemporaryInSafeAccess","allocateTemporary","isBlank","access","delete","releaseTemporary","and","visitSome","tempNumber","moveBy","output","ShadowCss","strictStyling","cssText","hostSelector","commentsWithHash","extractCommentsWithHash","stripComments","_insertDirectives","scopedCssText","_scopeCssText","_insertPolyfillDirectivesInCssText","_insertPolyfillRulesInCssText","_cssContentNextSelectorRe","_cssContentRuleRe","rule","scopeSelector","unscopedRules","_extractUnscopedRulesFromCssText","_insertPolyfillHostInCssText","_convertColonHost","_convertColonHostContext","_convertShadowDOMSelectors","_scopeSelectors","_cssContentUnscopedRuleRe","_cssColonHostRe","_","hostSelectors","otherSelectors","convertedSelectors","hostSelectorArray","convertedSelector","_polyfillHostNoCombinator","_polyfillHost","_cssColonHostContextReGlobal","selectorText","contextSelectorGroups","_cssColonHostContextRe","newContextSelectors","contextSelectorGroupsLength","repeatGroups","contextSelectors","combineHostContextSelectors","_shadowDOMSelectorsRe","pattern","processRules","_scopeSelector","_stripScopingSelectors","CssRule","_shadowDeepSelectors","_polyfillHostNoCombinatorRe","strict","deepParts","shallowPart","otherParts","applyScope","_selectorNeedsScoping","_applyStrictSelectorScope","_applySelectorScope","re","_makeScopeMatcher","lre","rre","_selectorReSuffix","_applySimpleSelectorScope","_polyfillHostRe","replaceBy","hnc","colon","isRe","_scopeSelectorPart","scopedP","matches","safeContent","SafeSelector","scopedSelector","startIndex","sep","hasHost","shouldScope","scopedPart","restore","_colonHostContextRe","_polyfillHostContext","_colonHostRe","_escapeRegexMatches","_content","pseudo","_ph","keep","_parenSuffix","_commentRe","_commentWithHashRe","BLOCK_PLACEHOLDER","QUOTE_PLACEHOLDER","_ruleRe","_quotedRe","CONTENT_PAIRS","QUOTE_PAIRS","ruleCallback","inputWithEscapedQuotes","escapeBlocks","inputWithEscapedBlocks","escapedString","nextBlockIndex","nextQuoteIndex","suffix","contentPrefix","blocks","StringWithEscapedBlocks","charPairs","resultParts","escapedBlocks","openCharCount","nonBlockStartIndex","blockStartIndex","openChar","closeChar","hostMarker","otherSelectorsHasHost","combined","contextSelector","previousSelectors","groups","multiples","styles","parenDepth","valueStart","propStart","currentProp","valueHasQuotes","hyphenate","styleVal","stripUnnecessaryQuotes","qS","qE","tempValue","v","IMPORTANT_FLAG","MIN_STYLING_BINDING_SLOTS_REQUIRED","StylingBuilder","_directiveExpr","_hasInitialValues","hasBindings","hasBindingsWithPipes","_classMapInput","_styleMapInput","_singleStyleInputs","_singleClassInputs","_lastStylingInput","_firstStylingInput","_stylesIndex","_classesIndex","_initialStyleValues","_initialClassValues","binding","registerInputBasedOnName","registerStyleInput","registerClassInput","isStyle","isClass","isMapBased","isEmptyExpression","isCssCustomProperty","parseProperty","hasOverrideFlag","bindingSuffix","registerIntoMap","_checkForPipes","populateInitialStylingAttrs","valueConverter","_buildMapBasedInstruction","isClassBased","stylingInput","totalBindingSlotsRequired","mapValue","getClassMapInterpolationExpression","getStyleMapInterpolationExpression","supportsInterpolation","allocateBindingSlots","convertFn","convertResult","getInterpolationExpressionFn","instructions","previousInstruction","referenceForCall","_buildSingleInputs","getStylePropInterpolationExpression","styleMapInstruction","buildStyleMapInstruction","classMapInstruction","buildClassMapInstruction","_buildStyleInputs","_buildClassInputs","overrideIndex","unitIndex","TokenType","KEYWORDS","Lexer","scanner","_Scanner","tokens","scanToken","Token","numValue","strValue","Character","Operator","Identifier","PrivateIdentifier","Keyword","newCharacterToken","newIdentifierToken","newPrivateIdentifierToken","newKeywordToken","newOperatorToken","newStringToken","newNumberToken","newErrorToken","EOF","peek","isIdentifierStart","scanIdentifier","scanNumber","scanCharacter","scanString","scanPrivateIdentifier","scanOperator","scanQuestion","scanComplexOperator","twoCode","two","threeCode","three","isIdentifierPart","simple","hasSeparators","isExponentStart","isExponentSign","parseIntAutoRadix","parseFloat","buffer","marker","unescapedCode","parseInt","unescape","last","position","isIdentifier","isNaN","SplitInterpolation","offsets","TemplateBindingParseResult","templateBindings","warnings","Parser$1","_lexer","simpleExpressionChecker","SimpleExpressionChecker","interpolationConfig","_checkNoInterpolation","sourceToLex","_stripComments","tokenize","_ParseAST","parseChain","_parseBindingAst","checker","checkSimpleExpression","_reportError","_parseQuote","prefixSeparatorIndex","toAbsolute","templateKey","templateValue","templateUrl","absoluteKeyOffset","absoluteValueOffset","parser","parseTemplateBindings","splitInterpolation","expressionNodes","expressionText","createInterpolationAst","atInterpolation","extendLastString","interpStart","interpEnd","exprStart","exprEnd","_getInterpolationEndIndex","fullEnd","piece","_commentStart","outerQuote","nextChar","endIndex","_forEachUnquotedChar","charIndex","expressionEnd","currentQuote","escapeCount","IvyParser","IvySimpleExpressionChecker","ParseContextFlags","inputLength","parseAction","rparensExpected","rbracketsExpected","rbracesExpected","sourceSpanCache","atEOF","currentEndIndex","next","curToken","inputIndex","artificialEndIndex","tmp","serial","ret","isCharacter","isKeywordLet","isKeywordAs","consumeOptionalCharacter","isOperator","consumeOptionalOperator","tok","isKeyword","isPrivateIdentifier","_reportErrorForPrivateIdentifier","prettyPrintToken","isString","parsePipe","artificialStart","artificialEnd","parseExpression","nameStart","nameId","expectIdentifierOrKeyword","fullSpanEnd","parseConditional","parseLogicalOr","yes","no","parseLogicalAnd","parseNullishCoalescing","parseEquality","parseRelational","parseAdditive","parseMultiplicative","parsePrefix","parseCallChain","parsePrimary","parseAccessMemberOrCall","parseKeyedReadOrWrite","argumentStart","parseCallArguments","expectCharacter","isKeywordNull","isKeywordUndefined","isKeywordTrue","isKeywordFalse","isKeywordThis","parseExpressionList","parseLiteralMap","isNumber","toNumber","literalValue","terminator","keyStart","expectIdentifierOrKeywordOrString","readReceiver","isSafe","withContext","Writable","positionals","operatorFound","currentAbsoluteOffset","bindings","parseDirectiveKeywordBindings","letBinding","parseLetBinding","expectTemplateBindingKey","parseAsBinding","consumeStatementTerminator","getDirectiveBoundTarget","spanEnd","asBinding","peekKeywordAs","peekKeywordLet","spanStart","locationText","skip","extraMessage","errorMessage","isError","AstPath","path","ctor","NodeWithI18n","Text","Expansion","switchValue","switchValueSourceSpan","visitExpansion","ExpansionCase","valueSourceSpan","expSourceSpan","visitExpansionCase","Attribute","valueTokens","visitAttribute","Element","Comment","visitComment","astResult","RecursiveVisitor","visitChildren","apply","spanOf","findNode","NAMED_ENTITIES","NGSP_UNICODE","TokenError","errorMsg","tokenType","TokenizeResult","nonNormalizedIcuExpressions","getTagDefinition","options","tokenizer","_Tokenizer","mergeTextTokens","_CR_OR_CRLF_REGEXP","_unexpectedCharacterErrorMsg","charCode","_unknownEntityErrorMsg","entitySrc","_unparsableEntityErrorMsg","entityStr","CharacterReferenceType","_ControlFlowError","_file","_getTagDefinition","_currentTokenStart","_currentTokenType","_expansionCaseStack","_inInterpolation","_tokenizeIcu","tokenizeExpansionForms","_interpolationConfig","_leadingTriviaCodePoints","leadingTriviaChars","codePointAt","endPos","startPos","_cursor","EscapedCharacterCursor","PlainCharacterCursor","_preserveLineEndings","preserveLineEndings","_escapedString","_i18nNormalizeLineEndingsInICUs","i18nNormalizeLineEndingsInICUs","init","handleError","_attemptCharCode","_consumeCdata","_consumeComment","_consumeDocType","_consumeTagClose","_consumeTagOpen","_tokenizeExpansionForm","_consumeWithInterpolation","_isTextEnd","_isTagStart","_beginToken","_endToken","isExpansionFormStart","_consumeExpansionFormStart","isExpansionCaseStart","_isInExpansionForm","_consumeExpansionCaseStart","_isInExpansionCase","_consumeExpansionCaseEnd","_consumeExpansionFormEnd","getSpan","CursorError","_createError","cursor","compareCharCodeCaseInsensitive","chars","charsLeft","initialPosition","_attemptCharCodeCaseInsensitive","_attemptStr","_attemptCharCodeUntilFn","diff","fromCodePoint","textTokenType","isHex","codeStart","isDigitEntityEnd","entityType","HEX","DEC","getChars","strNum","isNamedEntityEnd","consumeEntities","endMarkerPredicate","tagCloseStart","foundEndMarker","_processCarriageReturns","_consumeEntity","_readChar","_requireCharCode","_consumeRawText","_requireStr","contentStart","_attemptUntilChar","nameOrPrefixStart","isPrefixEnd","_requireCharCodeUntilFn","isNameEnd","openTagToken","_consumeTagOpenStart","isNotWhitespace","_consumeAttributeName","_consumeAttributeValue","_consumeTagOpenEnd","contentTokenType","getContentType","_consumeRawTextWithTagClose","_attemptStrCaseInsensitive","_consumePrefixAndName","attrNameStart","prefixAndName","quoteChar","_consumeQuote","endPredicate","_readUntil","normalizedCondition","conditionToken","interpolationTokenType","endInterpolation","_consumeInterpolation","interpolationStart","prematureEndPredicate","expressionStart","inQuote","inComment","_getProcessedChars","isInterpolation","code1","code2","toUpperCaseCharCode","srcTokens","dstTokens","lastDstToken","fileOrCursor","state","advanceState","updatePeek","leadingTriviaCodePoints","startLocation","locationFromCursor","endLocation","fullStartLocation","pos","currentChar","internalState","processEscapeSequence","digitStart","decodeHexDigits","octal","previous","TreeError","ParseTreeResult","rootNodes","Parser","tokenizeResult","_TreeBuilder","build","_index","_elementStack","_advance","_peek","_consumeStartTag","_consumeEndTag","_closeVoidElement","_consumeText","_consumeExpansion","prev","_startToken","_advanceIf","_addToParent","expCase","_parseExpansionCase","_collectExpansionExpTokens","expansionCaseParser","expansionFormStack","lastOnStack","startSpan","_getParentElement","decodeEntity","endSpan","el","startTagToken","_consumeAttr","_getElementFullName","selfClosing","tagDef","_pushElement","_popElement","parentEl","isClosedByChild","endTagToken","errMsg","unexpectedCloseTagDetected","stackIndex","splice","attrEnd","valueStartSpan","valueEnd","nextTokenType","valueToken","quoteToken","parentElement","parentTagName","parentTagDefinition","stack","entity","HtmlParser","PRESERVE_WS_ATTR_NAME","SKIP_WS_TRIM_TAGS","WS_CHARS","NO_WS_REGEXP","WS_REPLACE_REGEXP","hasPreserveWhitespacesAttr","replaceNgsp","WhitespaceVisitor","visitAllWithSiblings","isNotBlank","hasExpansionSibling","createWhitespaceProcessedTextToken","processWhitespace","expansion","expansionCase","removeWhitespaces","htmlAstWithErrors","mapLiteral","_SECURITY_SCHEMA","SECURITY_SCHEMA","registerContext","HTML","STYLE","URL","RESOURCE_URL","specs","spec","ElementSchemaRegistry","EVENT","BOOLEAN","NUMBER","STRING","OBJECT","SCHEMA","_ATTR_TO_PROP","_PROP_TO_ATTR","inverted","DomElementSchemaRegistry","_schema","_eventSchema","encodedType","events","strType","strProperties","properties","typeNames","superName","superType","superEvent","propName","schemaMetas","schema","elementProperties","isAttribute","getMappedPropName","NONE","camelCaseProp","userProvidedProp","strVal","_isPixelDimensionStyle","valAndSuffixMatch","TRUSTED_TYPES_SINKS","isTrustedTypesSink","PROPERTY_PARTS_SEPARATOR","ATTRIBUTE_PREFIX","CLASS_PREFIX","STYLE_PREFIX","TEMPLATE_ATTR_PREFIX$1","ANIMATE_PROP_PREFIX","BindingParser","_exprParser","_schemaRegistry","boundProps","parsePropertyBinding","hostProperties","elementSelector","createBoundHostProperties","createBoundElementProperty","hostListeners","targetEvents","parseEvent","sourceInfo","parseInterpolation","_reportExpressionParserErrors","wrapLiteralPrimitive","parseInterpolationExpression","tplKey","tplValue","targetMatchableAttrs","targetProps","targetVars","isIvyAst","_parseTemplateBindings","bindingSpan","moveParseSourceSpan","srcSpan","_parsePropertyAst","parseLiteralAttr","bindingsResult","warning","WARNING","isAnimationLabel","_parseAnimation","isHost","isAnimationProp","_parseBinding","DEFAULT","isHostBinding","parseSimpleBinding","parseBinding","boundProp","skipValidation","mapPropertyName","bindingType","boundPropertyName","securityContexts","_validatePropertyOrAttributeName","calcPossibleSecurityContexts","nsSeparatorIdx","ns","mappedPropName","_parseAnimationEvent","_parseRegularEvent","_parseAction","isAttr","report","validateAttribute","validateProperty","PipeCollector","pipes","registry","ctxs","elementNames","allKnownElementNames","notElementNames","isElementSelector","possibleElementNames","sort","absoluteSpan","startDiff","endDiff","isStyleUrlResolvable","schemeMatch","URL_WITH_SCHEMA_REGEXP","NG_CONTENT_SELECT_ATTR$1","LINK_ELEMENT","LINK_STYLE_REL_ATTR","LINK_STYLE_HREF_ATTR","LINK_STYLE_REL_VALUE","STYLE_ELEMENT","SCRIPT_ELEMENT","NG_NON_BINDABLE_ATTR","NG_PROJECT_AS","preparseElement","selectAttr","hrefAttr","relAttr","nonBindable","projectAs","lcAttrName","normalizeNgContentSelect","nodeName","PreparsedElementType","OTHER","NG_CONTENT","SCRIPT","STYLESHEET","PreparsedElement","BIND_NAME_REGEXP","KW_BIND_IDX","KW_LET_IDX","KW_REF_IDX","KW_ON_IDX","KW_BINDON_IDX","KW_AT_IDX","IDENT_KW_IDX","BINDING_DELIMS","BANANA_BOX","PROPERTY","TEMPLATE_ATTR_PREFIX","htmlAstToRender3Ast","htmlNodes","bindingParser","HtmlAstToIvyAst","ivyNodes","allErrors","styleUrls","ngContentSelectors","collectCommentNodes","commentNodes","inI18nBlock","isI18nRootElement","reportError","preparsedElement","contents","textContents","isTemplateElement","parsedProperties","boundEvents","i18nAttrsMeta","templateParsedProperties","templateVariables","elementHasInlineTemplate","hasBinding","normalizedName","normalizeAttributeName","isTemplateBinding","parsedVariables","parseInlineTemplateBinding","parseAttribute","NON_BINDABLE_VISITOR","parsedElement","isEmptyTextNode","isCommentNode","extractAttributes","bound","hoistedAttrs","_visitTextWithInterpolation","formattedKey","i18nPropsMeta","bep","fromBoundElementProperty","matchableAttributes","createKeySpan","normalizationAdjustment","keySpanStart","keySpanEnd","bindParts","parseVariable","parseReference","addEvents","parseAssignmentEvent","delims","endsWith","parsePropertyInterpolation","valueNoNgsp","NonBindableVisitor","fromParsedEvent","TagType","setupRegistry","getUniqueId","icus","I18nContext","templateIndex","isEmitted","_unresolvedCtxCount","_registry","closed","serializePlaceholderValue","phs","appendTag","TEMPLATE","ELEMENT","findTemplateFn","childPhs","tmplIdx","findIndex","isCloseTag","isTemplateTag","tmpl","wrap","symbol","wrapTag","IcuSerializerVisitor","formatPh","serializer","serializeIcuNode","TAG_TO_PLACEHOLDER_NAMES","PlaceholderRegistry","_placeHolderNameCounts","_signatureToName","signature","_hashTag","upperTag","baseName","_generateUniqueName","_hashClosingTag","upperName","seen","_expParser","createI18nMessageFactory","_I18nVisitor","visitNodeFn","toI18nMessage","noopVisitNodeFn","_html","_expressionParser","isIcu","icuDepth","placeholderRegistry","placeholderToContent","i18nodes","startPhName","getStartTagPlaceholderName","closePhName","getCloseTagPlaceholderName","i18nIcuCases","i18nIcu","caze","expPh","getUniquePlaceholder","phName","getPlaceholderName","_icuCase","_context","previousI18n","hasInterpolation","extractPlaceholderName","reusePreviousSourceSpans","assertSingleContainerMessage","assertEquivalentNodes","previousNodes","_CUSTOM_PH_EXP","I18nError","setI18nRefs","htmlNode","i18nNode","previousMessage","I18nMetaVisitor","keepI18nAttrs","enableI18nLegacyMessageIdFormat","_errors","_createI18nMessage","_parseMetadata","_setMessageId","_setLegacyIds","attrsMeta","_generateI18nMessage","currentMessage","parseI18nMeta","I18N_MEANING_SEPARATOR","I18N_ID_SEPARATOR","idIndex","descIndex","meaningAndDesc","i18nMetaToJSDoc","GOOG_GET_MSG","createGoogleGetMsgStatements","variable$1","closureVar","serializeI18nMessageForGetMsg","googGetMsgStmt","toConstDecl","metaComment","addLeadingComment","i18nAssignmentStmt","GetMsgSerializerVisitor","serializerVisitor","createLocalizeStatements","serializeI18nMessageForLocalize","placeHolders","getSourceSpan","localizedString$1","variableInitialization","LocalizeSerializerVisitor","pieces","createPlaceholderPiece","processMessagePieces","startNode","endNode","createEmptyMessagePart","NG_CONTENT_SELECT_ATTR","NG_PROJECT_AS_ATTR_NAME","EVENT_BINDING_SCOPE_GLOBALS","GLOBAL_TARGET_RESOLVERS","LEADING_TRIVIA_CHARS","renderFlagCheckIfStmt","bitwiseAnd","prepareEventListenerParameters","eventAst","handlerName","scope","eventArgumentName","implicitReceiverExpr","bindingLevel","getOrCreateSharedContextVar","bindingExpr","variableDeclarations","restoreViewStatement","fnName","handlerFn","createComponentDefConsts","prepareStatements","constExpressions","i18nVarRefsCache","TemplateDefinitionBuilder","parentBindingScope","contextName","i18nContext","templateName","directiveMatcher","directives","pipeTypeByName","_namespace","relativeContextFilePath","i18nUseExternalIds","_constants","_dataIndex","_bindingContext","_prefixCode","_creationCodeFns","_updateCodeFns","_currentIndex","_tempVariables","_nestedTemplateFns","_unsupported","_pureFunctionSlots","_bindingSlots","_ngContentReservedSlots","_ngContentSelectorsOffset","_implicitReceiverExpr","_bindingScope","nestedScope","fileBasedI18nSuffix","_valueConverter","ValueConverter","allocateDataSlot","numSlots","allocatePureFunctionSlots","slot","pipeType","creationInstruction","ngContentSelectorsOffset","registerContextVariables","initI18nContext","isSingleElementTemplate","selfClosingI18nInstruction","hasTextChildrenOnly","updatePipeSlotOffsets","buildTemplateFn","r3ReservedSlots","creationStatements","updateStatements","creationVariables","viewSnapshotStatements","updateVariables","creationBlock","updateBlock","transformFn","_ref","i18nGenerateMainBlockVar","i18nGenerateClosureVar","getTranslationDeclStmts","scopedName","freshReferenceName","retrievalLevel","relativeLevel","isListenerScope","hasRestoreViewVariable","notifyRestoredViewContextUse","sharedCtxVar","getSharedContextName","generateNextContextExpr","appendBinding","label","i18nAppendBindings","messageId","uniqueSuffix","isRoot","isResolved","getSerializedPlaceholders","icuMapping","needsPostprocessing","instruction","i18nTranslate","forkChildContext","addToConsts","reconcileChildContext","i18nUpdateRef","chainBindings","updateInstructionChainWithAdvance","getConstCount","updateInstruction","nodeIndex","i18nAttrArgs","converted","constIndex","namespaceKey","nsInstruction","elementIndex","updateInstructionWithAdvance","getUpdateInstructionArguments","ngContent","projectionSlotIdx","nonContentSelectAttributes","getAttributeExpressions","appendProjection","stylingBuilder","isNonBindableMode","outputAttrs","isNgContainer$1","registerStyleAttr","registerClassAttr","matchDirectives","allOtherInputs","boundI18nAttrs","stylingInputWasSet","registerBoundInput","addAttrsToConsts","prepareRefsArray","wasInNamespace","currentNamespace","getNamespaceInstruction","addNamespaceInstruction","appendElement","hasChildren","createSelfClosingInstruction","createSelfClosingI18nInstruction","i18nAttributesInstruction","listeners","outputAst","prepareListenerParameter","creationInstructionChain","stylingInstructions","buildUpdateLevelInstructions","limit","processStylingUpdateInstruction","emptyValueBindInstruction","propertyBindings","attributeBindings","inputType","hasValue","attrNamespace","isAttributeBinding","sanitizationRef","resolveSanitizationFn","namespaceLiteral","interpolatedUpdateInstruction","getPropertyInterpolationExpression","getAttributeInterpolationExpression","boundValue","NG_TEMPLATE_TAG_NAME","appendTemplate","tagNameWithoutNamespace","attrsExprs","templateVisitor","templateFunctionExpr","buildTemplateFunction","getVarCount","templatePropertyBindings","i18nInputs","appendBoundText","getTextInterpolationExpression","initWasInvoked","i18nBindProps","formatted","appendIcu","fns","paramsOrFn","prepend","instructionFn","addAdvanceInstructionIfNecessary","fnParams","updateInstructionChain","originalSlots","convertedPropertyBinding","getImplicitReceiverExpr","bindingContext","valExpr","createCssSelector","staticType","renderAttributes","alreadySeen","attrExprs","ngProjectAsAttr","i18nVarRef","getAttributeNameLiterals","trustedConstAttribute","getNgProjectAsLiteral","addAttrExpr","attrsLengthBeforeInputs","consts","refsParam","flatten","variableName","nextContextStmt","refExpr","bindingFnName","allocateSlot","_pipeBindExprs","slotPseudoLocal","pureFunctionSlot","pipeBindingCallInfo","isVarLength","pipeBindExpr","bindingSlots","slotOffset","array","getLiteralFactory","pipeBindingIdentifiers","pureFunctionIdentifiers","pureFunctionCallInfo","relativeLevelDiff","literal$1","allocateSlots","startSlot","attributeNamespace","nameLiteral","SHARED_CONTEXT_KEY","BindingScope","referenceNameIndex","restoreViewVariable","usesRestoredViewContext","declareLocalCallback","declare","priority","maybeGenerateSharedContextVar","getComponentProperty","localRef","newScope","generateSharedContextVar","bindingKey","sharedCtxObj","componentValue","restoreCall","currentContextLevel","levelDiff","currStmts","elementNameNoNs","nameNoNs","parsedR3Selector","parseTemplate","preserveWhitespaces","makeBindingParser","htmlParser","parseResult","alwaysAttemptHtmlToR3AstConversion","parsedTemplate","i18nMetaVisitor","i18nMetaResult","visitAllWithErrors","elementRegistry","isTextNode","NG_I18N_CLOSURE_MODE","createClosureModeGuard","flat","flatItem","ATTR_REGEX","COMPONENT_VARIABLE","HOST_ATTR","CONTENT_ATTR","baseDirectiveFields","queries","createContentQueriesFunction","viewQueries","createViewQueriesFunction","createHostBindingsFunction","typeSourceSpan","exportAs","addFeatures","features","viewProviders","usesInheritance","fullInheritance","lifecycle","usesOnChanges","compileDirectiveFromMetadata","createDirectiveType","compileComponentFromMetadata","firstSelector","selectorAttributes","getAttrs","templateTypeName","directivesUsed","pipesUsed","templateBuilder","createRootScope","templateFunctionExpression","getNgContentSelectors","getConsts","constsExpr","directivesList","directivesExpr","compileDeclarationList","declarationListEmitMode","pipesList","pipesExpr","encapsulation","Emulated","styleValues","compileStyles","animations","createComponentType","createDirectiveTypeParams","stringArrayAsType","resolvedList","prepareQueryParams","toQueryFlags","read","static","convertAttributesToExpressions","createStatements","tempAllocator","getQueryList","refresh","updateDirective","propertyName","contentQueriesFnName","stringAsType","stringMapAsType","mapValues","selectorForType","q","queryDefinition","viewQueryFnName","hostBindingsMetadata","styleBuilder","specialAttributes","styleAttr","hostBindingSourceSpan","eventBindings","createDirectiveHostEventAsts","createHostListeners","allOtherBindings","totalHostVarsCount","getValueConverter","hostVarsCountFn","originalVarsCount","syntheticHostBindings","bindingFn","getBindingNameAndInstruction","bindingName","sanitizerFn","instructionParams","hostAttrs","assignHostAttrs","convertStylingCall","hostBindingsFnName","implicit","attrMatches","syntheticListeners","HOST_REG_EXP","parseHostBindings","verifyHostBindings","shadowCss","style","shimCssText","ResourceLoader","CompilerFacadeImpl","jitEvaluator","elementSchemaRegistry","angularCoreEnv","sourceMapUrl","facade","jitExpression","declaration","convertDeclarePipeFacadeToMetadata","computeProvidedIn","convertToProviderExpression","USE_CLASS","wrapExpression","USE_FACTORY","USE_VALUE","USE_EXISTING","convertR3DependencyMetadata","convertR3DeclareDependencyMetadata","convertDeclareInjectorFacadeToMetadata","convertDirectiveFacadeToMetadata","compileDirectiveFromMeta","createParseSourceSpan","convertDeclareDirectiveFacadeToMetadata","parseJitTemplate","getDefaultComponentElementName","jitExpressionSourceMap","compileComponentFromMeta","convertDeclareComponentFacadeToMetadata","factoryRes","convertR3DependencyMetadataArray","def","preStatements","evaluateStatements","convertToR3QueryMetadata","convertQueryPredicate","convertQueryDeclarationToMetadata","inputsFromMetadata","parseInputOutputs","outputsFromMetadata","propMetadata","inputsFromType","outputsFromType","field","ann","isInput","isOutput","extractHostBindings","_e","_f","_g","_h","convertHostDeclarationToMetadata","convertOpaqueValuesToExpressions","classAttribute","styleAttribute","components","convertUsedDirectiveDeclarationToMetadata","convertUsedPipesToMetadata","declaredPipes","fromArray","parsed","err","facades","isAttributeDep","rawToken","createR3DependencyMetadata","isHostListener","publishFacade","ng","ɵcompilerFacade","VERSION","CompilerConfig","defaultEncapsulation","useJit","jitDevMode","missingTranslation","strictInjectionParameters","preserveWhitespacesDefault","preserveWhitespacesOption","defaultSetting","_I18N_ATTR","_I18N_ATTR_PREFIX","_I18N_COMMENT_PREFIX_REGEXP","MEANING_SEPARATOR","ID_SEPARATOR","i18nCommentsWarned","extractMessages","implicitTags","implicitAttrs","_Visitor","extract","mergeTranslations","translations","merge","ExtractionResult","_VisitorMode","_implicitTags","_implicitAttrs","_init","Extract","_inI18nBlock","_messages","Merge","_translations","wrapper","translatedNode","icuCase","_mode","_mayBeAddBlockChildren","wasInIcu","_inIcu","_isInTranslatableSection","_addMessage","isOpening","_isOpeningComment","isClosing","_isClosingComment","_inI18nNode","console","warn","_blockStartDepth","_depth","_blockChildren","_blockMeaningAndDesc","_openTranslatableSection","_closeTranslatableSection","_translateMessage","wasInI18nNode","wasInImplicitNode","_inImplicitNode","childNodes","translatedChildNodes","i18nAttr","_getI18nAttr","i18nMeta","isImplicit","isTopLevelImplicit","isTranslatable","visitNodes","visited","_visitAttributesOf","translatedAttrs","_translateAttributes","_msgCountAtSectionStart","explicitAttrNameToValue","implicitAttrNames","msgMeta","_parseMessageMeta","i18nParsedMessageMeta","translatedAttributes","directChildren","significantChildren","XmlTagDefinition","currentParent","_TAG_DEFINITION","getXmlTagDefinition","XmlParser","_VERSION$1","_XMLNS$1","_DEFAULT_SOURCE_LANG$1","_PLACEHOLDER_TAG$2","_MARKER_TAG$1","_FILE_TAG","_SOURCE_TAG$1","_SEGMENT_SOURCE_TAG","_ALT_TRANS_TAG","_TARGET_TAG$1","_UNIT_TAG$1","_CONTEXT_GROUP_TAG","_CONTEXT_TAG","Xliff","_WriteVisitor$1","transUnits","contextTags","contextGroupTag","purpose","transUnit","datatype","xliff","xmlns","xliffParser","XliffParser","msgIdToHtml","i18nNodesByMsgId","XmlToI18n$2","msgId","convert","i18nNodes","ctype","getCtypeForTag","equivText","_locale","_unitMlString","_msgIdToHtml","xml","idAttr","_addError","innerTextStart","innerTextEnd","innerText","localeAttr","xmlIcu","nameAttr","caseMap","_VERSION","_XMLNS","_DEFAULT_SOURCE_LANG","_PLACEHOLDER_TAG$1","_PLACEHOLDER_SPANNING_TAG","_MARKER_TAG","_XLIFF_TAG","_SOURCE_TAG","_TARGET_TAG","_UNIT_TAG","Xliff2","_WriteVisitor","units","notes","category","srcLang","xliff2Parser","Xliff2Parser","XmlToI18n$1","getTypeForTag","tagPh","_nextPlaceholderId","equiv","disp","tagPc","equivStart","equivEnd","dispStart","dispEnd","idStr","versionAttr","startAttr","endAttr","startId","endId","_TRANSLATIONS_TAG","_TRANSLATION_TAG","_PLACEHOLDER_TAG","Xtb","xtbParser","XtbParser","XmlToI18n","valueFn","createLazyProperty","defineProperty","configurable","enumerable","xtb","_bundleDepth","langAttr","TranslationBundle","_i18nNodesByMsgId","mapperFactory","missingTranslationStrategy","Warning","_i18nToHtml","I18nToHtmlVisitor","srcMsg","html","load","digestFn","createNameMapper","_digest","_mapperFactory","_missingTranslationStrategy","_console","_contextStack","_convertToText","_srcMsg","_mapper","mapper","toInternalName","I18NHtmlParser","_htmlParser","translationsFormat","createSerializer","_translationBundle","format","MessageBundle","htmlParserResult","i18nParserResult","filterSources","mapperVisitor","MapPlaceholderNames","msgList","src","transformedMessage","write","R3TargetBinder","Scope","templateEntities","extractTemplateEntities","DirectiveBinder","TemplateBinder","applyWithScope","symbols","nestingLevel","usedPipes","R3BoundTarget","parentScope","namedEntities","childScopes","ingest","maybeDeclare","thing","lookup","newRootScope","visitElementOrTemplate","directive","dirTarget","isComponent","setAttributeBinding","ioType","hasBindingPropertyName","selectorMatcher","visitNode","childScope","getChildScope","binder","maybeMap","exprTargets","dirs","rootScope","entityMap","extractScopeEntities","currentEntities","scopesToProcess","entities","compileClassMetadata","decorators","ctorParameters","propDecorators","MINIMUM_PARTIAL_LINKER_VERSION$6","compileDeclareClassMetadata","toOptionalLiteralArray","toOptionalLiteralMap","object","compileDependencies","compileDependency","depMeta","MINIMUM_PARTIAL_LINKER_VERSION$5","compileDeclareDirectiveFromMetadata","createDirectiveDefinitionMap","compileHostMetadata","compileQuery","hostMetadata","compileDeclareComponentFromMetadata","additionalTemplateInfo","createComponentDefinitionMap","templateInfo","getTemplateExpression","isInline","compileUsedDirectiveMetadata","compileUsedPipeMetadata","inlineTemplateLiteralExpression","computeEndLocation","lineStart","lastLineStart","wrapType","dirMeta","MINIMUM_PARTIAL_LINKER_VERSION$4","compileDeclareFactoryFunction","MINIMUM_PARTIAL_LINKER_VERSION$3","compileDeclareInjectableFromMetadata","createInjectableDefinitionMap","MINIMUM_PARTIAL_LINKER_VERSION$2","compileDeclareInjectorFromMetadata","createInjectorDefinitionMap","MINIMUM_PARTIAL_LINKER_VERSION$1","compileDeclareNgModuleFromMetadata","createNgModuleDefinitionMap","MINIMUM_PARTIAL_LINKER_VERSION","compileDeclarePipeFromMetadata","createPipeDefinitionMap","R3Identifiers","TmplAstBoundAttribute","TmplAstBoundEvent","TmplAstBoundText","TmplAstContent","TmplAstElement","TmplAstIcu","TmplAstRecursiveVisitor","TmplAstReference","TmplAstTemplate","TmplAstText","TmplAstTextAttribute","TmplAstVariable"],"mappings":"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C,CAACpwD,MAAF,CAAS,CAAT,IAAc,GAAd,GAAoBowD,CAAC,CAACpwD,MAAF,CAAS,CAAT,CAA3B;AACH,GAHM,EAIFxB,WAJE,EAAP;AAKH;;AAED,IAAM6xD,cAAc,GAAG,YAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,kCAAkC,GAAG,CAA3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,c;AACF,0BAAYC,cAAZ,EAA4B;AAAA;;AACxB,SAAKA,cAAL,GAAsBA,cAAtB;AACA;;AACA,SAAKC,iBAAL,GAAyB,KAAzB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,oBAAL,GAA4B,KAA5B;AACA;;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA;;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA;;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACA;;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACA,SAAKC,kBAAL,GAA0B,IAA1B,CAnBwB,CAoBxB;AACA;;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,YAAL,GAAoB,IAAIjvD,GAAJ,EAApB;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKkvD,aAAL,GAAqB,IAAIlvD,GAAJ,EAArB;AACA,SAAKmvD,mBAAL,GAA2B,EAA3B;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;;WACI,4BAAmBjo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","sourcesContent":["/**\n * @license Angular v13.1.0\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TagContentType;\n(function (TagContentType) {\n    TagContentType[TagContentType[\"RAW_TEXT\"] = 0] = \"RAW_TEXT\";\n    TagContentType[TagContentType[\"ESCAPABLE_RAW_TEXT\"] = 1] = \"ESCAPABLE_RAW_TEXT\";\n    TagContentType[TagContentType[\"PARSABLE_DATA\"] = 2] = \"PARSABLE_DATA\";\n})(TagContentType || (TagContentType = {}));\nfunction splitNsName(elementName) {\n    if (elementName[0] != ':') {\n        return [null, elementName];\n    }\n    const colonIndex = elementName.indexOf(':', 1);\n    if (colonIndex === -1) {\n        throw new Error(`Unsupported format \"${elementName}\" expecting \":namespace:name\"`);\n    }\n    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n}\n// `<ng-container>` tags work the same regardless the namespace\nfunction isNgContainer(tagName) {\n    return splitNsName(tagName)[1] === 'ng-container';\n}\n// `<ng-content>` tags work the same regardless the namespace\nfunction isNgContent(tagName) {\n    return splitNsName(tagName)[1] === 'ng-content';\n}\n// `<ng-template>` tags work the same regardless the namespace\nfunction isNgTemplate(tagName) {\n    return splitNsName(tagName)[1] === 'ng-template';\n}\nfunction getNsPrefix(fullName) {\n    return fullName === null ? null : splitNsName(fullName)[0];\n}\nfunction mergeNsAndName(prefix, localName) {\n    return prefix ? `:${prefix}:${localName}` : localName;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass HtmlTagDefinition {\n    constructor({ closedByChildren, implicitNamespacePrefix, contentType = TagContentType.PARSABLE_DATA, closedByParent = false, isVoid = false, ignoreFirstLf = false, preventNamespaceInheritance = false } = {}) {\n        this.closedByChildren = {};\n        this.closedByParent = false;\n        this.canSelfClose = false;\n        if (closedByChildren && closedByChildren.length > 0) {\n            closedByChildren.forEach(tagName => this.closedByChildren[tagName] = true);\n        }\n        this.isVoid = isVoid;\n        this.closedByParent = closedByParent || isVoid;\n        this.implicitNamespacePrefix = implicitNamespacePrefix || null;\n        this.contentType = contentType;\n        this.ignoreFirstLf = ignoreFirstLf;\n        this.preventNamespaceInheritance = preventNamespaceInheritance;\n    }\n    isClosedByChild(name) {\n        return this.isVoid || name.toLowerCase() in this.closedByChildren;\n    }\n    getContentType(prefix) {\n        if (typeof this.contentType === 'object') {\n            const overrideType = prefix === undefined ? undefined : this.contentType[prefix];\n            return overrideType !== null && overrideType !== void 0 ? overrideType : this.contentType.default;\n        }\n        return this.contentType;\n    }\n}\nlet _DEFAULT_TAG_DEFINITION;\n// see https://www.w3.org/TR/html51/syntax.html#optional-tags\n// This implementation does not fully conform to the HTML5 spec.\nlet TAG_DEFINITIONS;\nfunction getHtmlTagDefinition(tagName) {\n    var _a, _b;\n    if (!TAG_DEFINITIONS) {\n        _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();\n        TAG_DEFINITIONS = {\n            'base': new HtmlTagDefinition({ isVoid: true }),\n            'meta': new HtmlTagDefinition({ isVoid: true }),\n            'area': new HtmlTagDefinition({ isVoid: true }),\n            'embed': new HtmlTagDefinition({ isVoid: true }),\n            'link': new HtmlTagDefinition({ isVoid: true }),\n            'img': new HtmlTagDefinition({ isVoid: true }),\n            'input': new HtmlTagDefinition({ isVoid: true }),\n            'param': new HtmlTagDefinition({ isVoid: true }),\n            'hr': new HtmlTagDefinition({ isVoid: true }),\n            'br': new HtmlTagDefinition({ isVoid: true }),\n            'source': new HtmlTagDefinition({ isVoid: true }),\n            'track': new HtmlTagDefinition({ isVoid: true }),\n            'wbr': new HtmlTagDefinition({ isVoid: true }),\n            'p': new HtmlTagDefinition({\n                closedByChildren: [\n                    'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset',\n                    'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5',\n                    'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol',\n                    'p', 'pre', 'section', 'table', 'ul'\n                ],\n                closedByParent: true\n            }),\n            'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),\n            'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),\n            'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),\n            'tr': new HtmlTagDefinition({ closedByChildren: ['tr'], closedByParent: true }),\n            'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n            'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n            'col': new HtmlTagDefinition({ isVoid: true }),\n            'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),\n            'foreignObject': new HtmlTagDefinition({\n                // Usually the implicit namespace here would be redundant since it will be inherited from\n                // the parent `svg`, but we have to do it for `foreignObject`, because the way the parser\n                // works is that the parent node of an end tag is its own start tag which means that\n                // the `preventNamespaceInheritance` on `foreignObject` would have it default to the\n                // implicit namespace which is `html`, unless specified otherwise.\n                implicitNamespacePrefix: 'svg',\n                // We want to prevent children of foreignObject from inheriting its namespace, because\n                // the point of the element is to allow nodes from other namespaces to be inserted.\n                preventNamespaceInheritance: true,\n            }),\n            'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),\n            'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),\n            'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),\n            'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),\n            'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n            'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n            'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),\n            'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n            'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),\n            'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),\n            'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),\n            'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),\n            'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n            'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n            'title': new HtmlTagDefinition({\n                // The browser supports two separate `title` tags which have to use\n                // a different content type: `HTMLTitleElement` and `SVGTitleElement`\n                contentType: { default: TagContentType.ESCAPABLE_RAW_TEXT, svg: TagContentType.PARSABLE_DATA }\n            }),\n            'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),\n        };\n    }\n    // We have to make both a case-sensitive and a case-insesitive lookup, because\n    // HTML tag names are case insensitive, whereas some SVG tags are case sensitive.\n    return (_b = (_a = TAG_DEFINITIONS[tagName]) !== null && _a !== void 0 ? _a : TAG_DEFINITIONS[tagName.toLowerCase()]) !== null && _b !== void 0 ? _b : _DEFAULT_TAG_DEFINITION;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _SELECTOR_REGEXP = new RegExp('(\\\\:not\\\\()|' + // 1: \":not(\"\n    '(([\\\\.\\\\#]?)[-\\\\w]+)|' + // 2: \"tag\"; 3: \".\"/\"#\";\n    // \"-\" should appear first in the regexp below as FF31 parses \"[.-\\w]\" as a range\n    // 4: attribute; 5: attribute_string; 6: attribute_value\n    '(?:\\\\[([-.\\\\w*\\\\\\\\$]+)(?:=([\\\"\\']?)([^\\\\]\\\"\\']*)\\\\5)?\\\\])|' + // \"[name]\", \"[name=value]\",\n    // \"[name=\"value\"]\",\n    // \"[name='value']\"\n    '(\\\\))|' + // 7: \")\"\n    '(\\\\s*,\\\\s*)', // 8: \",\"\n'g');\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nclass CssSelector {\n    constructor() {\n        this.element = null;\n        this.classNames = [];\n        /**\n         * The selectors are encoded in pairs where:\n         * - even locations are attribute names\n         * - odd locations are attribute values.\n         *\n         * Example:\n         * Selector: `[key1=value1][key2]` would parse to:\n         * ```\n         * ['key1', 'value1', 'key2', '']\n         * ```\n         */\n        this.attrs = [];\n        this.notSelectors = [];\n    }\n    static parse(selector) {\n        const results = [];\n        const _addResult = (res, cssSel) => {\n            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&\n                cssSel.attrs.length == 0) {\n                cssSel.element = '*';\n            }\n            res.push(cssSel);\n        };\n        let cssSelector = new CssSelector();\n        let match;\n        let current = cssSelector;\n        let inNot = false;\n        _SELECTOR_REGEXP.lastIndex = 0;\n        while (match = _SELECTOR_REGEXP.exec(selector)) {\n            if (match[1 /* NOT */]) {\n                if (inNot) {\n                    throw new Error('Nesting :not in a selector is not allowed');\n                }\n                inNot = true;\n                current = new CssSelector();\n                cssSelector.notSelectors.push(current);\n            }\n            const tag = match[2 /* TAG */];\n            if (tag) {\n                const prefix = match[3 /* PREFIX */];\n                if (prefix === '#') {\n                    // #hash\n                    current.addAttribute('id', tag.substr(1));\n                }\n                else if (prefix === '.') {\n                    // Class\n                    current.addClassName(tag.substr(1));\n                }\n                else {\n                    // Element\n                    current.setElement(tag);\n                }\n            }\n            const attribute = match[4 /* ATTRIBUTE */];\n            if (attribute) {\n                current.addAttribute(current.unescapeAttribute(attribute), match[6 /* ATTRIBUTE_VALUE */]);\n            }\n            if (match[7 /* NOT_END */]) {\n                inNot = false;\n                current = cssSelector;\n            }\n            if (match[8 /* SEPARATOR */]) {\n                if (inNot) {\n                    throw new Error('Multiple selectors in :not are not supported');\n                }\n                _addResult(results, cssSelector);\n                cssSelector = current = new CssSelector();\n            }\n        }\n        _addResult(results, cssSelector);\n        return results;\n    }\n    /**\n     * Unescape `\\$` sequences from the CSS attribute selector.\n     *\n     * This is needed because `$` can have a special meaning in CSS selectors,\n     * but we might want to match an attribute that contains `$`.\n     * [MDN web link for more\n     * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n     * @param attr the attribute to unescape.\n     * @returns the unescaped string.\n     */\n    unescapeAttribute(attr) {\n        let result = '';\n        let escaping = false;\n        for (let i = 0; i < attr.length; i++) {\n            const char = attr.charAt(i);\n            if (char === '\\\\') {\n                escaping = true;\n                continue;\n            }\n            if (char === '$' && !escaping) {\n                throw new Error(`Error in attribute selector \"${attr}\". ` +\n                    `Unescaped \"$\" is not supported. Please escape with \"\\\\$\".`);\n            }\n            escaping = false;\n            result += char;\n        }\n        return result;\n    }\n    /**\n     * Escape `$` sequences from the CSS attribute selector.\n     *\n     * This is needed because `$` can have a special meaning in CSS selectors,\n     * with this method we are escaping `$` with `\\$'.\n     * [MDN web link for more\n     * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n     * @param attr the attribute to escape.\n     * @returns the escaped string.\n     */\n    escapeAttribute(attr) {\n        return attr.replace(/\\\\/g, '\\\\\\\\').replace(/\\$/g, '\\\\$');\n    }\n    isElementSelector() {\n        return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&\n            this.notSelectors.length === 0;\n    }\n    hasElementSelector() {\n        return !!this.element;\n    }\n    setElement(element = null) {\n        this.element = element;\n    }\n    /** Gets a template string for an element that matches the selector. */\n    getMatchingElementTemplate() {\n        const tagName = this.element || 'div';\n        const classAttr = this.classNames.length > 0 ? ` class=\"${this.classNames.join(' ')}\"` : '';\n        let attrs = '';\n        for (let i = 0; i < this.attrs.length; i += 2) {\n            const attrName = this.attrs[i];\n            const attrValue = this.attrs[i + 1] !== '' ? `=\"${this.attrs[i + 1]}\"` : '';\n            attrs += ` ${attrName}${attrValue}`;\n        }\n        return getHtmlTagDefinition(tagName).isVoid ? `<${tagName}${classAttr}${attrs}/>` :\n            `<${tagName}${classAttr}${attrs}></${tagName}>`;\n    }\n    getAttrs() {\n        const result = [];\n        if (this.classNames.length > 0) {\n            result.push('class', this.classNames.join(' '));\n        }\n        return result.concat(this.attrs);\n    }\n    addAttribute(name, value = '') {\n        this.attrs.push(name, value && value.toLowerCase() || '');\n    }\n    addClassName(name) {\n        this.classNames.push(name.toLowerCase());\n    }\n    toString() {\n        let res = this.element || '';\n        if (this.classNames) {\n            this.classNames.forEach(klass => res += `.${klass}`);\n        }\n        if (this.attrs) {\n            for (let i = 0; i < this.attrs.length; i += 2) {\n                const name = this.escapeAttribute(this.attrs[i]);\n                const value = this.attrs[i + 1];\n                res += `[${name}${value ? '=' + value : ''}]`;\n            }\n        }\n        this.notSelectors.forEach(notSelector => res += `:not(${notSelector})`);\n        return res;\n    }\n}\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nclass SelectorMatcher {\n    constructor() {\n        this._elementMap = new Map();\n        this._elementPartialMap = new Map();\n        this._classMap = new Map();\n        this._classPartialMap = new Map();\n        this._attrValueMap = new Map();\n        this._attrValuePartialMap = new Map();\n        this._listContexts = [];\n    }\n    static createNotMatcher(notSelectors) {\n        const notMatcher = new SelectorMatcher();\n        notMatcher.addSelectables(notSelectors, null);\n        return notMatcher;\n    }\n    addSelectables(cssSelectors, callbackCtxt) {\n        let listContext = null;\n        if (cssSelectors.length > 1) {\n            listContext = new SelectorListContext(cssSelectors);\n            this._listContexts.push(listContext);\n        }\n        for (let i = 0; i < cssSelectors.length; i++) {\n            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n        }\n    }\n    /**\n     * Add an object that can be found later on by calling `match`.\n     * @param cssSelector A css selector\n     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\n     */\n    _addSelectable(cssSelector, callbackCtxt, listContext) {\n        let matcher = this;\n        const element = cssSelector.element;\n        const classNames = cssSelector.classNames;\n        const attrs = cssSelector.attrs;\n        const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n        if (element) {\n            const isTerminal = attrs.length === 0 && classNames.length === 0;\n            if (isTerminal) {\n                this._addTerminal(matcher._elementMap, element, selectable);\n            }\n            else {\n                matcher = this._addPartial(matcher._elementPartialMap, element);\n            }\n        }\n        if (classNames) {\n            for (let i = 0; i < classNames.length; i++) {\n                const isTerminal = attrs.length === 0 && i === classNames.length - 1;\n                const className = classNames[i];\n                if (isTerminal) {\n                    this._addTerminal(matcher._classMap, className, selectable);\n                }\n                else {\n                    matcher = this._addPartial(matcher._classPartialMap, className);\n                }\n            }\n        }\n        if (attrs) {\n            for (let i = 0; i < attrs.length; i += 2) {\n                const isTerminal = i === attrs.length - 2;\n                const name = attrs[i];\n                const value = attrs[i + 1];\n                if (isTerminal) {\n                    const terminalMap = matcher._attrValueMap;\n                    let terminalValuesMap = terminalMap.get(name);\n                    if (!terminalValuesMap) {\n                        terminalValuesMap = new Map();\n                        terminalMap.set(name, terminalValuesMap);\n                    }\n                    this._addTerminal(terminalValuesMap, value, selectable);\n                }\n                else {\n                    const partialMap = matcher._attrValuePartialMap;\n                    let partialValuesMap = partialMap.get(name);\n                    if (!partialValuesMap) {\n                        partialValuesMap = new Map();\n                        partialMap.set(name, partialValuesMap);\n                    }\n                    matcher = this._addPartial(partialValuesMap, value);\n                }\n            }\n        }\n    }\n    _addTerminal(map, name, selectable) {\n        let terminalList = map.get(name);\n        if (!terminalList) {\n            terminalList = [];\n            map.set(name, terminalList);\n        }\n        terminalList.push(selectable);\n    }\n    _addPartial(map, name) {\n        let matcher = map.get(name);\n        if (!matcher) {\n            matcher = new SelectorMatcher();\n            map.set(name, matcher);\n        }\n        return matcher;\n    }\n    /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param cssSelector A css selector\n     * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return boolean true if a match was found\n     */\n    match(cssSelector, matchedCallback) {\n        let result = false;\n        const element = cssSelector.element;\n        const classNames = cssSelector.classNames;\n        const attrs = cssSelector.attrs;\n        for (let i = 0; i < this._listContexts.length; i++) {\n            this._listContexts[i].alreadyMatched = false;\n        }\n        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||\n            result;\n        if (classNames) {\n            for (let i = 0; i < classNames.length; i++) {\n                const className = classNames[i];\n                result =\n                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n                result =\n                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||\n                        result;\n            }\n        }\n        if (attrs) {\n            for (let i = 0; i < attrs.length; i += 2) {\n                const name = attrs[i];\n                const value = attrs[i + 1];\n                const terminalValuesMap = this._attrValueMap.get(name);\n                if (value) {\n                    result =\n                        this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n                }\n                result =\n                    this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n                const partialValuesMap = this._attrValuePartialMap.get(name);\n                if (value) {\n                    result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n                }\n                result =\n                    this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n            }\n        }\n        return result;\n    }\n    /** @internal */\n    _matchTerminal(map, name, cssSelector, matchedCallback) {\n        if (!map || typeof name !== 'string') {\n            return false;\n        }\n        let selectables = map.get(name) || [];\n        const starSelectables = map.get('*');\n        if (starSelectables) {\n            selectables = selectables.concat(starSelectables);\n        }\n        if (selectables.length === 0) {\n            return false;\n        }\n        let selectable;\n        let result = false;\n        for (let i = 0; i < selectables.length; i++) {\n            selectable = selectables[i];\n            result = selectable.finalize(cssSelector, matchedCallback) || result;\n        }\n        return result;\n    }\n    /** @internal */\n    _matchPartial(map, name, cssSelector, matchedCallback) {\n        if (!map || typeof name !== 'string') {\n            return false;\n        }\n        const nestedSelector = map.get(name);\n        if (!nestedSelector) {\n            return false;\n        }\n        // TODO(perf): get rid of recursion and measure again\n        // TODO(perf): don't pass the whole selector into the recursion,\n        // but only the not processed parts\n        return nestedSelector.match(cssSelector, matchedCallback);\n    }\n}\nclass SelectorListContext {\n    constructor(selectors) {\n        this.selectors = selectors;\n        this.alreadyMatched = false;\n    }\n}\n// Store context to pass back selector and context when a selector is matched\nclass SelectorContext {\n    constructor(selector, cbContext, listContext) {\n        this.selector = selector;\n        this.cbContext = cbContext;\n        this.listContext = listContext;\n        this.notSelectors = selector.notSelectors;\n    }\n    finalize(cssSelector, callback) {\n        let result = true;\n        if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n            const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n            result = !notMatcher.match(cssSelector, null);\n        }\n        if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n            if (this.listContext) {\n                this.listContext.alreadyMatched = true;\n            }\n            callback(this.selector, this.cbContext);\n        }\n        return result;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst createInject = makeMetadataFactory('Inject', (token) => ({ token }));\nconst createInjectionToken = makeMetadataFactory('InjectionToken', (desc) => ({ _desc: desc, ɵprov: undefined }));\nconst createAttribute = makeMetadataFactory('Attribute', (attributeName) => ({ attributeName }));\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\nconst emitDistinctChangesOnlyDefaultValue = true;\nconst createContentChildren = makeMetadataFactory('ContentChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: false, descendants: false, emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue }, data)));\nconst createContentChild = makeMetadataFactory('ContentChild', (selector, data = {}) => (Object.assign({ selector, first: true, isViewQuery: false, descendants: true }, data)));\nconst createViewChildren = makeMetadataFactory('ViewChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: true, descendants: true, emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue }, data)));\nconst createViewChild = makeMetadataFactory('ViewChild', (selector, data) => (Object.assign({ selector, first: true, isViewQuery: true, descendants: true }, data)));\nconst createDirective = makeMetadataFactory('Directive', (dir = {}) => dir);\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\nconst createComponent = makeMetadataFactory('Component', (c = {}) => (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c)));\nconst createPipe = makeMetadataFactory('Pipe', (p) => (Object.assign({ pure: true }, p)));\nconst createInput = makeMetadataFactory('Input', (bindingPropertyName) => ({ bindingPropertyName }));\nconst createOutput = makeMetadataFactory('Output', (bindingPropertyName) => ({ bindingPropertyName }));\nconst createHostBinding = makeMetadataFactory('HostBinding', (hostPropertyName) => ({ hostPropertyName }));\nconst createHostListener = makeMetadataFactory('HostListener', (eventName, args) => ({ eventName, args }));\nconst createNgModule = makeMetadataFactory('NgModule', (ngModule) => ngModule);\nconst createInjectable = makeMetadataFactory('Injectable', (injectable = {}) => injectable);\nconst CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\nconst NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\nconst createOptional = makeMetadataFactory('Optional');\nconst createSelf = makeMetadataFactory('Self');\nconst createSkipSelf = makeMetadataFactory('SkipSelf');\nconst createHost = makeMetadataFactory('Host');\nconst Type$1 = Function;\nvar SecurityContext;\n(function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\nvar MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\nfunction makeMetadataFactory(name, props) {\n    // This must be declared as a function, not a fat arrow, so that ES2015 devmode produces code\n    // that works with the static_reflector.ts in the ViewEngine compiler.\n    // In particular, `_registerDecoratorOrConstructor` assumes that the value returned here can be\n    // new'ed.\n    function factory(...args) {\n        const values = props ? props(...args) : {};\n        return Object.assign({ ngMetadataName: name }, values);\n    }\n    factory.isTypeOf = (obj) => obj && obj.ngMetadataName === name;\n    factory.ngMetadataName = name;\n    return factory;\n}\nfunction parserSelectorToSimpleSelector(selector) {\n    const classes = selector.classNames && selector.classNames.length ?\n        [8 /* CLASS */, ...selector.classNames] :\n        [];\n    const elementName = selector.element && selector.element !== '*' ? selector.element : '';\n    return [elementName, ...selector.attrs, ...classes];\n}\nfunction parserSelectorToNegativeSelector(selector) {\n    const classes = selector.classNames && selector.classNames.length ?\n        [8 /* CLASS */, ...selector.classNames] :\n        [];\n    if (selector.element) {\n        return [\n            1 /* NOT */ | 4 /* ELEMENT */, selector.element, ...selector.attrs, ...classes\n        ];\n    }\n    else if (selector.attrs.length) {\n        return [1 /* NOT */ | 2 /* ATTRIBUTE */, ...selector.attrs, ...classes];\n    }\n    else {\n        return selector.classNames && selector.classNames.length ?\n            [1 /* NOT */ | 8 /* CLASS */, ...selector.classNames] :\n            [];\n    }\n}\nfunction parserSelectorToR3Selector(selector) {\n    const positive = parserSelectorToSimpleSelector(selector);\n    const negative = selector.notSelectors && selector.notSelectors.length ?\n        selector.notSelectors.map(notSelector => parserSelectorToNegativeSelector(notSelector)) :\n        [];\n    return positive.concat(...negative);\n}\nfunction parseSelectorToR3Selector(selector) {\n    return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];\n}\n\nvar core = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    createInject: createInject,\n    createInjectionToken: createInjectionToken,\n    createAttribute: createAttribute,\n    emitDistinctChangesOnlyDefaultValue: emitDistinctChangesOnlyDefaultValue,\n    createContentChildren: createContentChildren,\n    createContentChild: createContentChild,\n    createViewChildren: createViewChildren,\n    createViewChild: createViewChild,\n    createDirective: createDirective,\n    get ViewEncapsulation () { return ViewEncapsulation; },\n    get ChangeDetectionStrategy () { return ChangeDetectionStrategy; },\n    createComponent: createComponent,\n    createPipe: createPipe,\n    createInput: createInput,\n    createOutput: createOutput,\n    createHostBinding: createHostBinding,\n    createHostListener: createHostListener,\n    createNgModule: createNgModule,\n    createInjectable: createInjectable,\n    CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,\n    NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,\n    createOptional: createOptional,\n    createSelf: createSelf,\n    createSkipSelf: createSkipSelf,\n    createHost: createHost,\n    Type: Type$1,\n    get SecurityContext () { return SecurityContext; },\n    get MissingTranslationStrategy () { return MissingTranslationStrategy; },\n    parseSelectorToR3Selector: parseSelectorToR3Selector\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\nfunction dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());\n}\nfunction splitAtColon(input, defaultValues) {\n    return _splitAt(input, ':', defaultValues);\n}\nfunction splitAtPeriod(input, defaultValues) {\n    return _splitAt(input, '.', defaultValues);\n}\nfunction _splitAt(input, character, defaultValues) {\n    const characterIndex = input.indexOf(character);\n    if (characterIndex == -1)\n        return defaultValues;\n    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\n}\nfunction visitValue(value, visitor, context) {\n    if (Array.isArray(value)) {\n        return visitor.visitArray(value, context);\n    }\n    if (isStrictStringMap(value)) {\n        return visitor.visitStringMap(value, context);\n    }\n    if (value == null || typeof value == 'string' || typeof value == 'number' ||\n        typeof value == 'boolean') {\n        return visitor.visitPrimitive(value, context);\n    }\n    return visitor.visitOther(value, context);\n}\nfunction isDefined(val) {\n    return val !== null && val !== undefined;\n}\nfunction noUndefined(val) {\n    return val === undefined ? null : val;\n}\nclass ValueTransformer {\n    visitArray(arr, context) {\n        return arr.map(value => visitValue(value, this, context));\n    }\n    visitStringMap(map, context) {\n        const result = {};\n        Object.keys(map).forEach(key => {\n            result[key] = visitValue(map[key], this, context);\n        });\n        return result;\n    }\n    visitPrimitive(value, context) {\n        return value;\n    }\n    visitOther(value, context) {\n        return value;\n    }\n}\nconst SyncAsync = {\n    assertSync: (value) => {\n        if (isPromise(value)) {\n            throw new Error(`Illegal state: value cannot be a promise`);\n        }\n        return value;\n    },\n    then: (value, cb) => {\n        return isPromise(value) ? value.then(cb) : cb(value);\n    },\n    all: (syncAsyncValues) => {\n        return syncAsyncValues.some(isPromise) ? Promise.all(syncAsyncValues) : syncAsyncValues;\n    }\n};\nfunction error(msg) {\n    throw new Error(`Internal Error: ${msg}`);\n}\n// Escape characters that have a special meaning in Regular Expressions\nfunction escapeRegExp(s) {\n    return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\nconst STRING_MAP_PROTO = Object.getPrototypeOf({});\nfunction isStrictStringMap(obj) {\n    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n}\nfunction utf8Encode(str) {\n    let encoded = [];\n    for (let index = 0; index < str.length; index++) {\n        let codePoint = str.charCodeAt(index);\n        // decode surrogate\n        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > (index + 1)) {\n            const low = str.charCodeAt(index + 1);\n            if (low >= 0xdc00 && low <= 0xdfff) {\n                index++;\n                codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;\n            }\n        }\n        if (codePoint <= 0x7f) {\n            encoded.push(codePoint);\n        }\n        else if (codePoint <= 0x7ff) {\n            encoded.push(((codePoint >> 6) & 0x1F) | 0xc0, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0xffff) {\n            encoded.push((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0x1fffff) {\n            encoded.push(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n    }\n    return encoded;\n}\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (Array.isArray(token)) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    if (!token.toString) {\n        return 'object';\n    }\n    // WARNING: do not try to `JSON.stringify(token)` here\n    // see https://github.com/angular/angular/issues/23440\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n */\nfunction resolveForwardRef(type) {\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__')) {\n        return type();\n    }\n    else {\n        return type;\n    }\n}\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\nclass Version {\n    constructor(full) {\n        this.full = full;\n        const splits = full.split('.');\n        this.major = splits[0];\n        this.minor = splits[1];\n        this.patch = splits.slice(2).join('.');\n    }\n}\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\n// Check __global first, because in Node tests both __global and __window may be defined and _global\n// should be __global in that case.\nconst _global = __global || __window || __self;\nfunction newArray(size, value) {\n    const list = [];\n    for (let i = 0; i < size; i++) {\n        list.push(value);\n    }\n    return list;\n}\n/**\n * Partitions a given array into 2 arrays, based on a boolean value returned by the condition\n * function.\n *\n * @param arr Input array that should be partitioned\n * @param conditionFn Condition function that is called for each item in a given array and returns a\n * boolean value.\n */\nfunction partitionArray(arr, conditionFn) {\n    const truthy = [];\n    const falsy = [];\n    for (const item of arr) {\n        (conditionFn(item) ? truthy : falsy).push(item);\n    }\n    return [truthy, falsy];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a big integer using a buffer of its individual digits, with the least significant\n * digit stored at the beginning of the array (little endian).\n *\n * For performance reasons, each instance is mutable. The addition operation can be done in-place\n * to reduce memory pressure of allocation for the digits array.\n */\nclass BigInteger {\n    /**\n     * Creates a big integer using its individual digits in little endian storage.\n     */\n    constructor(digits) {\n        this.digits = digits;\n    }\n    static zero() {\n        return new BigInteger([0]);\n    }\n    static one() {\n        return new BigInteger([1]);\n    }\n    /**\n     * Creates a clone of this instance.\n     */\n    clone() {\n        return new BigInteger(this.digits.slice());\n    }\n    /**\n     * Returns a new big integer with the sum of `this` and `other` as its value. This does not mutate\n     * `this` but instead returns a new instance, unlike `addToSelf`.\n     */\n    add(other) {\n        const result = this.clone();\n        result.addToSelf(other);\n        return result;\n    }\n    /**\n     * Adds `other` to the instance itself, thereby mutating its value.\n     */\n    addToSelf(other) {\n        const maxNrOfDigits = Math.max(this.digits.length, other.digits.length);\n        let carry = 0;\n        for (let i = 0; i < maxNrOfDigits; i++) {\n            let digitSum = carry;\n            if (i < this.digits.length) {\n                digitSum += this.digits[i];\n            }\n            if (i < other.digits.length) {\n                digitSum += other.digits[i];\n            }\n            if (digitSum >= 10) {\n                this.digits[i] = digitSum - 10;\n                carry = 1;\n            }\n            else {\n                this.digits[i] = digitSum;\n                carry = 0;\n            }\n        }\n        // Apply a remaining carry if needed.\n        if (carry > 0) {\n            this.digits[maxNrOfDigits] = 1;\n        }\n    }\n    /**\n     * Builds the decimal string representation of the big integer. As this is stored in\n     * little endian, the digits are concatenated in reverse order.\n     */\n    toString() {\n        let res = '';\n        for (let i = this.digits.length - 1; i >= 0; i--) {\n            res += this.digits[i];\n        }\n        return res;\n    }\n}\n/**\n * Represents a big integer which is optimized for multiplication operations, as its power-of-twos\n * are memoized. See `multiplyBy()` for details on the multiplication algorithm.\n */\nclass BigIntForMultiplication {\n    constructor(value) {\n        this.powerOfTwos = [value];\n    }\n    /**\n     * Returns the big integer itself.\n     */\n    getValue() {\n        return this.powerOfTwos[0];\n    }\n    /**\n     * Computes the value for `num * b`, where `num` is a JS number and `b` is a big integer. The\n     * value for `b` is represented by a storage model that is optimized for this computation.\n     *\n     * This operation is implemented in N(log2(num)) by continuous halving of the number, where the\n     * least-significant bit (LSB) is tested in each iteration. If the bit is set, the bit's index is\n     * used as exponent into the power-of-two multiplication of `b`.\n     *\n     * As an example, consider the multiplication num=42, b=1337. In binary 42 is 0b00101010 and the\n     * algorithm unrolls into the following iterations:\n     *\n     *  Iteration | num        | LSB  | b * 2^iter | Add? | product\n     * -----------|------------|------|------------|------|--------\n     *  0         | 0b00101010 | 0    | 1337       | No   | 0\n     *  1         | 0b00010101 | 1    | 2674       | Yes  | 2674\n     *  2         | 0b00001010 | 0    | 5348       | No   | 2674\n     *  3         | 0b00000101 | 1    | 10696      | Yes  | 13370\n     *  4         | 0b00000010 | 0    | 21392      | No   | 13370\n     *  5         | 0b00000001 | 1    | 42784      | Yes  | 56154\n     *  6         | 0b00000000 | 0    | 85568      | No   | 56154\n     *\n     * The computed product of 56154 is indeed the correct result.\n     *\n     * The `BigIntForMultiplication` representation for a big integer provides memoized access to the\n     * power-of-two values to reduce the workload in computing those values.\n     */\n    multiplyBy(num) {\n        const product = BigInteger.zero();\n        this.multiplyByAndAddTo(num, product);\n        return product;\n    }\n    /**\n     * See `multiplyBy()` for details. This function allows for the computed product to be added\n     * directly to the provided result big integer.\n     */\n    multiplyByAndAddTo(num, result) {\n        for (let exponent = 0; num !== 0; num = num >>> 1, exponent++) {\n            if (num & 1) {\n                const value = this.getMultipliedByPowerOfTwo(exponent);\n                result.addToSelf(value);\n            }\n        }\n    }\n    /**\n     * Computes and memoizes the big integer value for `this.number * 2^exponent`.\n     */\n    getMultipliedByPowerOfTwo(exponent) {\n        // Compute the powers up until the requested exponent, where each value is computed from its\n        // predecessor. This is simple as `this.number * 2^(exponent - 1)` only has to be doubled (i.e.\n        // added to itself) to reach `this.number * 2^exponent`.\n        for (let i = this.powerOfTwos.length; i <= exponent; i++) {\n            const previousPower = this.powerOfTwos[i - 1];\n            this.powerOfTwos[i] = previousPower.add(previousPower);\n        }\n        return this.powerOfTwos[exponent];\n    }\n}\n/**\n * Represents an exponentiation operation for the provided base, of which exponents are computed and\n * memoized. The results are represented by a `BigIntForMultiplication` which is tailored for\n * multiplication operations by memoizing the power-of-twos. This effectively results in a matrix\n * representation that is lazily computed upon request.\n */\nclass BigIntExponentiation {\n    constructor(base) {\n        this.base = base;\n        this.exponents = [new BigIntForMultiplication(BigInteger.one())];\n    }\n    /**\n     * Compute the value for `this.base^exponent`, resulting in a big integer that is optimized for\n     * further multiplication operations.\n     */\n    toThePowerOf(exponent) {\n        // Compute the results up until the requested exponent, where every value is computed from its\n        // predecessor. This is because `this.base^(exponent - 1)` only has to be multiplied by `base`\n        // to reach `this.base^exponent`.\n        for (let i = this.exponents.length; i <= exponent; i++) {\n            const value = this.exponents[i - 1].multiplyBy(this.base);\n            this.exponents[i] = new BigIntForMultiplication(value);\n        }\n        return this.exponents[exponent];\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Return the message id or compute it using the XLIFF1 digest.\n */\nfunction digest$1(message) {\n    return message.id || computeDigest(message);\n}\n/**\n * Compute the message id using the XLIFF1 digest.\n */\nfunction computeDigest(message) {\n    return sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\n}\n/**\n * Return the message id or compute it using the XLIFF2/XMB/$localize digest.\n */\nfunction decimalDigest(message) {\n    return message.id || computeDecimalDigest(message);\n}\n/**\n * Compute the message id using the XLIFF2/XMB/$localize digest.\n */\nfunction computeDecimalDigest(message) {\n    const visitor = new _SerializerIgnoreIcuExpVisitor();\n    const parts = message.nodes.map(a => a.visit(visitor, null));\n    return computeMsgId(parts.join(''), message.meaning);\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * @internal\n */\nclass _SerializerVisitor {\n    visitText(text, context) {\n        return text.value;\n    }\n    visitContainer(container, context) {\n        return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n    }\n    visitIcu(icu, context) {\n        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n    }\n    visitTagPlaceholder(ph, context) {\n        return ph.isVoid ?\n            `<ph tag name=\"${ph.startName}\"/>` :\n            `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n    }\n    visitPlaceholder(ph, context) {\n        return ph.value ? `<ph name=\"${ph.name}\">${ph.value}</ph>` : `<ph name=\"${ph.name}\"/>`;\n    }\n    visitIcuPlaceholder(ph, context) {\n        return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n    }\n}\nconst serializerVisitor$1 = new _SerializerVisitor();\nfunction serializeNodes(nodes) {\n    return nodes.map(a => a.visit(serializerVisitor$1, null));\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * @internal\n */\nclass _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {\n    visitIcu(icu, context) {\n        let strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        // Do not take the expression into account\n        return `{${icu.type}, ${strCases.join(', ')}}`;\n    }\n}\n/**\n * Compute the SHA1 of the given string\n *\n * see https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n *\n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n */\nfunction sha1(str) {\n    const utf8 = utf8Encode(str);\n    const words32 = bytesToWords32(utf8, Endian.Big);\n    const len = utf8.length * 8;\n    const w = newArray(80);\n    let a = 0x67452301, b = 0xefcdab89, c = 0x98badcfe, d = 0x10325476, e = 0xc3d2e1f0;\n    words32[len >> 5] |= 0x80 << (24 - len % 32);\n    words32[((len + 64 >> 9) << 4) + 15] = len;\n    for (let i = 0; i < words32.length; i += 16) {\n        const h0 = a, h1 = b, h2 = c, h3 = d, h4 = e;\n        for (let j = 0; j < 80; j++) {\n            if (j < 16) {\n                w[j] = words32[i + j];\n            }\n            else {\n                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n            }\n            const fkVal = fk(j, b, c, d);\n            const f = fkVal[0];\n            const k = fkVal[1];\n            const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n            e = d;\n            d = c;\n            c = rol32(b, 30);\n            b = a;\n            a = temp;\n        }\n        a = add32(a, h0);\n        b = add32(b, h1);\n        c = add32(c, h2);\n        d = add32(d, h3);\n        e = add32(e, h4);\n    }\n    return bytesToHexString(words32ToByteString([a, b, c, d, e]));\n}\nfunction fk(index, b, c, d) {\n    if (index < 20) {\n        return [(b & c) | (~b & d), 0x5a827999];\n    }\n    if (index < 40) {\n        return [b ^ c ^ d, 0x6ed9eba1];\n    }\n    if (index < 60) {\n        return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n    }\n    return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\n * Compute the fingerprint of the given string\n *\n * The output is 64 bit number encoded as a decimal string\n *\n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n */\nfunction fingerprint(str) {\n    const utf8 = utf8Encode(str);\n    let hi = hash32(utf8, 0);\n    let lo = hash32(utf8, 102072);\n    if (hi == 0 && (lo == 0 || lo == 1)) {\n        hi = hi ^ 0x130f9bef;\n        lo = lo ^ -0x6b5f56d8;\n    }\n    return [hi, lo];\n}\nfunction computeMsgId(msg, meaning = '') {\n    let msgFingerprint = fingerprint(msg);\n    if (meaning) {\n        const meaningFingerprint = fingerprint(meaning);\n        msgFingerprint = add64(rol64(msgFingerprint, 1), meaningFingerprint);\n    }\n    const hi = msgFingerprint[0];\n    const lo = msgFingerprint[1];\n    return wordsToDecimalString(hi & 0x7fffffff, lo);\n}\nfunction hash32(bytes, c) {\n    let a = 0x9e3779b9, b = 0x9e3779b9;\n    let i;\n    const len = bytes.length;\n    for (i = 0; i + 12 <= len; i += 12) {\n        a = add32(a, wordAt(bytes, i, Endian.Little));\n        b = add32(b, wordAt(bytes, i + 4, Endian.Little));\n        c = add32(c, wordAt(bytes, i + 8, Endian.Little));\n        const res = mix(a, b, c);\n        a = res[0], b = res[1], c = res[2];\n    }\n    a = add32(a, wordAt(bytes, i, Endian.Little));\n    b = add32(b, wordAt(bytes, i + 4, Endian.Little));\n    // the first byte of c is reserved for the length\n    c = add32(c, len);\n    c = add32(c, wordAt(bytes, i + 8, Endian.Little) << 8);\n    return mix(a, b, c)[2];\n}\n// clang-format off\nfunction mix(a, b, c) {\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 13;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 8;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 13;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 12;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 16;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 5;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 3;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 10;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 15;\n    return [a, b, c];\n}\n// clang-format on\n// Utils\nvar Endian;\n(function (Endian) {\n    Endian[Endian[\"Little\"] = 0] = \"Little\";\n    Endian[Endian[\"Big\"] = 1] = \"Big\";\n})(Endian || (Endian = {}));\nfunction add32(a, b) {\n    return add32to64(a, b)[1];\n}\nfunction add32to64(a, b) {\n    const low = (a & 0xffff) + (b & 0xffff);\n    const high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n    return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\nfunction add64(a, b) {\n    const ah = a[0], al = a[1];\n    const bh = b[0], bl = b[1];\n    const result = add32to64(al, bl);\n    const carry = result[0];\n    const l = result[1];\n    const h = add32(add32(ah, bh), carry);\n    return [h, l];\n}\nfunction sub32(a, b) {\n    const low = (a & 0xffff) - (b & 0xffff);\n    const high = (a >> 16) - (b >> 16) + (low >> 16);\n    return (high << 16) | (low & 0xffff);\n}\n// Rotate a 32b number left `count` position\nfunction rol32(a, count) {\n    return (a << count) | (a >>> (32 - count));\n}\n// Rotate a 64b number left `count` position\nfunction rol64(num, count) {\n    const hi = num[0], lo = num[1];\n    const h = (hi << count) | (lo >>> (32 - count));\n    const l = (lo << count) | (hi >>> (32 - count));\n    return [h, l];\n}\nfunction bytesToWords32(bytes, endian) {\n    const size = (bytes.length + 3) >>> 2;\n    const words32 = [];\n    for (let i = 0; i < size; i++) {\n        words32[i] = wordAt(bytes, i * 4, endian);\n    }\n    return words32;\n}\nfunction byteAt(bytes, index) {\n    return index >= bytes.length ? 0 : bytes[index];\n}\nfunction wordAt(bytes, index, endian) {\n    let word = 0;\n    if (endian === Endian.Big) {\n        for (let i = 0; i < 4; i++) {\n            word += byteAt(bytes, index + i) << (24 - 8 * i);\n        }\n    }\n    else {\n        for (let i = 0; i < 4; i++) {\n            word += byteAt(bytes, index + i) << 8 * i;\n        }\n    }\n    return word;\n}\nfunction words32ToByteString(words32) {\n    return words32.reduce((bytes, word) => bytes.concat(word32ToByteString(word)), []);\n}\nfunction word32ToByteString(word) {\n    let bytes = [];\n    for (let i = 0; i < 4; i++) {\n        bytes.push((word >>> 8 * (3 - i)) & 0xff);\n    }\n    return bytes;\n}\nfunction bytesToHexString(bytes) {\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        const b = byteAt(bytes, i);\n        hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n    }\n    return hex.toLowerCase();\n}\n/**\n * Create a shared exponentiation pool for base-256 computations. This shared pool provides memoized\n * power-of-256 results with memoized power-of-two computations for efficient multiplication.\n *\n * For our purposes, this can be safely stored as a global without memory concerns. The reason is\n * that we encode two words, so only need the 0th (for the low word) and 4th (for the high word)\n * exponent.\n */\nconst base256 = new BigIntExponentiation(256);\n/**\n * Represents two 32-bit words as a single decimal number. This requires a big integer storage\n * model as JS numbers are not accurate enough to represent the 64-bit number.\n *\n * Based on https://www.danvk.org/hex2dec.html\n */\nfunction wordsToDecimalString(hi, lo) {\n    // Encode the four bytes in lo in the lower digits of the decimal number.\n    // Note: the multiplication results in lo itself but represented by a big integer using its\n    // decimal digits.\n    const decimal = base256.toThePowerOf(0).multiplyBy(lo);\n    // Encode the four bytes in hi above the four lo bytes. lo is a maximum of (2^8)^4, which is why\n    // this multiplication factor is applied.\n    base256.toThePowerOf(4).multiplyByAndAddTo(hi, decimal);\n    return decimal.toString();\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n//// Types\nvar TypeModifier;\n(function (TypeModifier) {\n    TypeModifier[TypeModifier[\"Const\"] = 0] = \"Const\";\n})(TypeModifier || (TypeModifier = {}));\nclass Type {\n    constructor(modifiers = []) {\n        this.modifiers = modifiers;\n    }\n    hasModifier(modifier) {\n        return this.modifiers.indexOf(modifier) !== -1;\n    }\n}\nvar BuiltinTypeName;\n(function (BuiltinTypeName) {\n    BuiltinTypeName[BuiltinTypeName[\"Dynamic\"] = 0] = \"Dynamic\";\n    BuiltinTypeName[BuiltinTypeName[\"Bool\"] = 1] = \"Bool\";\n    BuiltinTypeName[BuiltinTypeName[\"String\"] = 2] = \"String\";\n    BuiltinTypeName[BuiltinTypeName[\"Int\"] = 3] = \"Int\";\n    BuiltinTypeName[BuiltinTypeName[\"Number\"] = 4] = \"Number\";\n    BuiltinTypeName[BuiltinTypeName[\"Function\"] = 5] = \"Function\";\n    BuiltinTypeName[BuiltinTypeName[\"Inferred\"] = 6] = \"Inferred\";\n    BuiltinTypeName[BuiltinTypeName[\"None\"] = 7] = \"None\";\n})(BuiltinTypeName || (BuiltinTypeName = {}));\nclass BuiltinType extends Type {\n    constructor(name, modifiers) {\n        super(modifiers);\n        this.name = name;\n    }\n    visitType(visitor, context) {\n        return visitor.visitBuiltinType(this, context);\n    }\n}\nclass ExpressionType extends Type {\n    constructor(value, modifiers, typeParams = null) {\n        super(modifiers);\n        this.value = value;\n        this.typeParams = typeParams;\n    }\n    visitType(visitor, context) {\n        return visitor.visitExpressionType(this, context);\n    }\n}\nclass ArrayType extends Type {\n    constructor(of, modifiers) {\n        super(modifiers);\n        this.of = of;\n    }\n    visitType(visitor, context) {\n        return visitor.visitArrayType(this, context);\n    }\n}\nclass MapType extends Type {\n    constructor(valueType, modifiers) {\n        super(modifiers);\n        this.valueType = valueType || null;\n    }\n    visitType(visitor, context) {\n        return visitor.visitMapType(this, context);\n    }\n}\nconst DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nconst INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);\nconst BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nconst INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nconst NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nconst STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nconst FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\nconst NONE_TYPE = new BuiltinType(BuiltinTypeName.None);\n///// Expressions\nvar UnaryOperator;\n(function (UnaryOperator) {\n    UnaryOperator[UnaryOperator[\"Minus\"] = 0] = \"Minus\";\n    UnaryOperator[UnaryOperator[\"Plus\"] = 1] = \"Plus\";\n})(UnaryOperator || (UnaryOperator = {}));\nvar BinaryOperator;\n(function (BinaryOperator) {\n    BinaryOperator[BinaryOperator[\"Equals\"] = 0] = \"Equals\";\n    BinaryOperator[BinaryOperator[\"NotEquals\"] = 1] = \"NotEquals\";\n    BinaryOperator[BinaryOperator[\"Identical\"] = 2] = \"Identical\";\n    BinaryOperator[BinaryOperator[\"NotIdentical\"] = 3] = \"NotIdentical\";\n    BinaryOperator[BinaryOperator[\"Minus\"] = 4] = \"Minus\";\n    BinaryOperator[BinaryOperator[\"Plus\"] = 5] = \"Plus\";\n    BinaryOperator[BinaryOperator[\"Divide\"] = 6] = \"Divide\";\n    BinaryOperator[BinaryOperator[\"Multiply\"] = 7] = \"Multiply\";\n    BinaryOperator[BinaryOperator[\"Modulo\"] = 8] = \"Modulo\";\n    BinaryOperator[BinaryOperator[\"And\"] = 9] = \"And\";\n    BinaryOperator[BinaryOperator[\"Or\"] = 10] = \"Or\";\n    BinaryOperator[BinaryOperator[\"BitwiseAnd\"] = 11] = \"BitwiseAnd\";\n    BinaryOperator[BinaryOperator[\"Lower\"] = 12] = \"Lower\";\n    BinaryOperator[BinaryOperator[\"LowerEquals\"] = 13] = \"LowerEquals\";\n    BinaryOperator[BinaryOperator[\"Bigger\"] = 14] = \"Bigger\";\n    BinaryOperator[BinaryOperator[\"BiggerEquals\"] = 15] = \"BiggerEquals\";\n    BinaryOperator[BinaryOperator[\"NullishCoalesce\"] = 16] = \"NullishCoalesce\";\n})(BinaryOperator || (BinaryOperator = {}));\nfunction nullSafeIsEquivalent(base, other) {\n    if (base == null || other == null) {\n        return base == other;\n    }\n    return base.isEquivalent(other);\n}\nfunction areAllEquivalentPredicate(base, other, equivalentPredicate) {\n    const len = base.length;\n    if (len !== other.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (!equivalentPredicate(base[i], other[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction areAllEquivalent(base, other) {\n    return areAllEquivalentPredicate(base, other, (baseElement, otherElement) => baseElement.isEquivalent(otherElement));\n}\nclass Expression {\n    constructor(type, sourceSpan) {\n        this.type = type || null;\n        this.sourceSpan = sourceSpan || null;\n    }\n    prop(name, sourceSpan) {\n        return new ReadPropExpr(this, name, null, sourceSpan);\n    }\n    key(index, type, sourceSpan) {\n        return new ReadKeyExpr(this, index, type, sourceSpan);\n    }\n    callFn(params, sourceSpan, pure) {\n        return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);\n    }\n    instantiate(params, type, sourceSpan) {\n        return new InstantiateExpr(this, params, type, sourceSpan);\n    }\n    conditional(trueCase, falseCase = null, sourceSpan) {\n        return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\n    }\n    equals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\n    }\n    notEquals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\n    }\n    identical(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\n    }\n    notIdentical(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\n    }\n    minus(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\n    }\n    plus(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\n    }\n    divide(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\n    }\n    multiply(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\n    }\n    modulo(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\n    }\n    and(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\n    }\n    bitwiseAnd(rhs, sourceSpan, parens = true) {\n        return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);\n    }\n    or(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\n    }\n    lower(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\n    }\n    lowerEquals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\n    }\n    bigger(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\n    }\n    biggerEquals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\n    }\n    isBlank(sourceSpan) {\n        // Note: We use equals by purpose here to compare to null and undefined in JS.\n        // We use the typed null to allow strictNullChecks to narrow types.\n        return this.equals(TYPED_NULL_EXPR, sourceSpan);\n    }\n    cast(type, sourceSpan) {\n        return new CastExpr(this, type, sourceSpan);\n    }\n    nullishCoalesce(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NullishCoalesce, this, rhs, null, sourceSpan);\n    }\n    toStmt() {\n        return new ExpressionStatement(this, null);\n    }\n}\nvar BuiltinVar;\n(function (BuiltinVar) {\n    BuiltinVar[BuiltinVar[\"This\"] = 0] = \"This\";\n    BuiltinVar[BuiltinVar[\"Super\"] = 1] = \"Super\";\n    BuiltinVar[BuiltinVar[\"CatchError\"] = 2] = \"CatchError\";\n    BuiltinVar[BuiltinVar[\"CatchStack\"] = 3] = \"CatchStack\";\n})(BuiltinVar || (BuiltinVar = {}));\nclass ReadVarExpr extends Expression {\n    constructor(name, type, sourceSpan) {\n        super(type, sourceSpan);\n        if (typeof name === 'string') {\n            this.name = name;\n            this.builtin = null;\n        }\n        else {\n            this.name = null;\n            this.builtin = name;\n        }\n    }\n    isEquivalent(e) {\n        return e instanceof ReadVarExpr && this.name === e.name && this.builtin === e.builtin;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitReadVarExpr(this, context);\n    }\n    set(value) {\n        if (!this.name) {\n            throw new Error(`Built in variable ${this.builtin} can not be assigned to.`);\n        }\n        return new WriteVarExpr(this.name, value, null, this.sourceSpan);\n    }\n}\nclass TypeofExpr extends Expression {\n    constructor(expr, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.expr = expr;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitTypeofExpr(this, context);\n    }\n    isEquivalent(e) {\n        return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);\n    }\n    isConstant() {\n        return this.expr.isConstant();\n    }\n}\nclass WrappedNodeExpr extends Expression {\n    constructor(node, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.node = node;\n    }\n    isEquivalent(e) {\n        return e instanceof WrappedNodeExpr && this.node === e.node;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitWrappedNodeExpr(this, context);\n    }\n}\nclass WriteVarExpr extends Expression {\n    constructor(name, value, type, sourceSpan) {\n        super(type || value.type, sourceSpan);\n        this.name = name;\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitWriteVarExpr(this, context);\n    }\n    toDeclStmt(type, modifiers) {\n        return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\n    }\n    toConstDecl() {\n        return this.toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]);\n    }\n}\nclass WriteKeyExpr extends Expression {\n    constructor(receiver, index, value, type, sourceSpan) {\n        super(type || value.type, sourceSpan);\n        this.receiver = receiver;\n        this.index = index;\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitWriteKeyExpr(this, context);\n    }\n}\nclass WritePropExpr extends Expression {\n    constructor(receiver, name, value, type, sourceSpan) {\n        super(type || value.type, sourceSpan);\n        this.receiver = receiver;\n        this.name = name;\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name && this.value.isEquivalent(e.value);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitWritePropExpr(this, context);\n    }\n}\nvar BuiltinMethod;\n(function (BuiltinMethod) {\n    BuiltinMethod[BuiltinMethod[\"ConcatArray\"] = 0] = \"ConcatArray\";\n    BuiltinMethod[BuiltinMethod[\"SubscribeObservable\"] = 1] = \"SubscribeObservable\";\n    BuiltinMethod[BuiltinMethod[\"Bind\"] = 2] = \"Bind\";\n})(BuiltinMethod || (BuiltinMethod = {}));\nclass InvokeFunctionExpr extends Expression {\n    constructor(fn, args, type, sourceSpan, pure = false) {\n        super(type, sourceSpan);\n        this.fn = fn;\n        this.args = args;\n        this.pure = pure;\n    }\n    isEquivalent(e) {\n        return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) &&\n            areAllEquivalent(this.args, e.args) && this.pure === e.pure;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitInvokeFunctionExpr(this, context);\n    }\n}\nclass TaggedTemplateExpr extends Expression {\n    constructor(tag, template, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.tag = tag;\n        this.template = template;\n    }\n    isEquivalent(e) {\n        return e instanceof TaggedTemplateExpr && this.tag.isEquivalent(e.tag) &&\n            areAllEquivalentPredicate(this.template.elements, e.template.elements, (a, b) => a.text === b.text) &&\n            areAllEquivalent(this.template.expressions, e.template.expressions);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitTaggedTemplateExpr(this, context);\n    }\n}\nclass InstantiateExpr extends Expression {\n    constructor(classExpr, args, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.classExpr = classExpr;\n        this.args = args;\n    }\n    isEquivalent(e) {\n        return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) &&\n            areAllEquivalent(this.args, e.args);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitInstantiateExpr(this, context);\n    }\n}\nclass LiteralExpr extends Expression {\n    constructor(value, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof LiteralExpr && this.value === e.value;\n    }\n    isConstant() {\n        return true;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitLiteralExpr(this, context);\n    }\n}\nclass TemplateLiteral {\n    constructor(elements, expressions) {\n        this.elements = elements;\n        this.expressions = expressions;\n    }\n}\nclass TemplateLiteralElement {\n    constructor(text, sourceSpan, rawText) {\n        var _a;\n        this.text = text;\n        this.sourceSpan = sourceSpan;\n        // If `rawText` is not provided, try to extract the raw string from its\n        // associated `sourceSpan`. If that is also not available, \"fake\" the raw\n        // string instead by escaping the following control sequences:\n        // - \"\\\" would otherwise indicate that the next character is a control character.\n        // - \"`\" and \"${\" are template string control sequences that would otherwise prematurely\n        // indicate the end of the template literal element.\n        this.rawText =\n            (_a = rawText !== null && rawText !== void 0 ? rawText : sourceSpan === null || sourceSpan === void 0 ? void 0 : sourceSpan.toString()) !== null && _a !== void 0 ? _a : escapeForTemplateLiteral(escapeSlashes(text));\n    }\n}\nclass LiteralPiece {\n    constructor(text, sourceSpan) {\n        this.text = text;\n        this.sourceSpan = sourceSpan;\n    }\n}\nclass PlaceholderPiece {\n    /**\n     * Create a new instance of a `PlaceholderPiece`.\n     *\n     * @param text the name of this placeholder (e.g. `PH_1`).\n     * @param sourceSpan the location of this placeholder in its localized message the source code.\n     * @param associatedMessage reference to another message that this placeholder is associated with.\n     * The `associatedMessage` is mainly used to provide a relationship to an ICU message that has\n     * been extracted out from the message containing the placeholder.\n     */\n    constructor(text, sourceSpan, associatedMessage) {\n        this.text = text;\n        this.sourceSpan = sourceSpan;\n        this.associatedMessage = associatedMessage;\n    }\n}\nconst MEANING_SEPARATOR$1 = '|';\nconst ID_SEPARATOR$1 = '@@';\nconst LEGACY_ID_INDICATOR = '␟';\nclass LocalizedString extends Expression {\n    constructor(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {\n        super(STRING_TYPE, sourceSpan);\n        this.metaBlock = metaBlock;\n        this.messageParts = messageParts;\n        this.placeHolderNames = placeHolderNames;\n        this.expressions = expressions;\n    }\n    isEquivalent(e) {\n        // return e instanceof LocalizedString && this.message === e.message;\n        return false;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitLocalizedString(this, context);\n    }\n    /**\n     * Serialize the given `meta` and `messagePart` into \"cooked\" and \"raw\" strings that can be used\n     * in a `$localize` tagged string. The format of the metadata is the same as that parsed by\n     * `parseI18nMeta()`.\n     *\n     * @param meta The metadata to serialize\n     * @param messagePart The first part of the tagged string\n     */\n    serializeI18nHead() {\n        let metaBlock = this.metaBlock.description || '';\n        if (this.metaBlock.meaning) {\n            metaBlock = `${this.metaBlock.meaning}${MEANING_SEPARATOR$1}${metaBlock}`;\n        }\n        if (this.metaBlock.customId) {\n            metaBlock = `${metaBlock}${ID_SEPARATOR$1}${this.metaBlock.customId}`;\n        }\n        if (this.metaBlock.legacyIds) {\n            this.metaBlock.legacyIds.forEach(legacyId => {\n                metaBlock = `${metaBlock}${LEGACY_ID_INDICATOR}${legacyId}`;\n            });\n        }\n        return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));\n    }\n    getMessagePartSourceSpan(i) {\n        var _a, _b;\n        return (_b = (_a = this.messageParts[i]) === null || _a === void 0 ? void 0 : _a.sourceSpan) !== null && _b !== void 0 ? _b : this.sourceSpan;\n    }\n    getPlaceholderSourceSpan(i) {\n        var _a, _b, _c, _d;\n        return (_d = (_b = (_a = this.placeHolderNames[i]) === null || _a === void 0 ? void 0 : _a.sourceSpan) !== null && _b !== void 0 ? _b : (_c = this.expressions[i]) === null || _c === void 0 ? void 0 : _c.sourceSpan) !== null && _d !== void 0 ? _d : this.sourceSpan;\n    }\n    /**\n     * Serialize the given `placeholderName` and `messagePart` into \"cooked\" and \"raw\" strings that\n     * can be used in a `$localize` tagged string.\n     *\n     * The format is `:<placeholder-name>[@@<associated-id>]:`.\n     *\n     * The `associated-id` is the message id of the (usually an ICU) message to which this placeholder\n     * refers.\n     *\n     * @param partIndex The index of the message part to serialize.\n     */\n    serializeI18nTemplatePart(partIndex) {\n        var _a;\n        const placeholder = this.placeHolderNames[partIndex - 1];\n        const messagePart = this.messageParts[partIndex];\n        let metaBlock = placeholder.text;\n        if (((_a = placeholder.associatedMessage) === null || _a === void 0 ? void 0 : _a.legacyIds.length) === 0) {\n            metaBlock += `${ID_SEPARATOR$1}${computeMsgId(placeholder.associatedMessage.messageString, placeholder.associatedMessage.meaning)}`;\n        }\n        return createCookedRawString(metaBlock, messagePart.text, this.getMessagePartSourceSpan(partIndex));\n    }\n}\nconst escapeSlashes = (str) => str.replace(/\\\\/g, '\\\\\\\\');\nconst escapeStartingColon = (str) => str.replace(/^:/, '\\\\:');\nconst escapeColons = (str) => str.replace(/:/g, '\\\\:');\nconst escapeForTemplateLiteral = (str) => str.replace(/`/g, '\\\\`').replace(/\\${/g, '$\\\\{');\n/**\n * Creates a `{cooked, raw}` object from the `metaBlock` and `messagePart`.\n *\n * The `raw` text must have various character sequences escaped:\n * * \"\\\" would otherwise indicate that the next character is a control character.\n * * \"`\" and \"${\" are template string control sequences that would otherwise prematurely indicate\n *   the end of a message part.\n * * \":\" inside a metablock would prematurely indicate the end of the metablock.\n * * \":\" at the start of a messagePart with no metablock would erroneously indicate the start of a\n *   metablock.\n *\n * @param metaBlock Any metadata that should be prepended to the string\n * @param messagePart The message part of the string\n */\nfunction createCookedRawString(metaBlock, messagePart, range) {\n    if (metaBlock === '') {\n        return {\n            cooked: messagePart,\n            raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),\n            range,\n        };\n    }\n    else {\n        return {\n            cooked: `:${metaBlock}:${messagePart}`,\n            raw: escapeForTemplateLiteral(`:${escapeColons(escapeSlashes(metaBlock))}:${escapeSlashes(messagePart)}`),\n            range,\n        };\n    }\n}\nclass ExternalExpr extends Expression {\n    constructor(value, type, typeParams = null, sourceSpan) {\n        super(type, sourceSpan);\n        this.value = value;\n        this.typeParams = typeParams;\n    }\n    isEquivalent(e) {\n        return e instanceof ExternalExpr && this.value.name === e.value.name &&\n            this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitExternalExpr(this, context);\n    }\n}\nclass ExternalReference {\n    constructor(moduleName, name, runtime) {\n        this.moduleName = moduleName;\n        this.name = name;\n        this.runtime = runtime;\n    }\n}\nclass ConditionalExpr extends Expression {\n    constructor(condition, trueCase, falseCase = null, type, sourceSpan) {\n        super(type || trueCase.type, sourceSpan);\n        this.condition = condition;\n        this.falseCase = falseCase;\n        this.trueCase = trueCase;\n    }\n    isEquivalent(e) {\n        return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) &&\n            this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitConditionalExpr(this, context);\n    }\n}\nclass NotExpr extends Expression {\n    constructor(condition, sourceSpan) {\n        super(BOOL_TYPE, sourceSpan);\n        this.condition = condition;\n    }\n    isEquivalent(e) {\n        return e instanceof NotExpr && this.condition.isEquivalent(e.condition);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitNotExpr(this, context);\n    }\n}\nclass AssertNotNull extends Expression {\n    constructor(condition, sourceSpan) {\n        super(condition.type, sourceSpan);\n        this.condition = condition;\n    }\n    isEquivalent(e) {\n        return e instanceof AssertNotNull && this.condition.isEquivalent(e.condition);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitAssertNotNullExpr(this, context);\n    }\n}\nclass CastExpr extends Expression {\n    constructor(value, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof CastExpr && this.value.isEquivalent(e.value);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitCastExpr(this, context);\n    }\n}\nclass FnParam {\n    constructor(name, type = null) {\n        this.name = name;\n        this.type = type;\n    }\n    isEquivalent(param) {\n        return this.name === param.name;\n    }\n}\nclass FunctionExpr extends Expression {\n    constructor(params, statements, type, sourceSpan, name) {\n        super(type, sourceSpan);\n        this.params = params;\n        this.statements = statements;\n        this.name = name;\n    }\n    isEquivalent(e) {\n        return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) &&\n            areAllEquivalent(this.statements, e.statements);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitFunctionExpr(this, context);\n    }\n    toDeclStmt(name, modifiers) {\n        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\n    }\n}\nclass UnaryOperatorExpr extends Expression {\n    constructor(operator, expr, type, sourceSpan, parens = true) {\n        super(type || NUMBER_TYPE, sourceSpan);\n        this.operator = operator;\n        this.expr = expr;\n        this.parens = parens;\n    }\n    isEquivalent(e) {\n        return e instanceof UnaryOperatorExpr && this.operator === e.operator &&\n            this.expr.isEquivalent(e.expr);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitUnaryOperatorExpr(this, context);\n    }\n}\nclass BinaryOperatorExpr extends Expression {\n    constructor(operator, lhs, rhs, type, sourceSpan, parens = true) {\n        super(type || lhs.type, sourceSpan);\n        this.operator = operator;\n        this.rhs = rhs;\n        this.parens = parens;\n        this.lhs = lhs;\n    }\n    isEquivalent(e) {\n        return e instanceof BinaryOperatorExpr && this.operator === e.operator &&\n            this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitBinaryOperatorExpr(this, context);\n    }\n}\nclass ReadPropExpr extends Expression {\n    constructor(receiver, name, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.receiver = receiver;\n        this.name = name;\n    }\n    isEquivalent(e) {\n        return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name;\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitReadPropExpr(this, context);\n    }\n    set(value) {\n        return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\n    }\n}\nclass ReadKeyExpr extends Expression {\n    constructor(receiver, index, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.receiver = receiver;\n        this.index = index;\n    }\n    isEquivalent(e) {\n        return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.index.isEquivalent(e.index);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitReadKeyExpr(this, context);\n    }\n    set(value) {\n        return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\n    }\n}\nclass LiteralArrayExpr extends Expression {\n    constructor(entries, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.entries = entries;\n    }\n    isConstant() {\n        return this.entries.every(e => e.isConstant());\n    }\n    isEquivalent(e) {\n        return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitLiteralArrayExpr(this, context);\n    }\n}\nclass LiteralMapEntry {\n    constructor(key, value, quoted) {\n        this.key = key;\n        this.value = value;\n        this.quoted = quoted;\n    }\n    isEquivalent(e) {\n        return this.key === e.key && this.value.isEquivalent(e.value);\n    }\n}\nclass LiteralMapExpr extends Expression {\n    constructor(entries, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.entries = entries;\n        this.valueType = null;\n        if (type) {\n            this.valueType = type.valueType;\n        }\n    }\n    isEquivalent(e) {\n        return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);\n    }\n    isConstant() {\n        return this.entries.every(e => e.value.isConstant());\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitLiteralMapExpr(this, context);\n    }\n}\nclass CommaExpr extends Expression {\n    constructor(parts, sourceSpan) {\n        super(parts[parts.length - 1].type, sourceSpan);\n        this.parts = parts;\n    }\n    isEquivalent(e) {\n        return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);\n    }\n    isConstant() {\n        return false;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitCommaExpr(this, context);\n    }\n}\nconst THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);\nconst SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);\nconst CATCH_ERROR_VAR$1 = new ReadVarExpr(BuiltinVar.CatchError, null, null);\nconst CATCH_STACK_VAR$1 = new ReadVarExpr(BuiltinVar.CatchStack, null, null);\nconst NULL_EXPR = new LiteralExpr(null, null, null);\nconst TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);\n//// Statements\nvar StmtModifier;\n(function (StmtModifier) {\n    StmtModifier[StmtModifier[\"Final\"] = 0] = \"Final\";\n    StmtModifier[StmtModifier[\"Private\"] = 1] = \"Private\";\n    StmtModifier[StmtModifier[\"Exported\"] = 2] = \"Exported\";\n    StmtModifier[StmtModifier[\"Static\"] = 3] = \"Static\";\n})(StmtModifier || (StmtModifier = {}));\nclass LeadingComment {\n    constructor(text, multiline, trailingNewline) {\n        this.text = text;\n        this.multiline = multiline;\n        this.trailingNewline = trailingNewline;\n    }\n    toString() {\n        return this.multiline ? ` ${this.text} ` : this.text;\n    }\n}\nclass JSDocComment extends LeadingComment {\n    constructor(tags) {\n        super('', /* multiline */ true, /* trailingNewline */ true);\n        this.tags = tags;\n    }\n    toString() {\n        return serializeTags(this.tags);\n    }\n}\nclass Statement {\n    constructor(modifiers = [], sourceSpan = null, leadingComments) {\n        this.modifiers = modifiers;\n        this.sourceSpan = sourceSpan;\n        this.leadingComments = leadingComments;\n    }\n    hasModifier(modifier) {\n        return this.modifiers.indexOf(modifier) !== -1;\n    }\n    addLeadingComment(leadingComment) {\n        var _a;\n        this.leadingComments = (_a = this.leadingComments) !== null && _a !== void 0 ? _a : [];\n        this.leadingComments.push(leadingComment);\n    }\n}\nclass DeclareVarStmt extends Statement {\n    constructor(name, value, type, modifiers, sourceSpan, leadingComments) {\n        super(modifiers, sourceSpan, leadingComments);\n        this.name = name;\n        this.value = value;\n        this.type = type || (value && value.type) || null;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof DeclareVarStmt && this.name === stmt.name &&\n            (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitDeclareVarStmt(this, context);\n    }\n}\nclass DeclareFunctionStmt extends Statement {\n    constructor(name, params, statements, type, modifiers, sourceSpan, leadingComments) {\n        super(modifiers, sourceSpan, leadingComments);\n        this.name = name;\n        this.params = params;\n        this.statements = statements;\n        this.type = type || null;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) &&\n            areAllEquivalent(this.statements, stmt.statements);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitDeclareFunctionStmt(this, context);\n    }\n}\nclass ExpressionStatement extends Statement {\n    constructor(expr, sourceSpan, leadingComments) {\n        super([], sourceSpan, leadingComments);\n        this.expr = expr;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitExpressionStmt(this, context);\n    }\n}\nclass ReturnStatement extends Statement {\n    constructor(value, sourceSpan = null, leadingComments) {\n        super([], sourceSpan, leadingComments);\n        this.value = value;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitReturnStmt(this, context);\n    }\n}\nclass AbstractClassPart {\n    constructor(type = null, modifiers = []) {\n        this.type = type;\n        this.modifiers = modifiers;\n    }\n    hasModifier(modifier) {\n        return this.modifiers.indexOf(modifier) !== -1;\n    }\n}\nclass ClassField extends AbstractClassPart {\n    constructor(name, type, modifiers, initializer) {\n        super(type, modifiers);\n        this.name = name;\n        this.initializer = initializer;\n    }\n    isEquivalent(f) {\n        return this.name === f.name;\n    }\n}\nclass ClassMethod extends AbstractClassPart {\n    constructor(name, params, body, type, modifiers) {\n        super(type, modifiers);\n        this.name = name;\n        this.params = params;\n        this.body = body;\n    }\n    isEquivalent(m) {\n        return this.name === m.name && areAllEquivalent(this.body, m.body);\n    }\n}\nclass ClassGetter extends AbstractClassPart {\n    constructor(name, body, type, modifiers) {\n        super(type, modifiers);\n        this.name = name;\n        this.body = body;\n    }\n    isEquivalent(m) {\n        return this.name === m.name && areAllEquivalent(this.body, m.body);\n    }\n}\nclass ClassStmt extends Statement {\n    constructor(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan, leadingComments) {\n        super(modifiers, sourceSpan, leadingComments);\n        this.name = name;\n        this.parent = parent;\n        this.fields = fields;\n        this.getters = getters;\n        this.constructorMethod = constructorMethod;\n        this.methods = methods;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof ClassStmt && this.name === stmt.name &&\n            nullSafeIsEquivalent(this.parent, stmt.parent) &&\n            areAllEquivalent(this.fields, stmt.fields) &&\n            areAllEquivalent(this.getters, stmt.getters) &&\n            this.constructorMethod.isEquivalent(stmt.constructorMethod) &&\n            areAllEquivalent(this.methods, stmt.methods);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitDeclareClassStmt(this, context);\n    }\n}\nclass IfStmt extends Statement {\n    constructor(condition, trueCase, falseCase = [], sourceSpan, leadingComments) {\n        super([], sourceSpan, leadingComments);\n        this.condition = condition;\n        this.trueCase = trueCase;\n        this.falseCase = falseCase;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) &&\n            areAllEquivalent(this.trueCase, stmt.trueCase) &&\n            areAllEquivalent(this.falseCase, stmt.falseCase);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitIfStmt(this, context);\n    }\n}\nclass TryCatchStmt extends Statement {\n    constructor(bodyStmts, catchStmts, sourceSpan = null, leadingComments) {\n        super([], sourceSpan, leadingComments);\n        this.bodyStmts = bodyStmts;\n        this.catchStmts = catchStmts;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof TryCatchStmt && areAllEquivalent(this.bodyStmts, stmt.bodyStmts) &&\n            areAllEquivalent(this.catchStmts, stmt.catchStmts);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitTryCatchStmt(this, context);\n    }\n}\nclass ThrowStmt extends Statement {\n    constructor(error, sourceSpan = null, leadingComments) {\n        super([], sourceSpan, leadingComments);\n        this.error = error;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof TryCatchStmt && this.error.isEquivalent(stmt.error);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitThrowStmt(this, context);\n    }\n}\nclass AstTransformer$1 {\n    transformExpr(expr, context) {\n        return expr;\n    }\n    transformStmt(stmt, context) {\n        return stmt;\n    }\n    visitReadVarExpr(ast, context) {\n        return this.transformExpr(ast, context);\n    }\n    visitWrappedNodeExpr(ast, context) {\n        return this.transformExpr(ast, context);\n    }\n    visitTypeofExpr(expr, context) {\n        return this.transformExpr(new TypeofExpr(expr.expr.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n    visitWriteVarExpr(expr, context) {\n        return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n    visitWriteKeyExpr(expr, context) {\n        return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n    visitWritePropExpr(expr, context) {\n        return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n    visitInvokeFunctionExpr(ast, context) {\n        return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    }\n    visitTaggedTemplateExpr(ast, context) {\n        return this.transformExpr(new TaggedTemplateExpr(ast.tag.visitExpression(this, context), new TemplateLiteral(ast.template.elements, ast.template.expressions.map((e) => e.visitExpression(this, context))), ast.type, ast.sourceSpan), context);\n    }\n    visitInstantiateExpr(ast, context) {\n        return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    }\n    visitLiteralExpr(ast, context) {\n        return this.transformExpr(ast, context);\n    }\n    visitLocalizedString(ast, context) {\n        return this.transformExpr(new LocalizedString(ast.metaBlock, ast.messageParts, ast.placeHolderNames, this.visitAllExpressions(ast.expressions, context), ast.sourceSpan), context);\n    }\n    visitExternalExpr(ast, context) {\n        return this.transformExpr(ast, context);\n    }\n    visitConditionalExpr(ast, context) {\n        return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n    visitNotExpr(ast, context) {\n        return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n    }\n    visitAssertNotNullExpr(ast, context) {\n        return this.transformExpr(new AssertNotNull(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n    }\n    visitCastExpr(ast, context) {\n        return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n    visitFunctionExpr(ast, context) {\n        return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);\n    }\n    visitUnaryOperatorExpr(ast, context) {\n        return this.transformExpr(new UnaryOperatorExpr(ast.operator, ast.expr.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n    visitBinaryOperatorExpr(ast, context) {\n        return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n    visitReadPropExpr(ast, context) {\n        return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);\n    }\n    visitReadKeyExpr(ast, context) {\n        return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n    visitLiteralArrayExpr(ast, context) {\n        return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);\n    }\n    visitLiteralMapExpr(ast, context) {\n        const entries = ast.entries.map((entry) => new LiteralMapEntry(entry.key, entry.value.visitExpression(this, context), entry.quoted));\n        const mapType = new MapType(ast.valueType);\n        return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);\n    }\n    visitCommaExpr(ast, context) {\n        return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);\n    }\n    visitAllExpressions(exprs, context) {\n        return exprs.map(expr => expr.visitExpression(this, context));\n    }\n    visitDeclareVarStmt(stmt, context) {\n        const value = stmt.value && stmt.value.visitExpression(this, context);\n        return this.transformStmt(new DeclareVarStmt(stmt.name, value, stmt.type, stmt.modifiers, stmt.sourceSpan, stmt.leadingComments), context);\n    }\n    visitDeclareFunctionStmt(stmt, context) {\n        return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan, stmt.leadingComments), context);\n    }\n    visitExpressionStmt(stmt, context) {\n        return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);\n    }\n    visitReturnStmt(stmt, context) {\n        return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);\n    }\n    visitDeclareClassStmt(stmt, context) {\n        const parent = stmt.parent.visitExpression(this, context);\n        const getters = stmt.getters.map(getter => new ClassGetter(getter.name, this.visitAllStatements(getter.body, context), getter.type, getter.modifiers));\n        const ctorMethod = stmt.constructorMethod &&\n            new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);\n        const methods = stmt.methods.map(method => new ClassMethod(method.name, method.params, this.visitAllStatements(method.body, context), method.type, method.modifiers));\n        return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);\n    }\n    visitIfStmt(stmt, context) {\n        return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan, stmt.leadingComments), context);\n    }\n    visitTryCatchStmt(stmt, context) {\n        return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan, stmt.leadingComments), context);\n    }\n    visitThrowStmt(stmt, context) {\n        return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);\n    }\n    visitAllStatements(stmts, context) {\n        return stmts.map(stmt => stmt.visitStatement(this, context));\n    }\n}\nclass RecursiveAstVisitor$1 {\n    visitType(ast, context) {\n        return ast;\n    }\n    visitExpression(ast, context) {\n        if (ast.type) {\n            ast.type.visitType(this, context);\n        }\n        return ast;\n    }\n    visitBuiltinType(type, context) {\n        return this.visitType(type, context);\n    }\n    visitExpressionType(type, context) {\n        type.value.visitExpression(this, context);\n        if (type.typeParams !== null) {\n            type.typeParams.forEach(param => this.visitType(param, context));\n        }\n        return this.visitType(type, context);\n    }\n    visitArrayType(type, context) {\n        return this.visitType(type, context);\n    }\n    visitMapType(type, context) {\n        return this.visitType(type, context);\n    }\n    visitWrappedNodeExpr(ast, context) {\n        return ast;\n    }\n    visitTypeofExpr(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitReadVarExpr(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitWriteVarExpr(ast, context) {\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitWriteKeyExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.index.visitExpression(this, context);\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitWritePropExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitInvokeFunctionExpr(ast, context) {\n        ast.fn.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    }\n    visitTaggedTemplateExpr(ast, context) {\n        ast.tag.visitExpression(this, context);\n        this.visitAllExpressions(ast.template.expressions, context);\n        return this.visitExpression(ast, context);\n    }\n    visitInstantiateExpr(ast, context) {\n        ast.classExpr.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    }\n    visitLiteralExpr(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitLocalizedString(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitExternalExpr(ast, context) {\n        if (ast.typeParams) {\n            ast.typeParams.forEach(type => type.visitType(this, context));\n        }\n        return this.visitExpression(ast, context);\n    }\n    visitConditionalExpr(ast, context) {\n        ast.condition.visitExpression(this, context);\n        ast.trueCase.visitExpression(this, context);\n        ast.falseCase.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitNotExpr(ast, context) {\n        ast.condition.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitAssertNotNullExpr(ast, context) {\n        ast.condition.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitCastExpr(ast, context) {\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitFunctionExpr(ast, context) {\n        this.visitAllStatements(ast.statements, context);\n        return this.visitExpression(ast, context);\n    }\n    visitUnaryOperatorExpr(ast, context) {\n        ast.expr.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitBinaryOperatorExpr(ast, context) {\n        ast.lhs.visitExpression(this, context);\n        ast.rhs.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitReadPropExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitReadKeyExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.index.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitLiteralArrayExpr(ast, context) {\n        this.visitAllExpressions(ast.entries, context);\n        return this.visitExpression(ast, context);\n    }\n    visitLiteralMapExpr(ast, context) {\n        ast.entries.forEach((entry) => entry.value.visitExpression(this, context));\n        return this.visitExpression(ast, context);\n    }\n    visitCommaExpr(ast, context) {\n        this.visitAllExpressions(ast.parts, context);\n        return this.visitExpression(ast, context);\n    }\n    visitAllExpressions(exprs, context) {\n        exprs.forEach(expr => expr.visitExpression(this, context));\n    }\n    visitDeclareVarStmt(stmt, context) {\n        if (stmt.value) {\n            stmt.value.visitExpression(this, context);\n        }\n        if (stmt.type) {\n            stmt.type.visitType(this, context);\n        }\n        return stmt;\n    }\n    visitDeclareFunctionStmt(stmt, context) {\n        this.visitAllStatements(stmt.statements, context);\n        if (stmt.type) {\n            stmt.type.visitType(this, context);\n        }\n        return stmt;\n    }\n    visitExpressionStmt(stmt, context) {\n        stmt.expr.visitExpression(this, context);\n        return stmt;\n    }\n    visitReturnStmt(stmt, context) {\n        stmt.value.visitExpression(this, context);\n        return stmt;\n    }\n    visitDeclareClassStmt(stmt, context) {\n        stmt.parent.visitExpression(this, context);\n        stmt.getters.forEach(getter => this.visitAllStatements(getter.body, context));\n        if (stmt.constructorMethod) {\n            this.visitAllStatements(stmt.constructorMethod.body, context);\n        }\n        stmt.methods.forEach(method => this.visitAllStatements(method.body, context));\n        return stmt;\n    }\n    visitIfStmt(stmt, context) {\n        stmt.condition.visitExpression(this, context);\n        this.visitAllStatements(stmt.trueCase, context);\n        this.visitAllStatements(stmt.falseCase, context);\n        return stmt;\n    }\n    visitTryCatchStmt(stmt, context) {\n        this.visitAllStatements(stmt.bodyStmts, context);\n        this.visitAllStatements(stmt.catchStmts, context);\n        return stmt;\n    }\n    visitThrowStmt(stmt, context) {\n        stmt.error.visitExpression(this, context);\n        return stmt;\n    }\n    visitAllStatements(stmts, context) {\n        stmts.forEach(stmt => stmt.visitStatement(this, context));\n    }\n}\nfunction findReadVarNames(stmts) {\n    const visitor = new _ReadVarVisitor();\n    visitor.visitAllStatements(stmts, null);\n    return visitor.varNames;\n}\nclass _ReadVarVisitor extends RecursiveAstVisitor$1 {\n    constructor() {\n        super(...arguments);\n        this.varNames = new Set();\n    }\n    visitDeclareFunctionStmt(stmt, context) {\n        // Don't descend into nested functions\n        return stmt;\n    }\n    visitDeclareClassStmt(stmt, context) {\n        // Don't descend into nested classes\n        return stmt;\n    }\n    visitReadVarExpr(ast, context) {\n        if (ast.name) {\n            this.varNames.add(ast.name);\n        }\n        return null;\n    }\n}\nfunction collectExternalReferences(stmts) {\n    const visitor = new _FindExternalReferencesVisitor();\n    visitor.visitAllStatements(stmts, null);\n    return visitor.externalReferences;\n}\nclass _FindExternalReferencesVisitor extends RecursiveAstVisitor$1 {\n    constructor() {\n        super(...arguments);\n        this.externalReferences = [];\n    }\n    visitExternalExpr(e, context) {\n        this.externalReferences.push(e.value);\n        return super.visitExternalExpr(e, context);\n    }\n}\nfunction applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {\n    if (!sourceSpan) {\n        return stmt;\n    }\n    const transformer = new _ApplySourceSpanTransformer(sourceSpan);\n    return stmt.visitStatement(transformer, null);\n}\nfunction applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {\n    if (!sourceSpan) {\n        return expr;\n    }\n    const transformer = new _ApplySourceSpanTransformer(sourceSpan);\n    return expr.visitExpression(transformer, null);\n}\nclass _ApplySourceSpanTransformer extends AstTransformer$1 {\n    constructor(sourceSpan) {\n        super();\n        this.sourceSpan = sourceSpan;\n    }\n    _clone(obj) {\n        const clone = Object.create(obj.constructor.prototype);\n        for (let prop of Object.keys(obj)) {\n            clone[prop] = obj[prop];\n        }\n        return clone;\n    }\n    transformExpr(expr, context) {\n        if (!expr.sourceSpan) {\n            expr = this._clone(expr);\n            expr.sourceSpan = this.sourceSpan;\n        }\n        return expr;\n    }\n    transformStmt(stmt, context) {\n        if (!stmt.sourceSpan) {\n            stmt = this._clone(stmt);\n            stmt.sourceSpan = this.sourceSpan;\n        }\n        return stmt;\n    }\n}\nfunction leadingComment(text, multiline = false, trailingNewline = true) {\n    return new LeadingComment(text, multiline, trailingNewline);\n}\nfunction jsDocComment(tags = []) {\n    return new JSDocComment(tags);\n}\nfunction variable(name, type, sourceSpan) {\n    return new ReadVarExpr(name, type, sourceSpan);\n}\nfunction importExpr(id, typeParams = null, sourceSpan) {\n    return new ExternalExpr(id, null, typeParams, sourceSpan);\n}\nfunction importType(id, typeParams, typeModifiers) {\n    return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;\n}\nfunction expressionType(expr, typeModifiers, typeParams) {\n    return new ExpressionType(expr, typeModifiers, typeParams);\n}\nfunction typeofExpr(expr) {\n    return new TypeofExpr(expr);\n}\nfunction literalArr(values, type, sourceSpan) {\n    return new LiteralArrayExpr(values, type, sourceSpan);\n}\nfunction literalMap(values, type = null) {\n    return new LiteralMapExpr(values.map(e => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);\n}\nfunction unary(operator, expr, type, sourceSpan) {\n    return new UnaryOperatorExpr(operator, expr, type, sourceSpan);\n}\nfunction not(expr, sourceSpan) {\n    return new NotExpr(expr, sourceSpan);\n}\nfunction assertNotNull(expr, sourceSpan) {\n    return new AssertNotNull(expr, sourceSpan);\n}\nfunction fn(params, body, type, sourceSpan, name) {\n    return new FunctionExpr(params, body, type, sourceSpan, name);\n}\nfunction ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {\n    return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);\n}\nfunction taggedTemplate(tag, template, type, sourceSpan) {\n    return new TaggedTemplateExpr(tag, template, type, sourceSpan);\n}\nfunction literal(value, type, sourceSpan) {\n    return new LiteralExpr(value, type, sourceSpan);\n}\nfunction localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {\n    return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);\n}\nfunction isNull(exp) {\n    return exp instanceof LiteralExpr && exp.value === null;\n}\n/*\n * Serializes a `Tag` into a string.\n * Returns a string like \" @foo {bar} baz\" (note the leading whitespace before `@foo`).\n */\nfunction tagToString(tag) {\n    let out = '';\n    if (tag.tagName) {\n        out += ` @${tag.tagName}`;\n    }\n    if (tag.text) {\n        if (tag.text.match(/\\/\\*|\\*\\//)) {\n            throw new Error('JSDoc text cannot contain \"/*\" and \"*/\"');\n        }\n        out += ' ' + tag.text.replace(/@/g, '\\\\@');\n    }\n    return out;\n}\nfunction serializeTags(tags) {\n    if (tags.length === 0)\n        return '';\n    if (tags.length === 1 && tags[0].tagName && !tags[0].text) {\n        // The JSDOC comment is a single simple tag: e.g `/** @tagname */`.\n        return `*${tagToString(tags[0])} `;\n    }\n    let out = '*\\n';\n    for (const tag of tags) {\n        out += ' *';\n        // If the tagToString is multi-line, insert \" * \" prefixes on lines.\n        out += tagToString(tag).replace(/\\n/g, '\\n * ');\n        out += '\\n';\n    }\n    out += ' ';\n    return out;\n}\n\nvar output_ast = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    get TypeModifier () { return TypeModifier; },\n    Type: Type,\n    get BuiltinTypeName () { return BuiltinTypeName; },\n    BuiltinType: BuiltinType,\n    ExpressionType: ExpressionType,\n    ArrayType: ArrayType,\n    MapType: MapType,\n    DYNAMIC_TYPE: DYNAMIC_TYPE,\n    INFERRED_TYPE: INFERRED_TYPE,\n    BOOL_TYPE: BOOL_TYPE,\n    INT_TYPE: INT_TYPE,\n    NUMBER_TYPE: NUMBER_TYPE,\n    STRING_TYPE: STRING_TYPE,\n    FUNCTION_TYPE: FUNCTION_TYPE,\n    NONE_TYPE: NONE_TYPE,\n    get UnaryOperator () { return UnaryOperator; },\n    get BinaryOperator () { return BinaryOperator; },\n    nullSafeIsEquivalent: nullSafeIsEquivalent,\n    areAllEquivalent: areAllEquivalent,\n    Expression: Expression,\n    get BuiltinVar () { return BuiltinVar; },\n    ReadVarExpr: ReadVarExpr,\n    TypeofExpr: TypeofExpr,\n    WrappedNodeExpr: WrappedNodeExpr,\n    WriteVarExpr: WriteVarExpr,\n    WriteKeyExpr: WriteKeyExpr,\n    WritePropExpr: WritePropExpr,\n    get BuiltinMethod () { return BuiltinMethod; },\n    InvokeFunctionExpr: InvokeFunctionExpr,\n    TaggedTemplateExpr: TaggedTemplateExpr,\n    InstantiateExpr: InstantiateExpr,\n    LiteralExpr: LiteralExpr,\n    TemplateLiteral: TemplateLiteral,\n    TemplateLiteralElement: TemplateLiteralElement,\n    LiteralPiece: LiteralPiece,\n    PlaceholderPiece: PlaceholderPiece,\n    LocalizedString: LocalizedString,\n    ExternalExpr: ExternalExpr,\n    ExternalReference: ExternalReference,\n    ConditionalExpr: ConditionalExpr,\n    NotExpr: NotExpr,\n    AssertNotNull: AssertNotNull,\n    CastExpr: CastExpr,\n    FnParam: FnParam,\n    FunctionExpr: FunctionExpr,\n    UnaryOperatorExpr: UnaryOperatorExpr,\n    BinaryOperatorExpr: BinaryOperatorExpr,\n    ReadPropExpr: ReadPropExpr,\n    ReadKeyExpr: ReadKeyExpr,\n    LiteralArrayExpr: LiteralArrayExpr,\n    LiteralMapEntry: LiteralMapEntry,\n    LiteralMapExpr: LiteralMapExpr,\n    CommaExpr: CommaExpr,\n    THIS_EXPR: THIS_EXPR,\n    SUPER_EXPR: SUPER_EXPR,\n    CATCH_ERROR_VAR: CATCH_ERROR_VAR$1,\n    CATCH_STACK_VAR: CATCH_STACK_VAR$1,\n    NULL_EXPR: NULL_EXPR,\n    TYPED_NULL_EXPR: TYPED_NULL_EXPR,\n    get StmtModifier () { return StmtModifier; },\n    LeadingComment: LeadingComment,\n    JSDocComment: JSDocComment,\n    Statement: Statement,\n    DeclareVarStmt: DeclareVarStmt,\n    DeclareFunctionStmt: DeclareFunctionStmt,\n    ExpressionStatement: ExpressionStatement,\n    ReturnStatement: ReturnStatement,\n    AbstractClassPart: AbstractClassPart,\n    ClassField: ClassField,\n    ClassMethod: ClassMethod,\n    ClassGetter: ClassGetter,\n    ClassStmt: ClassStmt,\n    IfStmt: IfStmt,\n    TryCatchStmt: TryCatchStmt,\n    ThrowStmt: ThrowStmt,\n    AstTransformer: AstTransformer$1,\n    RecursiveAstVisitor: RecursiveAstVisitor$1,\n    findReadVarNames: findReadVarNames,\n    collectExternalReferences: collectExternalReferences,\n    applySourceSpanToStatementIfNeeded: applySourceSpanToStatementIfNeeded,\n    applySourceSpanToExpressionIfNeeded: applySourceSpanToExpressionIfNeeded,\n    leadingComment: leadingComment,\n    jsDocComment: jsDocComment,\n    variable: variable,\n    importExpr: importExpr,\n    importType: importType,\n    expressionType: expressionType,\n    typeofExpr: typeofExpr,\n    literalArr: literalArr,\n    literalMap: literalMap,\n    unary: unary,\n    not: not,\n    assertNotNull: assertNotNull,\n    fn: fn,\n    ifStmt: ifStmt,\n    taggedTemplate: taggedTemplate,\n    literal: literal,\n    localizedString: localizedString,\n    isNull: isNull\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CONSTANT_PREFIX = '_c';\n/**\n * `ConstantPool` tries to reuse literal factories when two or more literals are identical.\n * We determine whether literals are identical by creating a key out of their AST using the\n * `KeyVisitor`. This constant is used to replace dynamic expressions which can't be safely\n * converted into a key. E.g. given an expression `{foo: bar()}`, since we don't know what\n * the result of `bar` will be, we create a key that looks like `{foo: <unknown>}`. Note\n * that we use a variable, rather than something like `null` in order to avoid collisions.\n */\nconst UNKNOWN_VALUE_KEY = variable('<unknown>');\n/**\n * Context to use when producing a key.\n *\n * This ensures we see the constant not the reference variable when producing\n * a key.\n */\nconst KEY_CONTEXT = {};\n/**\n * Generally all primitive values are excluded from the `ConstantPool`, but there is an exclusion\n * for strings that reach a certain length threshold. This constant defines the length threshold for\n * strings.\n */\nconst POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;\n/**\n * A node that is a place-holder that allows the node to be replaced when the actual\n * node is known.\n *\n * This allows the constant pool to change an expression from a direct reference to\n * a constant to a shared constant. It returns a fix-up node that is later allowed to\n * change the referenced expression.\n */\nclass FixupExpression extends Expression {\n    constructor(resolved) {\n        super(resolved.type);\n        this.resolved = resolved;\n        this.original = resolved;\n    }\n    visitExpression(visitor, context) {\n        if (context === KEY_CONTEXT) {\n            // When producing a key we want to traverse the constant not the\n            // variable used to refer to it.\n            return this.original.visitExpression(visitor, context);\n        }\n        else {\n            return this.resolved.visitExpression(visitor, context);\n        }\n    }\n    isEquivalent(e) {\n        return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);\n    }\n    isConstant() {\n        return true;\n    }\n    fixup(expression) {\n        this.resolved = expression;\n        this.shared = true;\n    }\n}\n/**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nclass ConstantPool {\n    constructor(isClosureCompilerEnabled = false) {\n        this.isClosureCompilerEnabled = isClosureCompilerEnabled;\n        this.statements = [];\n        this.literals = new Map();\n        this.literalFactories = new Map();\n        this.injectorDefinitions = new Map();\n        this.directiveDefinitions = new Map();\n        this.componentDefinitions = new Map();\n        this.pipeDefinitions = new Map();\n        this.nextNameIndex = 0;\n    }\n    getConstLiteral(literal, forceShared) {\n        if ((literal instanceof LiteralExpr && !isLongStringLiteral(literal)) ||\n            literal instanceof FixupExpression) {\n            // Do no put simple literals into the constant pool or try to produce a constant for a\n            // reference to a constant.\n            return literal;\n        }\n        const key = this.keyOf(literal);\n        let fixup = this.literals.get(key);\n        let newValue = false;\n        if (!fixup) {\n            fixup = new FixupExpression(literal);\n            this.literals.set(key, fixup);\n            newValue = true;\n        }\n        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {\n            // Replace the expression with a variable\n            const name = this.freshName();\n            let definition;\n            let usage;\n            if (this.isClosureCompilerEnabled && isLongStringLiteral(literal)) {\n                // For string literals, Closure will **always** inline the string at\n                // **all** usages, duplicating it each time. For large strings, this\n                // unnecessarily bloats bundle size. To work around this restriction, we\n                // wrap the string in a function, and call that function for each usage.\n                // This tricks Closure into using inline logic for functions instead of\n                // string literals. Function calls are only inlined if the body is small\n                // enough to be worth it. By doing this, very large strings will be\n                // shared across multiple usages, rather than duplicating the string at\n                // each usage site.\n                //\n                // const myStr = function() { return \"very very very long string\"; };\n                // const usage1 = myStr();\n                // const usage2 = myStr();\n                definition = variable(name).set(new FunctionExpr([], // Params.\n                [\n                    // Statements.\n                    new ReturnStatement(literal),\n                ]));\n                usage = variable(name).callFn([]);\n            }\n            else {\n                // Just declare and use the variable directly, without a function call\n                // indirection. This saves a few bytes and avoids an unncessary call.\n                definition = variable(name).set(literal);\n                usage = variable(name);\n            }\n            this.statements.push(definition.toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));\n            fixup.fixup(usage);\n        }\n        return fixup;\n    }\n    getDefinition(type, kind, ctx, forceShared = false) {\n        const definitions = this.definitionsOf(kind);\n        let fixup = definitions.get(type);\n        let newValue = false;\n        if (!fixup) {\n            const property = this.propertyNameOf(kind);\n            fixup = new FixupExpression(ctx.importExpr(type).prop(property));\n            definitions.set(type, fixup);\n            newValue = true;\n        }\n        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {\n            const name = this.freshName();\n            this.statements.push(variable(name).set(fixup.resolved).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));\n            fixup.fixup(variable(name));\n        }\n        return fixup;\n    }\n    getLiteralFactory(literal) {\n        // Create a pure function that builds an array of a mix of constant and variable expressions\n        if (literal instanceof LiteralArrayExpr) {\n            const argumentsForKey = literal.entries.map(e => e.isConstant() ? e : UNKNOWN_VALUE_KEY);\n            const key = this.keyOf(literalArr(argumentsForKey));\n            return this._getLiteralFactory(key, literal.entries, entries => literalArr(entries));\n        }\n        else {\n            const expressionForKey = literalMap(literal.entries.map(e => ({\n                key: e.key,\n                value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,\n                quoted: e.quoted\n            })));\n            const key = this.keyOf(expressionForKey);\n            return this._getLiteralFactory(key, literal.entries.map(e => e.value), entries => literalMap(entries.map((value, index) => ({\n                key: literal.entries[index].key,\n                value,\n                quoted: literal.entries[index].quoted\n            }))));\n        }\n    }\n    _getLiteralFactory(key, values, resultMap) {\n        let literalFactory = this.literalFactories.get(key);\n        const literalFactoryArguments = values.filter((e => !e.isConstant()));\n        if (!literalFactory) {\n            const resultExpressions = values.map((e, index) => e.isConstant() ? this.getConstLiteral(e, true) : variable(`a${index}`));\n            const parameters = resultExpressions.filter(isVariable).map(e => new FnParam(e.name, DYNAMIC_TYPE));\n            const pureFunctionDeclaration = fn(parameters, [new ReturnStatement(resultMap(resultExpressions))], INFERRED_TYPE);\n            const name = this.freshName();\n            this.statements.push(variable(name).set(pureFunctionDeclaration).toDeclStmt(INFERRED_TYPE, [\n                StmtModifier.Final\n            ]));\n            literalFactory = variable(name);\n            this.literalFactories.set(key, literalFactory);\n        }\n        return { literalFactory, literalFactoryArguments };\n    }\n    /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     */\n    uniqueName(prefix) {\n        return `${prefix}${this.nextNameIndex++}`;\n    }\n    definitionsOf(kind) {\n        switch (kind) {\n            case 2 /* Component */:\n                return this.componentDefinitions;\n            case 1 /* Directive */:\n                return this.directiveDefinitions;\n            case 0 /* Injector */:\n                return this.injectorDefinitions;\n            case 3 /* Pipe */:\n                return this.pipeDefinitions;\n        }\n    }\n    propertyNameOf(kind) {\n        switch (kind) {\n            case 2 /* Component */:\n                return 'ɵcmp';\n            case 1 /* Directive */:\n                return 'ɵdir';\n            case 0 /* Injector */:\n                return 'ɵinj';\n            case 3 /* Pipe */:\n                return 'ɵpipe';\n        }\n    }\n    freshName() {\n        return this.uniqueName(CONSTANT_PREFIX);\n    }\n    keyOf(expression) {\n        return expression.visitExpression(new KeyVisitor(), KEY_CONTEXT);\n    }\n}\n/**\n * Visitor used to determine if 2 expressions are equivalent and can be shared in the\n * `ConstantPool`.\n *\n * When the id (string) generated by the visitor is equal, expressions are considered equivalent.\n */\nclass KeyVisitor {\n    constructor() {\n        this.visitWrappedNodeExpr = invalid$1;\n        this.visitWriteVarExpr = invalid$1;\n        this.visitWriteKeyExpr = invalid$1;\n        this.visitWritePropExpr = invalid$1;\n        this.visitInvokeFunctionExpr = invalid$1;\n        this.visitTaggedTemplateExpr = invalid$1;\n        this.visitInstantiateExpr = invalid$1;\n        this.visitConditionalExpr = invalid$1;\n        this.visitNotExpr = invalid$1;\n        this.visitAssertNotNullExpr = invalid$1;\n        this.visitCastExpr = invalid$1;\n        this.visitFunctionExpr = invalid$1;\n        this.visitUnaryOperatorExpr = invalid$1;\n        this.visitBinaryOperatorExpr = invalid$1;\n        this.visitReadPropExpr = invalid$1;\n        this.visitReadKeyExpr = invalid$1;\n        this.visitCommaExpr = invalid$1;\n        this.visitLocalizedString = invalid$1;\n    }\n    visitLiteralExpr(ast) {\n        return `${typeof ast.value === 'string' ? '\"' + ast.value + '\"' : ast.value}`;\n    }\n    visitLiteralArrayExpr(ast, context) {\n        return `[${ast.entries.map(entry => entry.visitExpression(this, context)).join(',')}]`;\n    }\n    visitLiteralMapExpr(ast, context) {\n        const mapKey = (entry) => {\n            const quote = entry.quoted ? '\"' : '';\n            return `${quote}${entry.key}${quote}`;\n        };\n        const mapEntry = (entry) => `${mapKey(entry)}:${entry.value.visitExpression(this, context)}`;\n        return `{${ast.entries.map(mapEntry).join(',')}`;\n    }\n    visitExternalExpr(ast) {\n        return ast.value.moduleName ? `EX:${ast.value.moduleName}:${ast.value.name}` :\n            `EX:${ast.value.runtime.name}`;\n    }\n    visitReadVarExpr(node) {\n        return `VAR:${node.name}`;\n    }\n    visitTypeofExpr(node, context) {\n        return `TYPEOF:${node.expr.visitExpression(this, context)}`;\n    }\n}\nfunction invalid$1(arg) {\n    throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);\n}\nfunction isVariable(e) {\n    return e instanceof ReadVarExpr;\n}\nfunction isLongStringLiteral(expr) {\n    return expr instanceof LiteralExpr && typeof expr.value === 'string' &&\n        expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CORE$1 = '@angular/core';\nclass Identifiers$1 {\n}\n/* Methods */\nIdentifiers$1.NEW_METHOD = 'factory';\nIdentifiers$1.TRANSFORM_METHOD = 'transform';\nIdentifiers$1.PATCH_DEPS = 'patchedDeps';\nIdentifiers$1.core = { name: null, moduleName: CORE$1 };\n/* Instructions */\nIdentifiers$1.namespaceHTML = { name: 'ɵɵnamespaceHTML', moduleName: CORE$1 };\nIdentifiers$1.namespaceMathML = { name: 'ɵɵnamespaceMathML', moduleName: CORE$1 };\nIdentifiers$1.namespaceSVG = { name: 'ɵɵnamespaceSVG', moduleName: CORE$1 };\nIdentifiers$1.element = { name: 'ɵɵelement', moduleName: CORE$1 };\nIdentifiers$1.elementStart = { name: 'ɵɵelementStart', moduleName: CORE$1 };\nIdentifiers$1.elementEnd = { name: 'ɵɵelementEnd', moduleName: CORE$1 };\nIdentifiers$1.advance = { name: 'ɵɵadvance', moduleName: CORE$1 };\nIdentifiers$1.syntheticHostProperty = { name: 'ɵɵsyntheticHostProperty', moduleName: CORE$1 };\nIdentifiers$1.syntheticHostListener = { name: 'ɵɵsyntheticHostListener', moduleName: CORE$1 };\nIdentifiers$1.attribute = { name: 'ɵɵattribute', moduleName: CORE$1 };\nIdentifiers$1.attributeInterpolate1 = { name: 'ɵɵattributeInterpolate1', moduleName: CORE$1 };\nIdentifiers$1.attributeInterpolate2 = { name: 'ɵɵattributeInterpolate2', moduleName: CORE$1 };\nIdentifiers$1.attributeInterpolate3 = { name: 'ɵɵattributeInterpolate3', moduleName: CORE$1 };\nIdentifiers$1.attributeInterpolate4 = { name: 'ɵɵattributeInterpolate4', moduleName: CORE$1 };\nIdentifiers$1.attributeInterpolate5 = { name: 'ɵɵattributeInterpolate5', moduleName: CORE$1 };\nIdentifiers$1.attributeInterpolate6 = { name: 'ɵɵattributeInterpolate6', moduleName: CORE$1 };\nIdentifiers$1.attributeInterpolate7 = { name: 'ɵɵattributeInterpolate7', moduleName: CORE$1 };\nIdentifiers$1.attributeInterpolate8 = { name: 'ɵɵattributeInterpolate8', moduleName: CORE$1 };\nIdentifiers$1.attributeInterpolateV = { name: 'ɵɵattributeInterpolateV', moduleName: CORE$1 };\nIdentifiers$1.classProp = { name: 'ɵɵclassProp', moduleName: CORE$1 };\nIdentifiers$1.elementContainerStart = { name: 'ɵɵelementContainerStart', moduleName: CORE$1 };\nIdentifiers$1.elementContainerEnd = { name: 'ɵɵelementContainerEnd', moduleName: CORE$1 };\nIdentifiers$1.elementContainer = { name: 'ɵɵelementContainer', moduleName: CORE$1 };\nIdentifiers$1.styleMap = { name: 'ɵɵstyleMap', moduleName: CORE$1 };\nIdentifiers$1.styleMapInterpolate1 = { name: 'ɵɵstyleMapInterpolate1', moduleName: CORE$1 };\nIdentifiers$1.styleMapInterpolate2 = { name: 'ɵɵstyleMapInterpolate2', moduleName: CORE$1 };\nIdentifiers$1.styleMapInterpolate3 = { name: 'ɵɵstyleMapInterpolate3', moduleName: CORE$1 };\nIdentifiers$1.styleMapInterpolate4 = { name: 'ɵɵstyleMapInterpolate4', moduleName: CORE$1 };\nIdentifiers$1.styleMapInterpolate5 = { name: 'ɵɵstyleMapInterpolate5', moduleName: CORE$1 };\nIdentifiers$1.styleMapInterpolate6 = { name: 'ɵɵstyleMapInterpolate6', moduleName: CORE$1 };\nIdentifiers$1.styleMapInterpolate7 = { name: 'ɵɵstyleMapInterpolate7', moduleName: CORE$1 };\nIdentifiers$1.styleMapInterpolate8 = { name: 'ɵɵstyleMapInterpolate8', moduleName: CORE$1 };\nIdentifiers$1.styleMapInterpolateV = { name: 'ɵɵstyleMapInterpolateV', moduleName: CORE$1 };\nIdentifiers$1.classMap = { name: 'ɵɵclassMap', moduleName: CORE$1 };\nIdentifiers$1.classMapInterpolate1 = { name: 'ɵɵclassMapInterpolate1', moduleName: CORE$1 };\nIdentifiers$1.classMapInterpolate2 = { name: 'ɵɵclassMapInterpolate2', moduleName: CORE$1 };\nIdentifiers$1.classMapInterpolate3 = { name: 'ɵɵclassMapInterpolate3', moduleName: CORE$1 };\nIdentifiers$1.classMapInterpolate4 = { name: 'ɵɵclassMapInterpolate4', moduleName: CORE$1 };\nIdentifiers$1.classMapInterpolate5 = { name: 'ɵɵclassMapInterpolate5', moduleName: CORE$1 };\nIdentifiers$1.classMapInterpolate6 = { name: 'ɵɵclassMapInterpolate6', moduleName: CORE$1 };\nIdentifiers$1.classMapInterpolate7 = { name: 'ɵɵclassMapInterpolate7', moduleName: CORE$1 };\nIdentifiers$1.classMapInterpolate8 = { name: 'ɵɵclassMapInterpolate8', moduleName: CORE$1 };\nIdentifiers$1.classMapInterpolateV = { name: 'ɵɵclassMapInterpolateV', moduleName: CORE$1 };\nIdentifiers$1.styleProp = { name: 'ɵɵstyleProp', moduleName: CORE$1 };\nIdentifiers$1.stylePropInterpolate1 = { name: 'ɵɵstylePropInterpolate1', moduleName: CORE$1 };\nIdentifiers$1.stylePropInterpolate2 = { name: 'ɵɵstylePropInterpolate2', moduleName: CORE$1 };\nIdentifiers$1.stylePropInterpolate3 = { name: 'ɵɵstylePropInterpolate3', moduleName: CORE$1 };\nIdentifiers$1.stylePropInterpolate4 = { name: 'ɵɵstylePropInterpolate4', moduleName: CORE$1 };\nIdentifiers$1.stylePropInterpolate5 = { name: 'ɵɵstylePropInterpolate5', moduleName: CORE$1 };\nIdentifiers$1.stylePropInterpolate6 = { name: 'ɵɵstylePropInterpolate6', moduleName: CORE$1 };\nIdentifiers$1.stylePropInterpolate7 = { name: 'ɵɵstylePropInterpolate7', moduleName: CORE$1 };\nIdentifiers$1.stylePropInterpolate8 = { name: 'ɵɵstylePropInterpolate8', moduleName: CORE$1 };\nIdentifiers$1.stylePropInterpolateV = { name: 'ɵɵstylePropInterpolateV', moduleName: CORE$1 };\nIdentifiers$1.nextContext = { name: 'ɵɵnextContext', moduleName: CORE$1 };\nIdentifiers$1.templateCreate = { name: 'ɵɵtemplate', moduleName: CORE$1 };\nIdentifiers$1.text = { name: 'ɵɵtext', moduleName: CORE$1 };\nIdentifiers$1.enableBindings = { name: 'ɵɵenableBindings', moduleName: CORE$1 };\nIdentifiers$1.disableBindings = { name: 'ɵɵdisableBindings', moduleName: CORE$1 };\nIdentifiers$1.getCurrentView = { name: 'ɵɵgetCurrentView', moduleName: CORE$1 };\nIdentifiers$1.textInterpolate = { name: 'ɵɵtextInterpolate', moduleName: CORE$1 };\nIdentifiers$1.textInterpolate1 = { name: 'ɵɵtextInterpolate1', moduleName: CORE$1 };\nIdentifiers$1.textInterpolate2 = { name: 'ɵɵtextInterpolate2', moduleName: CORE$1 };\nIdentifiers$1.textInterpolate3 = { name: 'ɵɵtextInterpolate3', moduleName: CORE$1 };\nIdentifiers$1.textInterpolate4 = { name: 'ɵɵtextInterpolate4', moduleName: CORE$1 };\nIdentifiers$1.textInterpolate5 = { name: 'ɵɵtextInterpolate5', moduleName: CORE$1 };\nIdentifiers$1.textInterpolate6 = { name: 'ɵɵtextInterpolate6', moduleName: CORE$1 };\nIdentifiers$1.textInterpolate7 = { name: 'ɵɵtextInterpolate7', moduleName: CORE$1 };\nIdentifiers$1.textInterpolate8 = { name: 'ɵɵtextInterpolate8', moduleName: CORE$1 };\nIdentifiers$1.textInterpolateV = { name: 'ɵɵtextInterpolateV', moduleName: CORE$1 };\nIdentifiers$1.restoreView = { name: 'ɵɵrestoreView', moduleName: CORE$1 };\nIdentifiers$1.pureFunction0 = { name: 'ɵɵpureFunction0', moduleName: CORE$1 };\nIdentifiers$1.pureFunction1 = { name: 'ɵɵpureFunction1', moduleName: CORE$1 };\nIdentifiers$1.pureFunction2 = { name: 'ɵɵpureFunction2', moduleName: CORE$1 };\nIdentifiers$1.pureFunction3 = { name: 'ɵɵpureFunction3', moduleName: CORE$1 };\nIdentifiers$1.pureFunction4 = { name: 'ɵɵpureFunction4', moduleName: CORE$1 };\nIdentifiers$1.pureFunction5 = { name: 'ɵɵpureFunction5', moduleName: CORE$1 };\nIdentifiers$1.pureFunction6 = { name: 'ɵɵpureFunction6', moduleName: CORE$1 };\nIdentifiers$1.pureFunction7 = { name: 'ɵɵpureFunction7', moduleName: CORE$1 };\nIdentifiers$1.pureFunction8 = { name: 'ɵɵpureFunction8', moduleName: CORE$1 };\nIdentifiers$1.pureFunctionV = { name: 'ɵɵpureFunctionV', moduleName: CORE$1 };\nIdentifiers$1.pipeBind1 = { name: 'ɵɵpipeBind1', moduleName: CORE$1 };\nIdentifiers$1.pipeBind2 = { name: 'ɵɵpipeBind2', moduleName: CORE$1 };\nIdentifiers$1.pipeBind3 = { name: 'ɵɵpipeBind3', moduleName: CORE$1 };\nIdentifiers$1.pipeBind4 = { name: 'ɵɵpipeBind4', moduleName: CORE$1 };\nIdentifiers$1.pipeBindV = { name: 'ɵɵpipeBindV', moduleName: CORE$1 };\nIdentifiers$1.hostProperty = { name: 'ɵɵhostProperty', moduleName: CORE$1 };\nIdentifiers$1.property = { name: 'ɵɵproperty', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate = { name: 'ɵɵpropertyInterpolate', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate1 = { name: 'ɵɵpropertyInterpolate1', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate2 = { name: 'ɵɵpropertyInterpolate2', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate3 = { name: 'ɵɵpropertyInterpolate3', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate4 = { name: 'ɵɵpropertyInterpolate4', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate5 = { name: 'ɵɵpropertyInterpolate5', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate6 = { name: 'ɵɵpropertyInterpolate6', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate7 = { name: 'ɵɵpropertyInterpolate7', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate8 = { name: 'ɵɵpropertyInterpolate8', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolateV = { name: 'ɵɵpropertyInterpolateV', moduleName: CORE$1 };\nIdentifiers$1.i18n = { name: 'ɵɵi18n', moduleName: CORE$1 };\nIdentifiers$1.i18nAttributes = { name: 'ɵɵi18nAttributes', moduleName: CORE$1 };\nIdentifiers$1.i18nExp = { name: 'ɵɵi18nExp', moduleName: CORE$1 };\nIdentifiers$1.i18nStart = { name: 'ɵɵi18nStart', moduleName: CORE$1 };\nIdentifiers$1.i18nEnd = { name: 'ɵɵi18nEnd', moduleName: CORE$1 };\nIdentifiers$1.i18nApply = { name: 'ɵɵi18nApply', moduleName: CORE$1 };\nIdentifiers$1.i18nPostprocess = { name: 'ɵɵi18nPostprocess', moduleName: CORE$1 };\nIdentifiers$1.pipe = { name: 'ɵɵpipe', moduleName: CORE$1 };\nIdentifiers$1.projection = { name: 'ɵɵprojection', moduleName: CORE$1 };\nIdentifiers$1.projectionDef = { name: 'ɵɵprojectionDef', moduleName: CORE$1 };\nIdentifiers$1.reference = { name: 'ɵɵreference', moduleName: CORE$1 };\nIdentifiers$1.inject = { name: 'ɵɵinject', moduleName: CORE$1 };\nIdentifiers$1.injectAttribute = { name: 'ɵɵinjectAttribute', moduleName: CORE$1 };\nIdentifiers$1.directiveInject = { name: 'ɵɵdirectiveInject', moduleName: CORE$1 };\nIdentifiers$1.invalidFactory = { name: 'ɵɵinvalidFactory', moduleName: CORE$1 };\nIdentifiers$1.invalidFactoryDep = { name: 'ɵɵinvalidFactoryDep', moduleName: CORE$1 };\nIdentifiers$1.templateRefExtractor = { name: 'ɵɵtemplateRefExtractor', moduleName: CORE$1 };\nIdentifiers$1.forwardRef = { name: 'forwardRef', moduleName: CORE$1 };\nIdentifiers$1.resolveForwardRef = { name: 'resolveForwardRef', moduleName: CORE$1 };\nIdentifiers$1.ɵɵdefineInjectable = { name: 'ɵɵdefineInjectable', moduleName: CORE$1 };\nIdentifiers$1.declareInjectable = { name: 'ɵɵngDeclareInjectable', moduleName: CORE$1 };\nIdentifiers$1.InjectableDeclaration = { name: 'ɵɵInjectableDeclaration', moduleName: CORE$1 };\nIdentifiers$1.resolveWindow = { name: 'ɵɵresolveWindow', moduleName: CORE$1 };\nIdentifiers$1.resolveDocument = { name: 'ɵɵresolveDocument', moduleName: CORE$1 };\nIdentifiers$1.resolveBody = { name: 'ɵɵresolveBody', moduleName: CORE$1 };\nIdentifiers$1.defineComponent = { name: 'ɵɵdefineComponent', moduleName: CORE$1 };\nIdentifiers$1.declareComponent = { name: 'ɵɵngDeclareComponent', moduleName: CORE$1 };\nIdentifiers$1.setComponentScope = { name: 'ɵɵsetComponentScope', moduleName: CORE$1 };\nIdentifiers$1.ChangeDetectionStrategy = {\n    name: 'ChangeDetectionStrategy',\n    moduleName: CORE$1,\n};\nIdentifiers$1.ViewEncapsulation = {\n    name: 'ViewEncapsulation',\n    moduleName: CORE$1,\n};\nIdentifiers$1.ComponentDeclaration = {\n    name: 'ɵɵComponentDeclaration',\n    moduleName: CORE$1,\n};\nIdentifiers$1.FactoryDeclaration = {\n    name: 'ɵɵFactoryDeclaration',\n    moduleName: CORE$1,\n};\nIdentifiers$1.declareFactory = { name: 'ɵɵngDeclareFactory', moduleName: CORE$1 };\nIdentifiers$1.FactoryTarget = { name: 'ɵɵFactoryTarget', moduleName: CORE$1 };\nIdentifiers$1.defineDirective = { name: 'ɵɵdefineDirective', moduleName: CORE$1 };\nIdentifiers$1.declareDirective = { name: 'ɵɵngDeclareDirective', moduleName: CORE$1 };\nIdentifiers$1.DirectiveDeclaration = {\n    name: 'ɵɵDirectiveDeclaration',\n    moduleName: CORE$1,\n};\nIdentifiers$1.InjectorDef = { name: 'ɵɵInjectorDef', moduleName: CORE$1 };\nIdentifiers$1.InjectorDeclaration = { name: 'ɵɵInjectorDeclaration', moduleName: CORE$1 };\nIdentifiers$1.defineInjector = { name: 'ɵɵdefineInjector', moduleName: CORE$1 };\nIdentifiers$1.declareInjector = { name: 'ɵɵngDeclareInjector', moduleName: CORE$1 };\nIdentifiers$1.NgModuleDeclaration = {\n    name: 'ɵɵNgModuleDeclaration',\n    moduleName: CORE$1,\n};\nIdentifiers$1.ModuleWithProviders = {\n    name: 'ModuleWithProviders',\n    moduleName: CORE$1,\n};\nIdentifiers$1.defineNgModule = { name: 'ɵɵdefineNgModule', moduleName: CORE$1 };\nIdentifiers$1.declareNgModule = { name: 'ɵɵngDeclareNgModule', moduleName: CORE$1 };\nIdentifiers$1.setNgModuleScope = { name: 'ɵɵsetNgModuleScope', moduleName: CORE$1 };\nIdentifiers$1.PipeDeclaration = { name: 'ɵɵPipeDeclaration', moduleName: CORE$1 };\nIdentifiers$1.definePipe = { name: 'ɵɵdefinePipe', moduleName: CORE$1 };\nIdentifiers$1.declarePipe = { name: 'ɵɵngDeclarePipe', moduleName: CORE$1 };\nIdentifiers$1.declareClassMetadata = { name: 'ɵɵngDeclareClassMetadata', moduleName: CORE$1 };\nIdentifiers$1.setClassMetadata = { name: 'ɵsetClassMetadata', moduleName: CORE$1 };\nIdentifiers$1.queryRefresh = { name: 'ɵɵqueryRefresh', moduleName: CORE$1 };\nIdentifiers$1.viewQuery = { name: 'ɵɵviewQuery', moduleName: CORE$1 };\nIdentifiers$1.loadQuery = { name: 'ɵɵloadQuery', moduleName: CORE$1 };\nIdentifiers$1.contentQuery = { name: 'ɵɵcontentQuery', moduleName: CORE$1 };\nIdentifiers$1.NgOnChangesFeature = { name: 'ɵɵNgOnChangesFeature', moduleName: CORE$1 };\nIdentifiers$1.InheritDefinitionFeature = { name: 'ɵɵInheritDefinitionFeature', moduleName: CORE$1 };\nIdentifiers$1.CopyDefinitionFeature = { name: 'ɵɵCopyDefinitionFeature', moduleName: CORE$1 };\nIdentifiers$1.ProvidersFeature = { name: 'ɵɵProvidersFeature', moduleName: CORE$1 };\nIdentifiers$1.listener = { name: 'ɵɵlistener', moduleName: CORE$1 };\nIdentifiers$1.getInheritedFactory = {\n    name: 'ɵɵgetInheritedFactory',\n    moduleName: CORE$1,\n};\n// sanitization-related functions\nIdentifiers$1.sanitizeHtml = { name: 'ɵɵsanitizeHtml', moduleName: CORE$1 };\nIdentifiers$1.sanitizeStyle = { name: 'ɵɵsanitizeStyle', moduleName: CORE$1 };\nIdentifiers$1.sanitizeResourceUrl = { name: 'ɵɵsanitizeResourceUrl', moduleName: CORE$1 };\nIdentifiers$1.sanitizeScript = { name: 'ɵɵsanitizeScript', moduleName: CORE$1 };\nIdentifiers$1.sanitizeUrl = { name: 'ɵɵsanitizeUrl', moduleName: CORE$1 };\nIdentifiers$1.sanitizeUrlOrResourceUrl = { name: 'ɵɵsanitizeUrlOrResourceUrl', moduleName: CORE$1 };\nIdentifiers$1.trustConstantHtml = { name: 'ɵɵtrustConstantHtml', moduleName: CORE$1 };\nIdentifiers$1.trustConstantResourceUrl = { name: 'ɵɵtrustConstantResourceUrl', moduleName: CORE$1 };\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\nconst VERSION$1 = 3;\nconst JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\nclass SourceMapGenerator {\n    constructor(file = null) {\n        this.file = file;\n        this.sourcesContent = new Map();\n        this.lines = [];\n        this.lastCol0 = 0;\n        this.hasMappings = false;\n    }\n    // The content is `null` when the content is expected to be loaded using the URL\n    addSource(url, content = null) {\n        if (!this.sourcesContent.has(url)) {\n            this.sourcesContent.set(url, content);\n        }\n        return this;\n    }\n    addLine() {\n        this.lines.push([]);\n        this.lastCol0 = 0;\n        return this;\n    }\n    addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {\n        if (!this.currentLine) {\n            throw new Error(`A line must be added before mappings can be added`);\n        }\n        if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n            throw new Error(`Unknown source file \"${sourceUrl}\"`);\n        }\n        if (col0 == null) {\n            throw new Error(`The column in the generated code must be provided`);\n        }\n        if (col0 < this.lastCol0) {\n            throw new Error(`Mapping should be added in output order`);\n        }\n        if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n            throw new Error(`The source location must be provided when a source url is provided`);\n        }\n        this.hasMappings = true;\n        this.lastCol0 = col0;\n        this.currentLine.push({ col0, sourceUrl, sourceLine0, sourceCol0 });\n        return this;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get currentLine() {\n        return this.lines.slice(-1)[0];\n    }\n    toJSON() {\n        if (!this.hasMappings) {\n            return null;\n        }\n        const sourcesIndex = new Map();\n        const sources = [];\n        const sourcesContent = [];\n        Array.from(this.sourcesContent.keys()).forEach((url, i) => {\n            sourcesIndex.set(url, i);\n            sources.push(url);\n            sourcesContent.push(this.sourcesContent.get(url) || null);\n        });\n        let mappings = '';\n        let lastCol0 = 0;\n        let lastSourceIndex = 0;\n        let lastSourceLine0 = 0;\n        let lastSourceCol0 = 0;\n        this.lines.forEach(segments => {\n            lastCol0 = 0;\n            mappings += segments\n                .map(segment => {\n                // zero-based starting column of the line in the generated code\n                let segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n                lastCol0 = segment.col0;\n                if (segment.sourceUrl != null) {\n                    // zero-based index into the “sources” list\n                    segAsStr +=\n                        toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);\n                    lastSourceIndex = sourcesIndex.get(segment.sourceUrl);\n                    // the zero-based starting line in the original source\n                    segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);\n                    lastSourceLine0 = segment.sourceLine0;\n                    // the zero-based starting column in the original source\n                    segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);\n                    lastSourceCol0 = segment.sourceCol0;\n                }\n                return segAsStr;\n            })\n                .join(',');\n            mappings += ';';\n        });\n        mappings = mappings.slice(0, -1);\n        return {\n            'file': this.file || '',\n            'version': VERSION$1,\n            'sourceRoot': '',\n            'sources': sources,\n            'sourcesContent': sourcesContent,\n            'mappings': mappings,\n        };\n    }\n    toJsComment() {\n        return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :\n            '';\n    }\n}\nfunction toBase64String(value) {\n    let b64 = '';\n    const encoded = utf8Encode(value);\n    for (let i = 0; i < encoded.length;) {\n        const i1 = encoded[i++];\n        const i2 = i < encoded.length ? encoded[i++] : null;\n        const i3 = i < encoded.length ? encoded[i++] : null;\n        b64 += toBase64Digit(i1 >> 2);\n        b64 += toBase64Digit(((i1 & 3) << 4) | (i2 === null ? 0 : i2 >> 4));\n        b64 += i2 === null ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 === null ? 0 : i3 >> 6));\n        b64 += i2 === null || i3 === null ? '=' : toBase64Digit(i3 & 63);\n    }\n    return b64;\n}\nfunction toBase64VLQ(value) {\n    value = value < 0 ? ((-value) << 1) + 1 : value << 1;\n    let out = '';\n    do {\n        let digit = value & 31;\n        value = value >> 5;\n        if (value > 0) {\n            digit = digit | 32;\n        }\n        out += toBase64Digit(digit);\n    } while (value > 0);\n    return out;\n}\nconst B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfunction toBase64Digit(value) {\n    if (value < 0 || value >= 64) {\n        throw new Error(`Can only encode value in the range [0, 63]`);\n    }\n    return B64_DIGITS[value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nconst _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nconst _INDENT_WITH = '  ';\nconst CATCH_ERROR_VAR = variable('error', null, null);\nconst CATCH_STACK_VAR = variable('stack', null, null);\nclass _EmittedLine {\n    constructor(indent) {\n        this.indent = indent;\n        this.partsLength = 0;\n        this.parts = [];\n        this.srcSpans = [];\n    }\n}\nclass EmitterVisitorContext {\n    constructor(_indent) {\n        this._indent = _indent;\n        this._classes = [];\n        this._preambleLineCount = 0;\n        this._lines = [new _EmittedLine(_indent)];\n    }\n    static createRoot() {\n        return new EmitterVisitorContext(0);\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get _currentLine() {\n        return this._lines[this._lines.length - 1];\n    }\n    println(from, lastPart = '') {\n        this.print(from || null, lastPart, true);\n    }\n    lineIsEmpty() {\n        return this._currentLine.parts.length === 0;\n    }\n    lineLength() {\n        return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;\n    }\n    print(from, part, newLine = false) {\n        if (part.length > 0) {\n            this._currentLine.parts.push(part);\n            this._currentLine.partsLength += part.length;\n            this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n        }\n        if (newLine) {\n            this._lines.push(new _EmittedLine(this._indent));\n        }\n    }\n    removeEmptyLastLine() {\n        if (this.lineIsEmpty()) {\n            this._lines.pop();\n        }\n    }\n    incIndent() {\n        this._indent++;\n        if (this.lineIsEmpty()) {\n            this._currentLine.indent = this._indent;\n        }\n    }\n    decIndent() {\n        this._indent--;\n        if (this.lineIsEmpty()) {\n            this._currentLine.indent = this._indent;\n        }\n    }\n    pushClass(clazz) {\n        this._classes.push(clazz);\n    }\n    popClass() {\n        return this._classes.pop();\n    }\n    get currentClass() {\n        return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n    }\n    toSource() {\n        return this.sourceLines\n            .map(l => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '')\n            .join('\\n');\n    }\n    toSourceMapGenerator(genFilePath, startsAtLine = 0) {\n        const map = new SourceMapGenerator(genFilePath);\n        let firstOffsetMapped = false;\n        const mapFirstOffsetIfNeeded = () => {\n            if (!firstOffsetMapped) {\n                // Add a single space so that tools won't try to load the file from disk.\n                // Note: We are using virtual urls like `ng:///`, so we have to\n                // provide a content here.\n                map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);\n                firstOffsetMapped = true;\n            }\n        };\n        for (let i = 0; i < startsAtLine; i++) {\n            map.addLine();\n            mapFirstOffsetIfNeeded();\n        }\n        this.sourceLines.forEach((line, lineIdx) => {\n            map.addLine();\n            const spans = line.srcSpans;\n            const parts = line.parts;\n            let col0 = line.indent * _INDENT_WITH.length;\n            let spanIdx = 0;\n            // skip leading parts without source spans\n            while (spanIdx < spans.length && !spans[spanIdx]) {\n                col0 += parts[spanIdx].length;\n                spanIdx++;\n            }\n            if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {\n                firstOffsetMapped = true;\n            }\n            else {\n                mapFirstOffsetIfNeeded();\n            }\n            while (spanIdx < spans.length) {\n                const span = spans[spanIdx];\n                const source = span.start.file;\n                const sourceLine = span.start.line;\n                const sourceCol = span.start.col;\n                map.addSource(source.url, source.content)\n                    .addMapping(col0, source.url, sourceLine, sourceCol);\n                col0 += parts[spanIdx].length;\n                spanIdx++;\n                // assign parts without span or the same span to the previous segment\n                while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n                    col0 += parts[spanIdx].length;\n                    spanIdx++;\n                }\n            }\n        });\n        return map;\n    }\n    setPreambleLineCount(count) {\n        return this._preambleLineCount = count;\n    }\n    spanOf(line, column) {\n        const emittedLine = this._lines[line - this._preambleLineCount];\n        if (emittedLine) {\n            let columnsLeft = column - _createIndent(emittedLine.indent).length;\n            for (let partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {\n                const part = emittedLine.parts[partIndex];\n                if (part.length > columnsLeft) {\n                    return emittedLine.srcSpans[partIndex];\n                }\n                columnsLeft -= part.length;\n            }\n        }\n        return null;\n    }\n    /**\n     * @internal strip this from published d.ts files due to\n     * https://github.com/microsoft/TypeScript/issues/36216\n     */\n    get sourceLines() {\n        if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n            return this._lines.slice(0, -1);\n        }\n        return this._lines;\n    }\n}\nclass AbstractEmitterVisitor {\n    constructor(_escapeDollarInStrings) {\n        this._escapeDollarInStrings = _escapeDollarInStrings;\n    }\n    printLeadingComments(stmt, ctx) {\n        if (stmt.leadingComments === undefined) {\n            return;\n        }\n        for (const comment of stmt.leadingComments) {\n            if (comment instanceof JSDocComment) {\n                ctx.print(stmt, `/*${comment.toString()}*/`, comment.trailingNewline);\n            }\n            else {\n                if (comment.multiline) {\n                    ctx.print(stmt, `/* ${comment.text} */`, comment.trailingNewline);\n                }\n                else {\n                    comment.text.split('\\n').forEach((line) => {\n                        ctx.println(stmt, `// ${line}`);\n                    });\n                }\n            }\n        }\n    }\n    visitExpressionStmt(stmt, ctx) {\n        this.printLeadingComments(stmt, ctx);\n        stmt.expr.visitExpression(this, ctx);\n        ctx.println(stmt, ';');\n        return null;\n    }\n    visitReturnStmt(stmt, ctx) {\n        this.printLeadingComments(stmt, ctx);\n        ctx.print(stmt, `return `);\n        stmt.value.visitExpression(this, ctx);\n        ctx.println(stmt, ';');\n        return null;\n    }\n    visitIfStmt(stmt, ctx) {\n        this.printLeadingComments(stmt, ctx);\n        ctx.print(stmt, `if (`);\n        stmt.condition.visitExpression(this, ctx);\n        ctx.print(stmt, `) {`);\n        const hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;\n        if (stmt.trueCase.length <= 1 && !hasElseCase) {\n            ctx.print(stmt, ` `);\n            this.visitAllStatements(stmt.trueCase, ctx);\n            ctx.removeEmptyLastLine();\n            ctx.print(stmt, ` `);\n        }\n        else {\n            ctx.println();\n            ctx.incIndent();\n            this.visitAllStatements(stmt.trueCase, ctx);\n            ctx.decIndent();\n            if (hasElseCase) {\n                ctx.println(stmt, `} else {`);\n                ctx.incIndent();\n                this.visitAllStatements(stmt.falseCase, ctx);\n                ctx.decIndent();\n            }\n        }\n        ctx.println(stmt, `}`);\n        return null;\n    }\n    visitThrowStmt(stmt, ctx) {\n        this.printLeadingComments(stmt, ctx);\n        ctx.print(stmt, `throw `);\n        stmt.error.visitExpression(this, ctx);\n        ctx.println(stmt, `;`);\n        return null;\n    }\n    visitWriteVarExpr(expr, ctx) {\n        const lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        ctx.print(expr, `${expr.name} = `);\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    }\n    visitWriteKeyExpr(expr, ctx) {\n        const lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        expr.receiver.visitExpression(this, ctx);\n        ctx.print(expr, `[`);\n        expr.index.visitExpression(this, ctx);\n        ctx.print(expr, `] = `);\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    }\n    visitWritePropExpr(expr, ctx) {\n        const lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        expr.receiver.visitExpression(this, ctx);\n        ctx.print(expr, `.${expr.name} = `);\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    }\n    visitInvokeFunctionExpr(expr, ctx) {\n        expr.fn.visitExpression(this, ctx);\n        ctx.print(expr, `(`);\n        this.visitAllExpressions(expr.args, ctx, ',');\n        ctx.print(expr, `)`);\n        return null;\n    }\n    visitTaggedTemplateExpr(expr, ctx) {\n        expr.tag.visitExpression(this, ctx);\n        ctx.print(expr, '`' + expr.template.elements[0].rawText);\n        for (let i = 1; i < expr.template.elements.length; i++) {\n            ctx.print(expr, '${');\n            expr.template.expressions[i - 1].visitExpression(this, ctx);\n            ctx.print(expr, `}${expr.template.elements[i].rawText}`);\n        }\n        ctx.print(expr, '`');\n        return null;\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        throw new Error('Abstract emitter cannot visit WrappedNodeExpr.');\n    }\n    visitTypeofExpr(expr, ctx) {\n        ctx.print(expr, 'typeof ');\n        expr.expr.visitExpression(this, ctx);\n    }\n    visitReadVarExpr(ast, ctx) {\n        let varName = ast.name;\n        if (ast.builtin != null) {\n            switch (ast.builtin) {\n                case BuiltinVar.Super:\n                    varName = 'super';\n                    break;\n                case BuiltinVar.This:\n                    varName = 'this';\n                    break;\n                case BuiltinVar.CatchError:\n                    varName = CATCH_ERROR_VAR.name;\n                    break;\n                case BuiltinVar.CatchStack:\n                    varName = CATCH_STACK_VAR.name;\n                    break;\n                default:\n                    throw new Error(`Unknown builtin variable ${ast.builtin}`);\n            }\n        }\n        ctx.print(ast, varName);\n        return null;\n    }\n    visitInstantiateExpr(ast, ctx) {\n        ctx.print(ast, `new `);\n        ast.classExpr.visitExpression(this, ctx);\n        ctx.print(ast, `(`);\n        this.visitAllExpressions(ast.args, ctx, ',');\n        ctx.print(ast, `)`);\n        return null;\n    }\n    visitLiteralExpr(ast, ctx) {\n        const value = ast.value;\n        if (typeof value === 'string') {\n            ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n        }\n        else {\n            ctx.print(ast, `${value}`);\n        }\n        return null;\n    }\n    visitLocalizedString(ast, ctx) {\n        const head = ast.serializeI18nHead();\n        ctx.print(ast, '$localize `' + head.raw);\n        for (let i = 1; i < ast.messageParts.length; i++) {\n            ctx.print(ast, '${');\n            ast.expressions[i - 1].visitExpression(this, ctx);\n            ctx.print(ast, `}${ast.serializeI18nTemplatePart(i).raw}`);\n        }\n        ctx.print(ast, '`');\n        return null;\n    }\n    visitConditionalExpr(ast, ctx) {\n        ctx.print(ast, `(`);\n        ast.condition.visitExpression(this, ctx);\n        ctx.print(ast, '? ');\n        ast.trueCase.visitExpression(this, ctx);\n        ctx.print(ast, ': ');\n        ast.falseCase.visitExpression(this, ctx);\n        ctx.print(ast, `)`);\n        return null;\n    }\n    visitNotExpr(ast, ctx) {\n        ctx.print(ast, '!');\n        ast.condition.visitExpression(this, ctx);\n        return null;\n    }\n    visitAssertNotNullExpr(ast, ctx) {\n        ast.condition.visitExpression(this, ctx);\n        return null;\n    }\n    visitUnaryOperatorExpr(ast, ctx) {\n        let opStr;\n        switch (ast.operator) {\n            case UnaryOperator.Plus:\n                opStr = '+';\n                break;\n            case UnaryOperator.Minus:\n                opStr = '-';\n                break;\n            default:\n                throw new Error(`Unknown operator ${ast.operator}`);\n        }\n        if (ast.parens)\n            ctx.print(ast, `(`);\n        ctx.print(ast, opStr);\n        ast.expr.visitExpression(this, ctx);\n        if (ast.parens)\n            ctx.print(ast, `)`);\n        return null;\n    }\n    visitBinaryOperatorExpr(ast, ctx) {\n        let opStr;\n        switch (ast.operator) {\n            case BinaryOperator.Equals:\n                opStr = '==';\n                break;\n            case BinaryOperator.Identical:\n                opStr = '===';\n                break;\n            case BinaryOperator.NotEquals:\n                opStr = '!=';\n                break;\n            case BinaryOperator.NotIdentical:\n                opStr = '!==';\n                break;\n            case BinaryOperator.And:\n                opStr = '&&';\n                break;\n            case BinaryOperator.BitwiseAnd:\n                opStr = '&';\n                break;\n            case BinaryOperator.Or:\n                opStr = '||';\n                break;\n            case BinaryOperator.Plus:\n                opStr = '+';\n                break;\n            case BinaryOperator.Minus:\n                opStr = '-';\n                break;\n            case BinaryOperator.Divide:\n                opStr = '/';\n                break;\n            case BinaryOperator.Multiply:\n                opStr = '*';\n                break;\n            case BinaryOperator.Modulo:\n                opStr = '%';\n                break;\n            case BinaryOperator.Lower:\n                opStr = '<';\n                break;\n            case BinaryOperator.LowerEquals:\n                opStr = '<=';\n                break;\n            case BinaryOperator.Bigger:\n                opStr = '>';\n                break;\n            case BinaryOperator.BiggerEquals:\n                opStr = '>=';\n                break;\n            case BinaryOperator.NullishCoalesce:\n                opStr = '??';\n                break;\n            default:\n                throw new Error(`Unknown operator ${ast.operator}`);\n        }\n        if (ast.parens)\n            ctx.print(ast, `(`);\n        ast.lhs.visitExpression(this, ctx);\n        ctx.print(ast, ` ${opStr} `);\n        ast.rhs.visitExpression(this, ctx);\n        if (ast.parens)\n            ctx.print(ast, `)`);\n        return null;\n    }\n    visitReadPropExpr(ast, ctx) {\n        ast.receiver.visitExpression(this, ctx);\n        ctx.print(ast, `.`);\n        ctx.print(ast, ast.name);\n        return null;\n    }\n    visitReadKeyExpr(ast, ctx) {\n        ast.receiver.visitExpression(this, ctx);\n        ctx.print(ast, `[`);\n        ast.index.visitExpression(this, ctx);\n        ctx.print(ast, `]`);\n        return null;\n    }\n    visitLiteralArrayExpr(ast, ctx) {\n        ctx.print(ast, `[`);\n        this.visitAllExpressions(ast.entries, ctx, ',');\n        ctx.print(ast, `]`);\n        return null;\n    }\n    visitLiteralMapExpr(ast, ctx) {\n        ctx.print(ast, `{`);\n        this.visitAllObjects(entry => {\n            ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);\n            entry.value.visitExpression(this, ctx);\n        }, ast.entries, ctx, ',');\n        ctx.print(ast, `}`);\n        return null;\n    }\n    visitCommaExpr(ast, ctx) {\n        ctx.print(ast, '(');\n        this.visitAllExpressions(ast.parts, ctx, ',');\n        ctx.print(ast, ')');\n        return null;\n    }\n    visitAllExpressions(expressions, ctx, separator) {\n        this.visitAllObjects(expr => expr.visitExpression(this, ctx), expressions, ctx, separator);\n    }\n    visitAllObjects(handler, expressions, ctx, separator) {\n        let incrementedIndent = false;\n        for (let i = 0; i < expressions.length; i++) {\n            if (i > 0) {\n                if (ctx.lineLength() > 80) {\n                    ctx.print(null, separator, true);\n                    if (!incrementedIndent) {\n                        // continuation are marked with double indent.\n                        ctx.incIndent();\n                        ctx.incIndent();\n                        incrementedIndent = true;\n                    }\n                }\n                else {\n                    ctx.print(null, separator, false);\n                }\n            }\n            handler(expressions[i]);\n        }\n        if (incrementedIndent) {\n            // continuation are marked with double indent.\n            ctx.decIndent();\n            ctx.decIndent();\n        }\n    }\n    visitAllStatements(statements, ctx) {\n        statements.forEach((stmt) => stmt.visitStatement(this, ctx));\n    }\n}\nfunction escapeIdentifier(input, escapeDollar, alwaysQuote = true) {\n    if (input == null) {\n        return null;\n    }\n    const body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match) => {\n        if (match[0] == '$') {\n            return escapeDollar ? '\\\\$' : '$';\n        }\n        else if (match[0] == '\\n') {\n            return '\\\\n';\n        }\n        else if (match[0] == '\\r') {\n            return '\\\\r';\n        }\n        else {\n            return `\\\\${match[0]}`;\n        }\n    });\n    const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n    return requiresQuotes ? `'${body}'` : body;\n}\nfunction _createIndent(count) {\n    let res = '';\n    for (let i = 0; i < count; i++) {\n        res += _INDENT_WITH;\n    }\n    return res;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction typeWithParameters(type, numParams) {\n    if (numParams === 0) {\n        return expressionType(type);\n    }\n    const params = [];\n    for (let i = 0; i < numParams; i++) {\n        params.push(DYNAMIC_TYPE);\n    }\n    return expressionType(type, undefined, params);\n}\nconst ANIMATE_SYMBOL_PREFIX = '@';\nfunction prepareSyntheticPropertyName(name) {\n    return `${ANIMATE_SYMBOL_PREFIX}${name}`;\n}\nfunction prepareSyntheticListenerName(name, phase) {\n    return `${ANIMATE_SYMBOL_PREFIX}${name}.${phase}`;\n}\nfunction getSafePropertyAccessString(accessor, name) {\n    const escapedName = escapeIdentifier(name, false, false);\n    return escapedName !== name ? `${accessor}[${escapedName}]` : `${accessor}.${name}`;\n}\nfunction prepareSyntheticListenerFunctionName(name, phase) {\n    return `animation_${name}_${phase}`;\n}\nfunction jitOnlyGuardedExpression(expr) {\n    return guardedExpression('ngJitMode', expr);\n}\nfunction devOnlyGuardedExpression(expr) {\n    return guardedExpression('ngDevMode', expr);\n}\nfunction guardedExpression(guard, expr) {\n    const guardExpr = new ExternalExpr({ name: guard, moduleName: null });\n    const guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal('undefined'));\n    const guardUndefinedOrTrue = new BinaryOperatorExpr(BinaryOperator.Or, guardNotDefined, guardExpr, /* type */ undefined, \n    /* sourceSpan */ undefined, true);\n    return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);\n}\nfunction wrapReference(value) {\n    const wrapped = new WrappedNodeExpr(value);\n    return { value: wrapped, type: wrapped };\n}\nfunction refsToArray(refs, shouldForwardDeclare) {\n    const values = literalArr(refs.map(ref => ref.value));\n    return shouldForwardDeclare ? fn([], [new ReturnStatement(values)]) : values;\n}\nfunction createMayBeForwardRefExpression(expression, forwardRef) {\n    return { expression, forwardRef };\n}\n/**\n * Convert a `MaybeForwardRefExpression` to an `Expression`, possibly wrapping its expression in a\n * `forwardRef()` call.\n *\n * If `MaybeForwardRefExpression.forwardRef` is `ForwardRefHandling.Unwrapped` then the expression\n * was originally wrapped in a `forwardRef()` call to prevent the value from being eagerly evaluated\n * in the code.\n *\n * See `packages/compiler-cli/src/ngtsc/annotations/src/injectable.ts` and\n * `packages/compiler/src/jit_compiler_facade.ts` for more information.\n */\nfunction convertFromMaybeForwardRefExpression({ expression, forwardRef }) {\n    switch (forwardRef) {\n        case 0 /* None */:\n        case 1 /* Wrapped */:\n            return expression;\n        case 2 /* Unwrapped */:\n            return generateForwardRef(expression);\n    }\n}\n/**\n * Generate an expression that has the given `expr` wrapped in the following form:\n *\n * ```\n * forwardRef(() => expr)\n * ```\n */\nfunction generateForwardRef(expr) {\n    return importExpr(Identifiers$1.forwardRef).callFn([fn([], [new ReturnStatement(expr)])]);\n}\n\nvar R3FactoryDelegateType;\n(function (R3FactoryDelegateType) {\n    R3FactoryDelegateType[R3FactoryDelegateType[\"Class\"] = 0] = \"Class\";\n    R3FactoryDelegateType[R3FactoryDelegateType[\"Function\"] = 1] = \"Function\";\n})(R3FactoryDelegateType || (R3FactoryDelegateType = {}));\nvar FactoryTarget$1;\n(function (FactoryTarget) {\n    FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n    FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n    FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n    FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n    FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget$1 || (FactoryTarget$1 = {}));\n/**\n * Construct a factory function expression for the given `R3FactoryMetadata`.\n */\nfunction compileFactoryFunction(meta) {\n    const t = variable('t');\n    let baseFactoryVar = null;\n    // The type to instantiate via constructor invocation. If there is no delegated factory, meaning\n    // this type is always created by constructor invocation, then this is the type-to-create\n    // parameter provided by the user (t) if specified, or the current type if not. If there is a\n    // delegated factory (which is used to create the current type) then this is only the type-to-\n    // create parameter (t).\n    const typeForCtor = !isDelegatedFactoryMetadata(meta) ?\n        new BinaryOperatorExpr(BinaryOperator.Or, t, meta.internalType) :\n        t;\n    let ctorExpr = null;\n    if (meta.deps !== null) {\n        // There is a constructor (either explicitly or implicitly defined).\n        if (meta.deps !== 'invalid') {\n            ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.target));\n        }\n    }\n    else {\n        // There is no constructor, use the base class' factory to construct typeForCtor.\n        baseFactoryVar = variable(`ɵ${meta.name}_BaseFactory`);\n        ctorExpr = baseFactoryVar.callFn([typeForCtor]);\n    }\n    const body = [];\n    let retExpr = null;\n    function makeConditionalFactory(nonCtorExpr) {\n        const r = variable('r');\n        body.push(r.set(NULL_EXPR).toDeclStmt());\n        const ctorStmt = ctorExpr !== null ? r.set(ctorExpr).toStmt() :\n            importExpr(Identifiers$1.invalidFactory).callFn([]).toStmt();\n        body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));\n        return r;\n    }\n    if (isDelegatedFactoryMetadata(meta)) {\n        // This type is created with a delegated factory. If a type parameter is not specified, call\n        // the factory instead.\n        const delegateArgs = injectDependencies(meta.delegateDeps, meta.target);\n        // Either call `new delegate(...)` or `delegate(...)` depending on meta.delegateType.\n        const factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ?\n            InstantiateExpr :\n            InvokeFunctionExpr)(meta.delegate, delegateArgs);\n        retExpr = makeConditionalFactory(factoryExpr);\n    }\n    else if (isExpressionFactoryMetadata(meta)) {\n        // TODO(alxhub): decide whether to lower the value here or in the caller\n        retExpr = makeConditionalFactory(meta.expression);\n    }\n    else {\n        retExpr = ctorExpr;\n    }\n    if (retExpr === null) {\n        // The expression cannot be formed so render an `ɵɵinvalidFactory()` call.\n        body.push(importExpr(Identifiers$1.invalidFactory).callFn([]).toStmt());\n    }\n    else if (baseFactoryVar !== null) {\n        // This factory uses a base factory, so call `ɵɵgetInheritedFactory()` to compute it.\n        const getInheritedFactoryCall = importExpr(Identifiers$1.getInheritedFactory).callFn([meta.internalType]);\n        // Memoize the base factoryFn: `baseFactory || (baseFactory = ɵɵgetInheritedFactory(...))`\n        const baseFactory = new BinaryOperatorExpr(BinaryOperator.Or, baseFactoryVar, baseFactoryVar.set(getInheritedFactoryCall));\n        body.push(new ReturnStatement(baseFactory.callFn([typeForCtor])));\n    }\n    else {\n        // This is straightforward factory, just return it.\n        body.push(new ReturnStatement(retExpr));\n    }\n    let factoryFn = fn([new FnParam('t', DYNAMIC_TYPE)], body, INFERRED_TYPE, undefined, `${meta.name}_Factory`);\n    if (baseFactoryVar !== null) {\n        // There is a base factory variable so wrap its declaration along with the factory function into\n        // an IIFE.\n        factoryFn = fn([], [\n            new DeclareVarStmt(baseFactoryVar.name), new ReturnStatement(factoryFn)\n        ]).callFn([], /* sourceSpan */ undefined, /* pure */ true);\n    }\n    return {\n        expression: factoryFn,\n        statements: [],\n        type: createFactoryType(meta),\n    };\n}\nfunction createFactoryType(meta) {\n    const ctorDepsType = meta.deps !== null && meta.deps !== 'invalid' ? createCtorDepsType(meta.deps) : NONE_TYPE;\n    return expressionType(importExpr(Identifiers$1.FactoryDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount), ctorDepsType]));\n}\nfunction injectDependencies(deps, target) {\n    return deps.map((dep, index) => compileInjectDependency(dep, target, index));\n}\nfunction compileInjectDependency(dep, target, index) {\n    // Interpret the dependency according to its resolved type.\n    if (dep.token === null) {\n        return importExpr(Identifiers$1.invalidFactoryDep).callFn([literal(index)]);\n    }\n    else if (dep.attributeNameType === null) {\n        // Build up the injection flags according to the metadata.\n        const flags = 0 /* Default */ | (dep.self ? 2 /* Self */ : 0) |\n            (dep.skipSelf ? 4 /* SkipSelf */ : 0) | (dep.host ? 1 /* Host */ : 0) |\n            (dep.optional ? 8 /* Optional */ : 0) |\n            (target === FactoryTarget$1.Pipe ? 16 /* ForPipe */ : 0);\n        // If this dependency is optional or otherwise has non-default flags, then additional\n        // parameters describing how to inject the dependency must be passed to the inject function\n        // that's being used.\n        let flagsParam = (flags !== 0 /* Default */ || dep.optional) ? literal(flags) : null;\n        // Build up the arguments to the injectFn call.\n        const injectArgs = [dep.token];\n        if (flagsParam) {\n            injectArgs.push(flagsParam);\n        }\n        const injectFn = getInjectFn(target);\n        return importExpr(injectFn).callFn(injectArgs);\n    }\n    else {\n        // The `dep.attributeTypeName` value is defined, which indicates that this is an `@Attribute()`\n        // type dependency. For the generated JS we still want to use the `dep.token` value in case the\n        // name given for the attribute is not a string literal. For example given `@Attribute(foo())`,\n        // we want to generate `ɵɵinjectAttribute(foo())`.\n        //\n        // The `dep.attributeTypeName` is only actually used (in `createCtorDepType()`) to generate\n        // typings.\n        return importExpr(Identifiers$1.injectAttribute).callFn([dep.token]);\n    }\n}\nfunction createCtorDepsType(deps) {\n    let hasTypes = false;\n    const attributeTypes = deps.map(dep => {\n        const type = createCtorDepType(dep);\n        if (type !== null) {\n            hasTypes = true;\n            return type;\n        }\n        else {\n            return literal(null);\n        }\n    });\n    if (hasTypes) {\n        return expressionType(literalArr(attributeTypes));\n    }\n    else {\n        return NONE_TYPE;\n    }\n}\nfunction createCtorDepType(dep) {\n    const entries = [];\n    if (dep.attributeNameType !== null) {\n        entries.push({ key: 'attribute', value: dep.attributeNameType, quoted: false });\n    }\n    if (dep.optional) {\n        entries.push({ key: 'optional', value: literal(true), quoted: false });\n    }\n    if (dep.host) {\n        entries.push({ key: 'host', value: literal(true), quoted: false });\n    }\n    if (dep.self) {\n        entries.push({ key: 'self', value: literal(true), quoted: false });\n    }\n    if (dep.skipSelf) {\n        entries.push({ key: 'skipSelf', value: literal(true), quoted: false });\n    }\n    return entries.length > 0 ? literalMap(entries) : null;\n}\nfunction isDelegatedFactoryMetadata(meta) {\n    return meta.delegateType !== undefined;\n}\nfunction isExpressionFactoryMetadata(meta) {\n    return meta.expression !== undefined;\n}\nfunction getInjectFn(target) {\n    switch (target) {\n        case FactoryTarget$1.Component:\n        case FactoryTarget$1.Directive:\n        case FactoryTarget$1.Pipe:\n            return Identifiers$1.directiveInject;\n        case FactoryTarget$1.NgModule:\n        case FactoryTarget$1.Injectable:\n        default:\n            return Identifiers$1.inject;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This is an R3 `Node`-like wrapper for a raw `html.Comment` node. We do not currently\n * require the implementation of a visitor for Comments as they are only collected at\n * the top-level of the R3 AST, and only if `Render3ParseOptions['collectCommentNodes']`\n * is true.\n */\nclass Comment$1 {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(_visitor) {\n        throw new Error('visit() not implemented for Comment');\n    }\n}\nclass Text$3 {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor) {\n        return visitor.visitText(this);\n    }\n}\nclass BoundText {\n    constructor(value, sourceSpan, i18n) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitBoundText(this);\n    }\n}\n/**\n * Represents a text attribute in the template.\n *\n * `valueSpan` may not be present in cases where there is no value `<div a></div>`.\n * `keySpan` may also not be present for synthetic attributes from ICU expansions.\n */\nclass TextAttribute {\n    constructor(name, value, sourceSpan, keySpan, valueSpan, i18n) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitTextAttribute(this);\n    }\n}\nclass BoundAttribute {\n    constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n        this.i18n = i18n;\n    }\n    static fromBoundElementProperty(prop, i18n) {\n        if (prop.keySpan === undefined) {\n            throw new Error(`Unexpected state: keySpan must be defined for bound attributes but was not for ${prop.name}: ${prop.sourceSpan}`);\n        }\n        return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n);\n    }\n    visit(visitor) {\n        return visitor.visitBoundAttribute(this);\n    }\n}\nclass BoundEvent {\n    constructor(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {\n        this.name = name;\n        this.type = type;\n        this.handler = handler;\n        this.target = target;\n        this.phase = phase;\n        this.sourceSpan = sourceSpan;\n        this.handlerSpan = handlerSpan;\n        this.keySpan = keySpan;\n    }\n    static fromParsedEvent(event) {\n        const target = event.type === 0 /* Regular */ ? event.targetOrPhase : null;\n        const phase = event.type === 1 /* Animation */ ? event.targetOrPhase : null;\n        if (event.keySpan === undefined) {\n            throw new Error(`Unexpected state: keySpan must be defined for bound event but was not for ${event.name}: ${event.sourceSpan}`);\n        }\n        return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);\n    }\n    visit(visitor) {\n        return visitor.visitBoundEvent(this);\n    }\n}\nclass Element$1 {\n    constructor(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n        this.name = name;\n        this.attributes = attributes;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.children = children;\n        this.references = references;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitElement(this);\n    }\n}\nclass Template {\n    constructor(tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n        this.tagName = tagName;\n        this.attributes = attributes;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.templateAttrs = templateAttrs;\n        this.children = children;\n        this.references = references;\n        this.variables = variables;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitTemplate(this);\n    }\n}\nclass Content {\n    constructor(selector, attributes, sourceSpan, i18n) {\n        this.selector = selector;\n        this.attributes = attributes;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n        this.name = 'ng-content';\n    }\n    visit(visitor) {\n        return visitor.visitContent(this);\n    }\n}\nclass Variable {\n    constructor(name, value, sourceSpan, keySpan, valueSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n    }\n    visit(visitor) {\n        return visitor.visitVariable(this);\n    }\n}\nclass Reference {\n    constructor(name, value, sourceSpan, keySpan, valueSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n    }\n    visit(visitor) {\n        return visitor.visitReference(this);\n    }\n}\nclass Icu$1 {\n    constructor(vars, placeholders, sourceSpan, i18n) {\n        this.vars = vars;\n        this.placeholders = placeholders;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) {\n        return visitor.visitIcu(this);\n    }\n}\nclass NullVisitor {\n    visitElement(element) { }\n    visitTemplate(template) { }\n    visitContent(content) { }\n    visitVariable(variable) { }\n    visitReference(reference) { }\n    visitTextAttribute(attribute) { }\n    visitBoundAttribute(attribute) { }\n    visitBoundEvent(attribute) { }\n    visitText(text) { }\n    visitBoundText(text) { }\n    visitIcu(icu) { }\n}\nclass RecursiveVisitor$1 {\n    visitElement(element) {\n        visitAll$1(this, element.attributes);\n        visitAll$1(this, element.inputs);\n        visitAll$1(this, element.outputs);\n        visitAll$1(this, element.children);\n        visitAll$1(this, element.references);\n    }\n    visitTemplate(template) {\n        visitAll$1(this, template.attributes);\n        visitAll$1(this, template.inputs);\n        visitAll$1(this, template.outputs);\n        visitAll$1(this, template.children);\n        visitAll$1(this, template.references);\n        visitAll$1(this, template.variables);\n    }\n    visitContent(content) { }\n    visitVariable(variable) { }\n    visitReference(reference) { }\n    visitTextAttribute(attribute) { }\n    visitBoundAttribute(attribute) { }\n    visitBoundEvent(attribute) { }\n    visitText(text) { }\n    visitBoundText(text) { }\n    visitIcu(icu) { }\n}\nclass TransformVisitor {\n    visitElement(element) {\n        const newAttributes = transformAll(this, element.attributes);\n        const newInputs = transformAll(this, element.inputs);\n        const newOutputs = transformAll(this, element.outputs);\n        const newChildren = transformAll(this, element.children);\n        const newReferences = transformAll(this, element.references);\n        if (newAttributes != element.attributes || newInputs != element.inputs ||\n            newOutputs != element.outputs || newChildren != element.children ||\n            newReferences != element.references) {\n            return new Element$1(element.name, newAttributes, newInputs, newOutputs, newChildren, newReferences, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n        }\n        return element;\n    }\n    visitTemplate(template) {\n        const newAttributes = transformAll(this, template.attributes);\n        const newInputs = transformAll(this, template.inputs);\n        const newOutputs = transformAll(this, template.outputs);\n        const newTemplateAttrs = transformAll(this, template.templateAttrs);\n        const newChildren = transformAll(this, template.children);\n        const newReferences = transformAll(this, template.references);\n        const newVariables = transformAll(this, template.variables);\n        if (newAttributes != template.attributes || newInputs != template.inputs ||\n            newOutputs != template.outputs || newTemplateAttrs != template.templateAttrs ||\n            newChildren != template.children || newReferences != template.references ||\n            newVariables != template.variables) {\n            return new Template(template.tagName, newAttributes, newInputs, newOutputs, newTemplateAttrs, newChildren, newReferences, newVariables, template.sourceSpan, template.startSourceSpan, template.endSourceSpan);\n        }\n        return template;\n    }\n    visitContent(content) {\n        return content;\n    }\n    visitVariable(variable) {\n        return variable;\n    }\n    visitReference(reference) {\n        return reference;\n    }\n    visitTextAttribute(attribute) {\n        return attribute;\n    }\n    visitBoundAttribute(attribute) {\n        return attribute;\n    }\n    visitBoundEvent(attribute) {\n        return attribute;\n    }\n    visitText(text) {\n        return text;\n    }\n    visitBoundText(text) {\n        return text;\n    }\n    visitIcu(icu) {\n        return icu;\n    }\n}\nfunction visitAll$1(visitor, nodes) {\n    const result = [];\n    if (visitor.visit) {\n        for (const node of nodes) {\n            const newNode = visitor.visit(node) || node.visit(visitor);\n        }\n    }\n    else {\n        for (const node of nodes) {\n            const newNode = node.visit(visitor);\n            if (newNode) {\n                result.push(newNode);\n            }\n        }\n    }\n    return result;\n}\nfunction transformAll(visitor, nodes) {\n    const result = [];\n    let changed = false;\n    for (const node of nodes) {\n        const newNode = node.visit(visitor);\n        if (newNode) {\n            result.push(newNode);\n        }\n        changed = changed || newNode != node;\n    }\n    return changed ? result : nodes;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass Message {\n    /**\n     * @param nodes message AST\n     * @param placeholders maps placeholder names to static content and their source spans\n     * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n     * @param meaning\n     * @param description\n     * @param customId\n     */\n    constructor(nodes, placeholders, placeholderToMessage, meaning, description, customId) {\n        this.nodes = nodes;\n        this.placeholders = placeholders;\n        this.placeholderToMessage = placeholderToMessage;\n        this.meaning = meaning;\n        this.description = description;\n        this.customId = customId;\n        this.id = this.customId;\n        /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */\n        this.legacyIds = [];\n        this.messageString = serializeMessage(this.nodes);\n        if (nodes.length) {\n            this.sources = [{\n                    filePath: nodes[0].sourceSpan.start.file.url,\n                    startLine: nodes[0].sourceSpan.start.line + 1,\n                    startCol: nodes[0].sourceSpan.start.col + 1,\n                    endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\n                    endCol: nodes[0].sourceSpan.start.col + 1\n                }];\n        }\n        else {\n            this.sources = [];\n        }\n    }\n}\nclass Text$2 {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitText(this, context);\n    }\n}\n// TODO(vicb): do we really need this node (vs an array) ?\nclass Container {\n    constructor(children, sourceSpan) {\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitContainer(this, context);\n    }\n}\nclass Icu {\n    constructor(expression, type, cases, sourceSpan) {\n        this.expression = expression;\n        this.type = type;\n        this.cases = cases;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitIcu(this, context);\n    }\n}\nclass TagPlaceholder {\n    constructor(tag, attrs, startName, closeName, children, isVoid, \n    // TODO sourceSpan should cover all (we need a startSourceSpan and endSourceSpan)\n    sourceSpan, startSourceSpan, endSourceSpan) {\n        this.tag = tag;\n        this.attrs = attrs;\n        this.startName = startName;\n        this.closeName = closeName;\n        this.children = children;\n        this.isVoid = isVoid;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitTagPlaceholder(this, context);\n    }\n}\nclass Placeholder {\n    constructor(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitPlaceholder(this, context);\n    }\n}\nclass IcuPlaceholder {\n    constructor(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitIcuPlaceholder(this, context);\n    }\n}\n// Clone the AST\nclass CloneVisitor {\n    visitText(text, context) {\n        return new Text$2(text.value, text.sourceSpan);\n    }\n    visitContainer(container, context) {\n        const children = container.children.map(n => n.visit(this, context));\n        return new Container(children, container.sourceSpan);\n    }\n    visitIcu(icu, context) {\n        const cases = {};\n        Object.keys(icu.cases).forEach(key => cases[key] = icu.cases[key].visit(this, context));\n        const msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);\n        msg.expressionPlaceholder = icu.expressionPlaceholder;\n        return msg;\n    }\n    visitTagPlaceholder(ph, context) {\n        const children = ph.children.map(n => n.visit(this, context));\n        return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n    }\n    visitPlaceholder(ph, context) {\n        return new Placeholder(ph.value, ph.name, ph.sourceSpan);\n    }\n    visitIcuPlaceholder(ph, context) {\n        return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\n    }\n}\n// Visit all the nodes recursively\nclass RecurseVisitor {\n    visitText(text, context) { }\n    visitContainer(container, context) {\n        container.children.forEach(child => child.visit(this));\n    }\n    visitIcu(icu, context) {\n        Object.keys(icu.cases).forEach(k => {\n            icu.cases[k].visit(this);\n        });\n    }\n    visitTagPlaceholder(ph, context) {\n        ph.children.forEach(child => child.visit(this));\n    }\n    visitPlaceholder(ph, context) { }\n    visitIcuPlaceholder(ph, context) { }\n}\n/**\n * Serialize the message to the Localize backtick string format that would appear in compiled code.\n */\nfunction serializeMessage(messageNodes) {\n    const visitor = new LocalizeMessageStringVisitor();\n    const str = messageNodes.map(n => n.visit(visitor)).join('');\n    return str;\n}\nclass LocalizeMessageStringVisitor {\n    visitText(text) {\n        return text.value;\n    }\n    visitContainer(container) {\n        return container.children.map(child => child.visit(this)).join('');\n    }\n    visitIcu(icu) {\n        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        return `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;\n    }\n    visitTagPlaceholder(ph) {\n        const children = ph.children.map(child => child.visit(this)).join('');\n        return `{$${ph.startName}}${children}{$${ph.closeName}}`;\n    }\n    visitPlaceholder(ph) {\n        return `{$${ph.name}}`;\n    }\n    visitIcuPlaceholder(ph) {\n        return `{$${ph.name}}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass Serializer {\n    // Creates a name mapper, see `PlaceholderMapper`\n    // Returning `null` means that no name mapping is used.\n    createNameMapper(message) {\n        return null;\n    }\n}\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nclass SimplePlaceholderMapper extends RecurseVisitor {\n    // create a mapping from the message\n    constructor(message, mapName) {\n        super();\n        this.mapName = mapName;\n        this.internalToPublic = {};\n        this.publicToNextId = {};\n        this.publicToInternal = {};\n        message.nodes.forEach(node => node.visit(this));\n    }\n    toPublicName(internalName) {\n        return this.internalToPublic.hasOwnProperty(internalName) ?\n            this.internalToPublic[internalName] :\n            null;\n    }\n    toInternalName(publicName) {\n        return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\n            null;\n    }\n    visitText(text, context) {\n        return null;\n    }\n    visitTagPlaceholder(ph, context) {\n        this.visitPlaceholderName(ph.startName);\n        super.visitTagPlaceholder(ph, context);\n        this.visitPlaceholderName(ph.closeName);\n    }\n    visitPlaceholder(ph, context) {\n        this.visitPlaceholderName(ph.name);\n    }\n    visitIcuPlaceholder(ph, context) {\n        this.visitPlaceholderName(ph.name);\n    }\n    // XMB placeholders could only contains A-Z, 0-9 and _\n    visitPlaceholderName(internalName) {\n        if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n            return;\n        }\n        let publicName = this.mapName(internalName);\n        if (this.publicToInternal.hasOwnProperty(publicName)) {\n            // Create a new XMB when it has already been used\n            const nextId = this.publicToNextId[publicName];\n            this.publicToNextId[publicName] = nextId + 1;\n            publicName = `${publicName}_${nextId}`;\n        }\n        else {\n            this.publicToNextId[publicName] = 1;\n        }\n        this.internalToPublic[internalName] = publicName;\n        this.publicToInternal[publicName] = internalName;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass _Visitor$2 {\n    visitTag(tag) {\n        const strAttrs = this._serializeAttributes(tag.attrs);\n        if (tag.children.length == 0) {\n            return `<${tag.name}${strAttrs}/>`;\n        }\n        const strChildren = tag.children.map(node => node.visit(this));\n        return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;\n    }\n    visitText(text) {\n        return text.value;\n    }\n    visitDeclaration(decl) {\n        return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;\n    }\n    _serializeAttributes(attrs) {\n        const strAttrs = Object.keys(attrs).map((name) => `${name}=\"${attrs[name]}\"`).join(' ');\n        return strAttrs.length > 0 ? ' ' + strAttrs : '';\n    }\n    visitDoctype(doctype) {\n        return `<!DOCTYPE ${doctype.rootTag} [\\n${doctype.dtd}\\n]>`;\n    }\n}\nconst _visitor = new _Visitor$2();\nfunction serialize(nodes) {\n    return nodes.map((node) => node.visit(_visitor)).join('');\n}\nclass Declaration {\n    constructor(unescapedAttrs) {\n        this.attrs = {};\n        Object.keys(unescapedAttrs).forEach((k) => {\n            this.attrs[k] = escapeXml(unescapedAttrs[k]);\n        });\n    }\n    visit(visitor) {\n        return visitor.visitDeclaration(this);\n    }\n}\nclass Doctype {\n    constructor(rootTag, dtd) {\n        this.rootTag = rootTag;\n        this.dtd = dtd;\n    }\n    visit(visitor) {\n        return visitor.visitDoctype(this);\n    }\n}\nclass Tag {\n    constructor(name, unescapedAttrs = {}, children = []) {\n        this.name = name;\n        this.children = children;\n        this.attrs = {};\n        Object.keys(unescapedAttrs).forEach((k) => {\n            this.attrs[k] = escapeXml(unescapedAttrs[k]);\n        });\n    }\n    visit(visitor) {\n        return visitor.visitTag(this);\n    }\n}\nclass Text$1 {\n    constructor(unescapedValue) {\n        this.value = escapeXml(unescapedValue);\n    }\n    visit(visitor) {\n        return visitor.visitText(this);\n    }\n}\nclass CR extends Text$1 {\n    constructor(ws = 0) {\n        super(`\\n${new Array(ws + 1).join(' ')}`);\n    }\n}\nconst _ESCAPED_CHARS = [\n    [/&/g, '&amp;'],\n    [/\"/g, '&quot;'],\n    [/'/g, '&apos;'],\n    [/</g, '&lt;'],\n    [/>/g, '&gt;'],\n];\n// Escape `_ESCAPED_CHARS` characters in the given text with encoded entities\nfunction escapeXml(text) {\n    return _ESCAPED_CHARS.reduce((text, entry) => text.replace(entry[0], entry[1]), text);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _MESSAGES_TAG = 'messagebundle';\nconst _MESSAGE_TAG = 'msg';\nconst _PLACEHOLDER_TAG$3 = 'ph';\nconst _EXAMPLE_TAG = 'ex';\nconst _SOURCE_TAG$2 = 'source';\nconst _DOCTYPE = `<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>`;\nclass Xmb extends Serializer {\n    write(messages, locale) {\n        const exampleVisitor = new ExampleVisitor();\n        const visitor = new _Visitor$1();\n        let rootNode = new Tag(_MESSAGES_TAG);\n        messages.forEach(message => {\n            const attrs = { id: message.id };\n            if (message.description) {\n                attrs['desc'] = message.description;\n            }\n            if (message.meaning) {\n                attrs['meaning'] = message.meaning;\n            }\n            let sourceTags = [];\n            message.sources.forEach((source) => {\n                sourceTags.push(new Tag(_SOURCE_TAG$2, {}, [new Text$1(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)]));\n            });\n            rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, [...sourceTags, ...visitor.serialize(message.nodes)]));\n        });\n        rootNode.children.push(new CR());\n        return serialize([\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }),\n            new CR(),\n            new Doctype(_MESSAGES_TAG, _DOCTYPE),\n            new CR(),\n            exampleVisitor.addDefaultExamples(rootNode),\n            new CR(),\n        ]);\n    }\n    load(content, url) {\n        throw new Error('Unsupported');\n    }\n    digest(message) {\n        return digest(message);\n    }\n    createNameMapper(message) {\n        return new SimplePlaceholderMapper(message, toPublicName);\n    }\n}\nclass _Visitor$1 {\n    visitText(text, context) {\n        return [new Text$1(text.value)];\n    }\n    visitContainer(container, context) {\n        const nodes = [];\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\n        return nodes;\n    }\n    visitIcu(icu, context) {\n        const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n        Object.keys(icu.cases).forEach((c) => {\n            nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));\n        });\n        nodes.push(new Text$1(`}`));\n        return nodes;\n    }\n    visitTagPlaceholder(ph, context) {\n        const startTagAsText = new Text$1(`<${ph.tag}>`);\n        const startEx = new Tag(_EXAMPLE_TAG, {}, [startTagAsText]);\n        // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n        const startTagPh = new Tag(_PLACEHOLDER_TAG$3, { name: ph.startName }, [startEx, startTagAsText]);\n        if (ph.isVoid) {\n            // void tags have no children nor closing tags\n            return [startTagPh];\n        }\n        const closeTagAsText = new Text$1(`</${ph.tag}>`);\n        const closeEx = new Tag(_EXAMPLE_TAG, {}, [closeTagAsText]);\n        // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n        const closeTagPh = new Tag(_PLACEHOLDER_TAG$3, { name: ph.closeName }, [closeEx, closeTagAsText]);\n        return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n    }\n    visitPlaceholder(ph, context) {\n        const interpolationAsText = new Text$1(`{{${ph.value}}}`);\n        // Example tag needs to be not-empty for TC.\n        const exTag = new Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);\n        return [\n            // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n            new Tag(_PLACEHOLDER_TAG$3, { name: ph.name }, [exTag, interpolationAsText])\n        ];\n    }\n    visitIcuPlaceholder(ph, context) {\n        const icuExpression = ph.value.expression;\n        const icuType = ph.value.type;\n        const icuCases = Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ');\n        const icuAsText = new Text$1(`{${icuExpression}, ${icuType}, ${icuCases}}`);\n        const exTag = new Tag(_EXAMPLE_TAG, {}, [icuAsText]);\n        return [\n            // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n            new Tag(_PLACEHOLDER_TAG$3, { name: ph.name }, [exTag, icuAsText])\n        ];\n    }\n    serialize(nodes) {\n        return [].concat(...nodes.map(node => node.visit(this)));\n    }\n}\nfunction digest(message) {\n    return decimalDigest(message);\n}\n// TC requires at least one non-empty example on placeholders\nclass ExampleVisitor {\n    addDefaultExamples(node) {\n        node.visit(this);\n        return node;\n    }\n    visitTag(tag) {\n        if (tag.name === _PLACEHOLDER_TAG$3) {\n            if (!tag.children || tag.children.length == 0) {\n                const exText = new Text$1(tag.attrs['name'] || '...');\n                tag.children = [new Tag(_EXAMPLE_TAG, {}, [exText])];\n            }\n        }\n        else if (tag.children) {\n            tag.children.forEach(node => node.visit(this));\n        }\n    }\n    visitText(text) { }\n    visitDeclaration(decl) { }\n    visitDoctype(doctype) { }\n}\n// XMB/XTB placeholders can only contain A-Z, 0-9 and _\nfunction toPublicName(internalName) {\n    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* Closure variables holding messages must be named `MSG_[A-Z0-9]+` */\nconst CLOSURE_TRANSLATION_VAR_PREFIX = 'MSG_';\n/**\n * Prefix for non-`goog.getMsg` i18n-related vars.\n * Note: the prefix uses lowercase characters intentionally due to a Closure behavior that\n * considers variables like `I18N_0` as constants and throws an error when their value changes.\n */\nconst TRANSLATION_VAR_PREFIX = 'i18n_';\n/** Name of the i18n attributes **/\nconst I18N_ATTR = 'i18n';\nconst I18N_ATTR_PREFIX = 'i18n-';\n/** Prefix of var expressions used in ICUs */\nconst I18N_ICU_VAR_PREFIX = 'VAR_';\n/** Prefix of ICU expressions for post processing */\nconst I18N_ICU_MAPPING_PREFIX = 'I18N_EXP_';\n/** Placeholder wrapper for i18n expressions **/\nconst I18N_PLACEHOLDER_SYMBOL = '�';\nfunction isI18nAttribute(name) {\n    return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);\n}\nfunction isI18nRootNode(meta) {\n    return meta instanceof Message;\n}\nfunction isSingleI18nIcu(meta) {\n    return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu;\n}\nfunction hasI18nMeta(node) {\n    return !!node.i18n;\n}\nfunction hasI18nAttrs(element) {\n    return element.attrs.some((attr) => isI18nAttribute(attr.name));\n}\nfunction icuFromI18nMessage(message) {\n    return message.nodes[0];\n}\nfunction wrapI18nPlaceholder(content, contextId = 0) {\n    const blockId = contextId > 0 ? `:${contextId}` : '';\n    return `${I18N_PLACEHOLDER_SYMBOL}${content}${blockId}${I18N_PLACEHOLDER_SYMBOL}`;\n}\nfunction assembleI18nBoundString(strings, bindingStartIndex = 0, contextId = 0) {\n    if (!strings.length)\n        return '';\n    let acc = '';\n    const lastIdx = strings.length - 1;\n    for (let i = 0; i < lastIdx; i++) {\n        acc += `${strings[i]}${wrapI18nPlaceholder(bindingStartIndex + i, contextId)}`;\n    }\n    acc += strings[lastIdx];\n    return acc;\n}\nfunction getSeqNumberGenerator(startsAt = 0) {\n    let current = startsAt;\n    return () => current++;\n}\nfunction placeholdersToParams(placeholders) {\n    const params = {};\n    placeholders.forEach((values, key) => {\n        params[key] = literal(values.length > 1 ? `[${values.join('|')}]` : values[0]);\n    });\n    return params;\n}\nfunction updatePlaceholderMap(map, name, ...values) {\n    const current = map.get(name) || [];\n    current.push(...values);\n    map.set(name, current);\n}\nfunction assembleBoundTextPlaceholders(meta, bindingStartIndex = 0, contextId = 0) {\n    const startIdx = bindingStartIndex;\n    const placeholders = new Map();\n    const node = meta instanceof Message ? meta.nodes.find(node => node instanceof Container) : meta;\n    if (node) {\n        node\n            .children\n            .filter((child) => child instanceof Placeholder)\n            .forEach((child, idx) => {\n            const content = wrapI18nPlaceholder(startIdx + idx, contextId);\n            updatePlaceholderMap(placeholders, child.name, content);\n        });\n    }\n    return placeholders;\n}\n/**\n * Format the placeholder names in a map of placeholders to expressions.\n *\n * The placeholder names are converted from \"internal\" format (e.g. `START_TAG_DIV_1`) to \"external\"\n * format (e.g. `startTagDiv_1`).\n *\n * @param params A map of placeholder names to expressions.\n * @param useCamelCase whether to camelCase the placeholder name when formatting.\n * @returns A new map of formatted placeholder names to expressions.\n */\nfunction i18nFormatPlaceholderNames(params = {}, useCamelCase) {\n    const _params = {};\n    if (params && Object.keys(params).length) {\n        Object.keys(params).forEach(key => _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key]);\n    }\n    return _params;\n}\n/**\n * Converts internal placeholder names to public-facing format\n * (for example to use in goog.getMsg call).\n * Example: `START_TAG_DIV_1` is converted to `startTagDiv_1`.\n *\n * @param name The placeholder name that should be formatted\n * @returns Formatted placeholder name\n */\nfunction formatI18nPlaceholderName(name, useCamelCase = true) {\n    const publicName = toPublicName(name);\n    if (!useCamelCase) {\n        return publicName;\n    }\n    const chunks = publicName.split('_');\n    if (chunks.length === 1) {\n        // if no \"_\" found - just lowercase the value\n        return name.toLowerCase();\n    }\n    let postfix;\n    // eject last element if it's a number\n    if (/^\\d+$/.test(chunks[chunks.length - 1])) {\n        postfix = chunks.pop();\n    }\n    let raw = chunks.shift().toLowerCase();\n    if (chunks.length) {\n        raw += chunks.map(c => c.charAt(0).toUpperCase() + c.slice(1).toLowerCase()).join('');\n    }\n    return postfix ? `${raw}_${postfix}` : raw;\n}\n/**\n * Generates a prefix for translation const name.\n *\n * @param extra Additional local prefix that should be injected into translation var name\n * @returns Complete translation const prefix\n */\nfunction getTranslationConstPrefix(extra) {\n    return `${CLOSURE_TRANSLATION_VAR_PREFIX}${extra}`.toUpperCase();\n}\n/**\n * Generate AST to declare a variable. E.g. `var I18N_1;`.\n * @param variable the name of the variable to declare.\n */\nfunction declareI18nVariable(variable) {\n    return new DeclareVarStmt(variable.name, undefined, INFERRED_TYPE, undefined, variable.sourceSpan);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Checks whether an object key contains potentially unsafe chars, thus the key should be wrapped in\n * quotes. Note: we do not wrap all keys into quotes, as it may have impact on minification and may\n * bot work in some cases when object keys are mangled by minifier.\n *\n * TODO(FW-1136): this is a temporary solution, we need to come up with a better way of working with\n * inputs that contain potentially unsafe chars.\n */\nconst UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;\n/** Name of the temporary to use during data binding */\nconst TEMPORARY_NAME = '_t';\n/** Name of the context parameter passed into a template function */\nconst CONTEXT_NAME = 'ctx';\n/** Name of the RenderFlag passed into a template function */\nconst RENDER_FLAGS = 'rf';\n/** The prefix reference variables */\nconst REFERENCE_PREFIX = '_r';\n/** The name of the implicit context reference */\nconst IMPLICIT_REFERENCE = '$implicit';\n/** Non bindable attribute name **/\nconst NON_BINDABLE_ATTR = 'ngNonBindable';\n/** Name for the variable keeping track of the context returned by `ɵɵrestoreView`. */\nconst RESTORED_VIEW_CONTEXT_NAME = 'restoredCtx';\n/**\n * Creates an allocator for a temporary variable.\n *\n * A variable declaration is added to the statements the first time the allocator is invoked.\n */\nfunction temporaryAllocator(statements, name) {\n    let temp = null;\n    return () => {\n        if (!temp) {\n            statements.push(new DeclareVarStmt(TEMPORARY_NAME, undefined, DYNAMIC_TYPE));\n            temp = variable(name);\n        }\n        return temp;\n    };\n}\nfunction unsupported(feature) {\n    if (this) {\n        throw new Error(`Builder ${this.constructor.name} doesn't support ${feature} yet`);\n    }\n    throw new Error(`Feature ${feature} is not supported yet`);\n}\nfunction invalid(arg) {\n    throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);\n}\nfunction asLiteral(value) {\n    if (Array.isArray(value)) {\n        return literalArr(value.map(asLiteral));\n    }\n    return literal(value, INFERRED_TYPE);\n}\nfunction conditionallyCreateMapObjectLiteral(keys, keepDeclared) {\n    if (Object.getOwnPropertyNames(keys).length > 0) {\n        return mapToExpression(keys, keepDeclared);\n    }\n    return null;\n}\nfunction mapToExpression(map, keepDeclared) {\n    return literalMap(Object.getOwnPropertyNames(map).map(key => {\n        // canonical syntax: `dirProp: publicProp`\n        // if there is no `:`, use dirProp = elProp\n        const value = map[key];\n        let declaredName;\n        let publicName;\n        let minifiedName;\n        let needsDeclaredName;\n        if (Array.isArray(value)) {\n            [publicName, declaredName] = value;\n            minifiedName = key;\n            needsDeclaredName = publicName !== declaredName;\n        }\n        else {\n            [declaredName, publicName] = splitAtColon(key, [key, value]);\n            minifiedName = declaredName;\n            // Only include the declared name if extracted from the key, i.e. the key contains a colon.\n            // Otherwise the declared name should be omitted even if it is different from the public name,\n            // as it may have already been minified.\n            needsDeclaredName = publicName !== declaredName && key.includes(':');\n        }\n        return {\n            key: minifiedName,\n            // put quotes around keys that contain potentially unsafe characters\n            quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),\n            value: (keepDeclared && needsDeclaredName) ?\n                literalArr([asLiteral(publicName), asLiteral(declaredName)]) :\n                asLiteral(publicName)\n        };\n    }));\n}\n/**\n *  Remove trailing null nodes as they are implied.\n */\nfunction trimTrailingNulls(parameters) {\n    while (isNull(parameters[parameters.length - 1])) {\n        parameters.pop();\n    }\n    return parameters;\n}\nfunction getQueryPredicate(query, constantPool) {\n    if (Array.isArray(query.predicate)) {\n        let predicate = [];\n        query.predicate.forEach((selector) => {\n            // Each item in predicates array may contain strings with comma-separated refs\n            // (for ex. 'ref, ref1, ..., refN'), thus we extract individual refs and store them\n            // as separate array entities\n            const selectors = selector.split(',').map(token => literal(token.trim()));\n            predicate.push(...selectors);\n        });\n        return constantPool.getConstLiteral(literalArr(predicate), true);\n    }\n    else {\n        // The original predicate may have been wrapped in a `forwardRef()` call.\n        switch (query.predicate.forwardRef) {\n            case 0 /* None */:\n            case 2 /* Unwrapped */:\n                return query.predicate.expression;\n            case 1 /* Wrapped */:\n                return importExpr(Identifiers$1.resolveForwardRef).callFn([query.predicate.expression]);\n        }\n    }\n}\n/**\n * A representation for an object literal used during codegen of definition objects. The generic\n * type `T` allows to reference a documented type of the generated structure, such that the\n * property names that are set can be resolved to their documented declaration.\n */\nclass DefinitionMap {\n    constructor() {\n        this.values = [];\n    }\n    set(key, value) {\n        if (value) {\n            this.values.push({ key: key, value, quoted: false });\n        }\n    }\n    toLiteralMap() {\n        return literalMap(this.values);\n    }\n}\n/**\n * Extract a map of properties to values for a given element or template node, which can be used\n * by the directive matching machinery.\n *\n * @param elOrTpl the element or template in question\n * @return an object set up for directive matching. For attributes on the element/template, this\n * object maps a property name to its (static) value. For any bindings, this map simply maps the\n * property name to an empty string.\n */\nfunction getAttrsForDirectiveMatching(elOrTpl) {\n    const attributesMap = {};\n    if (elOrTpl instanceof Template && elOrTpl.tagName !== 'ng-template') {\n        elOrTpl.templateAttrs.forEach(a => attributesMap[a.name] = '');\n    }\n    else {\n        elOrTpl.attributes.forEach(a => {\n            if (!isI18nAttribute(a.name)) {\n                attributesMap[a.name] = a.value;\n            }\n        });\n        elOrTpl.inputs.forEach(i => {\n            attributesMap[i.name] = '';\n        });\n        elOrTpl.outputs.forEach(o => {\n            attributesMap[o.name] = '';\n        });\n    }\n    return attributesMap;\n}\n/** Returns a call expression to a chained instruction, e.g. `property(params[0])(params[1])`. */\nfunction chainedInstruction(reference, calls, span) {\n    let expression = importExpr(reference, null, span);\n    if (calls.length > 0) {\n        for (let i = 0; i < calls.length; i++) {\n            expression = expression.callFn(calls[i], span);\n        }\n    }\n    else {\n        // Add a blank invocation, in case the `calls` array is empty.\n        expression = expression.callFn([], span);\n    }\n    return expression;\n}\n/**\n * Gets the number of arguments expected to be passed to a generated instruction in the case of\n * interpolation instructions.\n * @param interpolation An interpolation ast\n */\nfunction getInterpolationArgsLength(interpolation) {\n    const { expressions, strings } = interpolation;\n    if (expressions.length === 1 && strings.length === 2 && strings[0] === '' && strings[1] === '') {\n        // If the interpolation has one interpolated value, but the prefix and suffix are both empty\n        // strings, we only pass one argument, to a special instruction like `propertyInterpolate` or\n        // `textInterpolate`.\n        return 1;\n    }\n    else {\n        return expressions.length + strings.length;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction compileInjectable(meta, resolveForwardRefs) {\n    let result = null;\n    const factoryMeta = {\n        name: meta.name,\n        type: meta.type,\n        internalType: meta.internalType,\n        typeArgumentCount: meta.typeArgumentCount,\n        deps: [],\n        target: FactoryTarget$1.Injectable,\n    };\n    if (meta.useClass !== undefined) {\n        // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is\n        // used to instantiate the class with dependencies injected, or deps are not specified and\n        // the factory of the class is used to instantiate it.\n        //\n        // A special case exists for useClass: Type where Type is the injectable type itself and no\n        // deps are specified, in which case 'useClass' is effectively ignored.\n        const useClassOnSelf = meta.useClass.expression.isEquivalent(meta.internalType);\n        let deps = undefined;\n        if (meta.deps !== undefined) {\n            deps = meta.deps;\n        }\n        if (deps !== undefined) {\n            // factory: () => new meta.useClass(...deps)\n            result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), { delegate: meta.useClass.expression, delegateDeps: deps, delegateType: R3FactoryDelegateType.Class }));\n        }\n        else if (useClassOnSelf) {\n            result = compileFactoryFunction(factoryMeta);\n        }\n        else {\n            result = {\n                statements: [],\n                expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs)\n            };\n        }\n    }\n    else if (meta.useFactory !== undefined) {\n        if (meta.deps !== undefined) {\n            result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), { delegate: meta.useFactory, delegateDeps: meta.deps || [], delegateType: R3FactoryDelegateType.Function }));\n        }\n        else {\n            result = {\n                statements: [],\n                expression: fn([], [new ReturnStatement(meta.useFactory.callFn([]))])\n            };\n        }\n    }\n    else if (meta.useValue !== undefined) {\n        // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for\n        // client code because meta.useValue is an Expression which will be defined even if the actual\n        // value is undefined.\n        result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), { expression: meta.useValue.expression }));\n    }\n    else if (meta.useExisting !== undefined) {\n        // useExisting is an `inject` call on the existing token.\n        result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), { expression: importExpr(Identifiers$1.inject).callFn([meta.useExisting.expression]) }));\n    }\n    else {\n        result = {\n            statements: [],\n            expression: delegateToFactory(meta.type.value, meta.internalType, resolveForwardRefs)\n        };\n    }\n    const token = meta.internalType;\n    const injectableProps = new DefinitionMap();\n    injectableProps.set('token', token);\n    injectableProps.set('factory', result.expression);\n    // Only generate providedIn property if it has a non-null value\n    if (meta.providedIn.expression.value !== null) {\n        injectableProps.set('providedIn', convertFromMaybeForwardRefExpression(meta.providedIn));\n    }\n    const expression = importExpr(Identifiers$1.ɵɵdefineInjectable)\n        .callFn([injectableProps.toLiteralMap()], undefined, true);\n    return {\n        expression,\n        type: createInjectableType(meta),\n        statements: result.statements,\n    };\n}\nfunction createInjectableType(meta) {\n    return new ExpressionType(importExpr(Identifiers$1.InjectableDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount)]));\n}\nfunction delegateToFactory(type, internalType, unwrapForwardRefs) {\n    if (type.node === internalType.node) {\n        // The types are the same, so we can simply delegate directly to the type's factory.\n        // ```\n        // factory: type.ɵfac\n        // ```\n        return internalType.prop('ɵfac');\n    }\n    if (!unwrapForwardRefs) {\n        // The type is not wrapped in a `forwardRef()`, so we create a simple factory function that\n        // accepts a sub-type as an argument.\n        // ```\n        // factory: function(t) { return internalType.ɵfac(t); }\n        // ```\n        return createFactoryFunction(internalType);\n    }\n    // The internalType is actually wrapped in a `forwardRef()` so we need to resolve that before\n    // calling its factory.\n    // ```\n    // factory: function(t) { return core.resolveForwardRef(type).ɵfac(t); }\n    // ```\n    const unwrappedType = importExpr(Identifiers$1.resolveForwardRef).callFn([internalType]);\n    return createFactoryFunction(unwrappedType);\n}\nfunction createFactoryFunction(type) {\n    return fn([new FnParam('t', DYNAMIC_TYPE)], [new ReturnStatement(type.prop('ɵfac').callFn([variable('t')]))]);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction assertArrayOfStrings(identifier, value) {\n    if (value == null) {\n        return;\n    }\n    if (!Array.isArray(value)) {\n        throw new Error(`Expected '${identifier}' to be an array of strings.`);\n    }\n    for (let i = 0; i < value.length; i += 1) {\n        if (typeof value[i] !== 'string') {\n            throw new Error(`Expected '${identifier}' to be an array of strings.`);\n        }\n    }\n}\nconst UNUSABLE_INTERPOLATION_REGEXPS = [\n    /^\\s*$/,\n    /[<>]/,\n    /^[{}]$/,\n    /&(#|[a-z])/i,\n    /^\\/\\//, // comment\n];\nfunction assertInterpolationSymbols(identifier, value) {\n    if (value != null && !(Array.isArray(value) && value.length == 2)) {\n        throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n    }\n    else if (value != null) {\n        const start = value[0];\n        const end = value[1];\n        // Check for unusable interpolation symbols\n        UNUSABLE_INTERPOLATION_REGEXPS.forEach(regexp => {\n            if (regexp.test(start) || regexp.test(end)) {\n                throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n            }\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass InterpolationConfig {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    static fromArray(markers) {\n        if (!markers) {\n            return DEFAULT_INTERPOLATION_CONFIG;\n        }\n        assertInterpolationSymbols('interpolation', markers);\n        return new InterpolationConfig(markers[0], markers[1]);\n    }\n}\nconst DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst $EOF = 0;\nconst $BSPACE = 8;\nconst $TAB = 9;\nconst $LF = 10;\nconst $VTAB = 11;\nconst $FF = 12;\nconst $CR = 13;\nconst $SPACE = 32;\nconst $BANG = 33;\nconst $DQ = 34;\nconst $HASH = 35;\nconst $$ = 36;\nconst $PERCENT = 37;\nconst $AMPERSAND = 38;\nconst $SQ = 39;\nconst $LPAREN = 40;\nconst $RPAREN = 41;\nconst $STAR = 42;\nconst $PLUS = 43;\nconst $COMMA = 44;\nconst $MINUS = 45;\nconst $PERIOD = 46;\nconst $SLASH = 47;\nconst $COLON = 58;\nconst $SEMICOLON = 59;\nconst $LT = 60;\nconst $EQ = 61;\nconst $GT = 62;\nconst $QUESTION = 63;\nconst $0 = 48;\nconst $7 = 55;\nconst $9 = 57;\nconst $A = 65;\nconst $E = 69;\nconst $F = 70;\nconst $X = 88;\nconst $Z = 90;\nconst $LBRACKET = 91;\nconst $BACKSLASH = 92;\nconst $RBRACKET = 93;\nconst $CARET = 94;\nconst $_ = 95;\nconst $a = 97;\nconst $b = 98;\nconst $e = 101;\nconst $f = 102;\nconst $n = 110;\nconst $r = 114;\nconst $t = 116;\nconst $u = 117;\nconst $v = 118;\nconst $x = 120;\nconst $z = 122;\nconst $LBRACE = 123;\nconst $BAR = 124;\nconst $RBRACE = 125;\nconst $NBSP = 160;\nconst $PIPE = 124;\nconst $TILDA = 126;\nconst $AT = 64;\nconst $BT = 96;\nfunction isWhitespace(code) {\n    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n}\nfunction isDigit(code) {\n    return $0 <= code && code <= $9;\n}\nfunction isAsciiLetter(code) {\n    return code >= $a && code <= $z || code >= $A && code <= $Z;\n}\nfunction isAsciiHexDigit(code) {\n    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n}\nfunction isNewLine(code) {\n    return code === $LF || code === $CR;\n}\nfunction isOctalDigit(code) {\n    return $0 <= code && code <= $7;\n}\nfunction isQuote(code) {\n    return code === $SQ || code === $DQ || code === $BT;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ParseLocation {\n    constructor(file, offset, line, col) {\n        this.file = file;\n        this.offset = offset;\n        this.line = line;\n        this.col = col;\n    }\n    toString() {\n        return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;\n    }\n    moveBy(delta) {\n        const source = this.file.content;\n        const len = source.length;\n        let offset = this.offset;\n        let line = this.line;\n        let col = this.col;\n        while (offset > 0 && delta < 0) {\n            offset--;\n            delta++;\n            const ch = source.charCodeAt(offset);\n            if (ch == $LF) {\n                line--;\n                const priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));\n                col = priorLine > 0 ? offset - priorLine : offset;\n            }\n            else {\n                col--;\n            }\n        }\n        while (offset < len && delta > 0) {\n            const ch = source.charCodeAt(offset);\n            offset++;\n            delta--;\n            if (ch == $LF) {\n                line++;\n                col = 0;\n            }\n            else {\n                col++;\n            }\n        }\n        return new ParseLocation(this.file, offset, line, col);\n    }\n    // Return the source around the location\n    // Up to `maxChars` or `maxLines` on each side of the location\n    getContext(maxChars, maxLines) {\n        const content = this.file.content;\n        let startOffset = this.offset;\n        if (startOffset != null) {\n            if (startOffset > content.length - 1) {\n                startOffset = content.length - 1;\n            }\n            let endOffset = startOffset;\n            let ctxChars = 0;\n            let ctxLines = 0;\n            while (ctxChars < maxChars && startOffset > 0) {\n                startOffset--;\n                ctxChars++;\n                if (content[startOffset] == '\\n') {\n                    if (++ctxLines == maxLines) {\n                        break;\n                    }\n                }\n            }\n            ctxChars = 0;\n            ctxLines = 0;\n            while (ctxChars < maxChars && endOffset < content.length - 1) {\n                endOffset++;\n                ctxChars++;\n                if (content[endOffset] == '\\n') {\n                    if (++ctxLines == maxLines) {\n                        break;\n                    }\n                }\n            }\n            return {\n                before: content.substring(startOffset, this.offset),\n                after: content.substring(this.offset, endOffset + 1),\n            };\n        }\n        return null;\n    }\n}\nclass ParseSourceFile {\n    constructor(content, url) {\n        this.content = content;\n        this.url = url;\n    }\n}\nclass ParseSourceSpan {\n    /**\n     * Create an object that holds information about spans of tokens/nodes captured during\n     * lexing/parsing of text.\n     *\n     * @param start\n     * The location of the start of the span (having skipped leading trivia).\n     * Skipping leading trivia makes source-spans more \"user friendly\", since things like HTML\n     * elements will appear to begin at the start of the opening tag, rather than at the start of any\n     * leading trivia, which could include newlines.\n     *\n     * @param end\n     * The location of the end of the span.\n     *\n     * @param fullStart\n     * The start of the token without skipping the leading trivia.\n     * This is used by tooling that splits tokens further, such as extracting Angular interpolations\n     * from text tokens. Such tooling creates new source-spans relative to the original token's\n     * source-span. If leading trivia characters have been skipped then the new source-spans may be\n     * incorrectly offset.\n     *\n     * @param details\n     * Additional information (such as identifier names) that should be associated with the span.\n     */\n    constructor(start, end, fullStart = start, details = null) {\n        this.start = start;\n        this.end = end;\n        this.fullStart = fullStart;\n        this.details = details;\n    }\n    toString() {\n        return this.start.file.content.substring(this.start.offset, this.end.offset);\n    }\n}\nvar ParseErrorLevel;\n(function (ParseErrorLevel) {\n    ParseErrorLevel[ParseErrorLevel[\"WARNING\"] = 0] = \"WARNING\";\n    ParseErrorLevel[ParseErrorLevel[\"ERROR\"] = 1] = \"ERROR\";\n})(ParseErrorLevel || (ParseErrorLevel = {}));\nclass ParseError {\n    constructor(span, msg, level = ParseErrorLevel.ERROR) {\n        this.span = span;\n        this.msg = msg;\n        this.level = level;\n    }\n    contextualMessage() {\n        const ctx = this.span.start.getContext(100, 3);\n        return ctx ? `${this.msg} (\"${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}\")` :\n            this.msg;\n    }\n    toString() {\n        const details = this.span.details ? `, ${this.span.details}` : '';\n        return `${this.contextualMessage()}: ${this.span.start}${details}`;\n    }\n}\n/**\n * Generates Source Span object for a given R3 Type for JIT mode.\n *\n * @param kind Component or Directive.\n * @param typeName name of the Component or Directive.\n * @param sourceUrl reference to Component or Directive source.\n * @returns instance of ParseSourceSpan that represent a given Component or Directive.\n */\nfunction r3JitTypeSourceSpan(kind, typeName, sourceUrl) {\n    const sourceFileName = `in ${kind} ${typeName} in ${sourceUrl}`;\n    const sourceFile = new ParseSourceFile('', sourceFileName);\n    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\nfunction syntaxError(msg, parseErrors) {\n    const error = Error(msg);\n    error[ERROR_SYNTAX_ERROR] = true;\n    if (parseErrors)\n        error[ERROR_PARSE_ERRORS] = parseErrors;\n    return error;\n}\nconst ERROR_SYNTAX_ERROR = 'ngSyntaxError';\nconst ERROR_PARSE_ERRORS = 'ngParseErrors';\nfunction isSyntaxError(error) {\n    return error[ERROR_SYNTAX_ERROR];\n}\nfunction getParseErrors(error) {\n    return error[ERROR_PARSE_ERRORS] || [];\n}\nlet _anonymousTypeIndex = 0;\nfunction identifierName(compileIdentifier) {\n    if (!compileIdentifier || !compileIdentifier.reference) {\n        return null;\n    }\n    const ref = compileIdentifier.reference;\n    if (ref['__anonymousType']) {\n        return ref['__anonymousType'];\n    }\n    if (ref['__forward_ref__']) {\n        // We do not want to try to stringify a `forwardRef()` function because that would cause the\n        // inner function to be evaluated too early, defeating the whole point of the `forwardRef`.\n        return '__forward_ref__';\n    }\n    let identifier = stringify(ref);\n    if (identifier.indexOf('(') >= 0) {\n        // case: anonymous functions!\n        identifier = `anonymous_${_anonymousTypeIndex++}`;\n        ref['__anonymousType'] = identifier;\n    }\n    else {\n        identifier = sanitizeIdentifier(identifier);\n    }\n    return identifier;\n}\nfunction sanitizeIdentifier(name) {\n    return name.replace(/\\W/g, '_');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * In TypeScript, tagged template functions expect a \"template object\", which is an array of\n * \"cooked\" strings plus a `raw` property that contains an array of \"raw\" strings. This is\n * typically constructed with a function called `__makeTemplateObject(cooked, raw)`, but it may not\n * be available in all environments.\n *\n * This is a JavaScript polyfill that uses __makeTemplateObject when it's available, but otherwise\n * creates an inline helper with the same functionality.\n *\n * In the inline function, if `Object.defineProperty` is available we use that to attach the `raw`\n * array.\n */\nconst makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,\"raw\",{value:t}):e.raw=t,e})';\nclass AbstractJsEmitterVisitor extends AbstractEmitterVisitor {\n    constructor() {\n        super(false);\n    }\n    visitDeclareClassStmt(stmt, ctx) {\n        ctx.pushClass(stmt);\n        this._visitClassConstructor(stmt, ctx);\n        if (stmt.parent != null) {\n            ctx.print(stmt, `${stmt.name}.prototype = Object.create(`);\n            stmt.parent.visitExpression(this, ctx);\n            ctx.println(stmt, `.prototype);`);\n        }\n        stmt.getters.forEach((getter) => this._visitClassGetter(stmt, getter, ctx));\n        stmt.methods.forEach((method) => this._visitClassMethod(stmt, method, ctx));\n        ctx.popClass();\n        return null;\n    }\n    _visitClassConstructor(stmt, ctx) {\n        ctx.print(stmt, `function ${stmt.name}(`);\n        if (stmt.constructorMethod != null) {\n            this._visitParams(stmt.constructorMethod.params, ctx);\n        }\n        ctx.println(stmt, `) {`);\n        ctx.incIndent();\n        if (stmt.constructorMethod != null) {\n            if (stmt.constructorMethod.body.length > 0) {\n                ctx.println(stmt, `var self = this;`);\n                this.visitAllStatements(stmt.constructorMethod.body, ctx);\n            }\n        }\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n    }\n    _visitClassGetter(stmt, getter, ctx) {\n        ctx.println(stmt, `Object.defineProperty(${stmt.name}.prototype, '${getter.name}', { get: function() {`);\n        ctx.incIndent();\n        if (getter.body.length > 0) {\n            ctx.println(stmt, `var self = this;`);\n            this.visitAllStatements(getter.body, ctx);\n        }\n        ctx.decIndent();\n        ctx.println(stmt, `}});`);\n    }\n    _visitClassMethod(stmt, method, ctx) {\n        ctx.print(stmt, `${stmt.name}.prototype.${method.name} = function(`);\n        this._visitParams(method.params, ctx);\n        ctx.println(stmt, `) {`);\n        ctx.incIndent();\n        if (method.body.length > 0) {\n            ctx.println(stmt, `var self = this;`);\n            this.visitAllStatements(method.body, ctx);\n        }\n        ctx.decIndent();\n        ctx.println(stmt, `};`);\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        throw new Error('Cannot emit a WrappedNodeExpr in Javascript.');\n    }\n    visitReadVarExpr(ast, ctx) {\n        if (ast.builtin === BuiltinVar.This) {\n            ctx.print(ast, 'self');\n        }\n        else if (ast.builtin === BuiltinVar.Super) {\n            throw new Error(`'super' needs to be handled at a parent ast node, not at the variable level!`);\n        }\n        else {\n            super.visitReadVarExpr(ast, ctx);\n        }\n        return null;\n    }\n    visitDeclareVarStmt(stmt, ctx) {\n        ctx.print(stmt, `var ${stmt.name}`);\n        if (stmt.value) {\n            ctx.print(stmt, ' = ');\n            stmt.value.visitExpression(this, ctx);\n        }\n        ctx.println(stmt, `;`);\n        return null;\n    }\n    visitCastExpr(ast, ctx) {\n        ast.value.visitExpression(this, ctx);\n        return null;\n    }\n    visitInvokeFunctionExpr(expr, ctx) {\n        const fnExpr = expr.fn;\n        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\n            ctx.currentClass.parent.visitExpression(this, ctx);\n            ctx.print(expr, `.call(this`);\n            if (expr.args.length > 0) {\n                ctx.print(expr, `, `);\n                this.visitAllExpressions(expr.args, ctx, ',');\n            }\n            ctx.print(expr, `)`);\n        }\n        else {\n            super.visitInvokeFunctionExpr(expr, ctx);\n        }\n        return null;\n    }\n    visitTaggedTemplateExpr(ast, ctx) {\n        // The following convoluted piece of code is effectively the downlevelled equivalent of\n        // ```\n        // tag`...`\n        // ```\n        // which is effectively like:\n        // ```\n        // tag(__makeTemplateObject(cooked, raw), expression1, expression2, ...);\n        // ```\n        const elements = ast.template.elements;\n        ast.tag.visitExpression(this, ctx);\n        ctx.print(ast, `(${makeTemplateObjectPolyfill}(`);\n        ctx.print(ast, `[${elements.map(part => escapeIdentifier(part.text, false)).join(', ')}], `);\n        ctx.print(ast, `[${elements.map(part => escapeIdentifier(part.rawText, false)).join(', ')}])`);\n        ast.template.expressions.forEach(expression => {\n            ctx.print(ast, ', ');\n            expression.visitExpression(this, ctx);\n        });\n        ctx.print(ast, ')');\n        return null;\n    }\n    visitFunctionExpr(ast, ctx) {\n        ctx.print(ast, `function${ast.name ? ' ' + ast.name : ''}(`);\n        this._visitParams(ast.params, ctx);\n        ctx.println(ast, `) {`);\n        ctx.incIndent();\n        this.visitAllStatements(ast.statements, ctx);\n        ctx.decIndent();\n        ctx.print(ast, `}`);\n        return null;\n    }\n    visitDeclareFunctionStmt(stmt, ctx) {\n        ctx.print(stmt, `function ${stmt.name}(`);\n        this._visitParams(stmt.params, ctx);\n        ctx.println(stmt, `) {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.statements, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n        return null;\n    }\n    visitTryCatchStmt(stmt, ctx) {\n        ctx.println(stmt, `try {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.bodyStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `} catch (${CATCH_ERROR_VAR.name}) {`);\n        ctx.incIndent();\n        const catchStmts = [CATCH_STACK_VAR.set(CATCH_ERROR_VAR.prop('stack')).toDeclStmt(null, [\n                StmtModifier.Final\n            ])].concat(stmt.catchStmts);\n        this.visitAllStatements(catchStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n        return null;\n    }\n    visitLocalizedString(ast, ctx) {\n        // The following convoluted piece of code is effectively the downlevelled equivalent of\n        // ```\n        // $localize `...`\n        // ```\n        // which is effectively like:\n        // ```\n        // $localize(__makeTemplateObject(cooked, raw), expression1, expression2, ...);\n        // ```\n        ctx.print(ast, `$localize(${makeTemplateObjectPolyfill}(`);\n        const parts = [ast.serializeI18nHead()];\n        for (let i = 1; i < ast.messageParts.length; i++) {\n            parts.push(ast.serializeI18nTemplatePart(i));\n        }\n        ctx.print(ast, `[${parts.map(part => escapeIdentifier(part.cooked, false)).join(', ')}], `);\n        ctx.print(ast, `[${parts.map(part => escapeIdentifier(part.raw, false)).join(', ')}])`);\n        ast.expressions.forEach(expression => {\n            ctx.print(ast, ', ');\n            expression.visitExpression(this, ctx);\n        });\n        ctx.print(ast, ')');\n        return null;\n    }\n    _visitParams(params, ctx) {\n        this.visitAllObjects(param => ctx.print(null, param.name), params, ctx, ',');\n    }\n    getBuiltinMethodName(method) {\n        let name;\n        switch (method) {\n            case BuiltinMethod.ConcatArray:\n                name = 'concat';\n                break;\n            case BuiltinMethod.SubscribeObservable:\n                name = 'subscribe';\n                break;\n            case BuiltinMethod.Bind:\n                name = 'bind';\n                break;\n            default:\n                throw new Error(`Unknown builtin method: ${method}`);\n        }\n        return name;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (_global.trustedTypes) {\n            try {\n                policy =\n                    _global.trustedTypes.createPolicy('angular#unsafe-jit', {\n                        createScript: (s) => s,\n                    });\n            }\n            catch (_a) {\n                // trustedTypes.createPolicy throws if called with a name that is\n                // already registered, even in report-only mode. Until the API changes,\n                // catch the error not to break the applications functionally. In such\n                // cases, the code will fall back to using strings.\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nfunction trustedScriptFromString(script) {\n    var _a;\n    return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from the JIT compiler, as use in other code can lead to XSS\n * vulnerabilities.\n */\nfunction newTrustedFunctionForJIT(...args) {\n    if (!_global.trustedTypes) {\n        // In environments that don't support Trusted Types, fall back to the most\n        // straightforward implementation:\n        return new Function(...args);\n    }\n    // Chrome currently does not support passing TrustedScript to the Function\n    // constructor. The following implements the workaround proposed on the page\n    // below, where the Chromium bug is also referenced:\n    // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n    const fnArgs = args.slice(0, -1).join(',');\n    const fnBody = args[args.length - 1];\n    const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n    // Using eval directly confuses the compiler and prevents this module from\n    // being stripped out of JS binaries even if not used. The global['eval']\n    // indirection fixes that.\n    const fn = _global['eval'](trustedScriptFromString(body));\n    if (fn.bind === undefined) {\n        // Workaround for a browser bug that only exists in Chrome 83, where passing\n        // a TrustedScript to eval just returns the TrustedScript back without\n        // evaluating it. In that case, fall back to the most straightforward\n        // implementation:\n        return new Function(...args);\n    }\n    // To completely mimic the behavior of calling \"new Function\", two more\n    // things need to happen:\n    // 1. Stringifying the resulting function should return its source code\n    fn.toString = () => body;\n    // 2. When calling the resulting function, `this` should refer to `global`\n    return fn.bind(_global);\n    // When Trusted Types support in Function constructors is widely available,\n    // the implementation of this function can be simplified to:\n    // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A helper class to manage the evaluation of JIT generated code.\n */\nclass JitEvaluator {\n    /**\n     *\n     * @param sourceUrl The URL of the generated code.\n     * @param statements An array of Angular statement AST nodes to be evaluated.\n     * @param refResolver Resolves `o.ExternalReference`s into values.\n     * @param createSourceMaps If true then create a source-map for the generated code and include it\n     * inline as a source-map comment.\n     * @returns A map of all the variables in the generated code.\n     */\n    evaluateStatements(sourceUrl, statements, refResolver, createSourceMaps) {\n        const converter = new JitEmitterVisitor(refResolver);\n        const ctx = EmitterVisitorContext.createRoot();\n        // Ensure generated code is in strict mode\n        if (statements.length > 0 && !isUseStrictStatement(statements[0])) {\n            statements = [\n                literal('use strict').toStmt(),\n                ...statements,\n            ];\n        }\n        converter.visitAllStatements(statements, ctx);\n        converter.createReturnStmt(ctx);\n        return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\n    }\n    /**\n     * Evaluate a piece of JIT generated code.\n     * @param sourceUrl The URL of this generated code.\n     * @param ctx A context object that contains an AST of the code to be evaluated.\n     * @param vars A map containing the names and values of variables that the evaluated code might\n     * reference.\n     * @param createSourceMap If true then create a source-map for the generated code and include it\n     * inline as a source-map comment.\n     * @returns The result of evaluating the code.\n     */\n    evaluateCode(sourceUrl, ctx, vars, createSourceMap) {\n        let fnBody = `\"use strict\";${ctx.toSource()}\\n//# sourceURL=${sourceUrl}`;\n        const fnArgNames = [];\n        const fnArgValues = [];\n        for (const argName in vars) {\n            fnArgValues.push(vars[argName]);\n            fnArgNames.push(argName);\n        }\n        if (createSourceMap) {\n            // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\n            // E.g. ```\n            // function anonymous(a,b,c\n            // /**/) { ... }```\n            // We don't want to hard code this fact, so we auto detect it via an empty function first.\n            const emptyFn = newTrustedFunctionForJIT(...fnArgNames.concat('return null;')).toString();\n            const headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\n            fnBody += `\\n${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;\n        }\n        const fn = newTrustedFunctionForJIT(...fnArgNames.concat(fnBody));\n        return this.executeFunction(fn, fnArgValues);\n    }\n    /**\n     * Execute a JIT generated function by calling it.\n     *\n     * This method can be overridden in tests to capture the functions that are generated\n     * by this `JitEvaluator` class.\n     *\n     * @param fn A function to execute.\n     * @param args The arguments to pass to the function being executed.\n     * @returns The return value of the executed function.\n     */\n    executeFunction(fn, args) {\n        return fn(...args);\n    }\n}\n/**\n * An Angular AST visitor that converts AST nodes into executable JavaScript code.\n */\nclass JitEmitterVisitor extends AbstractJsEmitterVisitor {\n    constructor(refResolver) {\n        super();\n        this.refResolver = refResolver;\n        this._evalArgNames = [];\n        this._evalArgValues = [];\n        this._evalExportedVars = [];\n    }\n    createReturnStmt(ctx) {\n        const stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map(resultVar => new LiteralMapEntry(resultVar, variable(resultVar), false))));\n        stmt.visitStatement(this, ctx);\n    }\n    getArgs() {\n        const result = {};\n        for (let i = 0; i < this._evalArgNames.length; i++) {\n            result[this._evalArgNames[i]] = this._evalArgValues[i];\n        }\n        return result;\n    }\n    visitExternalExpr(ast, ctx) {\n        this._emitReferenceToExternal(ast, this.refResolver.resolveExternalReference(ast.value), ctx);\n        return null;\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        this._emitReferenceToExternal(ast, ast.node, ctx);\n        return null;\n    }\n    visitDeclareVarStmt(stmt, ctx) {\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return super.visitDeclareVarStmt(stmt, ctx);\n    }\n    visitDeclareFunctionStmt(stmt, ctx) {\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return super.visitDeclareFunctionStmt(stmt, ctx);\n    }\n    visitDeclareClassStmt(stmt, ctx) {\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return super.visitDeclareClassStmt(stmt, ctx);\n    }\n    _emitReferenceToExternal(ast, value, ctx) {\n        let id = this._evalArgValues.indexOf(value);\n        if (id === -1) {\n            id = this._evalArgValues.length;\n            this._evalArgValues.push(value);\n            const name = identifierName({ reference: value }) || 'val';\n            this._evalArgNames.push(`jit_${name}_${id}`);\n        }\n        ctx.print(ast, this._evalArgNames[id]);\n    }\n}\nfunction isUseStrictStatement(statement) {\n    return statement.isEquivalent(literal('use strict').toStmt());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction compileInjector(meta) {\n    const definitionMap = new DefinitionMap();\n    if (meta.providers !== null) {\n        definitionMap.set('providers', meta.providers);\n    }\n    if (meta.imports.length > 0) {\n        definitionMap.set('imports', literalArr(meta.imports));\n    }\n    const expression = importExpr(Identifiers$1.defineInjector).callFn([definitionMap.toLiteralMap()], undefined, true);\n    const type = createInjectorType(meta);\n    return { expression, type, statements: [] };\n}\nfunction createInjectorType(meta) {\n    return new ExpressionType(importExpr(Identifiers$1.InjectorDeclaration, [new ExpressionType(meta.type.type)]));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Implementation of `CompileReflector` which resolves references to @angular/core\n * symbols at runtime, according to a consumer-provided mapping.\n *\n * Only supports `resolveExternalReference`, all other methods throw.\n */\nclass R3JitReflector {\n    constructor(context) {\n        this.context = context;\n    }\n    resolveExternalReference(ref) {\n        // This reflector only handles @angular/core imports.\n        if (ref.moduleName !== '@angular/core') {\n            throw new Error(`Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);\n        }\n        if (!this.context.hasOwnProperty(ref.name)) {\n            throw new Error(`No value provided for @angular/core symbol '${ref.name}'.`);\n        }\n        return this.context[ref.name];\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.\n */\nfunction compileNgModule(meta) {\n    const { internalType, bootstrap, declarations, imports, exports, schemas, containsForwardDecls, emitInline, id } = meta;\n    const statements = [];\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('type', internalType);\n    if (bootstrap.length > 0) {\n        definitionMap.set('bootstrap', refsToArray(bootstrap, containsForwardDecls));\n    }\n    // If requested to emit scope information inline, pass the `declarations`, `imports` and `exports`\n    // to the `ɵɵdefineNgModule()` call. The JIT compilation uses this.\n    if (emitInline) {\n        if (declarations.length > 0) {\n            definitionMap.set('declarations', refsToArray(declarations, containsForwardDecls));\n        }\n        if (imports.length > 0) {\n            definitionMap.set('imports', refsToArray(imports, containsForwardDecls));\n        }\n        if (exports.length > 0) {\n            definitionMap.set('exports', refsToArray(exports, containsForwardDecls));\n        }\n    }\n    // If not emitting inline, the scope information is not passed into `ɵɵdefineNgModule` as it would\n    // prevent tree-shaking of the declarations, imports and exports references.\n    else {\n        const setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);\n        if (setNgModuleScopeCall !== null) {\n            statements.push(setNgModuleScopeCall);\n        }\n    }\n    if (schemas !== null && schemas.length > 0) {\n        definitionMap.set('schemas', literalArr(schemas.map(ref => ref.value)));\n    }\n    if (id !== null) {\n        definitionMap.set('id', id);\n    }\n    const expression = importExpr(Identifiers$1.defineNgModule).callFn([definitionMap.toLiteralMap()], undefined, true);\n    const type = createNgModuleType(meta);\n    return { expression, type, statements };\n}\n/**\n * This function is used in JIT mode to generate the call to `ɵɵdefineNgModule()` from a call to\n * `ɵɵngDeclareNgModule()`.\n */\nfunction compileNgModuleDeclarationExpression(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('type', new WrappedNodeExpr(meta.type));\n    if (meta.bootstrap !== undefined) {\n        definitionMap.set('bootstrap', new WrappedNodeExpr(meta.bootstrap));\n    }\n    if (meta.declarations !== undefined) {\n        definitionMap.set('declarations', new WrappedNodeExpr(meta.declarations));\n    }\n    if (meta.imports !== undefined) {\n        definitionMap.set('imports', new WrappedNodeExpr(meta.imports));\n    }\n    if (meta.exports !== undefined) {\n        definitionMap.set('exports', new WrappedNodeExpr(meta.exports));\n    }\n    if (meta.schemas !== undefined) {\n        definitionMap.set('schemas', new WrappedNodeExpr(meta.schemas));\n    }\n    if (meta.id !== undefined) {\n        definitionMap.set('id', new WrappedNodeExpr(meta.id));\n    }\n    return importExpr(Identifiers$1.defineNgModule).callFn([definitionMap.toLiteralMap()]);\n}\nfunction createNgModuleType({ type: moduleType, declarations, imports, exports }) {\n    return new ExpressionType(importExpr(Identifiers$1.NgModuleDeclaration, [\n        new ExpressionType(moduleType.type), tupleTypeOf(declarations), tupleTypeOf(imports),\n        tupleTypeOf(exports)\n    ]));\n}\n/**\n * Generates a function call to `ɵɵsetNgModuleScope` with all necessary information so that the\n * transitive module scope can be computed during runtime in JIT mode. This call is marked pure\n * such that the references to declarations, imports and exports may be elided causing these\n * symbols to become tree-shakeable.\n */\nfunction generateSetNgModuleScopeCall(meta) {\n    const { adjacentType: moduleType, declarations, imports, exports, containsForwardDecls } = meta;\n    const scopeMap = new DefinitionMap();\n    if (declarations.length > 0) {\n        scopeMap.set('declarations', refsToArray(declarations, containsForwardDecls));\n    }\n    if (imports.length > 0) {\n        scopeMap.set('imports', refsToArray(imports, containsForwardDecls));\n    }\n    if (exports.length > 0) {\n        scopeMap.set('exports', refsToArray(exports, containsForwardDecls));\n    }\n    if (Object.keys(scopeMap.values).length === 0) {\n        return null;\n    }\n    // setNgModuleScope(...)\n    const fnCall = new InvokeFunctionExpr(\n    /* fn */ importExpr(Identifiers$1.setNgModuleScope), \n    /* args */ [moduleType, scopeMap.toLiteralMap()]);\n    // (ngJitMode guard) && setNgModuleScope(...)\n    const guardedCall = jitOnlyGuardedExpression(fnCall);\n    // function() { (ngJitMode guard) && setNgModuleScope(...); }\n    const iife = new FunctionExpr(\n    /* params */ [], \n    /* statements */ [guardedCall.toStmt()]);\n    // (function() { (ngJitMode guard) && setNgModuleScope(...); })()\n    const iifeCall = new InvokeFunctionExpr(\n    /* fn */ iife, \n    /* args */ []);\n    return iifeCall.toStmt();\n}\nfunction tupleTypeOf(exp) {\n    const types = exp.map(ref => typeofExpr(ref.type));\n    return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction compilePipeFromMetadata(metadata) {\n    const definitionMapValues = [];\n    // e.g. `name: 'myPipe'`\n    definitionMapValues.push({ key: 'name', value: literal(metadata.pipeName), quoted: false });\n    // e.g. `type: MyPipe`\n    definitionMapValues.push({ key: 'type', value: metadata.type.value, quoted: false });\n    // e.g. `pure: true`\n    definitionMapValues.push({ key: 'pure', value: literal(metadata.pure), quoted: false });\n    const expression = importExpr(Identifiers$1.definePipe).callFn([literalMap(definitionMapValues)], undefined, true);\n    const type = createPipeType(metadata);\n    return { expression, type, statements: [] };\n}\nfunction createPipeType(metadata) {\n    return new ExpressionType(importExpr(Identifiers$1.PipeDeclaration, [\n        typeWithParameters(metadata.type.type, metadata.typeArgumentCount),\n        new ExpressionType(new LiteralExpr(metadata.pipeName)),\n    ]));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ParserError {\n    constructor(message, input, errLocation, ctxLocation) {\n        this.input = input;\n        this.errLocation = errLocation;\n        this.ctxLocation = ctxLocation;\n        this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n    }\n}\nclass ParseSpan {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    toAbsolute(absoluteOffset) {\n        return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);\n    }\n}\nclass AST {\n    constructor(span, \n    /**\n     * Absolute location of the expression AST in a source code file.\n     */\n    sourceSpan) {\n        this.span = span;\n        this.sourceSpan = sourceSpan;\n    }\n    toString() {\n        return 'AST';\n    }\n}\nclass ASTWithName extends AST {\n    constructor(span, sourceSpan, nameSpan) {\n        super(span, sourceSpan);\n        this.nameSpan = nameSpan;\n    }\n}\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nclass Quote extends AST {\n    constructor(span, sourceSpan, prefix, uninterpretedExpression, location) {\n        super(span, sourceSpan);\n        this.prefix = prefix;\n        this.uninterpretedExpression = uninterpretedExpression;\n        this.location = location;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitQuote(this, context);\n    }\n    toString() {\n        return 'Quote';\n    }\n}\nclass EmptyExpr extends AST {\n    visit(visitor, context = null) {\n        // do nothing\n    }\n}\nclass ImplicitReceiver extends AST {\n    visit(visitor, context = null) {\n        return visitor.visitImplicitReceiver(this, context);\n    }\n}\n/**\n * Receiver when something is accessed through `this` (e.g. `this.foo`). Note that this class\n * inherits from `ImplicitReceiver`, because accessing something through `this` is treated the\n * same as accessing it implicitly inside of an Angular template (e.g. `[attr.title]=\"this.title\"`\n * is the same as `[attr.title]=\"title\"`.). Inheriting allows for the `this` accesses to be treated\n * the same as implicit ones, except for a couple of exceptions like `$event` and `$any`.\n * TODO: we should find a way for this class not to extend from `ImplicitReceiver` in the future.\n */\nclass ThisReceiver extends ImplicitReceiver {\n    visit(visitor, context = null) {\n        var _a;\n        return (_a = visitor.visitThisReceiver) === null || _a === void 0 ? void 0 : _a.call(visitor, this, context);\n    }\n}\n/**\n * Multiple expressions separated by a semicolon.\n */\nclass Chain extends AST {\n    constructor(span, sourceSpan, expressions) {\n        super(span, sourceSpan);\n        this.expressions = expressions;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitChain(this, context);\n    }\n}\nclass Conditional extends AST {\n    constructor(span, sourceSpan, condition, trueExp, falseExp) {\n        super(span, sourceSpan);\n        this.condition = condition;\n        this.trueExp = trueExp;\n        this.falseExp = falseExp;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitConditional(this, context);\n    }\n}\nclass PropertyRead extends ASTWithName {\n    constructor(span, sourceSpan, nameSpan, receiver, name) {\n        super(span, sourceSpan, nameSpan);\n        this.receiver = receiver;\n        this.name = name;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPropertyRead(this, context);\n    }\n}\nclass PropertyWrite extends ASTWithName {\n    constructor(span, sourceSpan, nameSpan, receiver, name, value) {\n        super(span, sourceSpan, nameSpan);\n        this.receiver = receiver;\n        this.name = name;\n        this.value = value;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPropertyWrite(this, context);\n    }\n}\nclass SafePropertyRead extends ASTWithName {\n    constructor(span, sourceSpan, nameSpan, receiver, name) {\n        super(span, sourceSpan, nameSpan);\n        this.receiver = receiver;\n        this.name = name;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitSafePropertyRead(this, context);\n    }\n}\nclass KeyedRead extends AST {\n    constructor(span, sourceSpan, receiver, key) {\n        super(span, sourceSpan);\n        this.receiver = receiver;\n        this.key = key;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitKeyedRead(this, context);\n    }\n}\nclass SafeKeyedRead extends AST {\n    constructor(span, sourceSpan, receiver, key) {\n        super(span, sourceSpan);\n        this.receiver = receiver;\n        this.key = key;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitSafeKeyedRead(this, context);\n    }\n}\nclass KeyedWrite extends AST {\n    constructor(span, sourceSpan, receiver, key, value) {\n        super(span, sourceSpan);\n        this.receiver = receiver;\n        this.key = key;\n        this.value = value;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitKeyedWrite(this, context);\n    }\n}\nclass BindingPipe extends ASTWithName {\n    constructor(span, sourceSpan, exp, name, args, nameSpan) {\n        super(span, sourceSpan, nameSpan);\n        this.exp = exp;\n        this.name = name;\n        this.args = args;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPipe(this, context);\n    }\n}\nclass LiteralPrimitive extends AST {\n    constructor(span, sourceSpan, value) {\n        super(span, sourceSpan);\n        this.value = value;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitLiteralPrimitive(this, context);\n    }\n}\nclass LiteralArray extends AST {\n    constructor(span, sourceSpan, expressions) {\n        super(span, sourceSpan);\n        this.expressions = expressions;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitLiteralArray(this, context);\n    }\n}\nclass LiteralMap extends AST {\n    constructor(span, sourceSpan, keys, values) {\n        super(span, sourceSpan);\n        this.keys = keys;\n        this.values = values;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitLiteralMap(this, context);\n    }\n}\nclass Interpolation extends AST {\n    constructor(span, sourceSpan, strings, expressions) {\n        super(span, sourceSpan);\n        this.strings = strings;\n        this.expressions = expressions;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitInterpolation(this, context);\n    }\n}\nclass Binary extends AST {\n    constructor(span, sourceSpan, operation, left, right) {\n        super(span, sourceSpan);\n        this.operation = operation;\n        this.left = left;\n        this.right = right;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitBinary(this, context);\n    }\n}\n/**\n * For backwards compatibility reasons, `Unary` inherits from `Binary` and mimics the binary AST\n * node that was originally used. This inheritance relation can be deleted in some future major,\n * after consumers have been given a chance to fully support Unary.\n */\nclass Unary extends Binary {\n    /**\n     * During the deprecation period this constructor is private, to avoid consumers from creating\n     * a `Unary` with the fallback properties for `Binary`.\n     */\n    constructor(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {\n        super(span, sourceSpan, binaryOp, binaryLeft, binaryRight);\n        this.operator = operator;\n        this.expr = expr;\n        // Redeclare the properties that are inherited from `Binary` as `never`, as consumers should not\n        // depend on these fields when operating on `Unary`.\n        this.left = null;\n        this.right = null;\n        this.operation = null;\n    }\n    /**\n     * Creates a unary minus expression \"-x\", represented as `Binary` using \"0 - x\".\n     */\n    static createMinus(span, sourceSpan, expr) {\n        return new Unary(span, sourceSpan, '-', expr, '-', new LiteralPrimitive(span, sourceSpan, 0), expr);\n    }\n    /**\n     * Creates a unary plus expression \"+x\", represented as `Binary` using \"x - 0\".\n     */\n    static createPlus(span, sourceSpan, expr) {\n        return new Unary(span, sourceSpan, '+', expr, '-', expr, new LiteralPrimitive(span, sourceSpan, 0));\n    }\n    visit(visitor, context = null) {\n        if (visitor.visitUnary !== undefined) {\n            return visitor.visitUnary(this, context);\n        }\n        return visitor.visitBinary(this, context);\n    }\n}\nclass PrefixNot extends AST {\n    constructor(span, sourceSpan, expression) {\n        super(span, sourceSpan);\n        this.expression = expression;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPrefixNot(this, context);\n    }\n}\nclass NonNullAssert extends AST {\n    constructor(span, sourceSpan, expression) {\n        super(span, sourceSpan);\n        this.expression = expression;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitNonNullAssert(this, context);\n    }\n}\nclass Call extends AST {\n    constructor(span, sourceSpan, receiver, args, argumentSpan) {\n        super(span, sourceSpan);\n        this.receiver = receiver;\n        this.args = args;\n        this.argumentSpan = argumentSpan;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitCall(this, context);\n    }\n}\n/**\n * Records the absolute position of a text span in a source file, where `start` and `end` are the\n * starting and ending byte offsets, respectively, of the text span in a source file.\n */\nclass AbsoluteSourceSpan {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n}\nclass ASTWithSource extends AST {\n    constructor(ast, source, location, absoluteOffset, errors) {\n        super(new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));\n        this.ast = ast;\n        this.source = source;\n        this.location = location;\n        this.errors = errors;\n    }\n    visit(visitor, context = null) {\n        if (visitor.visitASTWithSource) {\n            return visitor.visitASTWithSource(this, context);\n        }\n        return this.ast.visit(visitor, context);\n    }\n    toString() {\n        return `${this.source} in ${this.location}`;\n    }\n}\nclass VariableBinding {\n    /**\n     * @param sourceSpan entire span of the binding.\n     * @param key name of the LHS along with its span.\n     * @param value optional value for the RHS along with its span.\n     */\n    constructor(sourceSpan, key, value) {\n        this.sourceSpan = sourceSpan;\n        this.key = key;\n        this.value = value;\n    }\n}\nclass ExpressionBinding {\n    /**\n     * @param sourceSpan entire span of the binding.\n     * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its\n     * span. Note that the length of the span may not be the same as\n     * `key.source.length`. For example,\n     * 1. key.source = ngFor, key.span is for \"ngFor\"\n     * 2. key.source = ngForOf, key.span is for \"of\"\n     * 3. key.source = ngForTrackBy, key.span is for \"trackBy\"\n     * @param value optional expression for the RHS.\n     */\n    constructor(sourceSpan, key, value) {\n        this.sourceSpan = sourceSpan;\n        this.key = key;\n        this.value = value;\n    }\n}\nclass RecursiveAstVisitor {\n    visit(ast, context) {\n        // The default implementation just visits every node.\n        // Classes that extend RecursiveAstVisitor should override this function\n        // to selectively visit the specified node.\n        ast.visit(this, context);\n    }\n    visitUnary(ast, context) {\n        this.visit(ast.expr, context);\n    }\n    visitBinary(ast, context) {\n        this.visit(ast.left, context);\n        this.visit(ast.right, context);\n    }\n    visitChain(ast, context) {\n        this.visitAll(ast.expressions, context);\n    }\n    visitConditional(ast, context) {\n        this.visit(ast.condition, context);\n        this.visit(ast.trueExp, context);\n        this.visit(ast.falseExp, context);\n    }\n    visitPipe(ast, context) {\n        this.visit(ast.exp, context);\n        this.visitAll(ast.args, context);\n    }\n    visitImplicitReceiver(ast, context) { }\n    visitThisReceiver(ast, context) { }\n    visitInterpolation(ast, context) {\n        this.visitAll(ast.expressions, context);\n    }\n    visitKeyedRead(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visit(ast.key, context);\n    }\n    visitKeyedWrite(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visit(ast.key, context);\n        this.visit(ast.value, context);\n    }\n    visitLiteralArray(ast, context) {\n        this.visitAll(ast.expressions, context);\n    }\n    visitLiteralMap(ast, context) {\n        this.visitAll(ast.values, context);\n    }\n    visitLiteralPrimitive(ast, context) { }\n    visitPrefixNot(ast, context) {\n        this.visit(ast.expression, context);\n    }\n    visitNonNullAssert(ast, context) {\n        this.visit(ast.expression, context);\n    }\n    visitPropertyRead(ast, context) {\n        this.visit(ast.receiver, context);\n    }\n    visitPropertyWrite(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visit(ast.value, context);\n    }\n    visitSafePropertyRead(ast, context) {\n        this.visit(ast.receiver, context);\n    }\n    visitSafeKeyedRead(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visit(ast.key, context);\n    }\n    visitCall(ast, context) {\n        this.visit(ast.receiver, context);\n        this.visitAll(ast.args, context);\n    }\n    visitQuote(ast, context) { }\n    // This is not part of the AstVisitor interface, just a helper method\n    visitAll(asts, context) {\n        for (const ast of asts) {\n            this.visit(ast, context);\n        }\n    }\n}\nclass AstTransformer {\n    visitImplicitReceiver(ast, context) {\n        return ast;\n    }\n    visitThisReceiver(ast, context) {\n        return ast;\n    }\n    visitInterpolation(ast, context) {\n        return new Interpolation(ast.span, ast.sourceSpan, ast.strings, this.visitAll(ast.expressions));\n    }\n    visitLiteralPrimitive(ast, context) {\n        return new LiteralPrimitive(ast.span, ast.sourceSpan, ast.value);\n    }\n    visitPropertyRead(ast, context) {\n        return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);\n    }\n    visitPropertyWrite(ast, context) {\n        return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n    }\n    visitSafePropertyRead(ast, context) {\n        return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);\n    }\n    visitLiteralArray(ast, context) {\n        return new LiteralArray(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));\n    }\n    visitLiteralMap(ast, context) {\n        return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, this.visitAll(ast.values));\n    }\n    visitUnary(ast, context) {\n        switch (ast.operator) {\n            case '+':\n                return Unary.createPlus(ast.span, ast.sourceSpan, ast.expr.visit(this));\n            case '-':\n                return Unary.createMinus(ast.span, ast.sourceSpan, ast.expr.visit(this));\n            default:\n                throw new Error(`Unknown unary operator ${ast.operator}`);\n        }\n    }\n    visitBinary(ast, context) {\n        return new Binary(ast.span, ast.sourceSpan, ast.operation, ast.left.visit(this), ast.right.visit(this));\n    }\n    visitPrefixNot(ast, context) {\n        return new PrefixNot(ast.span, ast.sourceSpan, ast.expression.visit(this));\n    }\n    visitNonNullAssert(ast, context) {\n        return new NonNullAssert(ast.span, ast.sourceSpan, ast.expression.visit(this));\n    }\n    visitConditional(ast, context) {\n        return new Conditional(ast.span, ast.sourceSpan, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n    }\n    visitPipe(ast, context) {\n        return new BindingPipe(ast.span, ast.sourceSpan, ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.nameSpan);\n    }\n    visitKeyedRead(ast, context) {\n        return new KeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));\n    }\n    visitKeyedWrite(ast, context) {\n        return new KeyedWrite(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this), ast.value.visit(this));\n    }\n    visitCall(ast, context) {\n        return new Call(ast.span, ast.sourceSpan, ast.receiver.visit(this), this.visitAll(ast.args), ast.argumentSpan);\n    }\n    visitAll(asts) {\n        const res = [];\n        for (let i = 0; i < asts.length; ++i) {\n            res[i] = asts[i].visit(this);\n        }\n        return res;\n    }\n    visitChain(ast, context) {\n        return new Chain(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));\n    }\n    visitQuote(ast, context) {\n        return new Quote(ast.span, ast.sourceSpan, ast.prefix, ast.uninterpretedExpression, ast.location);\n    }\n    visitSafeKeyedRead(ast, context) {\n        return new SafeKeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));\n    }\n}\n// A transformer that only creates new nodes if the transformer makes a change or\n// a change is made a child node.\nclass AstMemoryEfficientTransformer {\n    visitImplicitReceiver(ast, context) {\n        return ast;\n    }\n    visitThisReceiver(ast, context) {\n        return ast;\n    }\n    visitInterpolation(ast, context) {\n        const expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions)\n            return new Interpolation(ast.span, ast.sourceSpan, ast.strings, expressions);\n        return ast;\n    }\n    visitLiteralPrimitive(ast, context) {\n        return ast;\n    }\n    visitPropertyRead(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);\n        }\n        return ast;\n    }\n    visitPropertyWrite(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        const value = ast.value.visit(this);\n        if (receiver !== ast.receiver || value !== ast.value) {\n            return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, value);\n        }\n        return ast;\n    }\n    visitSafePropertyRead(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);\n        }\n        return ast;\n    }\n    visitLiteralArray(ast, context) {\n        const expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions) {\n            return new LiteralArray(ast.span, ast.sourceSpan, expressions);\n        }\n        return ast;\n    }\n    visitLiteralMap(ast, context) {\n        const values = this.visitAll(ast.values);\n        if (values !== ast.values) {\n            return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, values);\n        }\n        return ast;\n    }\n    visitUnary(ast, context) {\n        const expr = ast.expr.visit(this);\n        if (expr !== ast.expr) {\n            switch (ast.operator) {\n                case '+':\n                    return Unary.createPlus(ast.span, ast.sourceSpan, expr);\n                case '-':\n                    return Unary.createMinus(ast.span, ast.sourceSpan, expr);\n                default:\n                    throw new Error(`Unknown unary operator ${ast.operator}`);\n            }\n        }\n        return ast;\n    }\n    visitBinary(ast, context) {\n        const left = ast.left.visit(this);\n        const right = ast.right.visit(this);\n        if (left !== ast.left || right !== ast.right) {\n            return new Binary(ast.span, ast.sourceSpan, ast.operation, left, right);\n        }\n        return ast;\n    }\n    visitPrefixNot(ast, context) {\n        const expression = ast.expression.visit(this);\n        if (expression !== ast.expression) {\n            return new PrefixNot(ast.span, ast.sourceSpan, expression);\n        }\n        return ast;\n    }\n    visitNonNullAssert(ast, context) {\n        const expression = ast.expression.visit(this);\n        if (expression !== ast.expression) {\n            return new NonNullAssert(ast.span, ast.sourceSpan, expression);\n        }\n        return ast;\n    }\n    visitConditional(ast, context) {\n        const condition = ast.condition.visit(this);\n        const trueExp = ast.trueExp.visit(this);\n        const falseExp = ast.falseExp.visit(this);\n        if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== ast.falseExp) {\n            return new Conditional(ast.span, ast.sourceSpan, condition, trueExp, falseExp);\n        }\n        return ast;\n    }\n    visitPipe(ast, context) {\n        const exp = ast.exp.visit(this);\n        const args = this.visitAll(ast.args);\n        if (exp !== ast.exp || args !== ast.args) {\n            return new BindingPipe(ast.span, ast.sourceSpan, exp, ast.name, args, ast.nameSpan);\n        }\n        return ast;\n    }\n    visitKeyedRead(ast, context) {\n        const obj = ast.receiver.visit(this);\n        const key = ast.key.visit(this);\n        if (obj !== ast.receiver || key !== ast.key) {\n            return new KeyedRead(ast.span, ast.sourceSpan, obj, key);\n        }\n        return ast;\n    }\n    visitKeyedWrite(ast, context) {\n        const obj = ast.receiver.visit(this);\n        const key = ast.key.visit(this);\n        const value = ast.value.visit(this);\n        if (obj !== ast.receiver || key !== ast.key || value !== ast.value) {\n            return new KeyedWrite(ast.span, ast.sourceSpan, obj, key, value);\n        }\n        return ast;\n    }\n    visitAll(asts) {\n        const res = [];\n        let modified = false;\n        for (let i = 0; i < asts.length; ++i) {\n            const original = asts[i];\n            const value = original.visit(this);\n            res[i] = value;\n            modified = modified || value !== original;\n        }\n        return modified ? res : asts;\n    }\n    visitChain(ast, context) {\n        const expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions) {\n            return new Chain(ast.span, ast.sourceSpan, expressions);\n        }\n        return ast;\n    }\n    visitCall(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        const args = this.visitAll(ast.args);\n        if (receiver !== ast.receiver || args !== ast.args) {\n            return new Call(ast.span, ast.sourceSpan, receiver, args, ast.argumentSpan);\n        }\n        return ast;\n    }\n    visitQuote(ast, context) {\n        return ast;\n    }\n    visitSafeKeyedRead(ast, context) {\n        const obj = ast.receiver.visit(this);\n        const key = ast.key.visit(this);\n        if (obj !== ast.receiver || key !== ast.key) {\n            return new SafeKeyedRead(ast.span, ast.sourceSpan, obj, key);\n        }\n        return ast;\n    }\n}\n// Bindings\nclass ParsedProperty {\n    constructor(name, expression, type, \n    // TODO(FW-2095): `keySpan` should really be required but allows `undefined` so VE does\n    // not need to be updated. Make `keySpan` required when VE is removed.\n    sourceSpan, keySpan, valueSpan) {\n        this.name = name;\n        this.expression = expression;\n        this.type = type;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n        this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;\n        this.isAnimation = this.type === ParsedPropertyType.ANIMATION;\n    }\n}\nvar ParsedPropertyType;\n(function (ParsedPropertyType) {\n    ParsedPropertyType[ParsedPropertyType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    ParsedPropertyType[ParsedPropertyType[\"LITERAL_ATTR\"] = 1] = \"LITERAL_ATTR\";\n    ParsedPropertyType[ParsedPropertyType[\"ANIMATION\"] = 2] = \"ANIMATION\";\n})(ParsedPropertyType || (ParsedPropertyType = {}));\nclass ParsedEvent {\n    // Regular events have a target\n    // Animation events have a phase\n    constructor(name, targetOrPhase, type, handler, sourceSpan, \n    // TODO(FW-2095): keySpan should be required but was made optional to avoid changing VE\n    handlerSpan, keySpan) {\n        this.name = name;\n        this.targetOrPhase = targetOrPhase;\n        this.type = type;\n        this.handler = handler;\n        this.sourceSpan = sourceSpan;\n        this.handlerSpan = handlerSpan;\n        this.keySpan = keySpan;\n    }\n}\n/**\n * ParsedVariable represents a variable declaration in a microsyntax expression.\n */\nclass ParsedVariable {\n    constructor(name, value, sourceSpan, keySpan, valueSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n    }\n}\nclass BoundElementProperty {\n    constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CORE = '@angular/core';\nclass Identifiers {\n}\nIdentifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {\n    name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\n    moduleName: CORE,\n};\nIdentifiers.ElementRef = { name: 'ElementRef', moduleName: CORE };\nIdentifiers.NgModuleRef = { name: 'NgModuleRef', moduleName: CORE };\nIdentifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleName: CORE };\nIdentifiers.ChangeDetectorRef = {\n    name: 'ChangeDetectorRef',\n    moduleName: CORE,\n};\nIdentifiers.QueryList = { name: 'QueryList', moduleName: CORE };\nIdentifiers.TemplateRef = { name: 'TemplateRef', moduleName: CORE };\nIdentifiers.Renderer2 = { name: 'Renderer2', moduleName: CORE };\nIdentifiers.CodegenComponentFactoryResolver = {\n    name: 'ɵCodegenComponentFactoryResolver',\n    moduleName: CORE,\n};\nIdentifiers.ComponentFactoryResolver = {\n    name: 'ComponentFactoryResolver',\n    moduleName: CORE,\n};\nIdentifiers.ComponentFactory = { name: 'ComponentFactory', moduleName: CORE };\nIdentifiers.ComponentRef = { name: 'ComponentRef', moduleName: CORE };\nIdentifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleName: CORE };\nIdentifiers.createModuleFactory = {\n    name: 'ɵcmf',\n    moduleName: CORE,\n};\nIdentifiers.moduleDef = {\n    name: 'ɵmod',\n    moduleName: CORE,\n};\nIdentifiers.moduleProviderDef = {\n    name: 'ɵmpd',\n    moduleName: CORE,\n};\nIdentifiers.RegisterModuleFactoryFn = {\n    name: 'ɵregisterModuleFactory',\n    moduleName: CORE,\n};\nIdentifiers.inject = { name: 'ɵɵinject', moduleName: CORE };\nIdentifiers.directiveInject = { name: 'ɵɵdirectiveInject', moduleName: CORE };\nIdentifiers.INJECTOR = { name: 'INJECTOR', moduleName: CORE };\nIdentifiers.Injector = { name: 'Injector', moduleName: CORE };\nIdentifiers.ViewEncapsulation = {\n    name: 'ViewEncapsulation',\n    moduleName: CORE,\n};\nIdentifiers.ChangeDetectionStrategy = {\n    name: 'ChangeDetectionStrategy',\n    moduleName: CORE,\n};\nIdentifiers.SecurityContext = {\n    name: 'SecurityContext',\n    moduleName: CORE,\n};\nIdentifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleName: CORE };\nIdentifiers.TRANSLATIONS_FORMAT = {\n    name: 'TRANSLATIONS_FORMAT',\n    moduleName: CORE,\n};\nIdentifiers.inlineInterpolate = {\n    name: 'ɵinlineInterpolate',\n    moduleName: CORE,\n};\nIdentifiers.interpolate = { name: 'ɵinterpolate', moduleName: CORE };\nIdentifiers.EMPTY_ARRAY = { name: 'ɵEMPTY_ARRAY', moduleName: CORE };\nIdentifiers.EMPTY_MAP = { name: 'ɵEMPTY_MAP', moduleName: CORE };\nIdentifiers.Renderer = { name: 'Renderer', moduleName: CORE };\n// type only\nIdentifiers.RendererType2 = {\n    name: 'RendererType2',\n    moduleName: CORE,\n};\n// type only\nIdentifiers.ViewDefinition = {\n    name: 'ɵViewDefinition',\n    moduleName: CORE,\n};\nIdentifiers.createComponentFactory = { name: 'ɵccf', moduleName: CORE };\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass EventHandlerVars {\n}\nEventHandlerVars.event = variable('$event');\nclass ConvertActionBindingResult {\n    constructor(\n    /**\n     * Render2 compatible statements,\n     */\n    stmts, \n    /**\n     * Variable name used with render2 compatible statements.\n     */\n    allowDefault) {\n        this.stmts = stmts;\n        this.allowDefault = allowDefault;\n        /**\n         * This is bit of a hack. It converts statements which render2 expects to statements which are\n         * expected by render3.\n         *\n         * Example: `<div click=\"doSomething($event)\">` will generate:\n         *\n         * Render3:\n         * ```\n         * const pd_b:any = ((<any>ctx.doSomething($event)) !== false);\n         * return pd_b;\n         * ```\n         *\n         * but render2 expects:\n         * ```\n         * return ctx.doSomething($event);\n         * ```\n         */\n        // TODO(misko): remove this hack once we no longer support ViewEngine.\n        this.render3Stmts = stmts.map((statement) => {\n            if (statement instanceof DeclareVarStmt && statement.name == allowDefault.name &&\n                statement.value instanceof BinaryOperatorExpr) {\n                const lhs = statement.value.lhs;\n                return new ReturnStatement(lhs.value);\n            }\n            return statement;\n        });\n    }\n}\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression is\n * used in an action binding (e.g. an event handler).\n */\nfunction convertActionBinding(localResolver, implicitReceiver, action, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses, globals) {\n    if (!localResolver) {\n        localResolver = new DefaultLocalResolver(globals);\n    }\n    const actionWithoutBuiltins = convertPropertyBindingBuiltins({\n        createLiteralArrayConverter: (argCount) => {\n            // Note: no caching for literal arrays in actions.\n            return (args) => literalArr(args);\n        },\n        createLiteralMapConverter: (keys) => {\n            // Note: no caching for literal maps in actions.\n            return (values) => {\n                const entries = keys.map((k, i) => ({\n                    key: k.key,\n                    value: values[i],\n                    quoted: k.quoted,\n                }));\n                return literalMap(entries);\n            };\n        },\n        createPipeConverter: (name) => {\n            throw new Error(`Illegal State: Actions are not allowed to contain pipes. Pipe: ${name}`);\n        }\n    }, action);\n    const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses);\n    const actionStmts = [];\n    flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);\n    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\n    if (visitor.usesImplicitReceiver) {\n        localResolver.notifyImplicitReceiverUse();\n    }\n    const lastIndex = actionStmts.length - 1;\n    let preventDefaultVar = null;\n    if (lastIndex >= 0) {\n        const lastStatement = actionStmts[lastIndex];\n        const returnExpr = convertStmtIntoExpression(lastStatement);\n        if (returnExpr) {\n            // Note: We need to cast the result of the method call to dynamic,\n            // as it might be a void method!\n            preventDefaultVar = createPreventDefaultVar(bindingId);\n            actionStmts[lastIndex] =\n                preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))\n                    .toDeclStmt(null, [StmtModifier.Final]);\n        }\n    }\n    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);\n}\nfunction convertPropertyBindingBuiltins(converterFactory, ast) {\n    return convertBuiltins(converterFactory, ast);\n}\nclass ConvertPropertyBindingResult {\n    constructor(stmts, currValExpr) {\n        this.stmts = stmts;\n        this.currValExpr = currValExpr;\n    }\n}\nvar BindingForm;\n(function (BindingForm) {\n    // The general form of binding expression, supports all expressions.\n    BindingForm[BindingForm[\"General\"] = 0] = \"General\";\n    // Try to generate a simple binding (no temporaries or statements)\n    // otherwise generate a general binding\n    BindingForm[BindingForm[\"TrySimple\"] = 1] = \"TrySimple\";\n    // Inlines assignment of temporaries into the generated expression. The result may still\n    // have statements attached for declarations of temporary variables.\n    // This is the only relevant form for Ivy, the other forms are only used in ViewEngine.\n    BindingForm[BindingForm[\"Expression\"] = 2] = \"Expression\";\n})(BindingForm || (BindingForm = {}));\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression\n * is used in property binding. The expression has to be preprocessed via\n * `convertPropertyBindingBuiltins`.\n */\nfunction convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId, form, interpolationFunction) {\n    if (!localResolver) {\n        localResolver = new DefaultLocalResolver();\n    }\n    const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction);\n    const outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);\n    const stmts = getStatementsFromVisitor(visitor, bindingId);\n    if (visitor.usesImplicitReceiver) {\n        localResolver.notifyImplicitReceiverUse();\n    }\n    if (visitor.temporaryCount === 0 && form == BindingForm.TrySimple) {\n        return new ConvertPropertyBindingResult([], outputExpr);\n    }\n    else if (form === BindingForm.Expression) {\n        return new ConvertPropertyBindingResult(stmts, outputExpr);\n    }\n    const currValExpr = createCurrValueExpr(bindingId);\n    stmts.push(currValExpr.set(outputExpr).toDeclStmt(DYNAMIC_TYPE, [StmtModifier.Final]));\n    return new ConvertPropertyBindingResult(stmts, currValExpr);\n}\n/**\n * Given some expression, such as a binding or interpolation expression, and a context expression to\n * look values up on, visit each facet of the given expression resolving values from the context\n * expression such that a list of arguments can be derived from the found values that can be used as\n * arguments to an external update instruction.\n *\n * @param localResolver The resolver to use to look up expressions by name appropriately\n * @param contextVariableExpression The expression representing the context variable used to create\n * the final argument expressions\n * @param expressionWithArgumentsToExtract The expression to visit to figure out what values need to\n * be resolved and what arguments list to build.\n * @param bindingId A name prefix used to create temporary variable names if they're needed for the\n * arguments generated\n * @returns An array of expressions that can be passed as arguments to instruction expressions like\n * `o.importExpr(R3.propertyInterpolate).callFn(result)`\n */\nfunction convertUpdateArguments(localResolver, contextVariableExpression, expressionWithArgumentsToExtract, bindingId) {\n    const visitor = new _AstToIrVisitor(localResolver, contextVariableExpression, bindingId, undefined);\n    const outputExpr = expressionWithArgumentsToExtract.visit(visitor, _Mode.Expression);\n    if (visitor.usesImplicitReceiver) {\n        localResolver.notifyImplicitReceiverUse();\n    }\n    const stmts = getStatementsFromVisitor(visitor, bindingId);\n    // Removing the first argument, because it was a length for ViewEngine, not Ivy.\n    let args = outputExpr.args.slice(1);\n    if (expressionWithArgumentsToExtract instanceof Interpolation) {\n        // If we're dealing with an interpolation of 1 value with an empty prefix and suffix, reduce the\n        // args returned to just the value, because we're going to pass it to a special instruction.\n        const strings = expressionWithArgumentsToExtract.strings;\n        if (args.length === 3 && strings[0] === '' && strings[1] === '') {\n            // Single argument interpolate instructions.\n            args = [args[1]];\n        }\n        else if (args.length >= 19) {\n            // 19 or more arguments must be passed to the `interpolateV`-style instructions, which accept\n            // an array of arguments\n            args = [literalArr(args)];\n        }\n    }\n    return { stmts, args };\n}\nfunction getStatementsFromVisitor(visitor, bindingId) {\n    const stmts = [];\n    for (let i = 0; i < visitor.temporaryCount; i++) {\n        stmts.push(temporaryDeclaration(bindingId, i));\n    }\n    return stmts;\n}\nfunction convertBuiltins(converterFactory, ast) {\n    const visitor = new _BuiltinAstConverter(converterFactory);\n    return ast.visit(visitor);\n}\nfunction temporaryName(bindingId, temporaryNumber) {\n    return `tmp_${bindingId}_${temporaryNumber}`;\n}\nfunction temporaryDeclaration(bindingId, temporaryNumber) {\n    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber));\n}\nfunction prependTemporaryDecls(temporaryCount, bindingId, statements) {\n    for (let i = temporaryCount - 1; i >= 0; i--) {\n        statements.unshift(temporaryDeclaration(bindingId, i));\n    }\n}\nvar _Mode;\n(function (_Mode) {\n    _Mode[_Mode[\"Statement\"] = 0] = \"Statement\";\n    _Mode[_Mode[\"Expression\"] = 1] = \"Expression\";\n})(_Mode || (_Mode = {}));\nfunction ensureStatementMode(mode, ast) {\n    if (mode !== _Mode.Statement) {\n        throw new Error(`Expected a statement, but saw ${ast}`);\n    }\n}\nfunction ensureExpressionMode(mode, ast) {\n    if (mode !== _Mode.Expression) {\n        throw new Error(`Expected an expression, but saw ${ast}`);\n    }\n}\nfunction convertToStatementIfNeeded(mode, expr) {\n    if (mode === _Mode.Statement) {\n        return expr.toStmt();\n    }\n    else {\n        return expr;\n    }\n}\nclass _BuiltinAstConverter extends AstTransformer {\n    constructor(_converterFactory) {\n        super();\n        this._converterFactory = _converterFactory;\n    }\n    visitPipe(ast, context) {\n        const args = [ast.exp, ...ast.args].map(ast => ast.visit(this, context));\n        return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createPipeConverter(ast.name, args.length));\n    }\n    visitLiteralArray(ast, context) {\n        const args = ast.expressions.map(ast => ast.visit(this, context));\n        return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));\n    }\n    visitLiteralMap(ast, context) {\n        const args = ast.values.map(ast => ast.visit(this, context));\n        return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralMapConverter(ast.keys));\n    }\n}\nclass _AstToIrVisitor {\n    constructor(_localResolver, _implicitReceiver, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses) {\n        this._localResolver = _localResolver;\n        this._implicitReceiver = _implicitReceiver;\n        this.bindingId = bindingId;\n        this.interpolationFunction = interpolationFunction;\n        this.baseSourceSpan = baseSourceSpan;\n        this.implicitReceiverAccesses = implicitReceiverAccesses;\n        this._nodeMap = new Map();\n        this._resultMap = new Map();\n        this._currentTemporary = 0;\n        this.temporaryCount = 0;\n        this.usesImplicitReceiver = false;\n    }\n    visitUnary(ast, mode) {\n        let op;\n        switch (ast.operator) {\n            case '+':\n                op = UnaryOperator.Plus;\n                break;\n            case '-':\n                op = UnaryOperator.Minus;\n                break;\n            default:\n                throw new Error(`Unsupported operator ${ast.operator}`);\n        }\n        return convertToStatementIfNeeded(mode, new UnaryOperatorExpr(op, this._visit(ast.expr, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n    }\n    visitBinary(ast, mode) {\n        let op;\n        switch (ast.operation) {\n            case '+':\n                op = BinaryOperator.Plus;\n                break;\n            case '-':\n                op = BinaryOperator.Minus;\n                break;\n            case '*':\n                op = BinaryOperator.Multiply;\n                break;\n            case '/':\n                op = BinaryOperator.Divide;\n                break;\n            case '%':\n                op = BinaryOperator.Modulo;\n                break;\n            case '&&':\n                op = BinaryOperator.And;\n                break;\n            case '||':\n                op = BinaryOperator.Or;\n                break;\n            case '==':\n                op = BinaryOperator.Equals;\n                break;\n            case '!=':\n                op = BinaryOperator.NotEquals;\n                break;\n            case '===':\n                op = BinaryOperator.Identical;\n                break;\n            case '!==':\n                op = BinaryOperator.NotIdentical;\n                break;\n            case '<':\n                op = BinaryOperator.Lower;\n                break;\n            case '>':\n                op = BinaryOperator.Bigger;\n                break;\n            case '<=':\n                op = BinaryOperator.LowerEquals;\n                break;\n            case '>=':\n                op = BinaryOperator.BiggerEquals;\n                break;\n            case '??':\n                return this.convertNullishCoalesce(ast, mode);\n            default:\n                throw new Error(`Unsupported operation ${ast.operation}`);\n        }\n        return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n    }\n    visitChain(ast, mode) {\n        ensureStatementMode(mode, ast);\n        return this.visitAll(ast.expressions, mode);\n    }\n    visitConditional(ast, mode) {\n        const value = this._visit(ast.condition, _Mode.Expression);\n        return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression), this.convertSourceSpan(ast.span)));\n    }\n    visitPipe(ast, mode) {\n        throw new Error(`Illegal state: Pipes should have been converted into functions. Pipe: ${ast.name}`);\n    }\n    visitImplicitReceiver(ast, mode) {\n        ensureExpressionMode(mode, ast);\n        this.usesImplicitReceiver = true;\n        return this._implicitReceiver;\n    }\n    visitThisReceiver(ast, mode) {\n        return this.visitImplicitReceiver(ast, mode);\n    }\n    visitInterpolation(ast, mode) {\n        ensureExpressionMode(mode, ast);\n        const args = [literal(ast.expressions.length)];\n        for (let i = 0; i < ast.strings.length - 1; i++) {\n            args.push(literal(ast.strings[i]));\n            args.push(this._visit(ast.expressions[i], _Mode.Expression));\n        }\n        args.push(literal(ast.strings[ast.strings.length - 1]));\n        if (this.interpolationFunction) {\n            return this.interpolationFunction(args);\n        }\n        return ast.expressions.length <= 9 ?\n            importExpr(Identifiers.inlineInterpolate).callFn(args) :\n            importExpr(Identifiers.interpolate).callFn([\n                args[0], literalArr(args.slice(1), undefined, this.convertSourceSpan(ast.span))\n            ]);\n    }\n    visitKeyedRead(ast, mode) {\n        const leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            return convertToStatementIfNeeded(mode, this._visit(ast.receiver, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));\n        }\n    }\n    visitKeyedWrite(ast, mode) {\n        const obj = this._visit(ast.receiver, _Mode.Expression);\n        const key = this._visit(ast.key, _Mode.Expression);\n        const value = this._visit(ast.value, _Mode.Expression);\n        if (obj === this._implicitReceiver) {\n            this._localResolver.maybeRestoreView();\n        }\n        return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n    }\n    visitLiteralArray(ast, mode) {\n        throw new Error(`Illegal State: literal arrays should have been converted into functions`);\n    }\n    visitLiteralMap(ast, mode) {\n        throw new Error(`Illegal State: literal maps should have been converted into functions`);\n    }\n    visitLiteralPrimitive(ast, mode) {\n        // For literal values of null, undefined, true, or false allow type interference\n        // to infer the type.\n        const type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ?\n            INFERRED_TYPE :\n            undefined;\n        return convertToStatementIfNeeded(mode, literal(ast.value, type, this.convertSourceSpan(ast.span)));\n    }\n    _getLocal(name, receiver) {\n        var _a;\n        if (((_a = this._localResolver.globals) === null || _a === void 0 ? void 0 : _a.has(name)) && receiver instanceof ThisReceiver) {\n            return null;\n        }\n        return this._localResolver.getLocal(name);\n    }\n    visitPrefixNot(ast, mode) {\n        return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));\n    }\n    visitNonNullAssert(ast, mode) {\n        return convertToStatementIfNeeded(mode, assertNotNull(this._visit(ast.expression, _Mode.Expression)));\n    }\n    visitPropertyRead(ast, mode) {\n        const leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            let result = null;\n            const prevUsesImplicitReceiver = this.usesImplicitReceiver;\n            const receiver = this._visit(ast.receiver, _Mode.Expression);\n            if (receiver === this._implicitReceiver) {\n                result = this._getLocal(ast.name, ast.receiver);\n                if (result) {\n                    // Restore the previous \"usesImplicitReceiver\" state since the implicit\n                    // receiver has been replaced with a resolved local expression.\n                    this.usesImplicitReceiver = prevUsesImplicitReceiver;\n                    this.addImplicitReceiverAccess(ast.name);\n                }\n            }\n            if (result == null) {\n                result = receiver.prop(ast.name, this.convertSourceSpan(ast.span));\n            }\n            return convertToStatementIfNeeded(mode, result);\n        }\n    }\n    visitPropertyWrite(ast, mode) {\n        const receiver = this._visit(ast.receiver, _Mode.Expression);\n        const prevUsesImplicitReceiver = this.usesImplicitReceiver;\n        let varExpr = null;\n        if (receiver === this._implicitReceiver) {\n            const localExpr = this._getLocal(ast.name, ast.receiver);\n            if (localExpr) {\n                if (localExpr instanceof ReadPropExpr) {\n                    // If the local variable is a property read expression, it's a reference\n                    // to a 'context.property' value and will be used as the target of the\n                    // write expression.\n                    varExpr = localExpr;\n                    // Restore the previous \"usesImplicitReceiver\" state since the implicit\n                    // receiver has been replaced with a resolved local expression.\n                    this.usesImplicitReceiver = prevUsesImplicitReceiver;\n                    this.addImplicitReceiverAccess(ast.name);\n                }\n                else {\n                    // Otherwise it's an error.\n                    const receiver = ast.name;\n                    const value = (ast.value instanceof PropertyRead) ? ast.value.name : undefined;\n                    throw new Error(`Cannot assign value \"${value}\" to template variable \"${receiver}\". Template variables are read-only.`);\n                }\n            }\n        }\n        // If no local expression could be produced, use the original receiver's\n        // property as the target.\n        if (varExpr === null) {\n            varExpr = receiver.prop(ast.name, this.convertSourceSpan(ast.span));\n        }\n        return convertToStatementIfNeeded(mode, varExpr.set(this._visit(ast.value, _Mode.Expression)));\n    }\n    visitSafePropertyRead(ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    }\n    visitSafeKeyedRead(ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    }\n    visitAll(asts, mode) {\n        return asts.map(ast => this._visit(ast, mode));\n    }\n    visitQuote(ast, mode) {\n        throw new Error(`Quotes are not supported for evaluation!\n        Statement: ${ast.uninterpretedExpression} located at ${ast.location}`);\n    }\n    visitCall(ast, mode) {\n        const leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        const convertedArgs = this.visitAll(ast.args, _Mode.Expression);\n        if (ast instanceof BuiltinFunctionCall) {\n            return convertToStatementIfNeeded(mode, ast.converter(convertedArgs));\n        }\n        const receiver = ast.receiver;\n        if (receiver instanceof PropertyRead &&\n            receiver.receiver instanceof ImplicitReceiver &&\n            !(receiver.receiver instanceof ThisReceiver) && receiver.name === '$any') {\n            if (convertedArgs.length !== 1) {\n                throw new Error(`Invalid call to $any, expected 1 argument but received ${convertedArgs.length || 'none'}`);\n            }\n            return convertToStatementIfNeeded(mode, convertedArgs[0]\n                .cast(DYNAMIC_TYPE, this.convertSourceSpan(ast.span)));\n        }\n        const call = this._visit(receiver, _Mode.Expression)\n            .callFn(convertedArgs, this.convertSourceSpan(ast.span));\n        return convertToStatementIfNeeded(mode, call);\n    }\n    _visit(ast, mode) {\n        const result = this._resultMap.get(ast);\n        if (result)\n            return result;\n        return (this._nodeMap.get(ast) || ast).visit(this, mode);\n    }\n    convertSafeAccess(ast, leftMostSafe, mode) {\n        // If the expression contains a safe access node on the left it needs to be converted to\n        // an expression that guards the access to the member by checking the receiver for blank. As\n        // execution proceeds from left to right, the left most part of the expression must be guarded\n        // first but, because member access is left associative, the right side of the expression is at\n        // the top of the AST. The desired result requires lifting a copy of the left part of the\n        // expression up to test it for blank before generating the unguarded version.\n        // Consider, for example the following expression: a?.b.c?.d.e\n        // This results in the ast:\n        //         .\n        //        / \\\n        //       ?.   e\n        //      /  \\\n        //     .    d\n        //    / \\\n        //   ?.  c\n        //  /  \\\n        // a    b\n        // The following tree should be generated:\n        //\n        //        /---- ? ----\\\n        //       /      |      \\\n        //     a   /--- ? ---\\  null\n        //        /     |     \\\n        //       .      .     null\n        //      / \\    / \\\n        //     .  c   .   e\n        //    / \\    / \\\n        //   a   b  .   d\n        //         / \\\n        //        .   c\n        //       / \\\n        //      a   b\n        //\n        // Notice that the first guard condition is the left hand of the left most safe access node\n        // which comes in as leftMostSafe to this routine.\n        let guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);\n        let temporary = undefined;\n        if (this.needsTemporaryInSafeAccess(leftMostSafe.receiver)) {\n            // If the expression has method calls or pipes then we need to save the result into a\n            // temporary variable to avoid calling stateful or impure code more than once.\n            temporary = this.allocateTemporary();\n            // Preserve the result in the temporary variable\n            guardedExpression = temporary.set(guardedExpression);\n            // Ensure all further references to the guarded expression refer to the temporary instead.\n            this._resultMap.set(leftMostSafe.receiver, temporary);\n        }\n        const condition = guardedExpression.isBlank();\n        // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n        // leftMostNode with its unguarded version in the call to `this.visit()`.\n        if (leftMostSafe instanceof SafeKeyedRead) {\n            this._nodeMap.set(leftMostSafe, new KeyedRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.key));\n        }\n        else {\n            this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.nameSpan, leftMostSafe.receiver, leftMostSafe.name));\n        }\n        // Recursively convert the node now without the guarded member access.\n        const access = this._visit(ast, _Mode.Expression);\n        // Remove the mapping. This is not strictly required as the converter only traverses each node\n        // once but is safer if the conversion is changed to traverse the nodes more than once.\n        this._nodeMap.delete(leftMostSafe);\n        // If we allocated a temporary, release it.\n        if (temporary) {\n            this.releaseTemporary(temporary);\n        }\n        // Produce the conditional\n        return convertToStatementIfNeeded(mode, condition.conditional(NULL_EXPR, access));\n    }\n    convertNullishCoalesce(ast, mode) {\n        const left = this._visit(ast.left, _Mode.Expression);\n        const right = this._visit(ast.right, _Mode.Expression);\n        const temporary = this.allocateTemporary();\n        this.releaseTemporary(temporary);\n        // Generate the following expression. It is identical to how TS\n        // transpiles binary expressions with a nullish coalescing operator.\n        // let temp;\n        // (temp = a) !== null && temp !== undefined ? temp : b;\n        return convertToStatementIfNeeded(mode, temporary.set(left)\n            .notIdentical(NULL_EXPR)\n            .and(temporary.notIdentical(literal(undefined)))\n            .conditional(temporary, right));\n    }\n    // Given an expression of the form a?.b.c?.d.e then the left most safe node is\n    // the (a?.b). The . and ?. are left associative thus can be rewritten as:\n    // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or\n    // safe method call as this needs to be transformed initially to:\n    //   a == null ? null : a.c.b.c?.d.e\n    // then to:\n    //   a == null ? null : a.b.c == null ? null : a.b.c.d.e\n    leftMostSafeNode(ast) {\n        const visit = (visitor, ast) => {\n            return (this._nodeMap.get(ast) || ast).visit(visitor);\n        };\n        return ast.visit({\n            visitUnary(ast) {\n                return null;\n            },\n            visitBinary(ast) {\n                return null;\n            },\n            visitChain(ast) {\n                return null;\n            },\n            visitConditional(ast) {\n                return null;\n            },\n            visitCall(ast) {\n                return visit(this, ast.receiver);\n            },\n            visitImplicitReceiver(ast) {\n                return null;\n            },\n            visitThisReceiver(ast) {\n                return null;\n            },\n            visitInterpolation(ast) {\n                return null;\n            },\n            visitKeyedRead(ast) {\n                return visit(this, ast.receiver);\n            },\n            visitKeyedWrite(ast) {\n                return null;\n            },\n            visitLiteralArray(ast) {\n                return null;\n            },\n            visitLiteralMap(ast) {\n                return null;\n            },\n            visitLiteralPrimitive(ast) {\n                return null;\n            },\n            visitPipe(ast) {\n                return null;\n            },\n            visitPrefixNot(ast) {\n                return null;\n            },\n            visitNonNullAssert(ast) {\n                return null;\n            },\n            visitPropertyRead(ast) {\n                return visit(this, ast.receiver);\n            },\n            visitPropertyWrite(ast) {\n                return null;\n            },\n            visitQuote(ast) {\n                return null;\n            },\n            visitSafePropertyRead(ast) {\n                return visit(this, ast.receiver) || ast;\n            },\n            visitSafeKeyedRead(ast) {\n                return visit(this, ast.receiver) || ast;\n            }\n        });\n    }\n    // Returns true of the AST includes a method or a pipe indicating that, if the\n    // expression is used as the target of a safe property or method access then\n    // the expression should be stored into a temporary variable.\n    needsTemporaryInSafeAccess(ast) {\n        const visit = (visitor, ast) => {\n            return ast && (this._nodeMap.get(ast) || ast).visit(visitor);\n        };\n        const visitSome = (visitor, ast) => {\n            return ast.some(ast => visit(visitor, ast));\n        };\n        return ast.visit({\n            visitUnary(ast) {\n                return visit(this, ast.expr);\n            },\n            visitBinary(ast) {\n                return visit(this, ast.left) || visit(this, ast.right);\n            },\n            visitChain(ast) {\n                return false;\n            },\n            visitConditional(ast) {\n                return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);\n            },\n            visitCall(ast) {\n                return true;\n            },\n            visitImplicitReceiver(ast) {\n                return false;\n            },\n            visitThisReceiver(ast) {\n                return false;\n            },\n            visitInterpolation(ast) {\n                return visitSome(this, ast.expressions);\n            },\n            visitKeyedRead(ast) {\n                return false;\n            },\n            visitKeyedWrite(ast) {\n                return false;\n            },\n            visitLiteralArray(ast) {\n                return true;\n            },\n            visitLiteralMap(ast) {\n                return true;\n            },\n            visitLiteralPrimitive(ast) {\n                return false;\n            },\n            visitPipe(ast) {\n                return true;\n            },\n            visitPrefixNot(ast) {\n                return visit(this, ast.expression);\n            },\n            visitNonNullAssert(ast) {\n                return visit(this, ast.expression);\n            },\n            visitPropertyRead(ast) {\n                return false;\n            },\n            visitPropertyWrite(ast) {\n                return false;\n            },\n            visitQuote(ast) {\n                return false;\n            },\n            visitSafePropertyRead(ast) {\n                return false;\n            },\n            visitSafeKeyedRead(ast) {\n                return false;\n            }\n        });\n    }\n    allocateTemporary() {\n        const tempNumber = this._currentTemporary++;\n        this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n        return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));\n    }\n    releaseTemporary(temporary) {\n        this._currentTemporary--;\n        if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\n            throw new Error(`Temporary ${temporary.name} released out of order`);\n        }\n    }\n    /**\n     * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.\n     *\n     * `ParseSpan` objects are relative to the start of the expression.\n     * This method converts these to full `ParseSourceSpan` objects that\n     * show where the span is within the overall source file.\n     *\n     * @param span the relative span to convert.\n     * @returns a `ParseSourceSpan` for the given span or null if no\n     * `baseSourceSpan` was provided to this class.\n     */\n    convertSourceSpan(span) {\n        if (this.baseSourceSpan) {\n            const start = this.baseSourceSpan.start.moveBy(span.start);\n            const end = this.baseSourceSpan.start.moveBy(span.end);\n            const fullStart = this.baseSourceSpan.fullStart.moveBy(span.start);\n            return new ParseSourceSpan(start, end, fullStart);\n        }\n        else {\n            return null;\n        }\n    }\n    /** Adds the name of an AST to the list of implicit receiver accesses. */\n    addImplicitReceiverAccess(name) {\n        if (this.implicitReceiverAccesses) {\n            this.implicitReceiverAccesses.add(name);\n        }\n    }\n}\nfunction flattenStatements(arg, output) {\n    if (Array.isArray(arg)) {\n        arg.forEach((entry) => flattenStatements(entry, output));\n    }\n    else {\n        output.push(arg);\n    }\n}\nclass DefaultLocalResolver {\n    constructor(globals) {\n        this.globals = globals;\n    }\n    notifyImplicitReceiverUse() { }\n    maybeRestoreView() { }\n    getLocal(name) {\n        if (name === EventHandlerVars.event.name) {\n            return EventHandlerVars.event;\n        }\n        return null;\n    }\n}\nfunction createCurrValueExpr(bindingId) {\n    return variable(`currVal_${bindingId}`); // fix syntax highlighting: `\n}\nfunction createPreventDefaultVar(bindingId) {\n    return variable(`pd_${bindingId}`);\n}\nfunction convertStmtIntoExpression(stmt) {\n    if (stmt instanceof ExpressionStatement) {\n        return stmt.expr;\n    }\n    else if (stmt instanceof ReturnStatement) {\n        return stmt.value;\n    }\n    return null;\n}\nclass BuiltinFunctionCall extends Call {\n    constructor(span, sourceSpan, args, converter) {\n        super(span, sourceSpan, new EmptyExpr(span, sourceSpan), args, null);\n        this.converter = converter;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n *\n * Please make sure to keep to edits in sync with the source file.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n  this feature.\n\n  By default, rules are prefixed with the host element tag name\n  as a descendant selector. This ensures styling does not leak out of the 'top'\n  of the element's ShadowDOM. For example,\n\n  div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n  x-foo div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n  selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\nclass ShadowCss {\n    constructor() {\n        this.strictStyling = true;\n    }\n    /*\n     * Shim some cssText with the given selector. Returns cssText that can\n     * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).\n     *\n     * When strictStyling is true:\n     * - selector is the attribute added to all elements inside the host,\n     * - hostSelector is the attribute added to the host itself.\n     */\n    shimCssText(cssText, selector, hostSelector = '') {\n        const commentsWithHash = extractCommentsWithHash(cssText);\n        cssText = stripComments(cssText);\n        cssText = this._insertDirectives(cssText);\n        const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);\n        return [scopedCssText, ...commentsWithHash].join('\\n');\n    }\n    _insertDirectives(cssText) {\n        cssText = this._insertPolyfillDirectivesInCssText(cssText);\n        return this._insertPolyfillRulesInCssText(cssText);\n    }\n    /*\n     * Process styles to convert native ShadowDOM rules that will trip\n     * up the css parser; we rely on decorating the stylesheet with inert rules.\n     *\n     * For example, we convert this rule:\n     *\n     * polyfill-next-selector { content: ':host menu-item'; }\n     * ::content menu-item {\n     *\n     * to this:\n     *\n     * scopeName menu-item {\n     *\n     **/\n    _insertPolyfillDirectivesInCssText(cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        return cssText.replace(_cssContentNextSelectorRe, function (...m) {\n            return m[2] + '{';\n        });\n    }\n    /*\n     * Process styles to add rules which will only apply under the polyfill\n     *\n     * For example, we convert this rule:\n     *\n     * polyfill-rule {\n     *   content: ':host menu-item';\n     * ...\n     * }\n     *\n     * to this:\n     *\n     * scopeName menu-item {...}\n     *\n     **/\n    _insertPolyfillRulesInCssText(cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        return cssText.replace(_cssContentRuleRe, (...m) => {\n            const rule = m[0].replace(m[1], '').replace(m[2], '');\n            return m[4] + rule;\n        });\n    }\n    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:\n     *\n     *  .foo {... }\n     *\n     *  and converts this to\n     *\n     *  scopeName .foo { ... }\n     */\n    _scopeCssText(cssText, scopeSelector, hostSelector) {\n        const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n        cssText = this._insertPolyfillHostInCssText(cssText);\n        cssText = this._convertColonHost(cssText);\n        cssText = this._convertColonHostContext(cssText);\n        cssText = this._convertShadowDOMSelectors(cssText);\n        if (scopeSelector) {\n            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n        }\n        cssText = cssText + '\\n' + unscopedRules;\n        return cssText.trim();\n    }\n    /*\n     * Process styles to add rules which will only apply under the polyfill\n     * and do not process via CSSOM. (CSSOM is destructive to rules on rare\n     * occasions, e.g. -webkit-calc on Safari.)\n     * For example, we convert this rule:\n     *\n     * @polyfill-unscoped-rule {\n     *   content: 'menu-item';\n     * ... }\n     *\n     * to this:\n     *\n     * menu-item {...}\n     *\n     **/\n    _extractUnscopedRulesFromCssText(cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        let r = '';\n        let m;\n        _cssContentUnscopedRuleRe.lastIndex = 0;\n        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n            const rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n            r += rule + '\\n\\n';\n        }\n        return r;\n    }\n    /*\n     * convert a rule like :host(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar\n     */\n    _convertColonHost(cssText) {\n        return cssText.replace(_cssColonHostRe, (_, hostSelectors, otherSelectors) => {\n            if (hostSelectors) {\n                const convertedSelectors = [];\n                const hostSelectorArray = hostSelectors.split(',').map(p => p.trim());\n                for (const hostSelector of hostSelectorArray) {\n                    if (!hostSelector)\n                        break;\n                    const convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;\n                    convertedSelectors.push(convertedSelector);\n                }\n                return convertedSelectors.join(',');\n            }\n            else {\n                return _polyfillHostNoCombinator + otherSelectors;\n            }\n        });\n    }\n    /*\n     * convert a rule like :host-context(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }\n     *\n     * and\n     *\n     * :host-context(.foo:host) .bar { ... }\n     *\n     * to\n     *\n     * .foo<scopeName> .bar { ... }\n     */\n    _convertColonHostContext(cssText) {\n        return cssText.replace(_cssColonHostContextReGlobal, selectorText => {\n            var _a;\n            // We have captured a selector that contains a `:host-context` rule.\n            // For backward compatibility `:host-context` may contain a comma separated list of selectors.\n            // Each context selector group will contain a list of host-context selectors that must match\n            // an ancestor of the host.\n            // (Normally `contextSelectorGroups` will only contain a single array of context selectors.)\n            const contextSelectorGroups = [[]];\n            // There may be more than `:host-context` in this selector so `selectorText` could look like:\n            // `:host-context(.one):host-context(.two)`.\n            // Execute `_cssColonHostContextRe` over and over until we have extracted all the\n            // `:host-context` selectors from this selector.\n            let match;\n            while (match = _cssColonHostContextRe.exec(selectorText)) {\n                // `match` = [':host-context(<selectors>)<rest>', <selectors>, <rest>]\n                // The `<selectors>` could actually be a comma separated list: `:host-context(.one, .two)`.\n                const newContextSelectors = ((_a = match[1]) !== null && _a !== void 0 ? _a : '').trim().split(',').map(m => m.trim()).filter(m => m !== '');\n                // We must duplicate the current selector group for each of these new selectors.\n                // For example if the current groups are:\n                // ```\n                // [\n                //   ['a', 'b', 'c'],\n                //   ['x', 'y', 'z'],\n                // ]\n                // ```\n                // And we have a new set of comma separated selectors: `:host-context(m,n)` then the new\n                // groups are:\n                // ```\n                // [\n                //   ['a', 'b', 'c', 'm'],\n                //   ['x', 'y', 'z', 'm'],\n                //   ['a', 'b', 'c', 'n'],\n                //   ['x', 'y', 'z', 'n'],\n                // ]\n                // ```\n                const contextSelectorGroupsLength = contextSelectorGroups.length;\n                repeatGroups(contextSelectorGroups, newContextSelectors.length);\n                for (let i = 0; i < newContextSelectors.length; i++) {\n                    for (let j = 0; j < contextSelectorGroupsLength; j++) {\n                        contextSelectorGroups[j + (i * contextSelectorGroupsLength)].push(newContextSelectors[i]);\n                    }\n                }\n                // Update the `selectorText` and see repeat to see if there are more `:host-context`s.\n                selectorText = match[2];\n            }\n            // The context selectors now must be combined with each other to capture all the possible\n            // selectors that `:host-context` can match. See `combineHostContextSelectors()` for more\n            // info about how this is done.\n            return contextSelectorGroups\n                .map(contextSelectors => combineHostContextSelectors(contextSelectors, selectorText))\n                .join(', ');\n        });\n    }\n    /*\n     * Convert combinators like ::shadow and pseudo-elements like ::content\n     * by replacing with space.\n     */\n    _convertShadowDOMSelectors(cssText) {\n        return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n    }\n    // change a selector like 'div' to 'name div'\n    _scopeSelectors(cssText, scopeSelector, hostSelector) {\n        return processRules(cssText, (rule) => {\n            let selector = rule.selector;\n            let content = rule.content;\n            if (rule.selector[0] !== '@') {\n                selector =\n                    this._scopeSelector(rule.selector, scopeSelector, hostSelector, this.strictStyling);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@document')) {\n                content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n            }\n            else if (rule.selector.startsWith('@font-face') || rule.selector.startsWith('@page')) {\n                content = this._stripScopingSelectors(rule.content);\n            }\n            return new CssRule(selector, content);\n        });\n    }\n    /**\n     * Handle a css text that is within a rule that should not contain scope selectors by simply\n     * removing them! An example of such a rule is `@font-face`.\n     *\n     * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.\n     * Normally this would be a syntax error by the author of the styles. But in some rare cases, such\n     * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we\n     * can end up with broken css if the imported styles happen to contain @font-face rules.\n     *\n     * For example:\n     *\n     * ```\n     * :host ::ng-deep {\n     *   import 'some/lib/containing/font-face';\n     * }\n     *\n     * Similar logic applies to `@page` rules which can contain a particular set of properties,\n     * as well as some specific at-rules. Since they can't be encapsulated, we have to strip\n     * any scoping selectors from them. For more information: https://www.w3.org/TR/css-page-3\n     * ```\n     */\n    _stripScopingSelectors(cssText) {\n        return processRules(cssText, rule => {\n            const selector = rule.selector.replace(_shadowDeepSelectors, ' ')\n                .replace(_polyfillHostNoCombinatorRe, ' ');\n            return new CssRule(selector, rule.content);\n        });\n    }\n    _scopeSelector(selector, scopeSelector, hostSelector, strict) {\n        return selector.split(',')\n            .map(part => part.trim().split(_shadowDeepSelectors))\n            .map((deepParts) => {\n            const [shallowPart, ...otherParts] = deepParts;\n            const applyScope = (shallowPart) => {\n                if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                    return strict ?\n                        this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :\n                        this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n                }\n                else {\n                    return shallowPart;\n                }\n            };\n            return [applyScope(shallowPart), ...otherParts].join(' ');\n        })\n            .join(', ');\n    }\n    _selectorNeedsScoping(selector, scopeSelector) {\n        const re = this._makeScopeMatcher(scopeSelector);\n        return !re.test(selector);\n    }\n    _makeScopeMatcher(scopeSelector) {\n        const lre = /\\[/g;\n        const rre = /\\]/g;\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    }\n    _applySelectorScope(selector, scopeSelector, hostSelector) {\n        // Difference from webcomponents.js: scopeSelector could not be an array\n        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n    }\n    // scope via name and [is=name]\n    _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n        _polyfillHostRe.lastIndex = 0;\n        if (_polyfillHostRe.test(selector)) {\n            const replaceBy = this.strictStyling ? `[${hostSelector}]` : scopeSelector;\n            return selector\n                .replace(_polyfillHostNoCombinatorRe, (hnc, selector) => {\n                return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                    return before + replaceBy + colon + after;\n                });\n            })\n                .replace(_polyfillHostRe, replaceBy + ' ');\n        }\n        return scopeSelector + ' ' + selector;\n    }\n    // return a selector with [name] suffix on each simple selector\n    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */\n    _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n        const isRe = /\\[is=([^\\]]*)\\]/g;\n        scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n        const attrName = '[' + scopeSelector + ']';\n        const _scopeSelectorPart = (p) => {\n            let scopedP = p.trim();\n            if (!scopedP) {\n                return '';\n            }\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n            }\n            else {\n                // remove :host since it should be unnecessary\n                const t = p.replace(_polyfillHostRe, '');\n                if (t.length > 0) {\n                    const matches = t.match(/([^:]*)(:*)(.*)/);\n                    if (matches) {\n                        scopedP = matches[1] + attrName + matches[2] + matches[3];\n                    }\n                }\n            }\n            return scopedP;\n        };\n        const safeContent = new SafeSelector(selector);\n        selector = safeContent.content();\n        let scopedSelector = '';\n        let startIndex = 0;\n        let res;\n        const sep = /( |>|\\+|~(?!=))\\s*/g;\n        // If a selector appears before :host it should not be shimmed as it\n        // matches on ancestor elements and not on elements in the host's shadow\n        // `:host-context(div)` is transformed to\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n        // Historically `component-tag:host` was matching the component so we also want to preserve\n        // this behavior to avoid breaking legacy apps (it should not match).\n        // The behavior should be:\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n        //   `:host-context(tag)`)\n        const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n        let shouldScope = !hasHost;\n        while ((res = sep.exec(selector)) !== null) {\n            const separator = res[1];\n            const part = selector.slice(startIndex, res.index).trim();\n            shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n            const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n            scopedSelector += `${scopedPart} ${separator} `;\n            startIndex = sep.lastIndex;\n        }\n        const part = selector.substring(startIndex);\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n        // replace the placeholders with their original values\n        return safeContent.restore(scopedSelector);\n    }\n    _insertPolyfillHostInCssText(selector) {\n        return selector.replace(_colonHostContextRe, _polyfillHostContext)\n            .replace(_colonHostRe, _polyfillHost);\n    }\n}\nclass SafeSelector {\n    constructor(selector) {\n        this.placeholders = [];\n        this.index = 0;\n        // Replaces attribute selectors with placeholders.\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n        selector = this._escapeRegexMatches(selector, /(\\[[^\\]]*\\])/g);\n        // CSS allows for certain special characters to be used in selectors if they're escaped.\n        // E.g. `.foo:blue` won't match a class called `foo:blue`, because the colon denotes a\n        // pseudo-class, but writing `.foo\\:blue` will match, because the colon was escaped.\n        // Replace all escape sequences (`\\` followed by a character) with a placeholder so\n        // that our handling of pseudo-selectors doesn't mess with them.\n        selector = this._escapeRegexMatches(selector, /(\\\\.)/g);\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n        // WS and \"+\" would otherwise be interpreted as selector separators.\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n            const replaceBy = `__ph-${this.index}__`;\n            this.placeholders.push(exp);\n            this.index++;\n            return pseudo + replaceBy;\n        });\n    }\n    restore(content) {\n        return content.replace(/__ph-(\\d+)__/g, (_ph, index) => this.placeholders[+index]);\n    }\n    content() {\n        return this._content;\n    }\n    /**\n     * Replaces all of the substrings that match a regex within a\n     * special string (e.g. `__ph-0__`, `__ph-1__`, etc).\n     */\n    _escapeRegexMatches(content, pattern) {\n        return content.replace(pattern, (_, keep) => {\n            const replaceBy = `__ph-${this.index}__`;\n            this.placeholders.push(keep);\n            this.index++;\n            return replaceBy;\n        });\n    }\n}\nconst _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\nconst _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _polyfillHost = '-shadowcsshost';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = '(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, 'im');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g,\n    // Deprecated selectors\n    /\\/shadow-deep\\//g,\n    /\\/shadow\\//g,\n];\n// The deep combinator is deprecated in the CSS spec\n// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\n// see https://github.com/angular/angular/pull/17677\nconst _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*[\\s\\S]*?\\*\\//g;\nfunction stripComments(input) {\n    return input.replace(_commentRe, '');\n}\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nfunction extractCommentsWithHash(input) {\n    return input.match(_commentWithHashRe) || [];\n}\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst QUOTE_PLACEHOLDER = '%QUOTED%';\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _quotedRe = /%QUOTED%/g;\nconst CONTENT_PAIRS = new Map([['{', '}']]);\nconst QUOTE_PAIRS = new Map([[`\"`, `\"`], [`'`, `'`]]);\nclass CssRule {\n    constructor(selector, content) {\n        this.selector = selector;\n        this.content = content;\n    }\n}\nfunction processRules(input, ruleCallback) {\n    const inputWithEscapedQuotes = escapeBlocks(input, QUOTE_PAIRS, QUOTE_PLACEHOLDER);\n    const inputWithEscapedBlocks = escapeBlocks(inputWithEscapedQuotes.escapedString, CONTENT_PAIRS, BLOCK_PLACEHOLDER);\n    let nextBlockIndex = 0;\n    let nextQuoteIndex = 0;\n    return inputWithEscapedBlocks.escapedString\n        .replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const rule = ruleCallback(new CssRule(selector, content));\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    })\n        .replace(_quotedRe, () => inputWithEscapedQuotes.blocks[nextQuoteIndex++]);\n}\nclass StringWithEscapedBlocks {\n    constructor(escapedString, blocks) {\n        this.escapedString = escapedString;\n        this.blocks = blocks;\n    }\n}\nfunction escapeBlocks(input, charPairs, placeholder) {\n    const resultParts = [];\n    const escapedBlocks = [];\n    let openCharCount = 0;\n    let nonBlockStartIndex = 0;\n    let blockStartIndex = -1;\n    let openChar;\n    let closeChar;\n    for (let i = 0; i < input.length; i++) {\n        const char = input[i];\n        if (char === '\\\\') {\n            i++;\n        }\n        else if (char === closeChar) {\n            openCharCount--;\n            if (openCharCount === 0) {\n                escapedBlocks.push(input.substring(blockStartIndex, i));\n                resultParts.push(placeholder);\n                nonBlockStartIndex = i;\n                blockStartIndex = -1;\n                openChar = closeChar = undefined;\n            }\n        }\n        else if (char === openChar) {\n            openCharCount++;\n        }\n        else if (openCharCount === 0 && charPairs.has(char)) {\n            openChar = char;\n            closeChar = charPairs.get(char);\n            openCharCount = 1;\n            blockStartIndex = i + 1;\n            resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));\n        }\n    }\n    if (blockStartIndex !== -1) {\n        escapedBlocks.push(input.substring(blockStartIndex));\n        resultParts.push(placeholder);\n    }\n    else {\n        resultParts.push(input.substring(nonBlockStartIndex));\n    }\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n/**\n * Combine the `contextSelectors` with the `hostMarker` and the `otherSelectors`\n * to create a selector that matches the same as `:host-context()`.\n *\n * Given a single context selector `A` we need to output selectors that match on the host and as an\n * ancestor of the host:\n *\n * ```\n * A <hostMarker>, A<hostMarker> {}\n * ```\n *\n * When there is more than one context selector we also have to create combinations of those\n * selectors with each other. For example if there are `A` and `B` selectors the output is:\n *\n * ```\n * AB<hostMarker>, AB <hostMarker>, A B<hostMarker>,\n * B A<hostMarker>, A B <hostMarker>, B A <hostMarker> {}\n * ```\n *\n * And so on...\n *\n * @param hostMarker the string that selects the host element.\n * @param contextSelectors an array of context selectors that will be combined.\n * @param otherSelectors the rest of the selectors that are not context selectors.\n */\nfunction combineHostContextSelectors(contextSelectors, otherSelectors) {\n    const hostMarker = _polyfillHostNoCombinator;\n    _polyfillHostRe.lastIndex = 0; // reset the regex to ensure we get an accurate test\n    const otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors);\n    // If there are no context selectors then just output a host marker\n    if (contextSelectors.length === 0) {\n        return hostMarker + otherSelectors;\n    }\n    const combined = [contextSelectors.pop() || ''];\n    while (contextSelectors.length > 0) {\n        const length = combined.length;\n        const contextSelector = contextSelectors.pop();\n        for (let i = 0; i < length; i++) {\n            const previousSelectors = combined[i];\n            // Add the new selector as a descendant of the previous selectors\n            combined[length * 2 + i] = previousSelectors + ' ' + contextSelector;\n            // Add the new selector as an ancestor of the previous selectors\n            combined[length + i] = contextSelector + ' ' + previousSelectors;\n            // Add the new selector to act on the same element as the previous selectors\n            combined[i] = contextSelector + previousSelectors;\n        }\n    }\n    // Finally connect the selector to the `hostMarker`s: either acting directly on the host\n    // (A<hostMarker>) or as an ancestor (A <hostMarker>).\n    return combined\n        .map(s => otherSelectorsHasHost ?\n        `${s}${otherSelectors}` :\n        `${s}${hostMarker}${otherSelectors}, ${s} ${hostMarker}${otherSelectors}`)\n        .join(',');\n}\n/**\n * Mutate the given `groups` array so that there are `multiples` clones of the original array\n * stored.\n *\n * For example `repeatGroups([a, b], 3)` will result in `[a, b, a, b, a, b]` - but importantly the\n * newly added groups will be clones of the original.\n *\n * @param groups An array of groups of strings that will be repeated. This array is mutated\n *     in-place.\n * @param multiples The number of times the current groups should appear.\n */\nfunction repeatGroups(groups, multiples) {\n    const length = groups.length;\n    for (let i = 1; i < multiples; i++) {\n        for (let j = 0; j < length; j++) {\n            groups[j + (i * length)] = groups[j].slice(0);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses string representation of a style and converts it into object literal.\n *\n * @param value string representation of style as used in the `style` attribute in HTML.\n *   Example: `color: red; height: auto`.\n * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',\n * 'auto']`\n */\nfunction parse(value) {\n    // we use a string array here instead of a string map\n    // because a string-map is not guaranteed to retain the\n    // order of the entries whereas a string array can be\n    // constructed in a [key, value, key, value] format.\n    const styles = [];\n    let i = 0;\n    let parenDepth = 0;\n    let quote = 0 /* QuoteNone */;\n    let valueStart = 0;\n    let propStart = 0;\n    let currentProp = null;\n    let valueHasQuotes = false;\n    while (i < value.length) {\n        const token = value.charCodeAt(i++);\n        switch (token) {\n            case 40 /* OpenParen */:\n                parenDepth++;\n                break;\n            case 41 /* CloseParen */:\n                parenDepth--;\n                break;\n            case 39 /* QuoteSingle */:\n                // valueStart needs to be there since prop values don't\n                // have quotes in CSS\n                valueHasQuotes = valueHasQuotes || valueStart > 0;\n                if (quote === 0 /* QuoteNone */) {\n                    quote = 39 /* QuoteSingle */;\n                }\n                else if (quote === 39 /* QuoteSingle */ && value.charCodeAt(i - 1) !== 92 /* BackSlash */) {\n                    quote = 0 /* QuoteNone */;\n                }\n                break;\n            case 34 /* QuoteDouble */:\n                // same logic as above\n                valueHasQuotes = valueHasQuotes || valueStart > 0;\n                if (quote === 0 /* QuoteNone */) {\n                    quote = 34 /* QuoteDouble */;\n                }\n                else if (quote === 34 /* QuoteDouble */ && value.charCodeAt(i - 1) !== 92 /* BackSlash */) {\n                    quote = 0 /* QuoteNone */;\n                }\n                break;\n            case 58 /* Colon */:\n                if (!currentProp && parenDepth === 0 && quote === 0 /* QuoteNone */) {\n                    currentProp = hyphenate(value.substring(propStart, i - 1).trim());\n                    valueStart = i;\n                }\n                break;\n            case 59 /* Semicolon */:\n                if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0 /* QuoteNone */) {\n                    const styleVal = value.substring(valueStart, i - 1).trim();\n                    styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal);\n                    propStart = i;\n                    valueStart = 0;\n                    currentProp = null;\n                    valueHasQuotes = false;\n                }\n                break;\n        }\n    }\n    if (currentProp && valueStart) {\n        const styleVal = value.substr(valueStart).trim();\n        styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal);\n    }\n    return styles;\n}\nfunction stripUnnecessaryQuotes(value) {\n    const qS = value.charCodeAt(0);\n    const qE = value.charCodeAt(value.length - 1);\n    if (qS == qE && (qS == 39 /* QuoteSingle */ || qS == 34 /* QuoteDouble */)) {\n        const tempValue = value.substring(1, value.length - 1);\n        // special case to avoid using a multi-quoted string that was just chomped\n        // (e.g. `font-family: \"Verdana\", \"sans-serif\"`)\n        if (tempValue.indexOf('\\'') == -1 && tempValue.indexOf('\"') == -1) {\n            value = tempValue;\n        }\n    }\n    return value;\n}\nfunction hyphenate(value) {\n    return value\n        .replace(/[a-z][A-Z]/g, v => {\n        return v.charAt(0) + '-' + v.charAt(1);\n    })\n        .toLowerCase();\n}\n\nconst IMPORTANT_FLAG = '!important';\n/**\n * Minimum amount of binding slots required in the runtime for style/class bindings.\n *\n * Styling in Angular uses up two slots in the runtime LView/TData data structures to\n * record binding data, property information and metadata.\n *\n * When a binding is registered it will place the following information in the `LView`:\n *\n * slot 1) binding value\n * slot 2) cached value (all other values collected before it in string form)\n *\n * When a binding is registered it will place the following information in the `TData`:\n *\n * slot 1) prop name\n * slot 2) binding index that points to the previous style/class binding (and some extra config\n * values)\n *\n * Let's imagine we have a binding that looks like so:\n *\n * ```\n * <div [style.width]=\"x\" [style.height]=\"y\">\n * ```\n *\n * Our `LView` and `TData` data-structures look like so:\n *\n * ```typescript\n * LView = [\n *   // ...\n *   x, // value of x\n *   \"width: x\",\n *\n *   y, // value of y\n *   \"width: x; height: y\",\n *   // ...\n * ];\n *\n * TData = [\n *   // ...\n *   \"width\", // binding slot 20\n *   0,\n *\n *   \"height\",\n *   20,\n *   // ...\n * ];\n * ```\n *\n * */\nconst MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;\n/**\n * Produces creation/update instructions for all styling bindings (class and style)\n *\n * It also produces the creation instruction to register all initial styling values\n * (which are all the static class=\"...\" and style=\"...\" attribute values that exist\n * on an element within a template).\n *\n * The builder class below handles producing instructions for the following cases:\n *\n * - Static style/class attributes (style=\"...\" and class=\"...\")\n * - Dynamic style/class map bindings ([style]=\"map\" and [class]=\"map|string\")\n * - Dynamic style/class property bindings ([style.prop]=\"exp\" and [class.name]=\"exp\")\n *\n * Due to the complex relationship of all of these cases, the instructions generated\n * for these attributes/properties/bindings must be done so in the correct order. The\n * order which these must be generated is as follows:\n *\n * if (createMode) {\n *   styling(...)\n * }\n * if (updateMode) {\n *   styleMap(...)\n *   classMap(...)\n *   styleProp(...)\n *   classProp(...)\n * }\n *\n * The creation/update methods within the builder class produce these instructions.\n */\nclass StylingBuilder {\n    constructor(_directiveExpr) {\n        this._directiveExpr = _directiveExpr;\n        /** Whether or not there are any static styling values present */\n        this._hasInitialValues = false;\n        /**\n         *  Whether or not there are any styling bindings present\n         *  (i.e. `[style]`, `[class]`, `[style.prop]` or `[class.name]`)\n         */\n        this.hasBindings = false;\n        this.hasBindingsWithPipes = false;\n        /** the input for [class] (if it exists) */\n        this._classMapInput = null;\n        /** the input for [style] (if it exists) */\n        this._styleMapInput = null;\n        /** an array of each [style.prop] input */\n        this._singleStyleInputs = null;\n        /** an array of each [class.name] input */\n        this._singleClassInputs = null;\n        this._lastStylingInput = null;\n        this._firstStylingInput = null;\n        // maps are used instead of hash maps because a Map will\n        // retain the ordering of the keys\n        /**\n         * Represents the location of each style binding in the template\n         * (e.g. `<div [style.width]=\"w\" [style.height]=\"h\">` implies\n         * that `width=0` and `height=1`)\n         */\n        this._stylesIndex = new Map();\n        /**\n         * Represents the location of each class binding in the template\n         * (e.g. `<div [class.big]=\"b\" [class.hidden]=\"h\">` implies\n         * that `big=0` and `hidden=1`)\n         */\n        this._classesIndex = new Map();\n        this._initialStyleValues = [];\n        this._initialClassValues = [];\n    }\n    /**\n     * Registers a given input to the styling builder to be later used when producing AOT code.\n     *\n     * The code below will only accept the input if it is somehow tied to styling (whether it be\n     * style/class bindings or static style/class attributes).\n     */\n    registerBoundInput(input) {\n        // [attr.style] or [attr.class] are skipped in the code below,\n        // they should not be treated as styling-based bindings since\n        // they are intended to be written directly to the attr and\n        // will therefore skip all style/class resolution that is present\n        // with style=\"\", [style]=\"\" and [style.prop]=\"\", class=\"\",\n        // [class.prop]=\"\". [class]=\"\" assignments\n        let binding = null;\n        let name = input.name;\n        switch (input.type) {\n            case 0 /* Property */:\n                binding = this.registerInputBasedOnName(name, input.value, input.sourceSpan);\n                break;\n            case 3 /* Style */:\n                binding = this.registerStyleInput(name, false, input.value, input.sourceSpan, input.unit);\n                break;\n            case 2 /* Class */:\n                binding = this.registerClassInput(name, false, input.value, input.sourceSpan);\n                break;\n        }\n        return binding ? true : false;\n    }\n    registerInputBasedOnName(name, expression, sourceSpan) {\n        let binding = null;\n        const prefix = name.substring(0, 6);\n        const isStyle = name === 'style' || prefix === 'style.' || prefix === 'style!';\n        const isClass = !isStyle && (name === 'class' || prefix === 'class.' || prefix === 'class!');\n        if (isStyle || isClass) {\n            const isMapBased = name.charAt(5) !== '.'; // style.prop or class.prop makes this a no\n            const property = name.substr(isMapBased ? 5 : 6); // the dot explains why there's a +1\n            if (isStyle) {\n                binding = this.registerStyleInput(property, isMapBased, expression, sourceSpan);\n            }\n            else {\n                binding = this.registerClassInput(property, isMapBased, expression, sourceSpan);\n            }\n        }\n        return binding;\n    }\n    registerStyleInput(name, isMapBased, value, sourceSpan, suffix) {\n        if (isEmptyExpression(value)) {\n            return null;\n        }\n        // CSS custom properties are case-sensitive so we shouldn't normalize them.\n        // See: https://www.w3.org/TR/css-variables-1/#defining-variables\n        if (!isCssCustomProperty(name)) {\n            name = hyphenate(name);\n        }\n        const { property, hasOverrideFlag, suffix: bindingSuffix } = parseProperty(name);\n        suffix = typeof suffix === 'string' && suffix.length !== 0 ? suffix : bindingSuffix;\n        const entry = { name: property, suffix: suffix, value, sourceSpan, hasOverrideFlag };\n        if (isMapBased) {\n            this._styleMapInput = entry;\n        }\n        else {\n            (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);\n            registerIntoMap(this._stylesIndex, property);\n        }\n        this._lastStylingInput = entry;\n        this._firstStylingInput = this._firstStylingInput || entry;\n        this._checkForPipes(value);\n        this.hasBindings = true;\n        return entry;\n    }\n    registerClassInput(name, isMapBased, value, sourceSpan) {\n        if (isEmptyExpression(value)) {\n            return null;\n        }\n        const { property, hasOverrideFlag } = parseProperty(name);\n        const entry = { name: property, value, sourceSpan, hasOverrideFlag, suffix: null };\n        if (isMapBased) {\n            this._classMapInput = entry;\n        }\n        else {\n            (this._singleClassInputs = this._singleClassInputs || []).push(entry);\n            registerIntoMap(this._classesIndex, property);\n        }\n        this._lastStylingInput = entry;\n        this._firstStylingInput = this._firstStylingInput || entry;\n        this._checkForPipes(value);\n        this.hasBindings = true;\n        return entry;\n    }\n    _checkForPipes(value) {\n        if ((value instanceof ASTWithSource) && (value.ast instanceof BindingPipe)) {\n            this.hasBindingsWithPipes = true;\n        }\n    }\n    /**\n     * Registers the element's static style string value to the builder.\n     *\n     * @param value the style string (e.g. `width:100px; height:200px;`)\n     */\n    registerStyleAttr(value) {\n        this._initialStyleValues = parse(value);\n        this._hasInitialValues = true;\n    }\n    /**\n     * Registers the element's static class string value to the builder.\n     *\n     * @param value the className string (e.g. `disabled gold zoom`)\n     */\n    registerClassAttr(value) {\n        this._initialClassValues = value.trim().split(/\\s+/g);\n        this._hasInitialValues = true;\n    }\n    /**\n     * Appends all styling-related expressions to the provided attrs array.\n     *\n     * @param attrs an existing array where each of the styling expressions\n     * will be inserted into.\n     */\n    populateInitialStylingAttrs(attrs) {\n        // [CLASS_MARKER, 'foo', 'bar', 'baz' ...]\n        if (this._initialClassValues.length) {\n            attrs.push(literal(1 /* Classes */));\n            for (let i = 0; i < this._initialClassValues.length; i++) {\n                attrs.push(literal(this._initialClassValues[i]));\n            }\n        }\n        // [STYLE_MARKER, 'width', '200px', 'height', '100px', ...]\n        if (this._initialStyleValues.length) {\n            attrs.push(literal(2 /* Styles */));\n            for (let i = 0; i < this._initialStyleValues.length; i += 2) {\n                attrs.push(literal(this._initialStyleValues[i]), literal(this._initialStyleValues[i + 1]));\n            }\n        }\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `elementHostAttrs`.\n     *\n     * The instruction generation code below is used for producing the AOT statement code which is\n     * responsible for registering initial styles (within a directive hostBindings' creation block),\n     * as well as any of the provided attribute values, to the directive host element.\n     */\n    assignHostAttrs(attrs, definitionMap) {\n        if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {\n            this.populateInitialStylingAttrs(attrs);\n            definitionMap.set('hostAttrs', literalArr(attrs));\n        }\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `classMap`.\n     *\n     * The instruction data will contain all expressions for `classMap` to function\n     * which includes the `[class]` expression params.\n     */\n    buildClassMapInstruction(valueConverter) {\n        if (this._classMapInput) {\n            return this._buildMapBasedInstruction(valueConverter, true, this._classMapInput);\n        }\n        return null;\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `styleMap`.\n     *\n     * The instruction data will contain all expressions for `styleMap` to function\n     * which includes the `[style]` expression params.\n     */\n    buildStyleMapInstruction(valueConverter) {\n        if (this._styleMapInput) {\n            return this._buildMapBasedInstruction(valueConverter, false, this._styleMapInput);\n        }\n        return null;\n    }\n    _buildMapBasedInstruction(valueConverter, isClassBased, stylingInput) {\n        // each styling binding value is stored in the LView\n        // map-based bindings allocate two slots: one for the\n        // previous binding value and another for the previous\n        // className or style attribute value.\n        let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;\n        // these values must be outside of the update block so that they can\n        // be evaluated (the AST visit call) during creation time so that any\n        // pipes can be picked up in time before the template is built\n        const mapValue = stylingInput.value.visit(valueConverter);\n        let reference;\n        if (mapValue instanceof Interpolation) {\n            totalBindingSlotsRequired += mapValue.expressions.length;\n            reference = isClassBased ? getClassMapInterpolationExpression(mapValue) :\n                getStyleMapInterpolationExpression(mapValue);\n        }\n        else {\n            reference = isClassBased ? Identifiers$1.classMap : Identifiers$1.styleMap;\n        }\n        return {\n            reference,\n            calls: [{\n                    supportsInterpolation: true,\n                    sourceSpan: stylingInput.sourceSpan,\n                    allocateBindingSlots: totalBindingSlotsRequired,\n                    params: (convertFn) => {\n                        const convertResult = convertFn(mapValue);\n                        const params = Array.isArray(convertResult) ? convertResult : [convertResult];\n                        return params;\n                    }\n                }]\n        };\n    }\n    _buildSingleInputs(reference, inputs, valueConverter, getInterpolationExpressionFn, isClassBased) {\n        const instructions = [];\n        inputs.forEach(input => {\n            const previousInstruction = instructions[instructions.length - 1];\n            const value = input.value.visit(valueConverter);\n            let referenceForCall = reference;\n            // each styling binding value is stored in the LView\n            // but there are two values stored for each binding:\n            //   1) the value itself\n            //   2) an intermediate value (concatenation of style up to this point).\n            //      We need to store the intermediate value so that we don't allocate\n            //      the strings on each CD.\n            let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;\n            if (value instanceof Interpolation) {\n                totalBindingSlotsRequired += value.expressions.length;\n                if (getInterpolationExpressionFn) {\n                    referenceForCall = getInterpolationExpressionFn(value);\n                }\n            }\n            const call = {\n                sourceSpan: input.sourceSpan,\n                allocateBindingSlots: totalBindingSlotsRequired,\n                supportsInterpolation: !!getInterpolationExpressionFn,\n                params: (convertFn) => {\n                    // params => stylingProp(propName, value, suffix)\n                    const params = [];\n                    params.push(literal(input.name));\n                    const convertResult = convertFn(value);\n                    if (Array.isArray(convertResult)) {\n                        params.push(...convertResult);\n                    }\n                    else {\n                        params.push(convertResult);\n                    }\n                    // [style.prop] bindings may use suffix values (e.g. px, em, etc...), therefore,\n                    // if that is detected then we need to pass that in as an optional param.\n                    if (!isClassBased && input.suffix !== null) {\n                        params.push(literal(input.suffix));\n                    }\n                    return params;\n                }\n            };\n            // If we ended up generating a call to the same instruction as the previous styling property\n            // we can chain the calls together safely to save some bytes, otherwise we have to generate\n            // a separate instruction call. This is primarily a concern with interpolation instructions\n            // where we may start off with one `reference`, but end up using another based on the\n            // number of interpolations.\n            if (previousInstruction && previousInstruction.reference === referenceForCall) {\n                previousInstruction.calls.push(call);\n            }\n            else {\n                instructions.push({ reference: referenceForCall, calls: [call] });\n            }\n        });\n        return instructions;\n    }\n    _buildClassInputs(valueConverter) {\n        if (this._singleClassInputs) {\n            return this._buildSingleInputs(Identifiers$1.classProp, this._singleClassInputs, valueConverter, null, true);\n        }\n        return [];\n    }\n    _buildStyleInputs(valueConverter) {\n        if (this._singleStyleInputs) {\n            return this._buildSingleInputs(Identifiers$1.styleProp, this._singleStyleInputs, valueConverter, getStylePropInterpolationExpression, false);\n        }\n        return [];\n    }\n    /**\n     * Constructs all instructions which contain the expressions that will be placed\n     * into the update block of a template function or a directive hostBindings function.\n     */\n    buildUpdateLevelInstructions(valueConverter) {\n        const instructions = [];\n        if (this.hasBindings) {\n            const styleMapInstruction = this.buildStyleMapInstruction(valueConverter);\n            if (styleMapInstruction) {\n                instructions.push(styleMapInstruction);\n            }\n            const classMapInstruction = this.buildClassMapInstruction(valueConverter);\n            if (classMapInstruction) {\n                instructions.push(classMapInstruction);\n            }\n            instructions.push(...this._buildStyleInputs(valueConverter));\n            instructions.push(...this._buildClassInputs(valueConverter));\n        }\n        return instructions;\n    }\n}\nfunction registerIntoMap(map, key) {\n    if (!map.has(key)) {\n        map.set(key, map.size);\n    }\n}\nfunction parseProperty(name) {\n    let hasOverrideFlag = false;\n    const overrideIndex = name.indexOf(IMPORTANT_FLAG);\n    if (overrideIndex !== -1) {\n        name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';\n        hasOverrideFlag = true;\n    }\n    let suffix = null;\n    let property = name;\n    const unitIndex = name.lastIndexOf('.');\n    if (unitIndex > 0) {\n        suffix = name.substr(unitIndex + 1);\n        property = name.substring(0, unitIndex);\n    }\n    return { property, suffix, hasOverrideFlag };\n}\n/**\n * Gets the instruction to generate for an interpolated class map.\n * @param interpolation An Interpolation AST\n */\nfunction getClassMapInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers$1.classMap;\n        case 3:\n            return Identifiers$1.classMapInterpolate1;\n        case 5:\n            return Identifiers$1.classMapInterpolate2;\n        case 7:\n            return Identifiers$1.classMapInterpolate3;\n        case 9:\n            return Identifiers$1.classMapInterpolate4;\n        case 11:\n            return Identifiers$1.classMapInterpolate5;\n        case 13:\n            return Identifiers$1.classMapInterpolate6;\n        case 15:\n            return Identifiers$1.classMapInterpolate7;\n        case 17:\n            return Identifiers$1.classMapInterpolate8;\n        default:\n            return Identifiers$1.classMapInterpolateV;\n    }\n}\n/**\n * Gets the instruction to generate for an interpolated style map.\n * @param interpolation An Interpolation AST\n */\nfunction getStyleMapInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers$1.styleMap;\n        case 3:\n            return Identifiers$1.styleMapInterpolate1;\n        case 5:\n            return Identifiers$1.styleMapInterpolate2;\n        case 7:\n            return Identifiers$1.styleMapInterpolate3;\n        case 9:\n            return Identifiers$1.styleMapInterpolate4;\n        case 11:\n            return Identifiers$1.styleMapInterpolate5;\n        case 13:\n            return Identifiers$1.styleMapInterpolate6;\n        case 15:\n            return Identifiers$1.styleMapInterpolate7;\n        case 17:\n            return Identifiers$1.styleMapInterpolate8;\n        default:\n            return Identifiers$1.styleMapInterpolateV;\n    }\n}\n/**\n * Gets the instruction to generate for an interpolated style prop.\n * @param interpolation An Interpolation AST\n */\nfunction getStylePropInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers$1.styleProp;\n        case 3:\n            return Identifiers$1.stylePropInterpolate1;\n        case 5:\n            return Identifiers$1.stylePropInterpolate2;\n        case 7:\n            return Identifiers$1.stylePropInterpolate3;\n        case 9:\n            return Identifiers$1.stylePropInterpolate4;\n        case 11:\n            return Identifiers$1.stylePropInterpolate5;\n        case 13:\n            return Identifiers$1.stylePropInterpolate6;\n        case 15:\n            return Identifiers$1.stylePropInterpolate7;\n        case 17:\n            return Identifiers$1.stylePropInterpolate8;\n        default:\n            return Identifiers$1.stylePropInterpolateV;\n    }\n}\n/**\n * Checks whether property name is a custom CSS property.\n * See: https://www.w3.org/TR/css-variables-1\n */\nfunction isCssCustomProperty(name) {\n    return name.startsWith('--');\n}\nfunction isEmptyExpression(ast) {\n    if (ast instanceof ASTWithSource) {\n        ast = ast.ast;\n    }\n    return ast instanceof EmptyExpr;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"Character\"] = 0] = \"Character\";\n    TokenType[TokenType[\"Identifier\"] = 1] = \"Identifier\";\n    TokenType[TokenType[\"PrivateIdentifier\"] = 2] = \"PrivateIdentifier\";\n    TokenType[TokenType[\"Keyword\"] = 3] = \"Keyword\";\n    TokenType[TokenType[\"String\"] = 4] = \"String\";\n    TokenType[TokenType[\"Operator\"] = 5] = \"Operator\";\n    TokenType[TokenType[\"Number\"] = 6] = \"Number\";\n    TokenType[TokenType[\"Error\"] = 7] = \"Error\";\n})(TokenType || (TokenType = {}));\nconst KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\nclass Lexer {\n    tokenize(text) {\n        const scanner = new _Scanner(text);\n        const tokens = [];\n        let token = scanner.scanToken();\n        while (token != null) {\n            tokens.push(token);\n            token = scanner.scanToken();\n        }\n        return tokens;\n    }\n}\nclass Token {\n    constructor(index, end, type, numValue, strValue) {\n        this.index = index;\n        this.end = end;\n        this.type = type;\n        this.numValue = numValue;\n        this.strValue = strValue;\n    }\n    isCharacter(code) {\n        return this.type == TokenType.Character && this.numValue == code;\n    }\n    isNumber() {\n        return this.type == TokenType.Number;\n    }\n    isString() {\n        return this.type == TokenType.String;\n    }\n    isOperator(operator) {\n        return this.type == TokenType.Operator && this.strValue == operator;\n    }\n    isIdentifier() {\n        return this.type == TokenType.Identifier;\n    }\n    isPrivateIdentifier() {\n        return this.type == TokenType.PrivateIdentifier;\n    }\n    isKeyword() {\n        return this.type == TokenType.Keyword;\n    }\n    isKeywordLet() {\n        return this.type == TokenType.Keyword && this.strValue == 'let';\n    }\n    isKeywordAs() {\n        return this.type == TokenType.Keyword && this.strValue == 'as';\n    }\n    isKeywordNull() {\n        return this.type == TokenType.Keyword && this.strValue == 'null';\n    }\n    isKeywordUndefined() {\n        return this.type == TokenType.Keyword && this.strValue == 'undefined';\n    }\n    isKeywordTrue() {\n        return this.type == TokenType.Keyword && this.strValue == 'true';\n    }\n    isKeywordFalse() {\n        return this.type == TokenType.Keyword && this.strValue == 'false';\n    }\n    isKeywordThis() {\n        return this.type == TokenType.Keyword && this.strValue == 'this';\n    }\n    isError() {\n        return this.type == TokenType.Error;\n    }\n    toNumber() {\n        return this.type == TokenType.Number ? this.numValue : -1;\n    }\n    toString() {\n        switch (this.type) {\n            case TokenType.Character:\n            case TokenType.Identifier:\n            case TokenType.Keyword:\n            case TokenType.Operator:\n            case TokenType.PrivateIdentifier:\n            case TokenType.String:\n            case TokenType.Error:\n                return this.strValue;\n            case TokenType.Number:\n                return this.numValue.toString();\n            default:\n                return null;\n        }\n    }\n}\nfunction newCharacterToken(index, end, code) {\n    return new Token(index, end, TokenType.Character, code, String.fromCharCode(code));\n}\nfunction newIdentifierToken(index, end, text) {\n    return new Token(index, end, TokenType.Identifier, 0, text);\n}\nfunction newPrivateIdentifierToken(index, end, text) {\n    return new Token(index, end, TokenType.PrivateIdentifier, 0, text);\n}\nfunction newKeywordToken(index, end, text) {\n    return new Token(index, end, TokenType.Keyword, 0, text);\n}\nfunction newOperatorToken(index, end, text) {\n    return new Token(index, end, TokenType.Operator, 0, text);\n}\nfunction newStringToken(index, end, text) {\n    return new Token(index, end, TokenType.String, 0, text);\n}\nfunction newNumberToken(index, end, n) {\n    return new Token(index, end, TokenType.Number, n, '');\n}\nfunction newErrorToken(index, end, message) {\n    return new Token(index, end, TokenType.Error, 0, message);\n}\nconst EOF = new Token(-1, -1, TokenType.Character, 0, '');\nclass _Scanner {\n    constructor(input) {\n        this.input = input;\n        this.peek = 0;\n        this.index = -1;\n        this.length = input.length;\n        this.advance();\n    }\n    advance() {\n        this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);\n    }\n    scanToken() {\n        const input = this.input, length = this.length;\n        let peek = this.peek, index = this.index;\n        // Skip whitespace.\n        while (peek <= $SPACE) {\n            if (++index >= length) {\n                peek = $EOF;\n                break;\n            }\n            else {\n                peek = input.charCodeAt(index);\n            }\n        }\n        this.peek = peek;\n        this.index = index;\n        if (index >= length) {\n            return null;\n        }\n        // Handle identifiers and numbers.\n        if (isIdentifierStart(peek))\n            return this.scanIdentifier();\n        if (isDigit(peek))\n            return this.scanNumber(index);\n        const start = index;\n        switch (peek) {\n            case $PERIOD:\n                this.advance();\n                return isDigit(this.peek) ? this.scanNumber(start) :\n                    newCharacterToken(start, this.index, $PERIOD);\n            case $LPAREN:\n            case $RPAREN:\n            case $LBRACE:\n            case $RBRACE:\n            case $LBRACKET:\n            case $RBRACKET:\n            case $COMMA:\n            case $COLON:\n            case $SEMICOLON:\n                return this.scanCharacter(start, peek);\n            case $SQ:\n            case $DQ:\n                return this.scanString();\n            case $HASH:\n                return this.scanPrivateIdentifier();\n            case $PLUS:\n            case $MINUS:\n            case $STAR:\n            case $SLASH:\n            case $PERCENT:\n            case $CARET:\n                return this.scanOperator(start, String.fromCharCode(peek));\n            case $QUESTION:\n                return this.scanQuestion(start);\n            case $LT:\n            case $GT:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');\n            case $BANG:\n            case $EQ:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');\n            case $AMPERSAND:\n                return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\n            case $BAR:\n                return this.scanComplexOperator(start, '|', $BAR, '|');\n            case $NBSP:\n                while (isWhitespace(this.peek))\n                    this.advance();\n                return this.scanToken();\n        }\n        this.advance();\n        return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);\n    }\n    scanCharacter(start, code) {\n        this.advance();\n        return newCharacterToken(start, this.index, code);\n    }\n    scanOperator(start, str) {\n        this.advance();\n        return newOperatorToken(start, this.index, str);\n    }\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param start start index in the expression\n     * @param one first symbol (always part of the operator)\n     * @param twoCode code point for the second symbol\n     * @param two second symbol (part of the operator when the second code point matches)\n     * @param threeCode code point for the third symbol\n     * @param three third symbol (part of the operator when provided and matches source expression)\n     */\n    scanComplexOperator(start, one, twoCode, two, threeCode, three) {\n        this.advance();\n        let str = one;\n        if (this.peek == twoCode) {\n            this.advance();\n            str += two;\n        }\n        if (threeCode != null && this.peek == threeCode) {\n            this.advance();\n            str += three;\n        }\n        return newOperatorToken(start, this.index, str);\n    }\n    scanIdentifier() {\n        const start = this.index;\n        this.advance();\n        while (isIdentifierPart(this.peek))\n            this.advance();\n        const str = this.input.substring(start, this.index);\n        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) :\n            newIdentifierToken(start, this.index, str);\n    }\n    /** Scans an ECMAScript private identifier. */\n    scanPrivateIdentifier() {\n        const start = this.index;\n        this.advance();\n        if (!isIdentifierStart(this.peek)) {\n            return this.error('Invalid character [#]', -1);\n        }\n        while (isIdentifierPart(this.peek))\n            this.advance();\n        const identifierName = this.input.substring(start, this.index);\n        return newPrivateIdentifierToken(start, this.index, identifierName);\n    }\n    scanNumber(start) {\n        let simple = (this.index === start);\n        let hasSeparators = false;\n        this.advance(); // Skip initial digit.\n        while (true) {\n            if (isDigit(this.peek)) {\n                // Do nothing.\n            }\n            else if (this.peek === $_) {\n                // Separators are only valid when they're surrounded by digits. E.g. `1_0_1` is\n                // valid while `_101` and `101_` are not. The separator can't be next to the decimal\n                // point or another separator either. Note that it's unlikely that we'll hit a case where\n                // the underscore is at the start, because that's a valid identifier and it will be picked\n                // up earlier in the parsing. We validate for it anyway just in case.\n                if (!isDigit(this.input.charCodeAt(this.index - 1)) ||\n                    !isDigit(this.input.charCodeAt(this.index + 1))) {\n                    return this.error('Invalid numeric separator', 0);\n                }\n                hasSeparators = true;\n            }\n            else if (this.peek === $PERIOD) {\n                simple = false;\n            }\n            else if (isExponentStart(this.peek)) {\n                this.advance();\n                if (isExponentSign(this.peek))\n                    this.advance();\n                if (!isDigit(this.peek))\n                    return this.error('Invalid exponent', -1);\n                simple = false;\n            }\n            else {\n                break;\n            }\n            this.advance();\n        }\n        let str = this.input.substring(start, this.index);\n        if (hasSeparators) {\n            str = str.replace(/_/g, '');\n        }\n        const value = simple ? parseIntAutoRadix(str) : parseFloat(str);\n        return newNumberToken(start, this.index, value);\n    }\n    scanString() {\n        const start = this.index;\n        const quote = this.peek;\n        this.advance(); // Skip initial quote.\n        let buffer = '';\n        let marker = this.index;\n        const input = this.input;\n        while (this.peek != quote) {\n            if (this.peek == $BACKSLASH) {\n                buffer += input.substring(marker, this.index);\n                this.advance();\n                let unescapedCode;\n                // Workaround for TS2.1-introduced type strictness\n                this.peek = this.peek;\n                if (this.peek == $u) {\n                    // 4 character hex code for unicode character.\n                    const hex = input.substring(this.index + 1, this.index + 5);\n                    if (/^[0-9a-f]+$/i.test(hex)) {\n                        unescapedCode = parseInt(hex, 16);\n                    }\n                    else {\n                        return this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n                    }\n                    for (let i = 0; i < 5; i++) {\n                        this.advance();\n                    }\n                }\n                else {\n                    unescapedCode = unescape(this.peek);\n                    this.advance();\n                }\n                buffer += String.fromCharCode(unescapedCode);\n                marker = this.index;\n            }\n            else if (this.peek == $EOF) {\n                return this.error('Unterminated quote', 0);\n            }\n            else {\n                this.advance();\n            }\n        }\n        const last = input.substring(marker, this.index);\n        this.advance(); // Skip terminating quote.\n        return newStringToken(start, this.index, buffer + last);\n    }\n    scanQuestion(start) {\n        this.advance();\n        let str = '?';\n        // Either `a ?? b` or 'a?.b'.\n        if (this.peek === $QUESTION || this.peek === $PERIOD) {\n            str += this.peek === $PERIOD ? '.' : '?';\n            this.advance();\n        }\n        return newOperatorToken(start, this.index, str);\n    }\n    error(message, offset) {\n        const position = this.index + offset;\n        return newErrorToken(position, this.index, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\n    }\n}\nfunction isIdentifierStart(code) {\n    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||\n        (code == $_) || (code == $$);\n}\nfunction isIdentifier(input) {\n    if (input.length == 0)\n        return false;\n    const scanner = new _Scanner(input);\n    if (!isIdentifierStart(scanner.peek))\n        return false;\n    scanner.advance();\n    while (scanner.peek !== $EOF) {\n        if (!isIdentifierPart(scanner.peek))\n            return false;\n        scanner.advance();\n    }\n    return true;\n}\nfunction isIdentifierPart(code) {\n    return isAsciiLetter(code) || isDigit(code) || (code == $_) ||\n        (code == $$);\n}\nfunction isExponentStart(code) {\n    return code == $e || code == $E;\n}\nfunction isExponentSign(code) {\n    return code == $MINUS || code == $PLUS;\n}\nfunction unescape(code) {\n    switch (code) {\n        case $n:\n            return $LF;\n        case $f:\n            return $FF;\n        case $r:\n            return $CR;\n        case $t:\n            return $TAB;\n        case $v:\n            return $VTAB;\n        default:\n            return code;\n    }\n}\nfunction parseIntAutoRadix(text) {\n    const result = parseInt(text);\n    if (isNaN(result)) {\n        throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass SplitInterpolation {\n    constructor(strings, expressions, offsets) {\n        this.strings = strings;\n        this.expressions = expressions;\n        this.offsets = offsets;\n    }\n}\nclass TemplateBindingParseResult {\n    constructor(templateBindings, warnings, errors) {\n        this.templateBindings = templateBindings;\n        this.warnings = warnings;\n        this.errors = errors;\n    }\n}\nclass Parser$1 {\n    constructor(_lexer) {\n        this._lexer = _lexer;\n        this.errors = [];\n        this.simpleExpressionChecker = SimpleExpressionChecker;\n    }\n    parseAction(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        const sourceToLex = this._stripComments(input);\n        const tokens = this._lexer.tokenize(this._stripComments(input));\n        const ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)\n            .parseChain();\n        return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    }\n    parseBinding(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n        return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    }\n    checkSimpleExpression(ast) {\n        const checker = new this.simpleExpressionChecker();\n        ast.visit(checker);\n        return checker.errors;\n    }\n    parseSimpleBinding(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n        const errors = this.checkSimpleExpression(ast);\n        if (errors.length > 0) {\n            this._reportError(`Host binding expression cannot contain ${errors.join(' ')}`, input, location);\n        }\n        return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n    }\n    _reportError(message, input, errLocation, ctxLocation) {\n        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n    }\n    _parseBindingAst(input, location, absoluteOffset, interpolationConfig) {\n        // Quotes expressions use 3rd-party expression language. We don't want to use\n        // our lexer or parser for that, so we check for that ahead of time.\n        const quote = this._parseQuote(input, location, absoluteOffset);\n        if (quote != null) {\n            return quote;\n        }\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        const sourceToLex = this._stripComments(input);\n        const tokens = this._lexer.tokenize(sourceToLex);\n        return new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)\n            .parseChain();\n    }\n    _parseQuote(input, location, absoluteOffset) {\n        if (input == null)\n            return null;\n        const prefixSeparatorIndex = input.indexOf(':');\n        if (prefixSeparatorIndex == -1)\n            return null;\n        const prefix = input.substring(0, prefixSeparatorIndex).trim();\n        if (!isIdentifier(prefix))\n            return null;\n        const uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n        const span = new ParseSpan(0, input.length);\n        return new Quote(span, span.toAbsolute(absoluteOffset), prefix, uninterpretedExpression, location);\n    }\n    /**\n     * Parse microsyntax template expression and return a list of bindings or\n     * parsing errors in case the given expression is invalid.\n     *\n     * For example,\n     * ```\n     *   <div *ngFor=\"let item of items\">\n     *         ^      ^ absoluteValueOffset for `templateValue`\n     *         absoluteKeyOffset for `templateKey`\n     * ```\n     * contains three bindings:\n     * 1. ngFor -> null\n     * 2. item -> NgForOfContext.$implicit\n     * 3. ngForOf -> items\n     *\n     * This is apparent from the de-sugared template:\n     * ```\n     *   <ng-template ngFor let-item [ngForOf]=\"items\">\n     * ```\n     *\n     * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor\n     * @param templateValue RHS of the microsyntax attribute\n     * @param templateUrl template filename if it's external, component filename if it's inline\n     * @param absoluteKeyOffset start of the `templateKey`\n     * @param absoluteValueOffset start of the `templateValue`\n     */\n    parseTemplateBindings(templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {\n        const tokens = this._lexer.tokenize(templateValue);\n        const parser = new _ParseAST(templateValue, templateUrl, absoluteValueOffset, tokens, templateValue.length, false /* parseAction */, this.errors, 0 /* relative offset */);\n        return parser.parseTemplateBindings({\n            source: templateKey,\n            span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length),\n        });\n    }\n    parseInterpolation(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const { strings, expressions, offsets } = this.splitInterpolation(input, location, interpolationConfig);\n        if (expressions.length === 0)\n            return null;\n        const expressionNodes = [];\n        for (let i = 0; i < expressions.length; ++i) {\n            const expressionText = expressions[i].text;\n            const sourceToLex = this._stripComments(expressionText);\n            const tokens = this._lexer.tokenize(sourceToLex);\n            const ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, offsets[i] + (expressionText.length - sourceToLex.length))\n                .parseChain();\n            expressionNodes.push(ast);\n        }\n        return this.createInterpolationAst(strings.map(s => s.text), expressionNodes, input, location, absoluteOffset);\n    }\n    /**\n     * Similar to `parseInterpolation`, but treats the provided string as a single expression\n     * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\n     * This is used for parsing the switch expression in ICUs.\n     */\n    parseInterpolationExpression(expression, location, absoluteOffset) {\n        const sourceToLex = this._stripComments(expression);\n        const tokens = this._lexer.tokenize(sourceToLex);\n        const ast = new _ParseAST(expression, location, absoluteOffset, tokens, sourceToLex.length, \n        /* parseAction */ false, this.errors, 0)\n            .parseChain();\n        const strings = ['', '']; // The prefix and suffix strings are both empty\n        return this.createInterpolationAst(strings, [ast], expression, location, absoluteOffset);\n    }\n    createInterpolationAst(strings, expressions, input, location, absoluteOffset) {\n        const span = new ParseSpan(0, input.length);\n        const interpolation = new Interpolation(span, span.toAbsolute(absoluteOffset), strings, expressions);\n        return new ASTWithSource(interpolation, input, location, absoluteOffset, this.errors);\n    }\n    /**\n     * Splits a string of text into \"raw\" text segments and expressions present in interpolations in\n     * the string.\n     * Returns `null` if there are no interpolations, otherwise a\n     * `SplitInterpolation` with splits that look like\n     *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>\n     */\n    splitInterpolation(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const strings = [];\n        const expressions = [];\n        const offsets = [];\n        let i = 0;\n        let atInterpolation = false;\n        let extendLastString = false;\n        let { start: interpStart, end: interpEnd } = interpolationConfig;\n        while (i < input.length) {\n            if (!atInterpolation) {\n                // parse until starting {{\n                const start = i;\n                i = input.indexOf(interpStart, i);\n                if (i === -1) {\n                    i = input.length;\n                }\n                const text = input.substring(start, i);\n                strings.push({ text, start, end: i });\n                atInterpolation = true;\n            }\n            else {\n                // parse from starting {{ to ending }} while ignoring content inside quotes.\n                const fullStart = i;\n                const exprStart = fullStart + interpStart.length;\n                const exprEnd = this._getInterpolationEndIndex(input, interpEnd, exprStart);\n                if (exprEnd === -1) {\n                    // Could not find the end of the interpolation; do not parse an expression.\n                    // Instead we should extend the content on the last raw string.\n                    atInterpolation = false;\n                    extendLastString = true;\n                    break;\n                }\n                const fullEnd = exprEnd + interpEnd.length;\n                const text = input.substring(exprStart, exprEnd);\n                if (text.trim().length === 0) {\n                    this._reportError('Blank expressions are not allowed in interpolated strings', input, `at column ${i} in`, location);\n                }\n                expressions.push({ text, start: fullStart, end: fullEnd });\n                offsets.push(exprStart);\n                i = fullEnd;\n                atInterpolation = false;\n            }\n        }\n        if (!atInterpolation) {\n            // If we are now at a text section, add the remaining content as a raw string.\n            if (extendLastString) {\n                const piece = strings[strings.length - 1];\n                piece.text += input.substring(i);\n                piece.end = input.length;\n            }\n            else {\n                strings.push({ text: input.substring(i), start: i, end: input.length });\n            }\n        }\n        return new SplitInterpolation(strings, expressions, offsets);\n    }\n    wrapLiteralPrimitive(input, location, absoluteOffset) {\n        const span = new ParseSpan(0, input == null ? 0 : input.length);\n        return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input), input, location, absoluteOffset, this.errors);\n    }\n    _stripComments(input) {\n        const i = this._commentStart(input);\n        return i != null ? input.substring(0, i).trim() : input;\n    }\n    _commentStart(input) {\n        let outerQuote = null;\n        for (let i = 0; i < input.length - 1; i++) {\n            const char = input.charCodeAt(i);\n            const nextChar = input.charCodeAt(i + 1);\n            if (char === $SLASH && nextChar == $SLASH && outerQuote == null)\n                return i;\n            if (outerQuote === char) {\n                outerQuote = null;\n            }\n            else if (outerQuote == null && isQuote(char)) {\n                outerQuote = char;\n            }\n        }\n        return null;\n    }\n    _checkNoInterpolation(input, location, { start, end }) {\n        let startIndex = -1;\n        let endIndex = -1;\n        for (const charIndex of this._forEachUnquotedChar(input, 0)) {\n            if (startIndex === -1) {\n                if (input.startsWith(start)) {\n                    startIndex = charIndex;\n                }\n            }\n            else {\n                endIndex = this._getInterpolationEndIndex(input, end, charIndex);\n                if (endIndex > -1) {\n                    break;\n                }\n            }\n        }\n        if (startIndex > -1 && endIndex > -1) {\n            this._reportError(`Got interpolation (${start}${end}) where expression was expected`, input, `at column ${startIndex} in`, location);\n        }\n    }\n    /**\n     * Finds the index of the end of an interpolation expression\n     * while ignoring comments and quoted content.\n     */\n    _getInterpolationEndIndex(input, expressionEnd, start) {\n        for (const charIndex of this._forEachUnquotedChar(input, start)) {\n            if (input.startsWith(expressionEnd, charIndex)) {\n                return charIndex;\n            }\n            // Nothing else in the expression matters after we've\n            // hit a comment so look directly for the end token.\n            if (input.startsWith('//', charIndex)) {\n                return input.indexOf(expressionEnd, charIndex);\n            }\n        }\n        return -1;\n    }\n    /**\n     * Generator used to iterate over the character indexes of a string that are outside of quotes.\n     * @param input String to loop through.\n     * @param start Index within the string at which to start.\n     */\n    *_forEachUnquotedChar(input, start) {\n        let currentQuote = null;\n        let escapeCount = 0;\n        for (let i = start; i < input.length; i++) {\n            const char = input[i];\n            // Skip the characters inside quotes. Note that we only care about the outer-most\n            // quotes matching up and we need to account for escape characters.\n            if (isQuote(input.charCodeAt(i)) && (currentQuote === null || currentQuote === char) &&\n                escapeCount % 2 === 0) {\n                currentQuote = currentQuote === null ? char : null;\n            }\n            else if (currentQuote === null) {\n                yield i;\n            }\n            escapeCount = char === '\\\\' ? escapeCount + 1 : 0;\n        }\n    }\n}\nclass IvyParser extends Parser$1 {\n    constructor() {\n        super(...arguments);\n        this.simpleExpressionChecker = IvySimpleExpressionChecker;\n    }\n}\n/** Describes a stateful context an expression parser is in. */\nvar ParseContextFlags;\n(function (ParseContextFlags) {\n    ParseContextFlags[ParseContextFlags[\"None\"] = 0] = \"None\";\n    /**\n     * A Writable context is one in which a value may be written to an lvalue.\n     * For example, after we see a property access, we may expect a write to the\n     * property via the \"=\" operator.\n     *   prop\n     *        ^ possible \"=\" after\n     */\n    ParseContextFlags[ParseContextFlags[\"Writable\"] = 1] = \"Writable\";\n})(ParseContextFlags || (ParseContextFlags = {}));\nclass _ParseAST {\n    constructor(input, location, absoluteOffset, tokens, inputLength, parseAction, errors, offset) {\n        this.input = input;\n        this.location = location;\n        this.absoluteOffset = absoluteOffset;\n        this.tokens = tokens;\n        this.inputLength = inputLength;\n        this.parseAction = parseAction;\n        this.errors = errors;\n        this.offset = offset;\n        this.rparensExpected = 0;\n        this.rbracketsExpected = 0;\n        this.rbracesExpected = 0;\n        this.context = ParseContextFlags.None;\n        // Cache of expression start and input indeces to the absolute source span they map to, used to\n        // prevent creating superfluous source spans in `sourceSpan`.\n        // A serial of the expression start and input index is used for mapping because both are stateful\n        // and may change for subsequent expressions visited by the parser.\n        this.sourceSpanCache = new Map();\n        this.index = 0;\n    }\n    peek(offset) {\n        const i = this.index + offset;\n        return i < this.tokens.length ? this.tokens[i] : EOF;\n    }\n    get next() {\n        return this.peek(0);\n    }\n    /** Whether all the parser input has been processed. */\n    get atEOF() {\n        return this.index >= this.tokens.length;\n    }\n    /**\n     * Index of the next token to be processed, or the end of the last token if all have been\n     * processed.\n     */\n    get inputIndex() {\n        return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;\n    }\n    /**\n     * End index of the last processed token, or the start of the first token if none have been\n     * processed.\n     */\n    get currentEndIndex() {\n        if (this.index > 0) {\n            const curToken = this.peek(-1);\n            return curToken.end + this.offset;\n        }\n        // No tokens have been processed yet; return the next token's start or the length of the input\n        // if there is no token.\n        if (this.tokens.length === 0) {\n            return this.inputLength + this.offset;\n        }\n        return this.next.index + this.offset;\n    }\n    /**\n     * Returns the absolute offset of the start of the current token.\n     */\n    get currentAbsoluteOffset() {\n        return this.absoluteOffset + this.inputIndex;\n    }\n    /**\n     * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if\n     * provided).\n     *\n     * @param start Position from which the `ParseSpan` will start.\n     * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the\n     *     natural ending index)\n     */\n    span(start, artificialEndIndex) {\n        let endIndex = this.currentEndIndex;\n        if (artificialEndIndex !== undefined && artificialEndIndex > this.currentEndIndex) {\n            endIndex = artificialEndIndex;\n        }\n        // In some unusual parsing scenarios (like when certain tokens are missing and an `EmptyExpr` is\n        // being created), the current token may already be advanced beyond the `currentEndIndex`. This\n        // appears to be a deep-seated parser bug.\n        //\n        // As a workaround for now, swap the start and end indices to ensure a valid `ParseSpan`.\n        // TODO(alxhub): fix the bug upstream in the parser state, and remove this workaround.\n        if (start > endIndex) {\n            const tmp = endIndex;\n            endIndex = start;\n            start = tmp;\n        }\n        return new ParseSpan(start, endIndex);\n    }\n    sourceSpan(start, artificialEndIndex) {\n        const serial = `${start}@${this.inputIndex}:${artificialEndIndex}`;\n        if (!this.sourceSpanCache.has(serial)) {\n            this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));\n        }\n        return this.sourceSpanCache.get(serial);\n    }\n    advance() {\n        this.index++;\n    }\n    /**\n     * Executes a callback in the provided context.\n     */\n    withContext(context, cb) {\n        this.context |= context;\n        const ret = cb();\n        this.context ^= context;\n        return ret;\n    }\n    consumeOptionalCharacter(code) {\n        if (this.next.isCharacter(code)) {\n            this.advance();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    peekKeywordLet() {\n        return this.next.isKeywordLet();\n    }\n    peekKeywordAs() {\n        return this.next.isKeywordAs();\n    }\n    /**\n     * Consumes an expected character, otherwise emits an error about the missing expected character\n     * and skips over the token stream until reaching a recoverable point.\n     *\n     * See `this.error` and `this.skip` for more details.\n     */\n    expectCharacter(code) {\n        if (this.consumeOptionalCharacter(code))\n            return;\n        this.error(`Missing expected ${String.fromCharCode(code)}`);\n    }\n    consumeOptionalOperator(op) {\n        if (this.next.isOperator(op)) {\n            this.advance();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    expectOperator(operator) {\n        if (this.consumeOptionalOperator(operator))\n            return;\n        this.error(`Missing expected operator ${operator}`);\n    }\n    prettyPrintToken(tok) {\n        return tok === EOF ? 'end of input' : `token ${tok}`;\n    }\n    expectIdentifierOrKeyword() {\n        const n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword()) {\n            if (n.isPrivateIdentifier()) {\n                this._reportErrorForPrivateIdentifier(n, 'expected identifier or keyword');\n            }\n            else {\n                this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier or keyword`);\n            }\n            return null;\n        }\n        this.advance();\n        return n.toString();\n    }\n    expectIdentifierOrKeywordOrString() {\n        const n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n            if (n.isPrivateIdentifier()) {\n                this._reportErrorForPrivateIdentifier(n, 'expected identifier, keyword or string');\n            }\n            else {\n                this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier, keyword, or string`);\n            }\n            return '';\n        }\n        this.advance();\n        return n.toString();\n    }\n    parseChain() {\n        const exprs = [];\n        const start = this.inputIndex;\n        while (this.index < this.tokens.length) {\n            const expr = this.parsePipe();\n            exprs.push(expr);\n            if (this.consumeOptionalCharacter($SEMICOLON)) {\n                if (!this.parseAction) {\n                    this.error('Binding expression cannot contain chained expression');\n                }\n                while (this.consumeOptionalCharacter($SEMICOLON)) {\n                } // read all semicolons\n            }\n            else if (this.index < this.tokens.length) {\n                this.error(`Unexpected token '${this.next}'`);\n            }\n        }\n        if (exprs.length == 0) {\n            // We have no expressions so create an empty expression that spans the entire input length\n            const artificialStart = this.offset;\n            const artificialEnd = this.offset + this.inputLength;\n            return new EmptyExpr(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));\n        }\n        if (exprs.length == 1)\n            return exprs[0];\n        return new Chain(this.span(start), this.sourceSpan(start), exprs);\n    }\n    parsePipe() {\n        const start = this.inputIndex;\n        let result = this.parseExpression();\n        if (this.consumeOptionalOperator('|')) {\n            if (this.parseAction) {\n                this.error('Cannot have a pipe in an action expression');\n            }\n            do {\n                const nameStart = this.inputIndex;\n                let nameId = this.expectIdentifierOrKeyword();\n                let nameSpan;\n                let fullSpanEnd = undefined;\n                if (nameId !== null) {\n                    nameSpan = this.sourceSpan(nameStart);\n                }\n                else {\n                    // No valid identifier was found, so we'll assume an empty pipe name ('').\n                    nameId = '';\n                    // However, there may have been whitespace present between the pipe character and the next\n                    // token in the sequence (or the end of input). We want to track this whitespace so that\n                    // the `BindingPipe` we produce covers not just the pipe character, but any trailing\n                    // whitespace beyond it. Another way of thinking about this is that the zero-length name\n                    // is assumed to be at the end of any whitespace beyond the pipe character.\n                    //\n                    // Therefore, we push the end of the `ParseSpan` for this pipe all the way up to the\n                    // beginning of the next token, or until the end of input if the next token is EOF.\n                    fullSpanEnd = this.next.index !== -1 ? this.next.index : this.inputLength + this.offset;\n                    // The `nameSpan` for an empty pipe name is zero-length at the end of any whitespace\n                    // beyond the pipe character.\n                    nameSpan = new ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);\n                }\n                const args = [];\n                while (this.consumeOptionalCharacter($COLON)) {\n                    args.push(this.parseExpression());\n                    // If there are additional expressions beyond the name, then the artificial end for the\n                    // name is no longer relevant.\n                }\n                result = new BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);\n            } while (this.consumeOptionalOperator('|'));\n        }\n        return result;\n    }\n    parseExpression() {\n        return this.parseConditional();\n    }\n    parseConditional() {\n        const start = this.inputIndex;\n        const result = this.parseLogicalOr();\n        if (this.consumeOptionalOperator('?')) {\n            const yes = this.parsePipe();\n            let no;\n            if (!this.consumeOptionalCharacter($COLON)) {\n                const end = this.inputIndex;\n                const expression = this.input.substring(start, end);\n                this.error(`Conditional expression ${expression} requires all 3 expressions`);\n                no = new EmptyExpr(this.span(start), this.sourceSpan(start));\n            }\n            else {\n                no = this.parsePipe();\n            }\n            return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);\n        }\n        else {\n            return result;\n        }\n    }\n    parseLogicalOr() {\n        // '||'\n        const start = this.inputIndex;\n        let result = this.parseLogicalAnd();\n        while (this.consumeOptionalOperator('||')) {\n            const right = this.parseLogicalAnd();\n            result = new Binary(this.span(start), this.sourceSpan(start), '||', result, right);\n        }\n        return result;\n    }\n    parseLogicalAnd() {\n        // '&&'\n        const start = this.inputIndex;\n        let result = this.parseNullishCoalescing();\n        while (this.consumeOptionalOperator('&&')) {\n            const right = this.parseNullishCoalescing();\n            result = new Binary(this.span(start), this.sourceSpan(start), '&&', result, right);\n        }\n        return result;\n    }\n    parseNullishCoalescing() {\n        // '??'\n        const start = this.inputIndex;\n        let result = this.parseEquality();\n        while (this.consumeOptionalOperator('??')) {\n            const right = this.parseEquality();\n            result = new Binary(this.span(start), this.sourceSpan(start), '??', result, right);\n        }\n        return result;\n    }\n    parseEquality() {\n        // '==','!=','===','!=='\n        const start = this.inputIndex;\n        let result = this.parseRelational();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '==':\n                case '===':\n                case '!=':\n                case '!==':\n                    this.advance();\n                    const right = this.parseRelational();\n                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parseRelational() {\n        // '<', '>', '<=', '>='\n        const start = this.inputIndex;\n        let result = this.parseAdditive();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '<':\n                case '>':\n                case '<=':\n                case '>=':\n                    this.advance();\n                    const right = this.parseAdditive();\n                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parseAdditive() {\n        // '+', '-'\n        const start = this.inputIndex;\n        let result = this.parseMultiplicative();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '+':\n                case '-':\n                    this.advance();\n                    let right = this.parseMultiplicative();\n                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parseMultiplicative() {\n        // '*', '%', '/'\n        const start = this.inputIndex;\n        let result = this.parsePrefix();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '*':\n                case '%':\n                case '/':\n                    this.advance();\n                    let right = this.parsePrefix();\n                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parsePrefix() {\n        if (this.next.type == TokenType.Operator) {\n            const start = this.inputIndex;\n            const operator = this.next.strValue;\n            let result;\n            switch (operator) {\n                case '+':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return Unary.createPlus(this.span(start), this.sourceSpan(start), result);\n                case '-':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return Unary.createMinus(this.span(start), this.sourceSpan(start), result);\n                case '!':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new PrefixNot(this.span(start), this.sourceSpan(start), result);\n            }\n        }\n        return this.parseCallChain();\n    }\n    parseCallChain() {\n        const start = this.inputIndex;\n        let result = this.parsePrimary();\n        while (true) {\n            if (this.consumeOptionalCharacter($PERIOD)) {\n                result = this.parseAccessMemberOrCall(result, start, false);\n            }\n            else if (this.consumeOptionalOperator('?.')) {\n                result = this.consumeOptionalCharacter($LBRACKET) ?\n                    this.parseKeyedReadOrWrite(result, start, true) :\n                    this.parseAccessMemberOrCall(result, start, true);\n            }\n            else if (this.consumeOptionalCharacter($LBRACKET)) {\n                result = this.parseKeyedReadOrWrite(result, start, false);\n            }\n            else if (this.consumeOptionalCharacter($LPAREN)) {\n                const argumentStart = this.inputIndex;\n                this.rparensExpected++;\n                const args = this.parseCallArguments();\n                const argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);\n                this.rparensExpected--;\n                this.expectCharacter($RPAREN);\n                result = new Call(this.span(start), this.sourceSpan(start), result, args, argumentSpan);\n            }\n            else if (this.consumeOptionalOperator('!')) {\n                result = new NonNullAssert(this.span(start), this.sourceSpan(start), result);\n            }\n            else {\n                return result;\n            }\n        }\n    }\n    parsePrimary() {\n        const start = this.inputIndex;\n        if (this.consumeOptionalCharacter($LPAREN)) {\n            this.rparensExpected++;\n            const result = this.parsePipe();\n            this.rparensExpected--;\n            this.expectCharacter($RPAREN);\n            return result;\n        }\n        else if (this.next.isKeywordNull()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);\n        }\n        else if (this.next.isKeywordUndefined()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);\n        }\n        else if (this.next.isKeywordTrue()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);\n        }\n        else if (this.next.isKeywordFalse()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);\n        }\n        else if (this.next.isKeywordThis()) {\n            this.advance();\n            return new ThisReceiver(this.span(start), this.sourceSpan(start));\n        }\n        else if (this.consumeOptionalCharacter($LBRACKET)) {\n            this.rbracketsExpected++;\n            const elements = this.parseExpressionList($RBRACKET);\n            this.rbracketsExpected--;\n            this.expectCharacter($RBRACKET);\n            return new LiteralArray(this.span(start), this.sourceSpan(start), elements);\n        }\n        else if (this.next.isCharacter($LBRACE)) {\n            return this.parseLiteralMap();\n        }\n        else if (this.next.isIdentifier()) {\n            return this.parseAccessMemberOrCall(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);\n        }\n        else if (this.next.isNumber()) {\n            const value = this.next.toNumber();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);\n        }\n        else if (this.next.isString()) {\n            const literalValue = this.next.toString();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);\n        }\n        else if (this.next.isPrivateIdentifier()) {\n            this._reportErrorForPrivateIdentifier(this.next, null);\n            return new EmptyExpr(this.span(start), this.sourceSpan(start));\n        }\n        else if (this.index >= this.tokens.length) {\n            this.error(`Unexpected end of expression: ${this.input}`);\n            return new EmptyExpr(this.span(start), this.sourceSpan(start));\n        }\n        else {\n            this.error(`Unexpected token ${this.next}`);\n            return new EmptyExpr(this.span(start), this.sourceSpan(start));\n        }\n    }\n    parseExpressionList(terminator) {\n        const result = [];\n        do {\n            if (!this.next.isCharacter(terminator)) {\n                result.push(this.parsePipe());\n            }\n            else {\n                break;\n            }\n        } while (this.consumeOptionalCharacter($COMMA));\n        return result;\n    }\n    parseLiteralMap() {\n        const keys = [];\n        const values = [];\n        const start = this.inputIndex;\n        this.expectCharacter($LBRACE);\n        if (!this.consumeOptionalCharacter($RBRACE)) {\n            this.rbracesExpected++;\n            do {\n                const keyStart = this.inputIndex;\n                const quoted = this.next.isString();\n                const key = this.expectIdentifierOrKeywordOrString();\n                keys.push({ key, quoted });\n                // Properties with quoted keys can't use the shorthand syntax.\n                if (quoted) {\n                    this.expectCharacter($COLON);\n                    values.push(this.parsePipe());\n                }\n                else if (this.consumeOptionalCharacter($COLON)) {\n                    values.push(this.parsePipe());\n                }\n                else {\n                    const span = this.span(keyStart);\n                    const sourceSpan = this.sourceSpan(keyStart);\n                    values.push(new PropertyRead(span, sourceSpan, sourceSpan, new ImplicitReceiver(span, sourceSpan), key));\n                }\n            } while (this.consumeOptionalCharacter($COMMA));\n            this.rbracesExpected--;\n            this.expectCharacter($RBRACE);\n        }\n        return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);\n    }\n    parseAccessMemberOrCall(readReceiver, start, isSafe) {\n        const nameStart = this.inputIndex;\n        const id = this.withContext(ParseContextFlags.Writable, () => {\n            var _a;\n            const id = (_a = this.expectIdentifierOrKeyword()) !== null && _a !== void 0 ? _a : '';\n            if (id.length === 0) {\n                this.error(`Expected identifier for property access`, readReceiver.span.end);\n            }\n            return id;\n        });\n        const nameSpan = this.sourceSpan(nameStart);\n        let receiver;\n        if (isSafe) {\n            if (this.consumeOptionalOperator('=')) {\n                this.error('The \\'?.\\' operator cannot be used in the assignment');\n                receiver = new EmptyExpr(this.span(start), this.sourceSpan(start));\n            }\n            else {\n                receiver = new SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);\n            }\n        }\n        else {\n            if (this.consumeOptionalOperator('=')) {\n                if (!this.parseAction) {\n                    this.error('Bindings cannot contain assignments');\n                    return new EmptyExpr(this.span(start), this.sourceSpan(start));\n                }\n                const value = this.parseConditional();\n                receiver = new PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id, value);\n            }\n            else {\n                receiver =\n                    new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);\n            }\n        }\n        if (this.consumeOptionalCharacter($LPAREN)) {\n            const argumentStart = this.inputIndex;\n            this.rparensExpected++;\n            const args = this.parseCallArguments();\n            const argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);\n            this.expectCharacter($RPAREN);\n            this.rparensExpected--;\n            const span = this.span(start);\n            const sourceSpan = this.sourceSpan(start);\n            return new Call(span, sourceSpan, receiver, args, argumentSpan);\n        }\n        return receiver;\n    }\n    parseCallArguments() {\n        if (this.next.isCharacter($RPAREN))\n            return [];\n        const positionals = [];\n        do {\n            positionals.push(this.parsePipe());\n        } while (this.consumeOptionalCharacter($COMMA));\n        return positionals;\n    }\n    /**\n     * Parses an identifier, a keyword, a string with an optional `-` in between,\n     * and returns the string along with its absolute source span.\n     */\n    expectTemplateBindingKey() {\n        let result = '';\n        let operatorFound = false;\n        const start = this.currentAbsoluteOffset;\n        do {\n            result += this.expectIdentifierOrKeywordOrString();\n            operatorFound = this.consumeOptionalOperator('-');\n            if (operatorFound) {\n                result += '-';\n            }\n        } while (operatorFound);\n        return {\n            source: result,\n            span: new AbsoluteSourceSpan(start, start + result.length),\n        };\n    }\n    /**\n     * Parse microsyntax template expression and return a list of bindings or\n     * parsing errors in case the given expression is invalid.\n     *\n     * For example,\n     * ```\n     *   <div *ngFor=\"let item of items; index as i; trackBy: func\">\n     * ```\n     * contains five bindings:\n     * 1. ngFor -> null\n     * 2. item -> NgForOfContext.$implicit\n     * 3. ngForOf -> items\n     * 4. i -> NgForOfContext.index\n     * 5. ngForTrackBy -> func\n     *\n     * For a full description of the microsyntax grammar, see\n     * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855\n     *\n     * @param templateKey name of the microsyntax directive, like ngIf, ngFor,\n     * without the *, along with its absolute span.\n     */\n    parseTemplateBindings(templateKey) {\n        const bindings = [];\n        // The first binding is for the template key itself\n        // In *ngFor=\"let item of items\", key = \"ngFor\", value = null\n        // In *ngIf=\"cond | pipe\", key = \"ngIf\", value = \"cond | pipe\"\n        bindings.push(...this.parseDirectiveKeywordBindings(templateKey));\n        while (this.index < this.tokens.length) {\n            // If it starts with 'let', then this must be variable declaration\n            const letBinding = this.parseLetBinding();\n            if (letBinding) {\n                bindings.push(letBinding);\n            }\n            else {\n                // Two possible cases here, either `value \"as\" key` or\n                // \"directive-keyword expression\". We don't know which case, but both\n                // \"value\" and \"directive-keyword\" are template binding key, so consume\n                // the key first.\n                const key = this.expectTemplateBindingKey();\n                // Peek at the next token, if it is \"as\" then this must be variable\n                // declaration.\n                const binding = this.parseAsBinding(key);\n                if (binding) {\n                    bindings.push(binding);\n                }\n                else {\n                    // Otherwise the key must be a directive keyword, like \"of\". Transform\n                    // the key to actual key. Eg. of -> ngForOf, trackBy -> ngForTrackBy\n                    key.source =\n                        templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);\n                    bindings.push(...this.parseDirectiveKeywordBindings(key));\n                }\n            }\n            this.consumeStatementTerminator();\n        }\n        return new TemplateBindingParseResult(bindings, [] /* warnings */, this.errors);\n    }\n    parseKeyedReadOrWrite(receiver, start, isSafe) {\n        return this.withContext(ParseContextFlags.Writable, () => {\n            this.rbracketsExpected++;\n            const key = this.parsePipe();\n            if (key instanceof EmptyExpr) {\n                this.error(`Key access cannot be empty`);\n            }\n            this.rbracketsExpected--;\n            this.expectCharacter($RBRACKET);\n            if (this.consumeOptionalOperator('=')) {\n                if (isSafe) {\n                    this.error('The \\'?.\\' operator cannot be used in the assignment');\n                }\n                else {\n                    const value = this.parseConditional();\n                    return new KeyedWrite(this.span(start), this.sourceSpan(start), receiver, key, value);\n                }\n            }\n            else {\n                return isSafe ? new SafeKeyedRead(this.span(start), this.sourceSpan(start), receiver, key) :\n                    new KeyedRead(this.span(start), this.sourceSpan(start), receiver, key);\n            }\n            return new EmptyExpr(this.span(start), this.sourceSpan(start));\n        });\n    }\n    /**\n     * Parse a directive keyword, followed by a mandatory expression.\n     * For example, \"of items\", \"trackBy: func\".\n     * The bindings are: ngForOf -> items, ngForTrackBy -> func\n     * There could be an optional \"as\" binding that follows the expression.\n     * For example,\n     * ```\n     *   *ngFor=\"let item of items | slice:0:1 as collection\".\n     *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^\n     *               keyword    bound target   optional 'as' binding\n     * ```\n     *\n     * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its\n     * absolute span.\n     */\n    parseDirectiveKeywordBindings(key) {\n        const bindings = [];\n        this.consumeOptionalCharacter($COLON); // trackBy: trackByFunction\n        const value = this.getDirectiveBoundTarget();\n        let spanEnd = this.currentAbsoluteOffset;\n        // The binding could optionally be followed by \"as\". For example,\n        // *ngIf=\"cond | pipe as x\". In this case, the key in the \"as\" binding\n        // is \"x\" and the value is the template key itself (\"ngIf\"). Note that the\n        // 'key' in the current context now becomes the \"value\" in the next binding.\n        const asBinding = this.parseAsBinding(key);\n        if (!asBinding) {\n            this.consumeStatementTerminator();\n            spanEnd = this.currentAbsoluteOffset;\n        }\n        const sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);\n        bindings.push(new ExpressionBinding(sourceSpan, key, value));\n        if (asBinding) {\n            bindings.push(asBinding);\n        }\n        return bindings;\n    }\n    /**\n     * Return the expression AST for the bound target of a directive keyword\n     * binding. For example,\n     * ```\n     *   *ngIf=\"condition | pipe\"\n     *          ^^^^^^^^^^^^^^^^ bound target for \"ngIf\"\n     *   *ngFor=\"let item of items\"\n     *                       ^^^^^ bound target for \"ngForOf\"\n     * ```\n     */\n    getDirectiveBoundTarget() {\n        if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {\n            return null;\n        }\n        const ast = this.parsePipe(); // example: \"condition | async\"\n        const { start, end } = ast.span;\n        const value = this.input.substring(start, end);\n        return new ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);\n    }\n    /**\n     * Return the binding for a variable declared using `as`. Note that the order\n     * of the key-value pair in this declaration is reversed. For example,\n     * ```\n     *   *ngFor=\"let item of items; index as i\"\n     *                              ^^^^^    ^\n     *                              value    key\n     * ```\n     *\n     * @param value name of the value in the declaration, \"ngIf\" in the example\n     * above, along with its absolute span.\n     */\n    parseAsBinding(value) {\n        if (!this.peekKeywordAs()) {\n            return null;\n        }\n        this.advance(); // consume the 'as' keyword\n        const key = this.expectTemplateBindingKey();\n        this.consumeStatementTerminator();\n        const sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);\n        return new VariableBinding(sourceSpan, key, value);\n    }\n    /**\n     * Return the binding for a variable declared using `let`. For example,\n     * ```\n     *   *ngFor=\"let item of items; let i=index;\"\n     *           ^^^^^^^^           ^^^^^^^^^^^\n     * ```\n     * In the first binding, `item` is bound to `NgForOfContext.$implicit`.\n     * In the second binding, `i` is bound to `NgForOfContext.index`.\n     */\n    parseLetBinding() {\n        if (!this.peekKeywordLet()) {\n            return null;\n        }\n        const spanStart = this.currentAbsoluteOffset;\n        this.advance(); // consume the 'let' keyword\n        const key = this.expectTemplateBindingKey();\n        let value = null;\n        if (this.consumeOptionalOperator('=')) {\n            value = this.expectTemplateBindingKey();\n        }\n        this.consumeStatementTerminator();\n        const sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);\n        return new VariableBinding(sourceSpan, key, value);\n    }\n    /**\n     * Consume the optional statement terminator: semicolon or comma.\n     */\n    consumeStatementTerminator() {\n        this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);\n    }\n    /**\n     * Records an error and skips over the token stream until reaching a recoverable point. See\n     * `this.skip` for more details on token skipping.\n     */\n    error(message, index = null) {\n        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n        this.skip();\n    }\n    locationText(index = null) {\n        if (index == null)\n            index = this.index;\n        return (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` :\n            `at the end of the expression`;\n    }\n    /**\n     * Records an error for an unexpected private identifier being discovered.\n     * @param token Token representing a private identifier.\n     * @param extraMessage Optional additional message being appended to the error.\n     */\n    _reportErrorForPrivateIdentifier(token, extraMessage) {\n        let errorMessage = `Private identifiers are not supported. Unexpected private identifier: ${token}`;\n        if (extraMessage !== null) {\n            errorMessage += `, ${extraMessage}`;\n        }\n        this.error(errorMessage);\n    }\n    /**\n     * Error recovery should skip tokens until it encounters a recovery point.\n     *\n     * The following are treated as unconditional recovery points:\n     *   - end of input\n     *   - ';' (parseChain() is always the root production, and it expects a ';')\n     *   - '|' (since pipes may be chained and each pipe expression may be treated independently)\n     *\n     * The following are conditional recovery points:\n     *   - ')', '}', ']' if one of calling productions is expecting one of these symbols\n     *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to\n     *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins\n     *       an '(' <expr> ')' production).\n     *       The recovery points of grouping symbols must be conditional as they must be skipped if\n     *       none of the calling productions are not expecting the closing token else we will never\n     *       make progress in the case of an extraneous group closing symbol (such as a stray ')').\n     *       That is, we skip a closing symbol if we are not in a grouping production.\n     *   - '=' in a `Writable` context\n     *     - In this context, we are able to recover after seeing the `=` operator, which\n     *       signals the presence of an independent rvalue expression following the `=` operator.\n     *\n     * If a production expects one of these token it increments the corresponding nesting count,\n     * and then decrements it just prior to checking if the token is in the input.\n     */\n    skip() {\n        let n = this.next;\n        while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&\n            !n.isOperator('|') && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&\n            (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&\n            (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) &&\n            (!(this.context & ParseContextFlags.Writable) || !n.isOperator('='))) {\n            if (this.next.isError()) {\n                this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n            }\n            this.advance();\n            n = this.next;\n        }\n    }\n}\nclass SimpleExpressionChecker {\n    constructor() {\n        this.errors = [];\n    }\n    visitImplicitReceiver(ast, context) { }\n    visitThisReceiver(ast, context) { }\n    visitInterpolation(ast, context) { }\n    visitLiteralPrimitive(ast, context) { }\n    visitPropertyRead(ast, context) { }\n    visitPropertyWrite(ast, context) { }\n    visitSafePropertyRead(ast, context) { }\n    visitCall(ast, context) { }\n    visitLiteralArray(ast, context) {\n        this.visitAll(ast.expressions, context);\n    }\n    visitLiteralMap(ast, context) {\n        this.visitAll(ast.values, context);\n    }\n    visitUnary(ast, context) { }\n    visitBinary(ast, context) { }\n    visitPrefixNot(ast, context) { }\n    visitNonNullAssert(ast, context) { }\n    visitConditional(ast, context) { }\n    visitPipe(ast, context) {\n        this.errors.push('pipes');\n    }\n    visitKeyedRead(ast, context) { }\n    visitKeyedWrite(ast, context) { }\n    visitAll(asts, context) {\n        return asts.map(node => node.visit(this, context));\n    }\n    visitChain(ast, context) { }\n    visitQuote(ast, context) { }\n    visitSafeKeyedRead(ast, context) { }\n}\n/**\n * This class implements SimpleExpressionChecker used in View Engine and performs more strict checks\n * to make sure host bindings do not contain pipes. In View Engine, having pipes in host bindings is\n * not supported as well, but in some cases (like `!(value | async)`) the error is not triggered at\n * compile time. In order to preserve View Engine behavior, more strict checks are introduced for\n * Ivy mode only.\n */\nclass IvySimpleExpressionChecker extends RecursiveAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.errors = [];\n    }\n    visitPipe() {\n        this.errors.push('pipes');\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n *\n * For example, the expression `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n *\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n */\nclass AstPath {\n    constructor(path, position = -1) {\n        this.path = path;\n        this.position = position;\n    }\n    get empty() {\n        return !this.path || !this.path.length;\n    }\n    get head() {\n        return this.path[0];\n    }\n    get tail() {\n        return this.path[this.path.length - 1];\n    }\n    parentOf(node) {\n        return node && this.path[this.path.indexOf(node) - 1];\n    }\n    childOf(node) {\n        return this.path[this.path.indexOf(node) + 1];\n    }\n    first(ctor) {\n        for (let i = this.path.length - 1; i >= 0; i--) {\n            let item = this.path[i];\n            if (item instanceof ctor)\n                return item;\n        }\n    }\n    push(node) {\n        this.path.push(node);\n    }\n    pop() {\n        return this.path.pop();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass NodeWithI18n {\n    constructor(sourceSpan, i18n) {\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n}\nclass Text extends NodeWithI18n {\n    constructor(value, sourceSpan, tokens, i18n) {\n        super(sourceSpan, i18n);\n        this.value = value;\n        this.tokens = tokens;\n    }\n    visit(visitor, context) {\n        return visitor.visitText(this, context);\n    }\n}\nclass Expansion extends NodeWithI18n {\n    constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n) {\n        super(sourceSpan, i18n);\n        this.switchValue = switchValue;\n        this.type = type;\n        this.cases = cases;\n        this.switchValueSourceSpan = switchValueSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitExpansion(this, context);\n    }\n}\nclass ExpansionCase {\n    constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n        this.value = value;\n        this.expression = expression;\n        this.sourceSpan = sourceSpan;\n        this.valueSourceSpan = valueSourceSpan;\n        this.expSourceSpan = expSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitExpansionCase(this, context);\n    }\n}\nclass Attribute extends NodeWithI18n {\n    constructor(name, value, sourceSpan, keySpan, valueSpan, valueTokens, i18n) {\n        super(sourceSpan, i18n);\n        this.name = name;\n        this.value = value;\n        this.keySpan = keySpan;\n        this.valueSpan = valueSpan;\n        this.valueTokens = valueTokens;\n    }\n    visit(visitor, context) {\n        return visitor.visitAttribute(this, context);\n    }\n}\nclass Element extends NodeWithI18n {\n    constructor(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan = null, i18n) {\n        super(sourceSpan, i18n);\n        this.name = name;\n        this.attrs = attrs;\n        this.children = children;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitElement(this, context);\n    }\n}\nclass Comment {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitComment(this, context);\n    }\n}\nfunction visitAll(visitor, nodes, context = null) {\n    const result = [];\n    const visit = visitor.visit ?\n        (ast) => visitor.visit(ast, context) || ast.visit(visitor, context) :\n        (ast) => ast.visit(visitor, context);\n    nodes.forEach(ast => {\n        const astResult = visit(ast);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\nclass RecursiveVisitor {\n    constructor() { }\n    visitElement(ast, context) {\n        this.visitChildren(context, visit => {\n            visit(ast.attrs);\n            visit(ast.children);\n        });\n    }\n    visitAttribute(ast, context) { }\n    visitText(ast, context) { }\n    visitComment(ast, context) { }\n    visitExpansion(ast, context) {\n        return this.visitChildren(context, visit => {\n            visit(ast.cases);\n        });\n    }\n    visitExpansionCase(ast, context) { }\n    visitChildren(context, cb) {\n        let results = [];\n        let t = this;\n        function visit(children) {\n            if (children)\n                results.push(visitAll(t, children, context));\n        }\n        cb(visit);\n        return Array.prototype.concat.apply([], results);\n    }\n}\nfunction spanOf(ast) {\n    const start = ast.sourceSpan.start.offset;\n    let end = ast.sourceSpan.end.offset;\n    if (ast instanceof Element) {\n        if (ast.endSourceSpan) {\n            end = ast.endSourceSpan.end.offset;\n        }\n        else if (ast.children && ast.children.length) {\n            end = spanOf(ast.children[ast.children.length - 1]).end;\n        }\n    }\n    return { start, end };\n}\nfunction findNode(nodes, position) {\n    const path = [];\n    const visitor = new class extends RecursiveVisitor {\n        visit(ast, context) {\n            const span = spanOf(ast);\n            if (span.start <= position && position < span.end) {\n                path.push(ast);\n            }\n            else {\n                // Returning a value here will result in the children being skipped.\n                return true;\n            }\n        }\n    };\n    visitAll(visitor, nodes);\n    return new AstPath(path, position);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Mapping between all HTML entity names and their unicode representation.\n// Generated from https://html.spec.whatwg.org/multipage/entities.json by stripping\n// the `&` and `;` from the keys and removing the duplicates.\n// see https://www.w3.org/TR/html51/syntax.html#named-character-references\nconst NAMED_ENTITIES = {\n    'AElig': '\\u00C6',\n    'AMP': '\\u0026',\n    'amp': '\\u0026',\n    'Aacute': '\\u00C1',\n    'Abreve': '\\u0102',\n    'Acirc': '\\u00C2',\n    'Acy': '\\u0410',\n    'Afr': '\\uD835\\uDD04',\n    'Agrave': '\\u00C0',\n    'Alpha': '\\u0391',\n    'Amacr': '\\u0100',\n    'And': '\\u2A53',\n    'Aogon': '\\u0104',\n    'Aopf': '\\uD835\\uDD38',\n    'ApplyFunction': '\\u2061',\n    'af': '\\u2061',\n    'Aring': '\\u00C5',\n    'angst': '\\u00C5',\n    'Ascr': '\\uD835\\uDC9C',\n    'Assign': '\\u2254',\n    'colone': '\\u2254',\n    'coloneq': '\\u2254',\n    'Atilde': '\\u00C3',\n    'Auml': '\\u00C4',\n    'Backslash': '\\u2216',\n    'setminus': '\\u2216',\n    'setmn': '\\u2216',\n    'smallsetminus': '\\u2216',\n    'ssetmn': '\\u2216',\n    'Barv': '\\u2AE7',\n    'Barwed': '\\u2306',\n    'doublebarwedge': '\\u2306',\n    'Bcy': '\\u0411',\n    'Because': '\\u2235',\n    'becaus': '\\u2235',\n    'because': '\\u2235',\n    'Bernoullis': '\\u212C',\n    'Bscr': '\\u212C',\n    'bernou': '\\u212C',\n    'Beta': '\\u0392',\n    'Bfr': '\\uD835\\uDD05',\n    'Bopf': '\\uD835\\uDD39',\n    'Breve': '\\u02D8',\n    'breve': '\\u02D8',\n    'Bumpeq': '\\u224E',\n    'HumpDownHump': '\\u224E',\n    'bump': '\\u224E',\n    'CHcy': '\\u0427',\n    'COPY': '\\u00A9',\n    'copy': '\\u00A9',\n    'Cacute': '\\u0106',\n    'Cap': '\\u22D2',\n    'CapitalDifferentialD': '\\u2145',\n    'DD': '\\u2145',\n    'Cayleys': '\\u212D',\n    'Cfr': '\\u212D',\n    'Ccaron': '\\u010C',\n    'Ccedil': '\\u00C7',\n    'Ccirc': '\\u0108',\n    'Cconint': '\\u2230',\n    'Cdot': '\\u010A',\n    'Cedilla': '\\u00B8',\n    'cedil': '\\u00B8',\n    'CenterDot': '\\u00B7',\n    'centerdot': '\\u00B7',\n    'middot': '\\u00B7',\n    'Chi': '\\u03A7',\n    'CircleDot': '\\u2299',\n    'odot': '\\u2299',\n    'CircleMinus': '\\u2296',\n    'ominus': '\\u2296',\n    'CirclePlus': '\\u2295',\n    'oplus': '\\u2295',\n    'CircleTimes': '\\u2297',\n    'otimes': '\\u2297',\n    'ClockwiseContourIntegral': '\\u2232',\n    'cwconint': '\\u2232',\n    'CloseCurlyDoubleQuote': '\\u201D',\n    'rdquo': '\\u201D',\n    'rdquor': '\\u201D',\n    'CloseCurlyQuote': '\\u2019',\n    'rsquo': '\\u2019',\n    'rsquor': '\\u2019',\n    'Colon': '\\u2237',\n    'Proportion': '\\u2237',\n    'Colone': '\\u2A74',\n    'Congruent': '\\u2261',\n    'equiv': '\\u2261',\n    'Conint': '\\u222F',\n    'DoubleContourIntegral': '\\u222F',\n    'ContourIntegral': '\\u222E',\n    'conint': '\\u222E',\n    'oint': '\\u222E',\n    'Copf': '\\u2102',\n    'complexes': '\\u2102',\n    'Coproduct': '\\u2210',\n    'coprod': '\\u2210',\n    'CounterClockwiseContourIntegral': '\\u2233',\n    'awconint': '\\u2233',\n    'Cross': '\\u2A2F',\n    'Cscr': '\\uD835\\uDC9E',\n    'Cup': '\\u22D3',\n    'CupCap': '\\u224D',\n    'asympeq': '\\u224D',\n    'DDotrahd': '\\u2911',\n    'DJcy': '\\u0402',\n    'DScy': '\\u0405',\n    'DZcy': '\\u040F',\n    'Dagger': '\\u2021',\n    'ddagger': '\\u2021',\n    'Darr': '\\u21A1',\n    'Dashv': '\\u2AE4',\n    'DoubleLeftTee': '\\u2AE4',\n    'Dcaron': '\\u010E',\n    'Dcy': '\\u0414',\n    'Del': '\\u2207',\n    'nabla': '\\u2207',\n    'Delta': '\\u0394',\n    'Dfr': '\\uD835\\uDD07',\n    'DiacriticalAcute': '\\u00B4',\n    'acute': '\\u00B4',\n    'DiacriticalDot': '\\u02D9',\n    'dot': '\\u02D9',\n    'DiacriticalDoubleAcute': '\\u02DD',\n    'dblac': '\\u02DD',\n    'DiacriticalGrave': '\\u0060',\n    'grave': '\\u0060',\n    'DiacriticalTilde': '\\u02DC',\n    'tilde': '\\u02DC',\n    'Diamond': '\\u22C4',\n    'diam': '\\u22C4',\n    'diamond': '\\u22C4',\n    'DifferentialD': '\\u2146',\n    'dd': '\\u2146',\n    'Dopf': '\\uD835\\uDD3B',\n    'Dot': '\\u00A8',\n    'DoubleDot': '\\u00A8',\n    'die': '\\u00A8',\n    'uml': '\\u00A8',\n    'DotDot': '\\u20DC',\n    'DotEqual': '\\u2250',\n    'doteq': '\\u2250',\n    'esdot': '\\u2250',\n    'DoubleDownArrow': '\\u21D3',\n    'Downarrow': '\\u21D3',\n    'dArr': '\\u21D3',\n    'DoubleLeftArrow': '\\u21D0',\n    'Leftarrow': '\\u21D0',\n    'lArr': '\\u21D0',\n    'DoubleLeftRightArrow': '\\u21D4',\n    'Leftrightarrow': '\\u21D4',\n    'hArr': '\\u21D4',\n    'iff': '\\u21D4',\n    'DoubleLongLeftArrow': '\\u27F8',\n    'Longleftarrow': '\\u27F8',\n    'xlArr': '\\u27F8',\n    'DoubleLongLeftRightArrow': '\\u27FA',\n    'Longleftrightarrow': '\\u27FA',\n    'xhArr': '\\u27FA',\n    'DoubleLongRightArrow': '\\u27F9',\n    'Longrightarrow': '\\u27F9',\n    'xrArr': '\\u27F9',\n    'DoubleRightArrow': '\\u21D2',\n    'Implies': '\\u21D2',\n    'Rightarrow': '\\u21D2',\n    'rArr': '\\u21D2',\n    'DoubleRightTee': '\\u22A8',\n    'vDash': '\\u22A8',\n    'DoubleUpArrow': '\\u21D1',\n    'Uparrow': '\\u21D1',\n    'uArr': '\\u21D1',\n    'DoubleUpDownArrow': '\\u21D5',\n    'Updownarrow': '\\u21D5',\n    'vArr': '\\u21D5',\n    'DoubleVerticalBar': '\\u2225',\n    'par': '\\u2225',\n    'parallel': '\\u2225',\n    'shortparallel': '\\u2225',\n    'spar': '\\u2225',\n    'DownArrow': '\\u2193',\n    'ShortDownArrow': '\\u2193',\n    'darr': '\\u2193',\n    'downarrow': '\\u2193',\n    'DownArrowBar': '\\u2913',\n    'DownArrowUpArrow': '\\u21F5',\n    'duarr': '\\u21F5',\n    'DownBreve': '\\u0311',\n    'DownLeftRightVector': '\\u2950',\n    'DownLeftTeeVector': '\\u295E',\n    'DownLeftVector': '\\u21BD',\n    'leftharpoondown': '\\u21BD',\n    'lhard': '\\u21BD',\n    'DownLeftVectorBar': '\\u2956',\n    'DownRightTeeVector': '\\u295F',\n    'DownRightVector': '\\u21C1',\n    'rhard': '\\u21C1',\n    'rightharpoondown': '\\u21C1',\n    'DownRightVectorBar': '\\u2957',\n    'DownTee': '\\u22A4',\n    'top': '\\u22A4',\n    'DownTeeArrow': '\\u21A7',\n    'mapstodown': '\\u21A7',\n    'Dscr': '\\uD835\\uDC9F',\n    'Dstrok': '\\u0110',\n    'ENG': '\\u014A',\n    'ETH': '\\u00D0',\n    'Eacute': '\\u00C9',\n    'Ecaron': '\\u011A',\n    'Ecirc': '\\u00CA',\n    'Ecy': '\\u042D',\n    'Edot': '\\u0116',\n    'Efr': '\\uD835\\uDD08',\n    'Egrave': '\\u00C8',\n    'Element': '\\u2208',\n    'in': '\\u2208',\n    'isin': '\\u2208',\n    'isinv': '\\u2208',\n    'Emacr': '\\u0112',\n    'EmptySmallSquare': '\\u25FB',\n    'EmptyVerySmallSquare': '\\u25AB',\n    'Eogon': '\\u0118',\n    'Eopf': '\\uD835\\uDD3C',\n    'Epsilon': '\\u0395',\n    'Equal': '\\u2A75',\n    'EqualTilde': '\\u2242',\n    'eqsim': '\\u2242',\n    'esim': '\\u2242',\n    'Equilibrium': '\\u21CC',\n    'rightleftharpoons': '\\u21CC',\n    'rlhar': '\\u21CC',\n    'Escr': '\\u2130',\n    'expectation': '\\u2130',\n    'Esim': '\\u2A73',\n    'Eta': '\\u0397',\n    'Euml': '\\u00CB',\n    'Exists': '\\u2203',\n    'exist': '\\u2203',\n    'ExponentialE': '\\u2147',\n    'ee': '\\u2147',\n    'exponentiale': '\\u2147',\n    'Fcy': '\\u0424',\n    'Ffr': '\\uD835\\uDD09',\n    'FilledSmallSquare': '\\u25FC',\n    'FilledVerySmallSquare': '\\u25AA',\n    'blacksquare': '\\u25AA',\n    'squarf': '\\u25AA',\n    'squf': '\\u25AA',\n    'Fopf': '\\uD835\\uDD3D',\n    'ForAll': '\\u2200',\n    'forall': '\\u2200',\n    'Fouriertrf': '\\u2131',\n    'Fscr': '\\u2131',\n    'GJcy': '\\u0403',\n    'GT': '\\u003E',\n    'gt': '\\u003E',\n    'Gamma': '\\u0393',\n    'Gammad': '\\u03DC',\n    'Gbreve': '\\u011E',\n    'Gcedil': '\\u0122',\n    'Gcirc': '\\u011C',\n    'Gcy': '\\u0413',\n    'Gdot': '\\u0120',\n    'Gfr': '\\uD835\\uDD0A',\n    'Gg': '\\u22D9',\n    'ggg': '\\u22D9',\n    'Gopf': '\\uD835\\uDD3E',\n    'GreaterEqual': '\\u2265',\n    'ge': '\\u2265',\n    'geq': '\\u2265',\n    'GreaterEqualLess': '\\u22DB',\n    'gel': '\\u22DB',\n    'gtreqless': '\\u22DB',\n    'GreaterFullEqual': '\\u2267',\n    'gE': '\\u2267',\n    'geqq': '\\u2267',\n    'GreaterGreater': '\\u2AA2',\n    'GreaterLess': '\\u2277',\n    'gl': '\\u2277',\n    'gtrless': '\\u2277',\n    'GreaterSlantEqual': '\\u2A7E',\n    'geqslant': '\\u2A7E',\n    'ges': '\\u2A7E',\n    'GreaterTilde': '\\u2273',\n    'gsim': '\\u2273',\n    'gtrsim': '\\u2273',\n    'Gscr': '\\uD835\\uDCA2',\n    'Gt': '\\u226B',\n    'NestedGreaterGreater': '\\u226B',\n    'gg': '\\u226B',\n    'HARDcy': '\\u042A',\n    'Hacek': '\\u02C7',\n    'caron': '\\u02C7',\n    'Hat': '\\u005E',\n    'Hcirc': '\\u0124',\n    'Hfr': '\\u210C',\n    'Poincareplane': '\\u210C',\n    'HilbertSpace': '\\u210B',\n    'Hscr': '\\u210B',\n    'hamilt': '\\u210B',\n    'Hopf': '\\u210D',\n    'quaternions': '\\u210D',\n    'HorizontalLine': '\\u2500',\n    'boxh': '\\u2500',\n    'Hstrok': '\\u0126',\n    'HumpEqual': '\\u224F',\n    'bumpe': '\\u224F',\n    'bumpeq': '\\u224F',\n    'IEcy': '\\u0415',\n    'IJlig': '\\u0132',\n    'IOcy': '\\u0401',\n    'Iacute': '\\u00CD',\n    'Icirc': '\\u00CE',\n    'Icy': '\\u0418',\n    'Idot': '\\u0130',\n    'Ifr': '\\u2111',\n    'Im': '\\u2111',\n    'image': '\\u2111',\n    'imagpart': '\\u2111',\n    'Igrave': '\\u00CC',\n    'Imacr': '\\u012A',\n    'ImaginaryI': '\\u2148',\n    'ii': '\\u2148',\n    'Int': '\\u222C',\n    'Integral': '\\u222B',\n    'int': '\\u222B',\n    'Intersection': '\\u22C2',\n    'bigcap': '\\u22C2',\n    'xcap': '\\u22C2',\n    'InvisibleComma': '\\u2063',\n    'ic': '\\u2063',\n    'InvisibleTimes': '\\u2062',\n    'it': '\\u2062',\n    'Iogon': '\\u012E',\n    'Iopf': '\\uD835\\uDD40',\n    'Iota': '\\u0399',\n    'Iscr': '\\u2110',\n    'imagline': '\\u2110',\n    'Itilde': '\\u0128',\n    'Iukcy': '\\u0406',\n    'Iuml': '\\u00CF',\n    'Jcirc': '\\u0134',\n    'Jcy': '\\u0419',\n    'Jfr': '\\uD835\\uDD0D',\n    'Jopf': '\\uD835\\uDD41',\n    'Jscr': '\\uD835\\uDCA5',\n    'Jsercy': '\\u0408',\n    'Jukcy': '\\u0404',\n    'KHcy': '\\u0425',\n    'KJcy': '\\u040C',\n    'Kappa': '\\u039A',\n    'Kcedil': '\\u0136',\n    'Kcy': '\\u041A',\n    'Kfr': '\\uD835\\uDD0E',\n    'Kopf': '\\uD835\\uDD42',\n    'Kscr': '\\uD835\\uDCA6',\n    'LJcy': '\\u0409',\n    'LT': '\\u003C',\n    'lt': '\\u003C',\n    'Lacute': '\\u0139',\n    'Lambda': '\\u039B',\n    'Lang': '\\u27EA',\n    'Laplacetrf': '\\u2112',\n    'Lscr': '\\u2112',\n    'lagran': '\\u2112',\n    'Larr': '\\u219E',\n    'twoheadleftarrow': '\\u219E',\n    'Lcaron': '\\u013D',\n    'Lcedil': '\\u013B',\n    'Lcy': '\\u041B',\n    'LeftAngleBracket': '\\u27E8',\n    'lang': '\\u27E8',\n    'langle': '\\u27E8',\n    'LeftArrow': '\\u2190',\n    'ShortLeftArrow': '\\u2190',\n    'larr': '\\u2190',\n    'leftarrow': '\\u2190',\n    'slarr': '\\u2190',\n    'LeftArrowBar': '\\u21E4',\n    'larrb': '\\u21E4',\n    'LeftArrowRightArrow': '\\u21C6',\n    'leftrightarrows': '\\u21C6',\n    'lrarr': '\\u21C6',\n    'LeftCeiling': '\\u2308',\n    'lceil': '\\u2308',\n    'LeftDoubleBracket': '\\u27E6',\n    'lobrk': '\\u27E6',\n    'LeftDownTeeVector': '\\u2961',\n    'LeftDownVector': '\\u21C3',\n    'dharl': '\\u21C3',\n    'downharpoonleft': '\\u21C3',\n    'LeftDownVectorBar': '\\u2959',\n    'LeftFloor': '\\u230A',\n    'lfloor': '\\u230A',\n    'LeftRightArrow': '\\u2194',\n    'harr': '\\u2194',\n    'leftrightarrow': '\\u2194',\n    'LeftRightVector': '\\u294E',\n    'LeftTee': '\\u22A3',\n    'dashv': '\\u22A3',\n    'LeftTeeArrow': '\\u21A4',\n    'mapstoleft': '\\u21A4',\n    'LeftTeeVector': '\\u295A',\n    'LeftTriangle': '\\u22B2',\n    'vartriangleleft': '\\u22B2',\n    'vltri': '\\u22B2',\n    'LeftTriangleBar': '\\u29CF',\n    'LeftTriangleEqual': '\\u22B4',\n    'ltrie': '\\u22B4',\n    'trianglelefteq': '\\u22B4',\n    'LeftUpDownVector': '\\u2951',\n    'LeftUpTeeVector': '\\u2960',\n    'LeftUpVector': '\\u21BF',\n    'uharl': '\\u21BF',\n    'upharpoonleft': '\\u21BF',\n    'LeftUpVectorBar': '\\u2958',\n    'LeftVector': '\\u21BC',\n    'leftharpoonup': '\\u21BC',\n    'lharu': '\\u21BC',\n    'LeftVectorBar': '\\u2952',\n    'LessEqualGreater': '\\u22DA',\n    'leg': '\\u22DA',\n    'lesseqgtr': '\\u22DA',\n    'LessFullEqual': '\\u2266',\n    'lE': '\\u2266',\n    'leqq': '\\u2266',\n    'LessGreater': '\\u2276',\n    'lessgtr': '\\u2276',\n    'lg': '\\u2276',\n    'LessLess': '\\u2AA1',\n    'LessSlantEqual': '\\u2A7D',\n    'leqslant': '\\u2A7D',\n    'les': '\\u2A7D',\n    'LessTilde': '\\u2272',\n    'lesssim': '\\u2272',\n    'lsim': '\\u2272',\n    'Lfr': '\\uD835\\uDD0F',\n    'Ll': '\\u22D8',\n    'Lleftarrow': '\\u21DA',\n    'lAarr': '\\u21DA',\n    'Lmidot': '\\u013F',\n    'LongLeftArrow': '\\u27F5',\n    'longleftarrow': '\\u27F5',\n    'xlarr': '\\u27F5',\n    'LongLeftRightArrow': '\\u27F7',\n    'longleftrightarrow': '\\u27F7',\n    'xharr': '\\u27F7',\n    'LongRightArrow': '\\u27F6',\n    'longrightarrow': '\\u27F6',\n    'xrarr': '\\u27F6',\n    'Lopf': '\\uD835\\uDD43',\n    'LowerLeftArrow': '\\u2199',\n    'swarr': '\\u2199',\n    'swarrow': '\\u2199',\n    'LowerRightArrow': '\\u2198',\n    'searr': '\\u2198',\n    'searrow': '\\u2198',\n    'Lsh': '\\u21B0',\n    'lsh': '\\u21B0',\n    'Lstrok': '\\u0141',\n    'Lt': '\\u226A',\n    'NestedLessLess': '\\u226A',\n    'll': '\\u226A',\n    'Map': '\\u2905',\n    'Mcy': '\\u041C',\n    'MediumSpace': '\\u205F',\n    'Mellintrf': '\\u2133',\n    'Mscr': '\\u2133',\n    'phmmat': '\\u2133',\n    'Mfr': '\\uD835\\uDD10',\n    'MinusPlus': '\\u2213',\n    'mnplus': '\\u2213',\n    'mp': '\\u2213',\n    'Mopf': '\\uD835\\uDD44',\n    'Mu': '\\u039C',\n    'NJcy': '\\u040A',\n    'Nacute': '\\u0143',\n    'Ncaron': '\\u0147',\n    'Ncedil': '\\u0145',\n    'Ncy': '\\u041D',\n    'NegativeMediumSpace': '\\u200B',\n    'NegativeThickSpace': '\\u200B',\n    'NegativeThinSpace': '\\u200B',\n    'NegativeVeryThinSpace': '\\u200B',\n    'ZeroWidthSpace': '\\u200B',\n    'NewLine': '\\u000A',\n    'Nfr': '\\uD835\\uDD11',\n    'NoBreak': '\\u2060',\n    'NonBreakingSpace': '\\u00A0',\n    'nbsp': '\\u00A0',\n    'Nopf': '\\u2115',\n    'naturals': '\\u2115',\n    'Not': '\\u2AEC',\n    'NotCongruent': '\\u2262',\n    'nequiv': '\\u2262',\n    'NotCupCap': '\\u226D',\n    'NotDoubleVerticalBar': '\\u2226',\n    'npar': '\\u2226',\n    'nparallel': '\\u2226',\n    'nshortparallel': '\\u2226',\n    'nspar': '\\u2226',\n    'NotElement': '\\u2209',\n    'notin': '\\u2209',\n    'notinva': '\\u2209',\n    'NotEqual': '\\u2260',\n    'ne': '\\u2260',\n    'NotEqualTilde': '\\u2242\\u0338',\n    'nesim': '\\u2242\\u0338',\n    'NotExists': '\\u2204',\n    'nexist': '\\u2204',\n    'nexists': '\\u2204',\n    'NotGreater': '\\u226F',\n    'ngt': '\\u226F',\n    'ngtr': '\\u226F',\n    'NotGreaterEqual': '\\u2271',\n    'nge': '\\u2271',\n    'ngeq': '\\u2271',\n    'NotGreaterFullEqual': '\\u2267\\u0338',\n    'ngE': '\\u2267\\u0338',\n    'ngeqq': '\\u2267\\u0338',\n    'NotGreaterGreater': '\\u226B\\u0338',\n    'nGtv': '\\u226B\\u0338',\n    'NotGreaterLess': '\\u2279',\n    'ntgl': '\\u2279',\n    'NotGreaterSlantEqual': '\\u2A7E\\u0338',\n    'ngeqslant': '\\u2A7E\\u0338',\n    'nges': '\\u2A7E\\u0338',\n    'NotGreaterTilde': '\\u2275',\n    'ngsim': '\\u2275',\n    'NotHumpDownHump': '\\u224E\\u0338',\n    'nbump': '\\u224E\\u0338',\n    'NotHumpEqual': '\\u224F\\u0338',\n    'nbumpe': '\\u224F\\u0338',\n    'NotLeftTriangle': '\\u22EA',\n    'nltri': '\\u22EA',\n    'ntriangleleft': '\\u22EA',\n    'NotLeftTriangleBar': '\\u29CF\\u0338',\n    'NotLeftTriangleEqual': '\\u22EC',\n    'nltrie': '\\u22EC',\n    'ntrianglelefteq': '\\u22EC',\n    'NotLess': '\\u226E',\n    'nless': '\\u226E',\n    'nlt': '\\u226E',\n    'NotLessEqual': '\\u2270',\n    'nle': '\\u2270',\n    'nleq': '\\u2270',\n    'NotLessGreater': '\\u2278',\n    'ntlg': '\\u2278',\n    'NotLessLess': '\\u226A\\u0338',\n    'nLtv': '\\u226A\\u0338',\n    'NotLessSlantEqual': '\\u2A7D\\u0338',\n    'nleqslant': '\\u2A7D\\u0338',\n    'nles': '\\u2A7D\\u0338',\n    'NotLessTilde': '\\u2274',\n    'nlsim': '\\u2274',\n    'NotNestedGreaterGreater': '\\u2AA2\\u0338',\n    'NotNestedLessLess': '\\u2AA1\\u0338',\n    'NotPrecedes': '\\u2280',\n    'npr': '\\u2280',\n    'nprec': '\\u2280',\n    'NotPrecedesEqual': '\\u2AAF\\u0338',\n    'npre': '\\u2AAF\\u0338',\n    'npreceq': '\\u2AAF\\u0338',\n    'NotPrecedesSlantEqual': '\\u22E0',\n    'nprcue': '\\u22E0',\n    'NotReverseElement': '\\u220C',\n    'notni': '\\u220C',\n    'notniva': '\\u220C',\n    'NotRightTriangle': '\\u22EB',\n    'nrtri': '\\u22EB',\n    'ntriangleright': '\\u22EB',\n    'NotRightTriangleBar': '\\u29D0\\u0338',\n    'NotRightTriangleEqual': '\\u22ED',\n    'nrtrie': '\\u22ED',\n    'ntrianglerighteq': '\\u22ED',\n    'NotSquareSubset': '\\u228F\\u0338',\n    'NotSquareSubsetEqual': '\\u22E2',\n    'nsqsube': '\\u22E2',\n    'NotSquareSuperset': '\\u2290\\u0338',\n    'NotSquareSupersetEqual': '\\u22E3',\n    'nsqsupe': '\\u22E3',\n    'NotSubset': '\\u2282\\u20D2',\n    'nsubset': '\\u2282\\u20D2',\n    'vnsub': '\\u2282\\u20D2',\n    'NotSubsetEqual': '\\u2288',\n    'nsube': '\\u2288',\n    'nsubseteq': '\\u2288',\n    'NotSucceeds': '\\u2281',\n    'nsc': '\\u2281',\n    'nsucc': '\\u2281',\n    'NotSucceedsEqual': '\\u2AB0\\u0338',\n    'nsce': '\\u2AB0\\u0338',\n    'nsucceq': '\\u2AB0\\u0338',\n    'NotSucceedsSlantEqual': '\\u22E1',\n    'nsccue': '\\u22E1',\n    'NotSucceedsTilde': '\\u227F\\u0338',\n    'NotSuperset': '\\u2283\\u20D2',\n    'nsupset': '\\u2283\\u20D2',\n    'vnsup': '\\u2283\\u20D2',\n    'NotSupersetEqual': '\\u2289',\n    'nsupe': '\\u2289',\n    'nsupseteq': '\\u2289',\n    'NotTilde': '\\u2241',\n    'nsim': '\\u2241',\n    'NotTildeEqual': '\\u2244',\n    'nsime': '\\u2244',\n    'nsimeq': '\\u2244',\n    'NotTildeFullEqual': '\\u2247',\n    'ncong': '\\u2247',\n    'NotTildeTilde': '\\u2249',\n    'nap': '\\u2249',\n    'napprox': '\\u2249',\n    'NotVerticalBar': '\\u2224',\n    'nmid': '\\u2224',\n    'nshortmid': '\\u2224',\n    'nsmid': '\\u2224',\n    'Nscr': '\\uD835\\uDCA9',\n    'Ntilde': '\\u00D1',\n    'Nu': '\\u039D',\n    'OElig': '\\u0152',\n    'Oacute': '\\u00D3',\n    'Ocirc': '\\u00D4',\n    'Ocy': '\\u041E',\n    'Odblac': '\\u0150',\n    'Ofr': '\\uD835\\uDD12',\n    'Ograve': '\\u00D2',\n    'Omacr': '\\u014C',\n    'Omega': '\\u03A9',\n    'ohm': '\\u03A9',\n    'Omicron': '\\u039F',\n    'Oopf': '\\uD835\\uDD46',\n    'OpenCurlyDoubleQuote': '\\u201C',\n    'ldquo': '\\u201C',\n    'OpenCurlyQuote': '\\u2018',\n    'lsquo': '\\u2018',\n    'Or': '\\u2A54',\n    'Oscr': '\\uD835\\uDCAA',\n    'Oslash': '\\u00D8',\n    'Otilde': '\\u00D5',\n    'Otimes': '\\u2A37',\n    'Ouml': '\\u00D6',\n    'OverBar': '\\u203E',\n    'oline': '\\u203E',\n    'OverBrace': '\\u23DE',\n    'OverBracket': '\\u23B4',\n    'tbrk': '\\u23B4',\n    'OverParenthesis': '\\u23DC',\n    'PartialD': '\\u2202',\n    'part': '\\u2202',\n    'Pcy': '\\u041F',\n    'Pfr': '\\uD835\\uDD13',\n    'Phi': '\\u03A6',\n    'Pi': '\\u03A0',\n    'PlusMinus': '\\u00B1',\n    'plusmn': '\\u00B1',\n    'pm': '\\u00B1',\n    'Popf': '\\u2119',\n    'primes': '\\u2119',\n    'Pr': '\\u2ABB',\n    'Precedes': '\\u227A',\n    'pr': '\\u227A',\n    'prec': '\\u227A',\n    'PrecedesEqual': '\\u2AAF',\n    'pre': '\\u2AAF',\n    'preceq': '\\u2AAF',\n    'PrecedesSlantEqual': '\\u227C',\n    'prcue': '\\u227C',\n    'preccurlyeq': '\\u227C',\n    'PrecedesTilde': '\\u227E',\n    'precsim': '\\u227E',\n    'prsim': '\\u227E',\n    'Prime': '\\u2033',\n    'Product': '\\u220F',\n    'prod': '\\u220F',\n    'Proportional': '\\u221D',\n    'prop': '\\u221D',\n    'propto': '\\u221D',\n    'varpropto': '\\u221D',\n    'vprop': '\\u221D',\n    'Pscr': '\\uD835\\uDCAB',\n    'Psi': '\\u03A8',\n    'QUOT': '\\u0022',\n    'quot': '\\u0022',\n    'Qfr': '\\uD835\\uDD14',\n    'Qopf': '\\u211A',\n    'rationals': '\\u211A',\n    'Qscr': '\\uD835\\uDCAC',\n    'RBarr': '\\u2910',\n    'drbkarow': '\\u2910',\n    'REG': '\\u00AE',\n    'circledR': '\\u00AE',\n    'reg': '\\u00AE',\n    'Racute': '\\u0154',\n    'Rang': '\\u27EB',\n    'Rarr': '\\u21A0',\n    'twoheadrightarrow': '\\u21A0',\n    'Rarrtl': '\\u2916',\n    'Rcaron': '\\u0158',\n    'Rcedil': '\\u0156',\n    'Rcy': '\\u0420',\n    'Re': '\\u211C',\n    'Rfr': '\\u211C',\n    'real': '\\u211C',\n    'realpart': '\\u211C',\n    'ReverseElement': '\\u220B',\n    'SuchThat': '\\u220B',\n    'ni': '\\u220B',\n    'niv': '\\u220B',\n    'ReverseEquilibrium': '\\u21CB',\n    'leftrightharpoons': '\\u21CB',\n    'lrhar': '\\u21CB',\n    'ReverseUpEquilibrium': '\\u296F',\n    'duhar': '\\u296F',\n    'Rho': '\\u03A1',\n    'RightAngleBracket': '\\u27E9',\n    'rang': '\\u27E9',\n    'rangle': '\\u27E9',\n    'RightArrow': '\\u2192',\n    'ShortRightArrow': '\\u2192',\n    'rarr': '\\u2192',\n    'rightarrow': '\\u2192',\n    'srarr': '\\u2192',\n    'RightArrowBar': '\\u21E5',\n    'rarrb': '\\u21E5',\n    'RightArrowLeftArrow': '\\u21C4',\n    'rightleftarrows': '\\u21C4',\n    'rlarr': '\\u21C4',\n    'RightCeiling': '\\u2309',\n    'rceil': '\\u2309',\n    'RightDoubleBracket': '\\u27E7',\n    'robrk': '\\u27E7',\n    'RightDownTeeVector': '\\u295D',\n    'RightDownVector': '\\u21C2',\n    'dharr': '\\u21C2',\n    'downharpoonright': '\\u21C2',\n    'RightDownVectorBar': '\\u2955',\n    'RightFloor': '\\u230B',\n    'rfloor': '\\u230B',\n    'RightTee': '\\u22A2',\n    'vdash': '\\u22A2',\n    'RightTeeArrow': '\\u21A6',\n    'map': '\\u21A6',\n    'mapsto': '\\u21A6',\n    'RightTeeVector': '\\u295B',\n    'RightTriangle': '\\u22B3',\n    'vartriangleright': '\\u22B3',\n    'vrtri': '\\u22B3',\n    'RightTriangleBar': '\\u29D0',\n    'RightTriangleEqual': '\\u22B5',\n    'rtrie': '\\u22B5',\n    'trianglerighteq': '\\u22B5',\n    'RightUpDownVector': '\\u294F',\n    'RightUpTeeVector': '\\u295C',\n    'RightUpVector': '\\u21BE',\n    'uharr': '\\u21BE',\n    'upharpoonright': '\\u21BE',\n    'RightUpVectorBar': '\\u2954',\n    'RightVector': '\\u21C0',\n    'rharu': '\\u21C0',\n    'rightharpoonup': '\\u21C0',\n    'RightVectorBar': '\\u2953',\n    'Ropf': '\\u211D',\n    'reals': '\\u211D',\n    'RoundImplies': '\\u2970',\n    'Rrightarrow': '\\u21DB',\n    'rAarr': '\\u21DB',\n    'Rscr': '\\u211B',\n    'realine': '\\u211B',\n    'Rsh': '\\u21B1',\n    'rsh': '\\u21B1',\n    'RuleDelayed': '\\u29F4',\n    'SHCHcy': '\\u0429',\n    'SHcy': '\\u0428',\n    'SOFTcy': '\\u042C',\n    'Sacute': '\\u015A',\n    'Sc': '\\u2ABC',\n    'Scaron': '\\u0160',\n    'Scedil': '\\u015E',\n    'Scirc': '\\u015C',\n    'Scy': '\\u0421',\n    'Sfr': '\\uD835\\uDD16',\n    'ShortUpArrow': '\\u2191',\n    'UpArrow': '\\u2191',\n    'uarr': '\\u2191',\n    'uparrow': '\\u2191',\n    'Sigma': '\\u03A3',\n    'SmallCircle': '\\u2218',\n    'compfn': '\\u2218',\n    'Sopf': '\\uD835\\uDD4A',\n    'Sqrt': '\\u221A',\n    'radic': '\\u221A',\n    'Square': '\\u25A1',\n    'squ': '\\u25A1',\n    'square': '\\u25A1',\n    'SquareIntersection': '\\u2293',\n    'sqcap': '\\u2293',\n    'SquareSubset': '\\u228F',\n    'sqsub': '\\u228F',\n    'sqsubset': '\\u228F',\n    'SquareSubsetEqual': '\\u2291',\n    'sqsube': '\\u2291',\n    'sqsubseteq': '\\u2291',\n    'SquareSuperset': '\\u2290',\n    'sqsup': '\\u2290',\n    'sqsupset': '\\u2290',\n    'SquareSupersetEqual': '\\u2292',\n    'sqsupe': '\\u2292',\n    'sqsupseteq': '\\u2292',\n    'SquareUnion': '\\u2294',\n    'sqcup': '\\u2294',\n    'Sscr': '\\uD835\\uDCAE',\n    'Star': '\\u22C6',\n    'sstarf': '\\u22C6',\n    'Sub': '\\u22D0',\n    'Subset': '\\u22D0',\n    'SubsetEqual': '\\u2286',\n    'sube': '\\u2286',\n    'subseteq': '\\u2286',\n    'Succeeds': '\\u227B',\n    'sc': '\\u227B',\n    'succ': '\\u227B',\n    'SucceedsEqual': '\\u2AB0',\n    'sce': '\\u2AB0',\n    'succeq': '\\u2AB0',\n    'SucceedsSlantEqual': '\\u227D',\n    'sccue': '\\u227D',\n    'succcurlyeq': '\\u227D',\n    'SucceedsTilde': '\\u227F',\n    'scsim': '\\u227F',\n    'succsim': '\\u227F',\n    'Sum': '\\u2211',\n    'sum': '\\u2211',\n    'Sup': '\\u22D1',\n    'Supset': '\\u22D1',\n    'Superset': '\\u2283',\n    'sup': '\\u2283',\n    'supset': '\\u2283',\n    'SupersetEqual': '\\u2287',\n    'supe': '\\u2287',\n    'supseteq': '\\u2287',\n    'THORN': '\\u00DE',\n    'TRADE': '\\u2122',\n    'trade': '\\u2122',\n    'TSHcy': '\\u040B',\n    'TScy': '\\u0426',\n    'Tab': '\\u0009',\n    'Tau': '\\u03A4',\n    'Tcaron': '\\u0164',\n    'Tcedil': '\\u0162',\n    'Tcy': '\\u0422',\n    'Tfr': '\\uD835\\uDD17',\n    'Therefore': '\\u2234',\n    'there4': '\\u2234',\n    'therefore': '\\u2234',\n    'Theta': '\\u0398',\n    'ThickSpace': '\\u205F\\u200A',\n    'ThinSpace': '\\u2009',\n    'thinsp': '\\u2009',\n    'Tilde': '\\u223C',\n    'sim': '\\u223C',\n    'thicksim': '\\u223C',\n    'thksim': '\\u223C',\n    'TildeEqual': '\\u2243',\n    'sime': '\\u2243',\n    'simeq': '\\u2243',\n    'TildeFullEqual': '\\u2245',\n    'cong': '\\u2245',\n    'TildeTilde': '\\u2248',\n    'ap': '\\u2248',\n    'approx': '\\u2248',\n    'asymp': '\\u2248',\n    'thickapprox': '\\u2248',\n    'thkap': '\\u2248',\n    'Topf': '\\uD835\\uDD4B',\n    'TripleDot': '\\u20DB',\n    'tdot': '\\u20DB',\n    'Tscr': '\\uD835\\uDCAF',\n    'Tstrok': '\\u0166',\n    'Uacute': '\\u00DA',\n    'Uarr': '\\u219F',\n    'Uarrocir': '\\u2949',\n    'Ubrcy': '\\u040E',\n    'Ubreve': '\\u016C',\n    'Ucirc': '\\u00DB',\n    'Ucy': '\\u0423',\n    'Udblac': '\\u0170',\n    'Ufr': '\\uD835\\uDD18',\n    'Ugrave': '\\u00D9',\n    'Umacr': '\\u016A',\n    'UnderBar': '\\u005F',\n    'lowbar': '\\u005F',\n    'UnderBrace': '\\u23DF',\n    'UnderBracket': '\\u23B5',\n    'bbrk': '\\u23B5',\n    'UnderParenthesis': '\\u23DD',\n    'Union': '\\u22C3',\n    'bigcup': '\\u22C3',\n    'xcup': '\\u22C3',\n    'UnionPlus': '\\u228E',\n    'uplus': '\\u228E',\n    'Uogon': '\\u0172',\n    'Uopf': '\\uD835\\uDD4C',\n    'UpArrowBar': '\\u2912',\n    'UpArrowDownArrow': '\\u21C5',\n    'udarr': '\\u21C5',\n    'UpDownArrow': '\\u2195',\n    'updownarrow': '\\u2195',\n    'varr': '\\u2195',\n    'UpEquilibrium': '\\u296E',\n    'udhar': '\\u296E',\n    'UpTee': '\\u22A5',\n    'bot': '\\u22A5',\n    'bottom': '\\u22A5',\n    'perp': '\\u22A5',\n    'UpTeeArrow': '\\u21A5',\n    'mapstoup': '\\u21A5',\n    'UpperLeftArrow': '\\u2196',\n    'nwarr': '\\u2196',\n    'nwarrow': '\\u2196',\n    'UpperRightArrow': '\\u2197',\n    'nearr': '\\u2197',\n    'nearrow': '\\u2197',\n    'Upsi': '\\u03D2',\n    'upsih': '\\u03D2',\n    'Upsilon': '\\u03A5',\n    'Uring': '\\u016E',\n    'Uscr': '\\uD835\\uDCB0',\n    'Utilde': '\\u0168',\n    'Uuml': '\\u00DC',\n    'VDash': '\\u22AB',\n    'Vbar': '\\u2AEB',\n    'Vcy': '\\u0412',\n    'Vdash': '\\u22A9',\n    'Vdashl': '\\u2AE6',\n    'Vee': '\\u22C1',\n    'bigvee': '\\u22C1',\n    'xvee': '\\u22C1',\n    'Verbar': '\\u2016',\n    'Vert': '\\u2016',\n    'VerticalBar': '\\u2223',\n    'mid': '\\u2223',\n    'shortmid': '\\u2223',\n    'smid': '\\u2223',\n    'VerticalLine': '\\u007C',\n    'verbar': '\\u007C',\n    'vert': '\\u007C',\n    'VerticalSeparator': '\\u2758',\n    'VerticalTilde': '\\u2240',\n    'wr': '\\u2240',\n    'wreath': '\\u2240',\n    'VeryThinSpace': '\\u200A',\n    'hairsp': '\\u200A',\n    'Vfr': '\\uD835\\uDD19',\n    'Vopf': '\\uD835\\uDD4D',\n    'Vscr': '\\uD835\\uDCB1',\n    'Vvdash': '\\u22AA',\n    'Wcirc': '\\u0174',\n    'Wedge': '\\u22C0',\n    'bigwedge': '\\u22C0',\n    'xwedge': '\\u22C0',\n    'Wfr': '\\uD835\\uDD1A',\n    'Wopf': '\\uD835\\uDD4E',\n    'Wscr': '\\uD835\\uDCB2',\n    'Xfr': '\\uD835\\uDD1B',\n    'Xi': '\\u039E',\n    'Xopf': '\\uD835\\uDD4F',\n    'Xscr': '\\uD835\\uDCB3',\n    'YAcy': '\\u042F',\n    'YIcy': '\\u0407',\n    'YUcy': '\\u042E',\n    'Yacute': '\\u00DD',\n    'Ycirc': '\\u0176',\n    'Ycy': '\\u042B',\n    'Yfr': '\\uD835\\uDD1C',\n    'Yopf': '\\uD835\\uDD50',\n    'Yscr': '\\uD835\\uDCB4',\n    'Yuml': '\\u0178',\n    'ZHcy': '\\u0416',\n    'Zacute': '\\u0179',\n    'Zcaron': '\\u017D',\n    'Zcy': '\\u0417',\n    'Zdot': '\\u017B',\n    'Zeta': '\\u0396',\n    'Zfr': '\\u2128',\n    'zeetrf': '\\u2128',\n    'Zopf': '\\u2124',\n    'integers': '\\u2124',\n    'Zscr': '\\uD835\\uDCB5',\n    'aacute': '\\u00E1',\n    'abreve': '\\u0103',\n    'ac': '\\u223E',\n    'mstpos': '\\u223E',\n    'acE': '\\u223E\\u0333',\n    'acd': '\\u223F',\n    'acirc': '\\u00E2',\n    'acy': '\\u0430',\n    'aelig': '\\u00E6',\n    'afr': '\\uD835\\uDD1E',\n    'agrave': '\\u00E0',\n    'alefsym': '\\u2135',\n    'aleph': '\\u2135',\n    'alpha': '\\u03B1',\n    'amacr': '\\u0101',\n    'amalg': '\\u2A3F',\n    'and': '\\u2227',\n    'wedge': '\\u2227',\n    'andand': '\\u2A55',\n    'andd': '\\u2A5C',\n    'andslope': '\\u2A58',\n    'andv': '\\u2A5A',\n    'ang': '\\u2220',\n    'angle': '\\u2220',\n    'ange': '\\u29A4',\n    'angmsd': '\\u2221',\n    'measuredangle': '\\u2221',\n    'angmsdaa': '\\u29A8',\n    'angmsdab': '\\u29A9',\n    'angmsdac': '\\u29AA',\n    'angmsdad': '\\u29AB',\n    'angmsdae': '\\u29AC',\n    'angmsdaf': '\\u29AD',\n    'angmsdag': '\\u29AE',\n    'angmsdah': '\\u29AF',\n    'angrt': '\\u221F',\n    'angrtvb': '\\u22BE',\n    'angrtvbd': '\\u299D',\n    'angsph': '\\u2222',\n    'angzarr': '\\u237C',\n    'aogon': '\\u0105',\n    'aopf': '\\uD835\\uDD52',\n    'apE': '\\u2A70',\n    'apacir': '\\u2A6F',\n    'ape': '\\u224A',\n    'approxeq': '\\u224A',\n    'apid': '\\u224B',\n    'apos': '\\u0027',\n    'aring': '\\u00E5',\n    'ascr': '\\uD835\\uDCB6',\n    'ast': '\\u002A',\n    'midast': '\\u002A',\n    'atilde': '\\u00E3',\n    'auml': '\\u00E4',\n    'awint': '\\u2A11',\n    'bNot': '\\u2AED',\n    'backcong': '\\u224C',\n    'bcong': '\\u224C',\n    'backepsilon': '\\u03F6',\n    'bepsi': '\\u03F6',\n    'backprime': '\\u2035',\n    'bprime': '\\u2035',\n    'backsim': '\\u223D',\n    'bsim': '\\u223D',\n    'backsimeq': '\\u22CD',\n    'bsime': '\\u22CD',\n    'barvee': '\\u22BD',\n    'barwed': '\\u2305',\n    'barwedge': '\\u2305',\n    'bbrktbrk': '\\u23B6',\n    'bcy': '\\u0431',\n    'bdquo': '\\u201E',\n    'ldquor': '\\u201E',\n    'bemptyv': '\\u29B0',\n    'beta': '\\u03B2',\n    'beth': '\\u2136',\n    'between': '\\u226C',\n    'twixt': '\\u226C',\n    'bfr': '\\uD835\\uDD1F',\n    'bigcirc': '\\u25EF',\n    'xcirc': '\\u25EF',\n    'bigodot': '\\u2A00',\n    'xodot': '\\u2A00',\n    'bigoplus': '\\u2A01',\n    'xoplus': '\\u2A01',\n    'bigotimes': '\\u2A02',\n    'xotime': '\\u2A02',\n    'bigsqcup': '\\u2A06',\n    'xsqcup': '\\u2A06',\n    'bigstar': '\\u2605',\n    'starf': '\\u2605',\n    'bigtriangledown': '\\u25BD',\n    'xdtri': '\\u25BD',\n    'bigtriangleup': '\\u25B3',\n    'xutri': '\\u25B3',\n    'biguplus': '\\u2A04',\n    'xuplus': '\\u2A04',\n    'bkarow': '\\u290D',\n    'rbarr': '\\u290D',\n    'blacklozenge': '\\u29EB',\n    'lozf': '\\u29EB',\n    'blacktriangle': '\\u25B4',\n    'utrif': '\\u25B4',\n    'blacktriangledown': '\\u25BE',\n    'dtrif': '\\u25BE',\n    'blacktriangleleft': '\\u25C2',\n    'ltrif': '\\u25C2',\n    'blacktriangleright': '\\u25B8',\n    'rtrif': '\\u25B8',\n    'blank': '\\u2423',\n    'blk12': '\\u2592',\n    'blk14': '\\u2591',\n    'blk34': '\\u2593',\n    'block': '\\u2588',\n    'bne': '\\u003D\\u20E5',\n    'bnequiv': '\\u2261\\u20E5',\n    'bnot': '\\u2310',\n    'bopf': '\\uD835\\uDD53',\n    'bowtie': '\\u22C8',\n    'boxDL': '\\u2557',\n    'boxDR': '\\u2554',\n    'boxDl': '\\u2556',\n    'boxDr': '\\u2553',\n    'boxH': '\\u2550',\n    'boxHD': '\\u2566',\n    'boxHU': '\\u2569',\n    'boxHd': '\\u2564',\n    'boxHu': '\\u2567',\n    'boxUL': '\\u255D',\n    'boxUR': '\\u255A',\n    'boxUl': '\\u255C',\n    'boxUr': '\\u2559',\n    'boxV': '\\u2551',\n    'boxVH': '\\u256C',\n    'boxVL': '\\u2563',\n    'boxVR': '\\u2560',\n    'boxVh': '\\u256B',\n    'boxVl': '\\u2562',\n    'boxVr': '\\u255F',\n    'boxbox': '\\u29C9',\n    'boxdL': '\\u2555',\n    'boxdR': '\\u2552',\n    'boxdl': '\\u2510',\n    'boxdr': '\\u250C',\n    'boxhD': '\\u2565',\n    'boxhU': '\\u2568',\n    'boxhd': '\\u252C',\n    'boxhu': '\\u2534',\n    'boxminus': '\\u229F',\n    'minusb': '\\u229F',\n    'boxplus': '\\u229E',\n    'plusb': '\\u229E',\n    'boxtimes': '\\u22A0',\n    'timesb': '\\u22A0',\n    'boxuL': '\\u255B',\n    'boxuR': '\\u2558',\n    'boxul': '\\u2518',\n    'boxur': '\\u2514',\n    'boxv': '\\u2502',\n    'boxvH': '\\u256A',\n    'boxvL': '\\u2561',\n    'boxvR': '\\u255E',\n    'boxvh': '\\u253C',\n    'boxvl': '\\u2524',\n    'boxvr': '\\u251C',\n    'brvbar': '\\u00A6',\n    'bscr': '\\uD835\\uDCB7',\n    'bsemi': '\\u204F',\n    'bsol': '\\u005C',\n    'bsolb': '\\u29C5',\n    'bsolhsub': '\\u27C8',\n    'bull': '\\u2022',\n    'bullet': '\\u2022',\n    'bumpE': '\\u2AAE',\n    'cacute': '\\u0107',\n    'cap': '\\u2229',\n    'capand': '\\u2A44',\n    'capbrcup': '\\u2A49',\n    'capcap': '\\u2A4B',\n    'capcup': '\\u2A47',\n    'capdot': '\\u2A40',\n    'caps': '\\u2229\\uFE00',\n    'caret': '\\u2041',\n    'ccaps': '\\u2A4D',\n    'ccaron': '\\u010D',\n    'ccedil': '\\u00E7',\n    'ccirc': '\\u0109',\n    'ccups': '\\u2A4C',\n    'ccupssm': '\\u2A50',\n    'cdot': '\\u010B',\n    'cemptyv': '\\u29B2',\n    'cent': '\\u00A2',\n    'cfr': '\\uD835\\uDD20',\n    'chcy': '\\u0447',\n    'check': '\\u2713',\n    'checkmark': '\\u2713',\n    'chi': '\\u03C7',\n    'cir': '\\u25CB',\n    'cirE': '\\u29C3',\n    'circ': '\\u02C6',\n    'circeq': '\\u2257',\n    'cire': '\\u2257',\n    'circlearrowleft': '\\u21BA',\n    'olarr': '\\u21BA',\n    'circlearrowright': '\\u21BB',\n    'orarr': '\\u21BB',\n    'circledS': '\\u24C8',\n    'oS': '\\u24C8',\n    'circledast': '\\u229B',\n    'oast': '\\u229B',\n    'circledcirc': '\\u229A',\n    'ocir': '\\u229A',\n    'circleddash': '\\u229D',\n    'odash': '\\u229D',\n    'cirfnint': '\\u2A10',\n    'cirmid': '\\u2AEF',\n    'cirscir': '\\u29C2',\n    'clubs': '\\u2663',\n    'clubsuit': '\\u2663',\n    'colon': '\\u003A',\n    'comma': '\\u002C',\n    'commat': '\\u0040',\n    'comp': '\\u2201',\n    'complement': '\\u2201',\n    'congdot': '\\u2A6D',\n    'copf': '\\uD835\\uDD54',\n    'copysr': '\\u2117',\n    'crarr': '\\u21B5',\n    'cross': '\\u2717',\n    'cscr': '\\uD835\\uDCB8',\n    'csub': '\\u2ACF',\n    'csube': '\\u2AD1',\n    'csup': '\\u2AD0',\n    'csupe': '\\u2AD2',\n    'ctdot': '\\u22EF',\n    'cudarrl': '\\u2938',\n    'cudarrr': '\\u2935',\n    'cuepr': '\\u22DE',\n    'curlyeqprec': '\\u22DE',\n    'cuesc': '\\u22DF',\n    'curlyeqsucc': '\\u22DF',\n    'cularr': '\\u21B6',\n    'curvearrowleft': '\\u21B6',\n    'cularrp': '\\u293D',\n    'cup': '\\u222A',\n    'cupbrcap': '\\u2A48',\n    'cupcap': '\\u2A46',\n    'cupcup': '\\u2A4A',\n    'cupdot': '\\u228D',\n    'cupor': '\\u2A45',\n    'cups': '\\u222A\\uFE00',\n    'curarr': '\\u21B7',\n    'curvearrowright': '\\u21B7',\n    'curarrm': '\\u293C',\n    'curlyvee': '\\u22CE',\n    'cuvee': '\\u22CE',\n    'curlywedge': '\\u22CF',\n    'cuwed': '\\u22CF',\n    'curren': '\\u00A4',\n    'cwint': '\\u2231',\n    'cylcty': '\\u232D',\n    'dHar': '\\u2965',\n    'dagger': '\\u2020',\n    'daleth': '\\u2138',\n    'dash': '\\u2010',\n    'hyphen': '\\u2010',\n    'dbkarow': '\\u290F',\n    'rBarr': '\\u290F',\n    'dcaron': '\\u010F',\n    'dcy': '\\u0434',\n    'ddarr': '\\u21CA',\n    'downdownarrows': '\\u21CA',\n    'ddotseq': '\\u2A77',\n    'eDDot': '\\u2A77',\n    'deg': '\\u00B0',\n    'delta': '\\u03B4',\n    'demptyv': '\\u29B1',\n    'dfisht': '\\u297F',\n    'dfr': '\\uD835\\uDD21',\n    'diamondsuit': '\\u2666',\n    'diams': '\\u2666',\n    'digamma': '\\u03DD',\n    'gammad': '\\u03DD',\n    'disin': '\\u22F2',\n    'div': '\\u00F7',\n    'divide': '\\u00F7',\n    'divideontimes': '\\u22C7',\n    'divonx': '\\u22C7',\n    'djcy': '\\u0452',\n    'dlcorn': '\\u231E',\n    'llcorner': '\\u231E',\n    'dlcrop': '\\u230D',\n    'dollar': '\\u0024',\n    'dopf': '\\uD835\\uDD55',\n    'doteqdot': '\\u2251',\n    'eDot': '\\u2251',\n    'dotminus': '\\u2238',\n    'minusd': '\\u2238',\n    'dotplus': '\\u2214',\n    'plusdo': '\\u2214',\n    'dotsquare': '\\u22A1',\n    'sdotb': '\\u22A1',\n    'drcorn': '\\u231F',\n    'lrcorner': '\\u231F',\n    'drcrop': '\\u230C',\n    'dscr': '\\uD835\\uDCB9',\n    'dscy': '\\u0455',\n    'dsol': '\\u29F6',\n    'dstrok': '\\u0111',\n    'dtdot': '\\u22F1',\n    'dtri': '\\u25BF',\n    'triangledown': '\\u25BF',\n    'dwangle': '\\u29A6',\n    'dzcy': '\\u045F',\n    'dzigrarr': '\\u27FF',\n    'eacute': '\\u00E9',\n    'easter': '\\u2A6E',\n    'ecaron': '\\u011B',\n    'ecir': '\\u2256',\n    'eqcirc': '\\u2256',\n    'ecirc': '\\u00EA',\n    'ecolon': '\\u2255',\n    'eqcolon': '\\u2255',\n    'ecy': '\\u044D',\n    'edot': '\\u0117',\n    'efDot': '\\u2252',\n    'fallingdotseq': '\\u2252',\n    'efr': '\\uD835\\uDD22',\n    'eg': '\\u2A9A',\n    'egrave': '\\u00E8',\n    'egs': '\\u2A96',\n    'eqslantgtr': '\\u2A96',\n    'egsdot': '\\u2A98',\n    'el': '\\u2A99',\n    'elinters': '\\u23E7',\n    'ell': '\\u2113',\n    'els': '\\u2A95',\n    'eqslantless': '\\u2A95',\n    'elsdot': '\\u2A97',\n    'emacr': '\\u0113',\n    'empty': '\\u2205',\n    'emptyset': '\\u2205',\n    'emptyv': '\\u2205',\n    'varnothing': '\\u2205',\n    'emsp13': '\\u2004',\n    'emsp14': '\\u2005',\n    'emsp': '\\u2003',\n    'eng': '\\u014B',\n    'ensp': '\\u2002',\n    'eogon': '\\u0119',\n    'eopf': '\\uD835\\uDD56',\n    'epar': '\\u22D5',\n    'eparsl': '\\u29E3',\n    'eplus': '\\u2A71',\n    'epsi': '\\u03B5',\n    'epsilon': '\\u03B5',\n    'epsiv': '\\u03F5',\n    'straightepsilon': '\\u03F5',\n    'varepsilon': '\\u03F5',\n    'equals': '\\u003D',\n    'equest': '\\u225F',\n    'questeq': '\\u225F',\n    'equivDD': '\\u2A78',\n    'eqvparsl': '\\u29E5',\n    'erDot': '\\u2253',\n    'risingdotseq': '\\u2253',\n    'erarr': '\\u2971',\n    'escr': '\\u212F',\n    'eta': '\\u03B7',\n    'eth': '\\u00F0',\n    'euml': '\\u00EB',\n    'euro': '\\u20AC',\n    'excl': '\\u0021',\n    'fcy': '\\u0444',\n    'female': '\\u2640',\n    'ffilig': '\\uFB03',\n    'fflig': '\\uFB00',\n    'ffllig': '\\uFB04',\n    'ffr': '\\uD835\\uDD23',\n    'filig': '\\uFB01',\n    'fjlig': '\\u0066\\u006A',\n    'flat': '\\u266D',\n    'fllig': '\\uFB02',\n    'fltns': '\\u25B1',\n    'fnof': '\\u0192',\n    'fopf': '\\uD835\\uDD57',\n    'fork': '\\u22D4',\n    'pitchfork': '\\u22D4',\n    'forkv': '\\u2AD9',\n    'fpartint': '\\u2A0D',\n    'frac12': '\\u00BD',\n    'half': '\\u00BD',\n    'frac13': '\\u2153',\n    'frac14': '\\u00BC',\n    'frac15': '\\u2155',\n    'frac16': '\\u2159',\n    'frac18': '\\u215B',\n    'frac23': '\\u2154',\n    'frac25': '\\u2156',\n    'frac34': '\\u00BE',\n    'frac35': '\\u2157',\n    'frac38': '\\u215C',\n    'frac45': '\\u2158',\n    'frac56': '\\u215A',\n    'frac58': '\\u215D',\n    'frac78': '\\u215E',\n    'frasl': '\\u2044',\n    'frown': '\\u2322',\n    'sfrown': '\\u2322',\n    'fscr': '\\uD835\\uDCBB',\n    'gEl': '\\u2A8C',\n    'gtreqqless': '\\u2A8C',\n    'gacute': '\\u01F5',\n    'gamma': '\\u03B3',\n    'gap': '\\u2A86',\n    'gtrapprox': '\\u2A86',\n    'gbreve': '\\u011F',\n    'gcirc': '\\u011D',\n    'gcy': '\\u0433',\n    'gdot': '\\u0121',\n    'gescc': '\\u2AA9',\n    'gesdot': '\\u2A80',\n    'gesdoto': '\\u2A82',\n    'gesdotol': '\\u2A84',\n    'gesl': '\\u22DB\\uFE00',\n    'gesles': '\\u2A94',\n    'gfr': '\\uD835\\uDD24',\n    'gimel': '\\u2137',\n    'gjcy': '\\u0453',\n    'glE': '\\u2A92',\n    'gla': '\\u2AA5',\n    'glj': '\\u2AA4',\n    'gnE': '\\u2269',\n    'gneqq': '\\u2269',\n    'gnap': '\\u2A8A',\n    'gnapprox': '\\u2A8A',\n    'gne': '\\u2A88',\n    'gneq': '\\u2A88',\n    'gnsim': '\\u22E7',\n    'gopf': '\\uD835\\uDD58',\n    'gscr': '\\u210A',\n    'gsime': '\\u2A8E',\n    'gsiml': '\\u2A90',\n    'gtcc': '\\u2AA7',\n    'gtcir': '\\u2A7A',\n    'gtdot': '\\u22D7',\n    'gtrdot': '\\u22D7',\n    'gtlPar': '\\u2995',\n    'gtquest': '\\u2A7C',\n    'gtrarr': '\\u2978',\n    'gvertneqq': '\\u2269\\uFE00',\n    'gvnE': '\\u2269\\uFE00',\n    'hardcy': '\\u044A',\n    'harrcir': '\\u2948',\n    'harrw': '\\u21AD',\n    'leftrightsquigarrow': '\\u21AD',\n    'hbar': '\\u210F',\n    'hslash': '\\u210F',\n    'planck': '\\u210F',\n    'plankv': '\\u210F',\n    'hcirc': '\\u0125',\n    'hearts': '\\u2665',\n    'heartsuit': '\\u2665',\n    'hellip': '\\u2026',\n    'mldr': '\\u2026',\n    'hercon': '\\u22B9',\n    'hfr': '\\uD835\\uDD25',\n    'hksearow': '\\u2925',\n    'searhk': '\\u2925',\n    'hkswarow': '\\u2926',\n    'swarhk': '\\u2926',\n    'hoarr': '\\u21FF',\n    'homtht': '\\u223B',\n    'hookleftarrow': '\\u21A9',\n    'larrhk': '\\u21A9',\n    'hookrightarrow': '\\u21AA',\n    'rarrhk': '\\u21AA',\n    'hopf': '\\uD835\\uDD59',\n    'horbar': '\\u2015',\n    'hscr': '\\uD835\\uDCBD',\n    'hstrok': '\\u0127',\n    'hybull': '\\u2043',\n    'iacute': '\\u00ED',\n    'icirc': '\\u00EE',\n    'icy': '\\u0438',\n    'iecy': '\\u0435',\n    'iexcl': '\\u00A1',\n    'ifr': '\\uD835\\uDD26',\n    'igrave': '\\u00EC',\n    'iiiint': '\\u2A0C',\n    'qint': '\\u2A0C',\n    'iiint': '\\u222D',\n    'tint': '\\u222D',\n    'iinfin': '\\u29DC',\n    'iiota': '\\u2129',\n    'ijlig': '\\u0133',\n    'imacr': '\\u012B',\n    'imath': '\\u0131',\n    'inodot': '\\u0131',\n    'imof': '\\u22B7',\n    'imped': '\\u01B5',\n    'incare': '\\u2105',\n    'infin': '\\u221E',\n    'infintie': '\\u29DD',\n    'intcal': '\\u22BA',\n    'intercal': '\\u22BA',\n    'intlarhk': '\\u2A17',\n    'intprod': '\\u2A3C',\n    'iprod': '\\u2A3C',\n    'iocy': '\\u0451',\n    'iogon': '\\u012F',\n    'iopf': '\\uD835\\uDD5A',\n    'iota': '\\u03B9',\n    'iquest': '\\u00BF',\n    'iscr': '\\uD835\\uDCBE',\n    'isinE': '\\u22F9',\n    'isindot': '\\u22F5',\n    'isins': '\\u22F4',\n    'isinsv': '\\u22F3',\n    'itilde': '\\u0129',\n    'iukcy': '\\u0456',\n    'iuml': '\\u00EF',\n    'jcirc': '\\u0135',\n    'jcy': '\\u0439',\n    'jfr': '\\uD835\\uDD27',\n    'jmath': '\\u0237',\n    'jopf': '\\uD835\\uDD5B',\n    'jscr': '\\uD835\\uDCBF',\n    'jsercy': '\\u0458',\n    'jukcy': '\\u0454',\n    'kappa': '\\u03BA',\n    'kappav': '\\u03F0',\n    'varkappa': '\\u03F0',\n    'kcedil': '\\u0137',\n    'kcy': '\\u043A',\n    'kfr': '\\uD835\\uDD28',\n    'kgreen': '\\u0138',\n    'khcy': '\\u0445',\n    'kjcy': '\\u045C',\n    'kopf': '\\uD835\\uDD5C',\n    'kscr': '\\uD835\\uDCC0',\n    'lAtail': '\\u291B',\n    'lBarr': '\\u290E',\n    'lEg': '\\u2A8B',\n    'lesseqqgtr': '\\u2A8B',\n    'lHar': '\\u2962',\n    'lacute': '\\u013A',\n    'laemptyv': '\\u29B4',\n    'lambda': '\\u03BB',\n    'langd': '\\u2991',\n    'lap': '\\u2A85',\n    'lessapprox': '\\u2A85',\n    'laquo': '\\u00AB',\n    'larrbfs': '\\u291F',\n    'larrfs': '\\u291D',\n    'larrlp': '\\u21AB',\n    'looparrowleft': '\\u21AB',\n    'larrpl': '\\u2939',\n    'larrsim': '\\u2973',\n    'larrtl': '\\u21A2',\n    'leftarrowtail': '\\u21A2',\n    'lat': '\\u2AAB',\n    'latail': '\\u2919',\n    'late': '\\u2AAD',\n    'lates': '\\u2AAD\\uFE00',\n    'lbarr': '\\u290C',\n    'lbbrk': '\\u2772',\n    'lbrace': '\\u007B',\n    'lcub': '\\u007B',\n    'lbrack': '\\u005B',\n    'lsqb': '\\u005B',\n    'lbrke': '\\u298B',\n    'lbrksld': '\\u298F',\n    'lbrkslu': '\\u298D',\n    'lcaron': '\\u013E',\n    'lcedil': '\\u013C',\n    'lcy': '\\u043B',\n    'ldca': '\\u2936',\n    'ldrdhar': '\\u2967',\n    'ldrushar': '\\u294B',\n    'ldsh': '\\u21B2',\n    'le': '\\u2264',\n    'leq': '\\u2264',\n    'leftleftarrows': '\\u21C7',\n    'llarr': '\\u21C7',\n    'leftthreetimes': '\\u22CB',\n    'lthree': '\\u22CB',\n    'lescc': '\\u2AA8',\n    'lesdot': '\\u2A7F',\n    'lesdoto': '\\u2A81',\n    'lesdotor': '\\u2A83',\n    'lesg': '\\u22DA\\uFE00',\n    'lesges': '\\u2A93',\n    'lessdot': '\\u22D6',\n    'ltdot': '\\u22D6',\n    'lfisht': '\\u297C',\n    'lfr': '\\uD835\\uDD29',\n    'lgE': '\\u2A91',\n    'lharul': '\\u296A',\n    'lhblk': '\\u2584',\n    'ljcy': '\\u0459',\n    'llhard': '\\u296B',\n    'lltri': '\\u25FA',\n    'lmidot': '\\u0140',\n    'lmoust': '\\u23B0',\n    'lmoustache': '\\u23B0',\n    'lnE': '\\u2268',\n    'lneqq': '\\u2268',\n    'lnap': '\\u2A89',\n    'lnapprox': '\\u2A89',\n    'lne': '\\u2A87',\n    'lneq': '\\u2A87',\n    'lnsim': '\\u22E6',\n    'loang': '\\u27EC',\n    'loarr': '\\u21FD',\n    'longmapsto': '\\u27FC',\n    'xmap': '\\u27FC',\n    'looparrowright': '\\u21AC',\n    'rarrlp': '\\u21AC',\n    'lopar': '\\u2985',\n    'lopf': '\\uD835\\uDD5D',\n    'loplus': '\\u2A2D',\n    'lotimes': '\\u2A34',\n    'lowast': '\\u2217',\n    'loz': '\\u25CA',\n    'lozenge': '\\u25CA',\n    'lpar': '\\u0028',\n    'lparlt': '\\u2993',\n    'lrhard': '\\u296D',\n    'lrm': '\\u200E',\n    'lrtri': '\\u22BF',\n    'lsaquo': '\\u2039',\n    'lscr': '\\uD835\\uDCC1',\n    'lsime': '\\u2A8D',\n    'lsimg': '\\u2A8F',\n    'lsquor': '\\u201A',\n    'sbquo': '\\u201A',\n    'lstrok': '\\u0142',\n    'ltcc': '\\u2AA6',\n    'ltcir': '\\u2A79',\n    'ltimes': '\\u22C9',\n    'ltlarr': '\\u2976',\n    'ltquest': '\\u2A7B',\n    'ltrPar': '\\u2996',\n    'ltri': '\\u25C3',\n    'triangleleft': '\\u25C3',\n    'lurdshar': '\\u294A',\n    'luruhar': '\\u2966',\n    'lvertneqq': '\\u2268\\uFE00',\n    'lvnE': '\\u2268\\uFE00',\n    'mDDot': '\\u223A',\n    'macr': '\\u00AF',\n    'strns': '\\u00AF',\n    'male': '\\u2642',\n    'malt': '\\u2720',\n    'maltese': '\\u2720',\n    'marker': '\\u25AE',\n    'mcomma': '\\u2A29',\n    'mcy': '\\u043C',\n    'mdash': '\\u2014',\n    'mfr': '\\uD835\\uDD2A',\n    'mho': '\\u2127',\n    'micro': '\\u00B5',\n    'midcir': '\\u2AF0',\n    'minus': '\\u2212',\n    'minusdu': '\\u2A2A',\n    'mlcp': '\\u2ADB',\n    'models': '\\u22A7',\n    'mopf': '\\uD835\\uDD5E',\n    'mscr': '\\uD835\\uDCC2',\n    'mu': '\\u03BC',\n    'multimap': '\\u22B8',\n    'mumap': '\\u22B8',\n    'nGg': '\\u22D9\\u0338',\n    'nGt': '\\u226B\\u20D2',\n    'nLeftarrow': '\\u21CD',\n    'nlArr': '\\u21CD',\n    'nLeftrightarrow': '\\u21CE',\n    'nhArr': '\\u21CE',\n    'nLl': '\\u22D8\\u0338',\n    'nLt': '\\u226A\\u20D2',\n    'nRightarrow': '\\u21CF',\n    'nrArr': '\\u21CF',\n    'nVDash': '\\u22AF',\n    'nVdash': '\\u22AE',\n    'nacute': '\\u0144',\n    'nang': '\\u2220\\u20D2',\n    'napE': '\\u2A70\\u0338',\n    'napid': '\\u224B\\u0338',\n    'napos': '\\u0149',\n    'natur': '\\u266E',\n    'natural': '\\u266E',\n    'ncap': '\\u2A43',\n    'ncaron': '\\u0148',\n    'ncedil': '\\u0146',\n    'ncongdot': '\\u2A6D\\u0338',\n    'ncup': '\\u2A42',\n    'ncy': '\\u043D',\n    'ndash': '\\u2013',\n    'neArr': '\\u21D7',\n    'nearhk': '\\u2924',\n    'nedot': '\\u2250\\u0338',\n    'nesear': '\\u2928',\n    'toea': '\\u2928',\n    'nfr': '\\uD835\\uDD2B',\n    'nharr': '\\u21AE',\n    'nleftrightarrow': '\\u21AE',\n    'nhpar': '\\u2AF2',\n    'nis': '\\u22FC',\n    'nisd': '\\u22FA',\n    'njcy': '\\u045A',\n    'nlE': '\\u2266\\u0338',\n    'nleqq': '\\u2266\\u0338',\n    'nlarr': '\\u219A',\n    'nleftarrow': '\\u219A',\n    'nldr': '\\u2025',\n    'nopf': '\\uD835\\uDD5F',\n    'not': '\\u00AC',\n    'notinE': '\\u22F9\\u0338',\n    'notindot': '\\u22F5\\u0338',\n    'notinvb': '\\u22F7',\n    'notinvc': '\\u22F6',\n    'notnivb': '\\u22FE',\n    'notnivc': '\\u22FD',\n    'nparsl': '\\u2AFD\\u20E5',\n    'npart': '\\u2202\\u0338',\n    'npolint': '\\u2A14',\n    'nrarr': '\\u219B',\n    'nrightarrow': '\\u219B',\n    'nrarrc': '\\u2933\\u0338',\n    'nrarrw': '\\u219D\\u0338',\n    'nscr': '\\uD835\\uDCC3',\n    'nsub': '\\u2284',\n    'nsubE': '\\u2AC5\\u0338',\n    'nsubseteqq': '\\u2AC5\\u0338',\n    'nsup': '\\u2285',\n    'nsupE': '\\u2AC6\\u0338',\n    'nsupseteqq': '\\u2AC6\\u0338',\n    'ntilde': '\\u00F1',\n    'nu': '\\u03BD',\n    'num': '\\u0023',\n    'numero': '\\u2116',\n    'numsp': '\\u2007',\n    'nvDash': '\\u22AD',\n    'nvHarr': '\\u2904',\n    'nvap': '\\u224D\\u20D2',\n    'nvdash': '\\u22AC',\n    'nvge': '\\u2265\\u20D2',\n    'nvgt': '\\u003E\\u20D2',\n    'nvinfin': '\\u29DE',\n    'nvlArr': '\\u2902',\n    'nvle': '\\u2264\\u20D2',\n    'nvlt': '\\u003C\\u20D2',\n    'nvltrie': '\\u22B4\\u20D2',\n    'nvrArr': '\\u2903',\n    'nvrtrie': '\\u22B5\\u20D2',\n    'nvsim': '\\u223C\\u20D2',\n    'nwArr': '\\u21D6',\n    'nwarhk': '\\u2923',\n    'nwnear': '\\u2927',\n    'oacute': '\\u00F3',\n    'ocirc': '\\u00F4',\n    'ocy': '\\u043E',\n    'odblac': '\\u0151',\n    'odiv': '\\u2A38',\n    'odsold': '\\u29BC',\n    'oelig': '\\u0153',\n    'ofcir': '\\u29BF',\n    'ofr': '\\uD835\\uDD2C',\n    'ogon': '\\u02DB',\n    'ograve': '\\u00F2',\n    'ogt': '\\u29C1',\n    'ohbar': '\\u29B5',\n    'olcir': '\\u29BE',\n    'olcross': '\\u29BB',\n    'olt': '\\u29C0',\n    'omacr': '\\u014D',\n    'omega': '\\u03C9',\n    'omicron': '\\u03BF',\n    'omid': '\\u29B6',\n    'oopf': '\\uD835\\uDD60',\n    'opar': '\\u29B7',\n    'operp': '\\u29B9',\n    'or': '\\u2228',\n    'vee': '\\u2228',\n    'ord': '\\u2A5D',\n    'order': '\\u2134',\n    'orderof': '\\u2134',\n    'oscr': '\\u2134',\n    'ordf': '\\u00AA',\n    'ordm': '\\u00BA',\n    'origof': '\\u22B6',\n    'oror': '\\u2A56',\n    'orslope': '\\u2A57',\n    'orv': '\\u2A5B',\n    'oslash': '\\u00F8',\n    'osol': '\\u2298',\n    'otilde': '\\u00F5',\n    'otimesas': '\\u2A36',\n    'ouml': '\\u00F6',\n    'ovbar': '\\u233D',\n    'para': '\\u00B6',\n    'parsim': '\\u2AF3',\n    'parsl': '\\u2AFD',\n    'pcy': '\\u043F',\n    'percnt': '\\u0025',\n    'period': '\\u002E',\n    'permil': '\\u2030',\n    'pertenk': '\\u2031',\n    'pfr': '\\uD835\\uDD2D',\n    'phi': '\\u03C6',\n    'phiv': '\\u03D5',\n    'straightphi': '\\u03D5',\n    'varphi': '\\u03D5',\n    'phone': '\\u260E',\n    'pi': '\\u03C0',\n    'piv': '\\u03D6',\n    'varpi': '\\u03D6',\n    'planckh': '\\u210E',\n    'plus': '\\u002B',\n    'plusacir': '\\u2A23',\n    'pluscir': '\\u2A22',\n    'plusdu': '\\u2A25',\n    'pluse': '\\u2A72',\n    'plussim': '\\u2A26',\n    'plustwo': '\\u2A27',\n    'pointint': '\\u2A15',\n    'popf': '\\uD835\\uDD61',\n    'pound': '\\u00A3',\n    'prE': '\\u2AB3',\n    'prap': '\\u2AB7',\n    'precapprox': '\\u2AB7',\n    'precnapprox': '\\u2AB9',\n    'prnap': '\\u2AB9',\n    'precneqq': '\\u2AB5',\n    'prnE': '\\u2AB5',\n    'precnsim': '\\u22E8',\n    'prnsim': '\\u22E8',\n    'prime': '\\u2032',\n    'profalar': '\\u232E',\n    'profline': '\\u2312',\n    'profsurf': '\\u2313',\n    'prurel': '\\u22B0',\n    'pscr': '\\uD835\\uDCC5',\n    'psi': '\\u03C8',\n    'puncsp': '\\u2008',\n    'qfr': '\\uD835\\uDD2E',\n    'qopf': '\\uD835\\uDD62',\n    'qprime': '\\u2057',\n    'qscr': '\\uD835\\uDCC6',\n    'quatint': '\\u2A16',\n    'quest': '\\u003F',\n    'rAtail': '\\u291C',\n    'rHar': '\\u2964',\n    'race': '\\u223D\\u0331',\n    'racute': '\\u0155',\n    'raemptyv': '\\u29B3',\n    'rangd': '\\u2992',\n    'range': '\\u29A5',\n    'raquo': '\\u00BB',\n    'rarrap': '\\u2975',\n    'rarrbfs': '\\u2920',\n    'rarrc': '\\u2933',\n    'rarrfs': '\\u291E',\n    'rarrpl': '\\u2945',\n    'rarrsim': '\\u2974',\n    'rarrtl': '\\u21A3',\n    'rightarrowtail': '\\u21A3',\n    'rarrw': '\\u219D',\n    'rightsquigarrow': '\\u219D',\n    'ratail': '\\u291A',\n    'ratio': '\\u2236',\n    'rbbrk': '\\u2773',\n    'rbrace': '\\u007D',\n    'rcub': '\\u007D',\n    'rbrack': '\\u005D',\n    'rsqb': '\\u005D',\n    'rbrke': '\\u298C',\n    'rbrksld': '\\u298E',\n    'rbrkslu': '\\u2990',\n    'rcaron': '\\u0159',\n    'rcedil': '\\u0157',\n    'rcy': '\\u0440',\n    'rdca': '\\u2937',\n    'rdldhar': '\\u2969',\n    'rdsh': '\\u21B3',\n    'rect': '\\u25AD',\n    'rfisht': '\\u297D',\n    'rfr': '\\uD835\\uDD2F',\n    'rharul': '\\u296C',\n    'rho': '\\u03C1',\n    'rhov': '\\u03F1',\n    'varrho': '\\u03F1',\n    'rightrightarrows': '\\u21C9',\n    'rrarr': '\\u21C9',\n    'rightthreetimes': '\\u22CC',\n    'rthree': '\\u22CC',\n    'ring': '\\u02DA',\n    'rlm': '\\u200F',\n    'rmoust': '\\u23B1',\n    'rmoustache': '\\u23B1',\n    'rnmid': '\\u2AEE',\n    'roang': '\\u27ED',\n    'roarr': '\\u21FE',\n    'ropar': '\\u2986',\n    'ropf': '\\uD835\\uDD63',\n    'roplus': '\\u2A2E',\n    'rotimes': '\\u2A35',\n    'rpar': '\\u0029',\n    'rpargt': '\\u2994',\n    'rppolint': '\\u2A12',\n    'rsaquo': '\\u203A',\n    'rscr': '\\uD835\\uDCC7',\n    'rtimes': '\\u22CA',\n    'rtri': '\\u25B9',\n    'triangleright': '\\u25B9',\n    'rtriltri': '\\u29CE',\n    'ruluhar': '\\u2968',\n    'rx': '\\u211E',\n    'sacute': '\\u015B',\n    'scE': '\\u2AB4',\n    'scap': '\\u2AB8',\n    'succapprox': '\\u2AB8',\n    'scaron': '\\u0161',\n    'scedil': '\\u015F',\n    'scirc': '\\u015D',\n    'scnE': '\\u2AB6',\n    'succneqq': '\\u2AB6',\n    'scnap': '\\u2ABA',\n    'succnapprox': '\\u2ABA',\n    'scnsim': '\\u22E9',\n    'succnsim': '\\u22E9',\n    'scpolint': '\\u2A13',\n    'scy': '\\u0441',\n    'sdot': '\\u22C5',\n    'sdote': '\\u2A66',\n    'seArr': '\\u21D8',\n    'sect': '\\u00A7',\n    'semi': '\\u003B',\n    'seswar': '\\u2929',\n    'tosa': '\\u2929',\n    'sext': '\\u2736',\n    'sfr': '\\uD835\\uDD30',\n    'sharp': '\\u266F',\n    'shchcy': '\\u0449',\n    'shcy': '\\u0448',\n    'shy': '\\u00AD',\n    'sigma': '\\u03C3',\n    'sigmaf': '\\u03C2',\n    'sigmav': '\\u03C2',\n    'varsigma': '\\u03C2',\n    'simdot': '\\u2A6A',\n    'simg': '\\u2A9E',\n    'simgE': '\\u2AA0',\n    'siml': '\\u2A9D',\n    'simlE': '\\u2A9F',\n    'simne': '\\u2246',\n    'simplus': '\\u2A24',\n    'simrarr': '\\u2972',\n    'smashp': '\\u2A33',\n    'smeparsl': '\\u29E4',\n    'smile': '\\u2323',\n    'ssmile': '\\u2323',\n    'smt': '\\u2AAA',\n    'smte': '\\u2AAC',\n    'smtes': '\\u2AAC\\uFE00',\n    'softcy': '\\u044C',\n    'sol': '\\u002F',\n    'solb': '\\u29C4',\n    'solbar': '\\u233F',\n    'sopf': '\\uD835\\uDD64',\n    'spades': '\\u2660',\n    'spadesuit': '\\u2660',\n    'sqcaps': '\\u2293\\uFE00',\n    'sqcups': '\\u2294\\uFE00',\n    'sscr': '\\uD835\\uDCC8',\n    'star': '\\u2606',\n    'sub': '\\u2282',\n    'subset': '\\u2282',\n    'subE': '\\u2AC5',\n    'subseteqq': '\\u2AC5',\n    'subdot': '\\u2ABD',\n    'subedot': '\\u2AC3',\n    'submult': '\\u2AC1',\n    'subnE': '\\u2ACB',\n    'subsetneqq': '\\u2ACB',\n    'subne': '\\u228A',\n    'subsetneq': '\\u228A',\n    'subplus': '\\u2ABF',\n    'subrarr': '\\u2979',\n    'subsim': '\\u2AC7',\n    'subsub': '\\u2AD5',\n    'subsup': '\\u2AD3',\n    'sung': '\\u266A',\n    'sup1': '\\u00B9',\n    'sup2': '\\u00B2',\n    'sup3': '\\u00B3',\n    'supE': '\\u2AC6',\n    'supseteqq': '\\u2AC6',\n    'supdot': '\\u2ABE',\n    'supdsub': '\\u2AD8',\n    'supedot': '\\u2AC4',\n    'suphsol': '\\u27C9',\n    'suphsub': '\\u2AD7',\n    'suplarr': '\\u297B',\n    'supmult': '\\u2AC2',\n    'supnE': '\\u2ACC',\n    'supsetneqq': '\\u2ACC',\n    'supne': '\\u228B',\n    'supsetneq': '\\u228B',\n    'supplus': '\\u2AC0',\n    'supsim': '\\u2AC8',\n    'supsub': '\\u2AD4',\n    'supsup': '\\u2AD6',\n    'swArr': '\\u21D9',\n    'swnwar': '\\u292A',\n    'szlig': '\\u00DF',\n    'target': '\\u2316',\n    'tau': '\\u03C4',\n    'tcaron': '\\u0165',\n    'tcedil': '\\u0163',\n    'tcy': '\\u0442',\n    'telrec': '\\u2315',\n    'tfr': '\\uD835\\uDD31',\n    'theta': '\\u03B8',\n    'thetasym': '\\u03D1',\n    'thetav': '\\u03D1',\n    'vartheta': '\\u03D1',\n    'thorn': '\\u00FE',\n    'times': '\\u00D7',\n    'timesbar': '\\u2A31',\n    'timesd': '\\u2A30',\n    'topbot': '\\u2336',\n    'topcir': '\\u2AF1',\n    'topf': '\\uD835\\uDD65',\n    'topfork': '\\u2ADA',\n    'tprime': '\\u2034',\n    'triangle': '\\u25B5',\n    'utri': '\\u25B5',\n    'triangleq': '\\u225C',\n    'trie': '\\u225C',\n    'tridot': '\\u25EC',\n    'triminus': '\\u2A3A',\n    'triplus': '\\u2A39',\n    'trisb': '\\u29CD',\n    'tritime': '\\u2A3B',\n    'trpezium': '\\u23E2',\n    'tscr': '\\uD835\\uDCC9',\n    'tscy': '\\u0446',\n    'tshcy': '\\u045B',\n    'tstrok': '\\u0167',\n    'uHar': '\\u2963',\n    'uacute': '\\u00FA',\n    'ubrcy': '\\u045E',\n    'ubreve': '\\u016D',\n    'ucirc': '\\u00FB',\n    'ucy': '\\u0443',\n    'udblac': '\\u0171',\n    'ufisht': '\\u297E',\n    'ufr': '\\uD835\\uDD32',\n    'ugrave': '\\u00F9',\n    'uhblk': '\\u2580',\n    'ulcorn': '\\u231C',\n    'ulcorner': '\\u231C',\n    'ulcrop': '\\u230F',\n    'ultri': '\\u25F8',\n    'umacr': '\\u016B',\n    'uogon': '\\u0173',\n    'uopf': '\\uD835\\uDD66',\n    'upsi': '\\u03C5',\n    'upsilon': '\\u03C5',\n    'upuparrows': '\\u21C8',\n    'uuarr': '\\u21C8',\n    'urcorn': '\\u231D',\n    'urcorner': '\\u231D',\n    'urcrop': '\\u230E',\n    'uring': '\\u016F',\n    'urtri': '\\u25F9',\n    'uscr': '\\uD835\\uDCCA',\n    'utdot': '\\u22F0',\n    'utilde': '\\u0169',\n    'uuml': '\\u00FC',\n    'uwangle': '\\u29A7',\n    'vBar': '\\u2AE8',\n    'vBarv': '\\u2AE9',\n    'vangrt': '\\u299C',\n    'varsubsetneq': '\\u228A\\uFE00',\n    'vsubne': '\\u228A\\uFE00',\n    'varsubsetneqq': '\\u2ACB\\uFE00',\n    'vsubnE': '\\u2ACB\\uFE00',\n    'varsupsetneq': '\\u228B\\uFE00',\n    'vsupne': '\\u228B\\uFE00',\n    'varsupsetneqq': '\\u2ACC\\uFE00',\n    'vsupnE': '\\u2ACC\\uFE00',\n    'vcy': '\\u0432',\n    'veebar': '\\u22BB',\n    'veeeq': '\\u225A',\n    'vellip': '\\u22EE',\n    'vfr': '\\uD835\\uDD33',\n    'vopf': '\\uD835\\uDD67',\n    'vscr': '\\uD835\\uDCCB',\n    'vzigzag': '\\u299A',\n    'wcirc': '\\u0175',\n    'wedbar': '\\u2A5F',\n    'wedgeq': '\\u2259',\n    'weierp': '\\u2118',\n    'wp': '\\u2118',\n    'wfr': '\\uD835\\uDD34',\n    'wopf': '\\uD835\\uDD68',\n    'wscr': '\\uD835\\uDCCC',\n    'xfr': '\\uD835\\uDD35',\n    'xi': '\\u03BE',\n    'xnis': '\\u22FB',\n    'xopf': '\\uD835\\uDD69',\n    'xscr': '\\uD835\\uDCCD',\n    'yacute': '\\u00FD',\n    'yacy': '\\u044F',\n    'ycirc': '\\u0177',\n    'ycy': '\\u044B',\n    'yen': '\\u00A5',\n    'yfr': '\\uD835\\uDD36',\n    'yicy': '\\u0457',\n    'yopf': '\\uD835\\uDD6A',\n    'yscr': '\\uD835\\uDCCE',\n    'yucy': '\\u044E',\n    'yuml': '\\u00FF',\n    'zacute': '\\u017A',\n    'zcaron': '\\u017E',\n    'zcy': '\\u0437',\n    'zdot': '\\u017C',\n    'zeta': '\\u03B6',\n    'zfr': '\\uD835\\uDD37',\n    'zhcy': '\\u0436',\n    'zigrarr': '\\u21DD',\n    'zopf': '\\uD835\\uDD6B',\n    'zscr': '\\uD835\\uDCCF',\n    'zwj': '\\u200D',\n    'zwnj': '\\u200C'\n};\n// The &ngsp; pseudo-entity is denoting a space. see:\n// https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart\nconst NGSP_UNICODE = '\\uE500';\nNAMED_ENTITIES['ngsp'] = NGSP_UNICODE;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TokenError extends ParseError {\n    constructor(errorMsg, tokenType, span) {\n        super(span, errorMsg);\n        this.tokenType = tokenType;\n    }\n}\nclass TokenizeResult {\n    constructor(tokens, errors, nonNormalizedIcuExpressions) {\n        this.tokens = tokens;\n        this.errors = errors;\n        this.nonNormalizedIcuExpressions = nonNormalizedIcuExpressions;\n    }\n}\nfunction tokenize(source, url, getTagDefinition, options = {}) {\n    const tokenizer = new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options);\n    tokenizer.tokenize();\n    return new TokenizeResult(mergeTextTokens(tokenizer.tokens), tokenizer.errors, tokenizer.nonNormalizedIcuExpressions);\n}\nconst _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\nfunction _unexpectedCharacterErrorMsg(charCode) {\n    const char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);\n    return `Unexpected character \"${char}\"`;\n}\nfunction _unknownEntityErrorMsg(entitySrc) {\n    return `Unknown entity \"${entitySrc}\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax`;\n}\nfunction _unparsableEntityErrorMsg(type, entityStr) {\n    return `Unable to parse entity \"${entityStr}\" - ${type} character reference entities must end with \";\"`;\n}\nvar CharacterReferenceType;\n(function (CharacterReferenceType) {\n    CharacterReferenceType[\"HEX\"] = \"hexadecimal\";\n    CharacterReferenceType[\"DEC\"] = \"decimal\";\n})(CharacterReferenceType || (CharacterReferenceType = {}));\nclass _ControlFlowError {\n    constructor(error) {\n        this.error = error;\n    }\n}\n// See https://www.w3.org/TR/html51/syntax.html#writing-html-documents\nclass _Tokenizer {\n    /**\n     * @param _file The html source file being tokenized.\n     * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.\n     * @param options Configuration of the tokenization.\n     */\n    constructor(_file, _getTagDefinition, options) {\n        this._getTagDefinition = _getTagDefinition;\n        this._currentTokenStart = null;\n        this._currentTokenType = null;\n        this._expansionCaseStack = [];\n        this._inInterpolation = false;\n        this.tokens = [];\n        this.errors = [];\n        this.nonNormalizedIcuExpressions = [];\n        this._tokenizeIcu = options.tokenizeExpansionForms || false;\n        this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n        this._leadingTriviaCodePoints =\n            options.leadingTriviaChars && options.leadingTriviaChars.map(c => c.codePointAt(0) || 0);\n        const range = options.range || { endPos: _file.content.length, startPos: 0, startLine: 0, startCol: 0 };\n        this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) :\n            new PlainCharacterCursor(_file, range);\n        this._preserveLineEndings = options.preserveLineEndings || false;\n        this._escapedString = options.escapedString || false;\n        this._i18nNormalizeLineEndingsInICUs = options.i18nNormalizeLineEndingsInICUs || false;\n        try {\n            this._cursor.init();\n        }\n        catch (e) {\n            this.handleError(e);\n        }\n    }\n    _processCarriageReturns(content) {\n        if (this._preserveLineEndings) {\n            return content;\n        }\n        // https://www.w3.org/TR/html51/syntax.html#preprocessing-the-input-stream\n        // In order to keep the original position in the source, we can not\n        // pre-process it.\n        // Instead CRs are processed right before instantiating the tokens.\n        return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n    }\n    tokenize() {\n        while (this._cursor.peek() !== $EOF) {\n            const start = this._cursor.clone();\n            try {\n                if (this._attemptCharCode($LT)) {\n                    if (this._attemptCharCode($BANG)) {\n                        if (this._attemptCharCode($LBRACKET)) {\n                            this._consumeCdata(start);\n                        }\n                        else if (this._attemptCharCode($MINUS)) {\n                            this._consumeComment(start);\n                        }\n                        else {\n                            this._consumeDocType(start);\n                        }\n                    }\n                    else if (this._attemptCharCode($SLASH)) {\n                        this._consumeTagClose(start);\n                    }\n                    else {\n                        this._consumeTagOpen(start);\n                    }\n                }\n                else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n                    // In (possibly interpolated) text the end of the text is given by `isTextEnd()`, while\n                    // the premature end of an interpolation is given by the start of a new HTML element.\n                    this._consumeWithInterpolation(5 /* TEXT */, 8 /* INTERPOLATION */, () => this._isTextEnd(), () => this._isTagStart());\n                }\n            }\n            catch (e) {\n                this.handleError(e);\n            }\n        }\n        this._beginToken(24 /* EOF */);\n        this._endToken([]);\n    }\n    /**\n     * @returns whether an ICU token has been created\n     * @internal\n     */\n    _tokenizeExpansionForm() {\n        if (this.isExpansionFormStart()) {\n            this._consumeExpansionFormStart();\n            return true;\n        }\n        if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {\n            this._consumeExpansionCaseStart();\n            return true;\n        }\n        if (this._cursor.peek() === $RBRACE) {\n            if (this._isInExpansionCase()) {\n                this._consumeExpansionCaseEnd();\n                return true;\n            }\n            if (this._isInExpansionForm()) {\n                this._consumeExpansionFormEnd();\n                return true;\n            }\n        }\n        return false;\n    }\n    _beginToken(type, start = this._cursor.clone()) {\n        this._currentTokenStart = start;\n        this._currentTokenType = type;\n    }\n    _endToken(parts, end) {\n        if (this._currentTokenStart === null) {\n            throw new TokenError('Programming error - attempted to end a token when there was no start to the token', this._currentTokenType, this._cursor.getSpan(end));\n        }\n        if (this._currentTokenType === null) {\n            throw new TokenError('Programming error - attempted to end a token which has no token type', null, this._cursor.getSpan(this._currentTokenStart));\n        }\n        const token = {\n            type: this._currentTokenType,\n            parts,\n            sourceSpan: (end !== null && end !== void 0 ? end : this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints),\n        };\n        this.tokens.push(token);\n        this._currentTokenStart = null;\n        this._currentTokenType = null;\n        return token;\n    }\n    _createError(msg, span) {\n        if (this._isInExpansionForm()) {\n            msg += ` (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)`;\n        }\n        const error = new TokenError(msg, this._currentTokenType, span);\n        this._currentTokenStart = null;\n        this._currentTokenType = null;\n        return new _ControlFlowError(error);\n    }\n    handleError(e) {\n        if (e instanceof CursorError) {\n            e = this._createError(e.msg, this._cursor.getSpan(e.cursor));\n        }\n        if (e instanceof _ControlFlowError) {\n            this.errors.push(e.error);\n        }\n        else {\n            throw e;\n        }\n    }\n    _attemptCharCode(charCode) {\n        if (this._cursor.peek() === charCode) {\n            this._cursor.advance();\n            return true;\n        }\n        return false;\n    }\n    _attemptCharCodeCaseInsensitive(charCode) {\n        if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {\n            this._cursor.advance();\n            return true;\n        }\n        return false;\n    }\n    _requireCharCode(charCode) {\n        const location = this._cursor.clone();\n        if (!this._attemptCharCode(charCode)) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n        }\n    }\n    _attemptStr(chars) {\n        const len = chars.length;\n        if (this._cursor.charsLeft() < len) {\n            return false;\n        }\n        const initialPosition = this._cursor.clone();\n        for (let i = 0; i < len; i++) {\n            if (!this._attemptCharCode(chars.charCodeAt(i))) {\n                // If attempting to parse the string fails, we want to reset the parser\n                // to where it was before the attempt\n                this._cursor = initialPosition;\n                return false;\n            }\n        }\n        return true;\n    }\n    _attemptStrCaseInsensitive(chars) {\n        for (let i = 0; i < chars.length; i++) {\n            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _requireStr(chars) {\n        const location = this._cursor.clone();\n        if (!this._attemptStr(chars)) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n        }\n    }\n    _attemptCharCodeUntilFn(predicate) {\n        while (!predicate(this._cursor.peek())) {\n            this._cursor.advance();\n        }\n    }\n    _requireCharCodeUntilFn(predicate, len) {\n        const start = this._cursor.clone();\n        this._attemptCharCodeUntilFn(predicate);\n        if (this._cursor.diff(start) < len) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n        }\n    }\n    _attemptUntilChar(char) {\n        while (this._cursor.peek() !== char) {\n            this._cursor.advance();\n        }\n    }\n    _readChar() {\n        // Don't rely upon reading directly from `_input` as the actual char value\n        // may have been generated from an escape sequence.\n        const char = String.fromCodePoint(this._cursor.peek());\n        this._cursor.advance();\n        return char;\n    }\n    _consumeEntity(textTokenType) {\n        this._beginToken(9 /* ENCODED_ENTITY */);\n        const start = this._cursor.clone();\n        this._cursor.advance();\n        if (this._attemptCharCode($HASH)) {\n            const isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\n            const codeStart = this._cursor.clone();\n            this._attemptCharCodeUntilFn(isDigitEntityEnd);\n            if (this._cursor.peek() != $SEMICOLON) {\n                // Advance cursor to include the peeked character in the string provided to the error\n                // message.\n                this._cursor.advance();\n                const entityType = isHex ? CharacterReferenceType.HEX : CharacterReferenceType.DEC;\n                throw this._createError(_unparsableEntityErrorMsg(entityType, this._cursor.getChars(start)), this._cursor.getSpan());\n            }\n            const strNum = this._cursor.getChars(codeStart);\n            this._cursor.advance();\n            try {\n                const charCode = parseInt(strNum, isHex ? 16 : 10);\n                this._endToken([String.fromCharCode(charCode), this._cursor.getChars(start)]);\n            }\n            catch (_a) {\n                throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());\n            }\n        }\n        else {\n            const nameStart = this._cursor.clone();\n            this._attemptCharCodeUntilFn(isNamedEntityEnd);\n            if (this._cursor.peek() != $SEMICOLON) {\n                // No semicolon was found so abort the encoded entity token that was in progress, and treat\n                // this as a text token\n                this._beginToken(textTokenType, start);\n                this._cursor = nameStart;\n                this._endToken(['&']);\n            }\n            else {\n                const name = this._cursor.getChars(nameStart);\n                this._cursor.advance();\n                const char = NAMED_ENTITIES[name];\n                if (!char) {\n                    throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));\n                }\n                this._endToken([char, `&${name};`]);\n            }\n        }\n    }\n    _consumeRawText(consumeEntities, endMarkerPredicate) {\n        this._beginToken(consumeEntities ? 6 /* ESCAPABLE_RAW_TEXT */ : 7 /* RAW_TEXT */);\n        const parts = [];\n        while (true) {\n            const tagCloseStart = this._cursor.clone();\n            const foundEndMarker = endMarkerPredicate();\n            this._cursor = tagCloseStart;\n            if (foundEndMarker) {\n                break;\n            }\n            if (consumeEntities && this._cursor.peek() === $AMPERSAND) {\n                this._endToken([this._processCarriageReturns(parts.join(''))]);\n                parts.length = 0;\n                this._consumeEntity(6 /* ESCAPABLE_RAW_TEXT */);\n                this._beginToken(6 /* ESCAPABLE_RAW_TEXT */);\n            }\n            else {\n                parts.push(this._readChar());\n            }\n        }\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n    }\n    _consumeComment(start) {\n        this._beginToken(10 /* COMMENT_START */, start);\n        this._requireCharCode($MINUS);\n        this._endToken([]);\n        this._consumeRawText(false, () => this._attemptStr('-->'));\n        this._beginToken(11 /* COMMENT_END */);\n        this._requireStr('-->');\n        this._endToken([]);\n    }\n    _consumeCdata(start) {\n        this._beginToken(12 /* CDATA_START */, start);\n        this._requireStr('CDATA[');\n        this._endToken([]);\n        this._consumeRawText(false, () => this._attemptStr(']]>'));\n        this._beginToken(13 /* CDATA_END */);\n        this._requireStr(']]>');\n        this._endToken([]);\n    }\n    _consumeDocType(start) {\n        this._beginToken(18 /* DOC_TYPE */, start);\n        const contentStart = this._cursor.clone();\n        this._attemptUntilChar($GT);\n        const content = this._cursor.getChars(contentStart);\n        this._cursor.advance();\n        this._endToken([content]);\n    }\n    _consumePrefixAndName() {\n        const nameOrPrefixStart = this._cursor.clone();\n        let prefix = '';\n        while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {\n            this._cursor.advance();\n        }\n        let nameStart;\n        if (this._cursor.peek() === $COLON) {\n            prefix = this._cursor.getChars(nameOrPrefixStart);\n            this._cursor.advance();\n            nameStart = this._cursor.clone();\n        }\n        else {\n            nameStart = nameOrPrefixStart;\n        }\n        this._requireCharCodeUntilFn(isNameEnd, prefix === '' ? 0 : 1);\n        const name = this._cursor.getChars(nameStart);\n        return [prefix, name];\n    }\n    _consumeTagOpen(start) {\n        let tagName;\n        let prefix;\n        let openTagToken;\n        try {\n            if (!isAsciiLetter(this._cursor.peek())) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n            }\n            openTagToken = this._consumeTagOpenStart(start);\n            prefix = openTagToken.parts[0];\n            tagName = openTagToken.parts[1];\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT &&\n                this._cursor.peek() !== $LT && this._cursor.peek() !== $EOF) {\n                this._consumeAttributeName();\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n                if (this._attemptCharCode($EQ)) {\n                    this._attemptCharCodeUntilFn(isNotWhitespace);\n                    this._consumeAttributeValue();\n                }\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n            }\n            this._consumeTagOpenEnd();\n        }\n        catch (e) {\n            if (e instanceof _ControlFlowError) {\n                if (openTagToken) {\n                    // We errored before we could close the opening tag, so it is incomplete.\n                    openTagToken.type = 4 /* INCOMPLETE_TAG_OPEN */;\n                }\n                else {\n                    // When the start tag is invalid, assume we want a \"<\" as text.\n                    // Back to back text tokens are merged at the end.\n                    this._beginToken(5 /* TEXT */, start);\n                    this._endToken(['<']);\n                }\n                return;\n            }\n            throw e;\n        }\n        const contentTokenType = this._getTagDefinition(tagName).getContentType(prefix);\n        if (contentTokenType === TagContentType.RAW_TEXT) {\n            this._consumeRawTextWithTagClose(prefix, tagName, false);\n        }\n        else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n            this._consumeRawTextWithTagClose(prefix, tagName, true);\n        }\n    }\n    _consumeRawTextWithTagClose(prefix, tagName, consumeEntities) {\n        this._consumeRawText(consumeEntities, () => {\n            if (!this._attemptCharCode($LT))\n                return false;\n            if (!this._attemptCharCode($SLASH))\n                return false;\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            if (!this._attemptStrCaseInsensitive(tagName))\n                return false;\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            return this._attemptCharCode($GT);\n        });\n        this._beginToken(3 /* TAG_CLOSE */);\n        this._requireCharCodeUntilFn(code => code === $GT, 3);\n        this._cursor.advance(); // Consume the `>`\n        this._endToken([prefix, tagName]);\n    }\n    _consumeTagOpenStart(start) {\n        this._beginToken(0 /* TAG_OPEN_START */, start);\n        const parts = this._consumePrefixAndName();\n        return this._endToken(parts);\n    }\n    _consumeAttributeName() {\n        const attrNameStart = this._cursor.peek();\n        if (attrNameStart === $SQ || attrNameStart === $DQ) {\n            throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());\n        }\n        this._beginToken(14 /* ATTR_NAME */);\n        const prefixAndName = this._consumePrefixAndName();\n        this._endToken(prefixAndName);\n    }\n    _consumeAttributeValue() {\n        let value;\n        if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {\n            const quoteChar = this._cursor.peek();\n            this._consumeQuote(quoteChar);\n            // In an attribute then end of the attribute value and the premature end to an interpolation\n            // are both triggered by the `quoteChar`.\n            const endPredicate = () => this._cursor.peek() === quoteChar;\n            this._consumeWithInterpolation(16 /* ATTR_VALUE_TEXT */, 17 /* ATTR_VALUE_INTERPOLATION */, endPredicate, endPredicate);\n            this._consumeQuote(quoteChar);\n        }\n        else {\n            const endPredicate = () => isNameEnd(this._cursor.peek());\n            this._consumeWithInterpolation(16 /* ATTR_VALUE_TEXT */, 17 /* ATTR_VALUE_INTERPOLATION */, endPredicate, endPredicate);\n        }\n    }\n    _consumeQuote(quoteChar) {\n        this._beginToken(15 /* ATTR_QUOTE */);\n        this._requireCharCode(quoteChar);\n        this._endToken([String.fromCodePoint(quoteChar)]);\n    }\n    _consumeTagOpenEnd() {\n        const tokenType = this._attemptCharCode($SLASH) ? 2 /* TAG_OPEN_END_VOID */ : 1 /* TAG_OPEN_END */;\n        this._beginToken(tokenType);\n        this._requireCharCode($GT);\n        this._endToken([]);\n    }\n    _consumeTagClose(start) {\n        this._beginToken(3 /* TAG_CLOSE */, start);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        const prefixAndName = this._consumePrefixAndName();\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._requireCharCode($GT);\n        this._endToken(prefixAndName);\n    }\n    _consumeExpansionFormStart() {\n        this._beginToken(19 /* EXPANSION_FORM_START */);\n        this._requireCharCode($LBRACE);\n        this._endToken([]);\n        this._expansionCaseStack.push(19 /* EXPANSION_FORM_START */);\n        this._beginToken(7 /* RAW_TEXT */);\n        const condition = this._readUntil($COMMA);\n        const normalizedCondition = this._processCarriageReturns(condition);\n        if (this._i18nNormalizeLineEndingsInICUs) {\n            // We explicitly want to normalize line endings for this text.\n            this._endToken([normalizedCondition]);\n        }\n        else {\n            // We are not normalizing line endings.\n            const conditionToken = this._endToken([condition]);\n            if (normalizedCondition !== condition) {\n                this.nonNormalizedIcuExpressions.push(conditionToken);\n            }\n        }\n        this._requireCharCode($COMMA);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._beginToken(7 /* RAW_TEXT */);\n        const type = this._readUntil($COMMA);\n        this._endToken([type]);\n        this._requireCharCode($COMMA);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n    }\n    _consumeExpansionCaseStart() {\n        this._beginToken(20 /* EXPANSION_CASE_VALUE */);\n        const value = this._readUntil($LBRACE).trim();\n        this._endToken([value]);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._beginToken(21 /* EXPANSION_CASE_EXP_START */);\n        this._requireCharCode($LBRACE);\n        this._endToken([]);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._expansionCaseStack.push(21 /* EXPANSION_CASE_EXP_START */);\n    }\n    _consumeExpansionCaseEnd() {\n        this._beginToken(22 /* EXPANSION_CASE_EXP_END */);\n        this._requireCharCode($RBRACE);\n        this._endToken([]);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._expansionCaseStack.pop();\n    }\n    _consumeExpansionFormEnd() {\n        this._beginToken(23 /* EXPANSION_FORM_END */);\n        this._requireCharCode($RBRACE);\n        this._endToken([]);\n        this._expansionCaseStack.pop();\n    }\n    /**\n     * Consume a string that may contain interpolation expressions.\n     *\n     * The first token consumed will be of `tokenType` and then there will be alternating\n     * `interpolationTokenType` and `tokenType` tokens until the `endPredicate()` returns true.\n     *\n     * If an interpolation token ends prematurely it will have no end marker in its `parts` array.\n     *\n     * @param textTokenType the kind of tokens to interleave around interpolation tokens.\n     * @param interpolationTokenType the kind of tokens that contain interpolation.\n     * @param endPredicate a function that should return true when we should stop consuming.\n     * @param endInterpolation a function that should return true if there is a premature end to an\n     *     interpolation expression - i.e. before we get to the normal interpolation closing marker.\n     */\n    _consumeWithInterpolation(textTokenType, interpolationTokenType, endPredicate, endInterpolation) {\n        this._beginToken(textTokenType);\n        const parts = [];\n        while (!endPredicate()) {\n            const current = this._cursor.clone();\n            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n                this._endToken([this._processCarriageReturns(parts.join(''))], current);\n                parts.length = 0;\n                this._consumeInterpolation(interpolationTokenType, current, endInterpolation);\n                this._beginToken(textTokenType);\n            }\n            else if (this._cursor.peek() === $AMPERSAND) {\n                this._endToken([this._processCarriageReturns(parts.join(''))]);\n                parts.length = 0;\n                this._consumeEntity(textTokenType);\n                this._beginToken(textTokenType);\n            }\n            else {\n                parts.push(this._readChar());\n            }\n        }\n        // It is possible that an interpolation was started but not ended inside this text token.\n        // Make sure that we reset the state of the lexer correctly.\n        this._inInterpolation = false;\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n    }\n    /**\n     * Consume a block of text that has been interpreted as an Angular interpolation.\n     *\n     * @param interpolationTokenType the type of the interpolation token to generate.\n     * @param interpolationStart a cursor that points to the start of this interpolation.\n     * @param prematureEndPredicate a function that should return true if the next characters indicate\n     *     an end to the interpolation before its normal closing marker.\n     */\n    _consumeInterpolation(interpolationTokenType, interpolationStart, prematureEndPredicate) {\n        const parts = [];\n        this._beginToken(interpolationTokenType, interpolationStart);\n        parts.push(this._interpolationConfig.start);\n        // Find the end of the interpolation, ignoring content inside quotes.\n        const expressionStart = this._cursor.clone();\n        let inQuote = null;\n        let inComment = false;\n        while (this._cursor.peek() !== $EOF &&\n            (prematureEndPredicate === null || !prematureEndPredicate())) {\n            const current = this._cursor.clone();\n            if (this._isTagStart()) {\n                // We are starting what looks like an HTML element in the middle of this interpolation.\n                // Reset the cursor to before the `<` character and end the interpolation token.\n                // (This is actually wrong but here for backward compatibility).\n                this._cursor = current;\n                parts.push(this._getProcessedChars(expressionStart, current));\n                this._endToken(parts);\n                return;\n            }\n            if (inQuote === null) {\n                if (this._attemptStr(this._interpolationConfig.end)) {\n                    // We are not in a string, and we hit the end interpolation marker\n                    parts.push(this._getProcessedChars(expressionStart, current));\n                    parts.push(this._interpolationConfig.end);\n                    this._endToken(parts);\n                    return;\n                }\n                else if (this._attemptStr('//')) {\n                    // Once we are in a comment we ignore any quotes\n                    inComment = true;\n                }\n            }\n            const char = this._cursor.peek();\n            this._cursor.advance();\n            if (char === $BACKSLASH) {\n                // Skip the next character because it was escaped.\n                this._cursor.advance();\n            }\n            else if (char === inQuote) {\n                // Exiting the current quoted string\n                inQuote = null;\n            }\n            else if (!inComment && inQuote === null && isQuote(char)) {\n                // Entering a new quoted string\n                inQuote = char;\n            }\n        }\n        // We hit EOF without finding a closing interpolation marker\n        parts.push(this._getProcessedChars(expressionStart, this._cursor));\n        this._endToken(parts);\n    }\n    _getProcessedChars(start, end) {\n        return this._processCarriageReturns(end.getChars(start));\n    }\n    _isTextEnd() {\n        if (this._isTagStart() || this._cursor.peek() === $EOF) {\n            return true;\n        }\n        if (this._tokenizeIcu && !this._inInterpolation) {\n            if (this.isExpansionFormStart()) {\n                // start of an expansion form\n                return true;\n            }\n            if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {\n                // end of and expansion case\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Returns true if the current cursor is pointing to the start of a tag\n     * (opening/closing/comments/cdata/etc).\n     */\n    _isTagStart() {\n        if (this._cursor.peek() === $LT) {\n            // We assume that `<` followed by whitespace is not the start of an HTML element.\n            const tmp = this._cursor.clone();\n            tmp.advance();\n            // If the next character is alphabetic, ! nor / then it is a tag start\n            const code = tmp.peek();\n            if (($a <= code && code <= $z) || ($A <= code && code <= $Z) ||\n                code === $SLASH || code === $BANG) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _readUntil(char) {\n        const start = this._cursor.clone();\n        this._attemptUntilChar(char);\n        return this._cursor.getChars(start);\n    }\n    _isInExpansionCase() {\n        return this._expansionCaseStack.length > 0 &&\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                21 /* EXPANSION_CASE_EXP_START */;\n    }\n    _isInExpansionForm() {\n        return this._expansionCaseStack.length > 0 &&\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                19 /* EXPANSION_FORM_START */;\n    }\n    isExpansionFormStart() {\n        if (this._cursor.peek() !== $LBRACE) {\n            return false;\n        }\n        if (this._interpolationConfig) {\n            const start = this._cursor.clone();\n            const isInterpolation = this._attemptStr(this._interpolationConfig.start);\n            this._cursor = start;\n            return !isInterpolation;\n        }\n        return true;\n    }\n}\nfunction isNotWhitespace(code) {\n    return !isWhitespace(code) || code === $EOF;\n}\nfunction isNameEnd(code) {\n    return isWhitespace(code) || code === $GT || code === $LT ||\n        code === $SLASH || code === $SQ || code === $DQ || code === $EQ ||\n        code === $EOF;\n}\nfunction isPrefixEnd(code) {\n    return (code < $a || $z < code) && (code < $A || $Z < code) &&\n        (code < $0 || code > $9);\n}\nfunction isDigitEntityEnd(code) {\n    return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);\n}\nfunction isNamedEntityEnd(code) {\n    return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);\n}\nfunction isExpansionCaseStart(peek) {\n    return peek !== $RBRACE;\n}\nfunction compareCharCodeCaseInsensitive(code1, code2) {\n    return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);\n}\nfunction toUpperCaseCharCode(code) {\n    return code >= $a && code <= $z ? code - $a + $A : code;\n}\nfunction mergeTextTokens(srcTokens) {\n    const dstTokens = [];\n    let lastDstToken = undefined;\n    for (let i = 0; i < srcTokens.length; i++) {\n        const token = srcTokens[i];\n        if ((lastDstToken && lastDstToken.type === 5 /* TEXT */ && token.type === 5 /* TEXT */) ||\n            (lastDstToken && lastDstToken.type === 16 /* ATTR_VALUE_TEXT */ &&\n                token.type === 16 /* ATTR_VALUE_TEXT */)) {\n            lastDstToken.parts[0] += token.parts[0];\n            lastDstToken.sourceSpan.end = token.sourceSpan.end;\n        }\n        else {\n            lastDstToken = token;\n            dstTokens.push(lastDstToken);\n        }\n    }\n    return dstTokens;\n}\nclass PlainCharacterCursor {\n    constructor(fileOrCursor, range) {\n        if (fileOrCursor instanceof PlainCharacterCursor) {\n            this.file = fileOrCursor.file;\n            this.input = fileOrCursor.input;\n            this.end = fileOrCursor.end;\n            const state = fileOrCursor.state;\n            // Note: avoid using `{...fileOrCursor.state}` here as that has a severe performance penalty.\n            // In ES5 bundles the object spread operator is translated into the `__assign` helper, which\n            // is not optimized by VMs as efficiently as a raw object literal. Since this constructor is\n            // called in tight loops, this difference matters.\n            this.state = {\n                peek: state.peek,\n                offset: state.offset,\n                line: state.line,\n                column: state.column,\n            };\n        }\n        else {\n            if (!range) {\n                throw new Error('Programming error: the range argument must be provided with a file argument.');\n            }\n            this.file = fileOrCursor;\n            this.input = fileOrCursor.content;\n            this.end = range.endPos;\n            this.state = {\n                peek: -1,\n                offset: range.startPos,\n                line: range.startLine,\n                column: range.startCol,\n            };\n        }\n    }\n    clone() {\n        return new PlainCharacterCursor(this);\n    }\n    peek() {\n        return this.state.peek;\n    }\n    charsLeft() {\n        return this.end - this.state.offset;\n    }\n    diff(other) {\n        return this.state.offset - other.state.offset;\n    }\n    advance() {\n        this.advanceState(this.state);\n    }\n    init() {\n        this.updatePeek(this.state);\n    }\n    getSpan(start, leadingTriviaCodePoints) {\n        start = start || this;\n        let fullStart = start;\n        if (leadingTriviaCodePoints) {\n            while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {\n                if (fullStart === start) {\n                    start = start.clone();\n                }\n                start.advance();\n            }\n        }\n        const startLocation = this.locationFromCursor(start);\n        const endLocation = this.locationFromCursor(this);\n        const fullStartLocation = fullStart !== start ? this.locationFromCursor(fullStart) : startLocation;\n        return new ParseSourceSpan(startLocation, endLocation, fullStartLocation);\n    }\n    getChars(start) {\n        return this.input.substring(start.state.offset, this.state.offset);\n    }\n    charAt(pos) {\n        return this.input.charCodeAt(pos);\n    }\n    advanceState(state) {\n        if (state.offset >= this.end) {\n            this.state = state;\n            throw new CursorError('Unexpected character \"EOF\"', this);\n        }\n        const currentChar = this.charAt(state.offset);\n        if (currentChar === $LF) {\n            state.line++;\n            state.column = 0;\n        }\n        else if (!isNewLine(currentChar)) {\n            state.column++;\n        }\n        state.offset++;\n        this.updatePeek(state);\n    }\n    updatePeek(state) {\n        state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);\n    }\n    locationFromCursor(cursor) {\n        return new ParseLocation(cursor.file, cursor.state.offset, cursor.state.line, cursor.state.column);\n    }\n}\nclass EscapedCharacterCursor extends PlainCharacterCursor {\n    constructor(fileOrCursor, range) {\n        if (fileOrCursor instanceof EscapedCharacterCursor) {\n            super(fileOrCursor);\n            this.internalState = Object.assign({}, fileOrCursor.internalState);\n        }\n        else {\n            super(fileOrCursor, range);\n            this.internalState = this.state;\n        }\n    }\n    advance() {\n        this.state = this.internalState;\n        super.advance();\n        this.processEscapeSequence();\n    }\n    init() {\n        super.init();\n        this.processEscapeSequence();\n    }\n    clone() {\n        return new EscapedCharacterCursor(this);\n    }\n    getChars(start) {\n        const cursor = start.clone();\n        let chars = '';\n        while (cursor.internalState.offset < this.internalState.offset) {\n            chars += String.fromCodePoint(cursor.peek());\n            cursor.advance();\n        }\n        return chars;\n    }\n    /**\n     * Process the escape sequence that starts at the current position in the text.\n     *\n     * This method is called to ensure that `peek` has the unescaped value of escape sequences.\n     */\n    processEscapeSequence() {\n        const peek = () => this.internalState.peek;\n        if (peek() === $BACKSLASH) {\n            // We have hit an escape sequence so we need the internal state to become independent\n            // of the external state.\n            this.internalState = Object.assign({}, this.state);\n            // Move past the backslash\n            this.advanceState(this.internalState);\n            // First check for standard control char sequences\n            if (peek() === $n) {\n                this.state.peek = $LF;\n            }\n            else if (peek() === $r) {\n                this.state.peek = $CR;\n            }\n            else if (peek() === $v) {\n                this.state.peek = $VTAB;\n            }\n            else if (peek() === $t) {\n                this.state.peek = $TAB;\n            }\n            else if (peek() === $b) {\n                this.state.peek = $BSPACE;\n            }\n            else if (peek() === $f) {\n                this.state.peek = $FF;\n            }\n            // Now consider more complex sequences\n            else if (peek() === $u) {\n                // Unicode code-point sequence\n                this.advanceState(this.internalState); // advance past the `u` char\n                if (peek() === $LBRACE) {\n                    // Variable length Unicode, e.g. `\\x{123}`\n                    this.advanceState(this.internalState); // advance past the `{` char\n                    // Advance past the variable number of hex digits until we hit a `}` char\n                    const digitStart = this.clone();\n                    let length = 0;\n                    while (peek() !== $RBRACE) {\n                        this.advanceState(this.internalState);\n                        length++;\n                    }\n                    this.state.peek = this.decodeHexDigits(digitStart, length);\n                }\n                else {\n                    // Fixed length Unicode, e.g. `\\u1234`\n                    const digitStart = this.clone();\n                    this.advanceState(this.internalState);\n                    this.advanceState(this.internalState);\n                    this.advanceState(this.internalState);\n                    this.state.peek = this.decodeHexDigits(digitStart, 4);\n                }\n            }\n            else if (peek() === $x) {\n                // Hex char code, e.g. `\\x2F`\n                this.advanceState(this.internalState); // advance past the `x` char\n                const digitStart = this.clone();\n                this.advanceState(this.internalState);\n                this.state.peek = this.decodeHexDigits(digitStart, 2);\n            }\n            else if (isOctalDigit(peek())) {\n                // Octal char code, e.g. `\\012`,\n                let octal = '';\n                let length = 0;\n                let previous = this.clone();\n                while (isOctalDigit(peek()) && length < 3) {\n                    previous = this.clone();\n                    octal += String.fromCodePoint(peek());\n                    this.advanceState(this.internalState);\n                    length++;\n                }\n                this.state.peek = parseInt(octal, 8);\n                // Backup one char\n                this.internalState = previous.internalState;\n            }\n            else if (isNewLine(this.internalState.peek)) {\n                // Line continuation `\\` followed by a new line\n                this.advanceState(this.internalState); // advance over the newline\n                this.state = this.internalState;\n            }\n            else {\n                // If none of the `if` blocks were executed then we just have an escaped normal character.\n                // In that case we just, effectively, skip the backslash from the character.\n                this.state.peek = this.internalState.peek;\n            }\n        }\n    }\n    decodeHexDigits(start, length) {\n        const hex = this.input.substr(start.internalState.offset, length);\n        const charCode = parseInt(hex, 16);\n        if (!isNaN(charCode)) {\n            return charCode;\n        }\n        else {\n            start.state = start.internalState;\n            throw new CursorError('Invalid hexadecimal escape sequence', start);\n        }\n    }\n}\nclass CursorError {\n    constructor(msg, cursor) {\n        this.msg = msg;\n        this.cursor = cursor;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TreeError extends ParseError {\n    constructor(elementName, span, msg) {\n        super(span, msg);\n        this.elementName = elementName;\n    }\n    static create(elementName, span, msg) {\n        return new TreeError(elementName, span, msg);\n    }\n}\nclass ParseTreeResult {\n    constructor(rootNodes, errors) {\n        this.rootNodes = rootNodes;\n        this.errors = errors;\n    }\n}\nclass Parser {\n    constructor(getTagDefinition) {\n        this.getTagDefinition = getTagDefinition;\n    }\n    parse(source, url, options) {\n        const tokenizeResult = tokenize(source, url, this.getTagDefinition, options);\n        const parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);\n        parser.build();\n        return new ParseTreeResult(parser.rootNodes, tokenizeResult.errors.concat(parser.errors));\n    }\n}\nclass _TreeBuilder {\n    constructor(tokens, getTagDefinition) {\n        this.tokens = tokens;\n        this.getTagDefinition = getTagDefinition;\n        this._index = -1;\n        this._elementStack = [];\n        this.rootNodes = [];\n        this.errors = [];\n        this._advance();\n    }\n    build() {\n        while (this._peek.type !== 24 /* EOF */) {\n            if (this._peek.type === 0 /* TAG_OPEN_START */ ||\n                this._peek.type === 4 /* INCOMPLETE_TAG_OPEN */) {\n                this._consumeStartTag(this._advance());\n            }\n            else if (this._peek.type === 3 /* TAG_CLOSE */) {\n                this._consumeEndTag(this._advance());\n            }\n            else if (this._peek.type === 12 /* CDATA_START */) {\n                this._closeVoidElement();\n                this._consumeCdata(this._advance());\n            }\n            else if (this._peek.type === 10 /* COMMENT_START */) {\n                this._closeVoidElement();\n                this._consumeComment(this._advance());\n            }\n            else if (this._peek.type === 5 /* TEXT */ || this._peek.type === 7 /* RAW_TEXT */ ||\n                this._peek.type === 6 /* ESCAPABLE_RAW_TEXT */) {\n                this._closeVoidElement();\n                this._consumeText(this._advance());\n            }\n            else if (this._peek.type === 19 /* EXPANSION_FORM_START */) {\n                this._consumeExpansion(this._advance());\n            }\n            else {\n                // Skip all other tokens...\n                this._advance();\n            }\n        }\n    }\n    _advance() {\n        const prev = this._peek;\n        if (this._index < this.tokens.length - 1) {\n            // Note: there is always an EOF token at the end\n            this._index++;\n        }\n        this._peek = this.tokens[this._index];\n        return prev;\n    }\n    _advanceIf(type) {\n        if (this._peek.type === type) {\n            return this._advance();\n        }\n        return null;\n    }\n    _consumeCdata(_startToken) {\n        this._consumeText(this._advance());\n        this._advanceIf(13 /* CDATA_END */);\n    }\n    _consumeComment(token) {\n        const text = this._advanceIf(7 /* RAW_TEXT */);\n        this._advanceIf(11 /* COMMENT_END */);\n        const value = text != null ? text.parts[0].trim() : null;\n        this._addToParent(new Comment(value, token.sourceSpan));\n    }\n    _consumeExpansion(token) {\n        const switchValue = this._advance();\n        const type = this._advance();\n        const cases = [];\n        // read =\n        while (this._peek.type === 20 /* EXPANSION_CASE_VALUE */) {\n            const expCase = this._parseExpansionCase();\n            if (!expCase)\n                return; // error\n            cases.push(expCase);\n        }\n        // read the final }\n        if (this._peek.type !== 23 /* EXPANSION_FORM_END */) {\n            this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));\n            return;\n        }\n        const sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);\n        this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n        this._advance();\n    }\n    _parseExpansionCase() {\n        const value = this._advance();\n        // read {\n        if (this._peek.type !== 21 /* EXPANSION_CASE_EXP_START */) {\n            this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));\n            return null;\n        }\n        // read until }\n        const start = this._advance();\n        const exp = this._collectExpansionExpTokens(start);\n        if (!exp)\n            return null;\n        const end = this._advance();\n        exp.push({ type: 24 /* EOF */, parts: [], sourceSpan: end.sourceSpan });\n        // parse everything in between { and }\n        const expansionCaseParser = new _TreeBuilder(exp, this.getTagDefinition);\n        expansionCaseParser.build();\n        if (expansionCaseParser.errors.length > 0) {\n            this.errors = this.errors.concat(expansionCaseParser.errors);\n            return null;\n        }\n        const sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);\n        const expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);\n        return new ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n    }\n    _collectExpansionExpTokens(start) {\n        const exp = [];\n        const expansionFormStack = [21 /* EXPANSION_CASE_EXP_START */];\n        while (true) {\n            if (this._peek.type === 19 /* EXPANSION_FORM_START */ ||\n                this._peek.type === 21 /* EXPANSION_CASE_EXP_START */) {\n                expansionFormStack.push(this._peek.type);\n            }\n            if (this._peek.type === 22 /* EXPANSION_CASE_EXP_END */) {\n                if (lastOnStack(expansionFormStack, 21 /* EXPANSION_CASE_EXP_START */)) {\n                    expansionFormStack.pop();\n                    if (expansionFormStack.length === 0)\n                        return exp;\n                }\n                else {\n                    this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n                    return null;\n                }\n            }\n            if (this._peek.type === 23 /* EXPANSION_FORM_END */) {\n                if (lastOnStack(expansionFormStack, 19 /* EXPANSION_FORM_START */)) {\n                    expansionFormStack.pop();\n                }\n                else {\n                    this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n                    return null;\n                }\n            }\n            if (this._peek.type === 24 /* EOF */) {\n                this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n                return null;\n            }\n            exp.push(this._advance());\n        }\n    }\n    _consumeText(token) {\n        const tokens = [token];\n        const startSpan = token.sourceSpan;\n        let text = token.parts[0];\n        if (text.length > 0 && text[0] === '\\n') {\n            const parent = this._getParentElement();\n            if (parent != null && parent.children.length === 0 &&\n                this.getTagDefinition(parent.name).ignoreFirstLf) {\n                text = text.substring(1);\n                tokens[0] = { type: token.type, sourceSpan: token.sourceSpan, parts: [text] };\n            }\n        }\n        while (this._peek.type === 8 /* INTERPOLATION */ || this._peek.type === 5 /* TEXT */ ||\n            this._peek.type === 9 /* ENCODED_ENTITY */) {\n            token = this._advance();\n            tokens.push(token);\n            if (token.type === 8 /* INTERPOLATION */) {\n                // For backward compatibility we decode HTML entities that appear in interpolation\n                // expressions. This is arguably a bug, but it could be a considerable breaking change to\n                // fix it. It should be addressed in a larger project to refactor the entire parser/lexer\n                // chain after View Engine has been removed.\n                text += token.parts.join('').replace(/&([^;]+);/g, decodeEntity);\n            }\n            else if (token.type === 9 /* ENCODED_ENTITY */) {\n                text += token.parts[0];\n            }\n            else {\n                text += token.parts.join('');\n            }\n        }\n        if (text.length > 0) {\n            const endSpan = token.sourceSpan;\n            this._addToParent(new Text(text, new ParseSourceSpan(startSpan.start, endSpan.end, startSpan.fullStart, startSpan.details), tokens));\n        }\n    }\n    _closeVoidElement() {\n        const el = this._getParentElement();\n        if (el && this.getTagDefinition(el.name).isVoid) {\n            this._elementStack.pop();\n        }\n    }\n    _consumeStartTag(startTagToken) {\n        const [prefix, name] = startTagToken.parts;\n        const attrs = [];\n        while (this._peek.type === 14 /* ATTR_NAME */) {\n            attrs.push(this._consumeAttr(this._advance()));\n        }\n        const fullName = this._getElementFullName(prefix, name, this._getParentElement());\n        let selfClosing = false;\n        // Note: There could have been a tokenizer error\n        // so that we don't get a token for the end tag...\n        if (this._peek.type === 2 /* TAG_OPEN_END_VOID */) {\n            this._advance();\n            selfClosing = true;\n            const tagDef = this.getTagDefinition(fullName);\n            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n                this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void and foreign elements can be self closed \"${startTagToken.parts[1]}\"`));\n            }\n        }\n        else if (this._peek.type === 1 /* TAG_OPEN_END */) {\n            this._advance();\n            selfClosing = false;\n        }\n        const end = this._peek.sourceSpan.fullStart;\n        const span = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n        // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n        const startSpan = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n        const el = new Element(fullName, attrs, [], span, startSpan, undefined);\n        this._pushElement(el);\n        if (selfClosing) {\n            // Elements that are self-closed have their `endSourceSpan` set to the full span, as the\n            // element start tag also represents the end tag.\n            this._popElement(fullName, span);\n        }\n        else if (startTagToken.type === 4 /* INCOMPLETE_TAG_OPEN */) {\n            // We already know the opening tag is not complete, so it is unlikely it has a corresponding\n            // close tag. Let's optimistically parse it as a full element and emit an error.\n            this._popElement(fullName, null);\n            this.errors.push(TreeError.create(fullName, span, `Opening tag \"${fullName}\" not terminated.`));\n        }\n    }\n    _pushElement(el) {\n        const parentEl = this._getParentElement();\n        if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n            this._elementStack.pop();\n        }\n        this._addToParent(el);\n        this._elementStack.push(el);\n    }\n    _consumeEndTag(endTagToken) {\n        const fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n        if (this.getTagDefinition(fullName).isVoid) {\n            this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags \"${endTagToken.parts[1]}\"`));\n        }\n        else if (!this._popElement(fullName, endTagToken.sourceSpan)) {\n            const errMsg = `Unexpected closing tag \"${fullName}\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;\n            this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n        }\n    }\n    /**\n     * Closes the nearest element with the tag name `fullName` in the parse tree.\n     * `endSourceSpan` is the span of the closing tag, or null if the element does\n     * not have a closing tag (for example, this happens when an incomplete\n     * opening tag is recovered).\n     */\n    _popElement(fullName, endSourceSpan) {\n        let unexpectedCloseTagDetected = false;\n        for (let stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n            const el = this._elementStack[stackIndex];\n            if (el.name === fullName) {\n                // Record the parse span with the element that is being closed. Any elements that are\n                // removed from the element stack at this point are closed implicitly, so they won't get\n                // an end source span (as there is no explicit closing element).\n                el.endSourceSpan = endSourceSpan;\n                el.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : el.sourceSpan.end;\n                this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n                return !unexpectedCloseTagDetected;\n            }\n            if (!this.getTagDefinition(el.name).closedByParent) {\n                // Note that we encountered an unexpected close tag but continue processing the element\n                // stack so we can assign an `endSourceSpan` if there is a corresponding start tag for this\n                // end tag in the stack.\n                unexpectedCloseTagDetected = true;\n            }\n        }\n        return false;\n    }\n    _consumeAttr(attrName) {\n        const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n        let attrEnd = attrName.sourceSpan.end;\n        // Consume any quote\n        if (this._peek.type === 15 /* ATTR_QUOTE */) {\n            this._advance();\n        }\n        // Consume the attribute value\n        let value = '';\n        const valueTokens = [];\n        let valueStartSpan = undefined;\n        let valueEnd = undefined;\n        // NOTE: We need to use a new variable `nextTokenType` here to hide the actual type of\n        // `_peek.type` from TS. Otherwise TS will narrow the type of `_peek.type` preventing it from\n        // being able to consider `ATTR_VALUE_INTERPOLATION` as an option. This is because TS is not\n        // able to see that `_advance()` will actually mutate `_peek`.\n        const nextTokenType = this._peek.type;\n        if (nextTokenType === 16 /* ATTR_VALUE_TEXT */) {\n            valueStartSpan = this._peek.sourceSpan;\n            valueEnd = this._peek.sourceSpan.end;\n            while (this._peek.type === 16 /* ATTR_VALUE_TEXT */ ||\n                this._peek.type === 17 /* ATTR_VALUE_INTERPOLATION */ ||\n                this._peek.type === 9 /* ENCODED_ENTITY */) {\n                const valueToken = this._advance();\n                valueTokens.push(valueToken);\n                if (valueToken.type === 17 /* ATTR_VALUE_INTERPOLATION */) {\n                    // For backward compatibility we decode HTML entities that appear in interpolation\n                    // expressions. This is arguably a bug, but it could be a considerable breaking change to\n                    // fix it. It should be addressed in a larger project to refactor the entire parser/lexer\n                    // chain after View Engine has been removed.\n                    value += valueToken.parts.join('').replace(/&([^;]+);/g, decodeEntity);\n                }\n                else if (valueToken.type === 9 /* ENCODED_ENTITY */) {\n                    value += valueToken.parts[0];\n                }\n                else {\n                    value += valueToken.parts.join('');\n                }\n                valueEnd = attrEnd = valueToken.sourceSpan.end;\n            }\n        }\n        // Consume any quote\n        if (this._peek.type === 15 /* ATTR_QUOTE */) {\n            const quoteToken = this._advance();\n            attrEnd = quoteToken.sourceSpan.end;\n        }\n        const valueSpan = valueStartSpan && valueEnd &&\n            new ParseSourceSpan(valueStartSpan.start, valueEnd, valueStartSpan.fullStart);\n        return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, attrEnd, attrName.sourceSpan.fullStart), attrName.sourceSpan, valueSpan, valueTokens.length > 0 ? valueTokens : undefined, undefined);\n    }\n    _getParentElement() {\n        return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n    }\n    _addToParent(node) {\n        const parent = this._getParentElement();\n        if (parent != null) {\n            parent.children.push(node);\n        }\n        else {\n            this.rootNodes.push(node);\n        }\n    }\n    _getElementFullName(prefix, localName, parentElement) {\n        if (prefix === '') {\n            prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';\n            if (prefix === '' && parentElement != null) {\n                const parentTagName = splitNsName(parentElement.name)[1];\n                const parentTagDefinition = this.getTagDefinition(parentTagName);\n                if (!parentTagDefinition.preventNamespaceInheritance) {\n                    prefix = getNsPrefix(parentElement.name);\n                }\n            }\n        }\n        return mergeNsAndName(prefix, localName);\n    }\n}\nfunction lastOnStack(stack, element) {\n    return stack.length > 0 && stack[stack.length - 1] === element;\n}\n/**\n * Decode the `entity` string, which we believe is the contents of an HTML entity.\n *\n * If the string is not actually a valid/known entity then just return the original `match` string.\n */\nfunction decodeEntity(match, entity) {\n    if (NAMED_ENTITIES[entity] !== undefined) {\n        return NAMED_ENTITIES[entity] || match;\n    }\n    if (/^#x[a-f0-9]+$/i.test(entity)) {\n        return String.fromCodePoint(parseInt(entity.slice(2), 16));\n    }\n    if (/^#\\d+$/.test(entity)) {\n        return String.fromCodePoint(parseInt(entity.slice(1), 10));\n    }\n    return match;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass HtmlParser extends Parser {\n    constructor() {\n        super(getHtmlTagDefinition);\n    }\n    parse(source, url, options) {\n        return super.parse(source, url, options);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\nconst SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\nconst WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nconst NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);\nconst WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, 'g');\nfunction hasPreserveWhitespacesAttr(attrs) {\n    return attrs.some((attr) => attr.name === PRESERVE_WS_ATTR_NAME);\n}\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here.\n */\nfunction replaceNgsp(value) {\n    // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n    return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nclass WhitespaceVisitor {\n    visitElement(element, context) {\n        if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n            // don't descent into elements where we need to preserve whitespaces\n            // but still visit all attributes to eliminate one used as a market to preserve WS\n            return new Element(element.name, visitAll(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n        }\n        return new Element(element.name, element.attrs, visitAllWithSiblings(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    }\n    visitAttribute(attribute, context) {\n        return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n    }\n    visitText(text, context) {\n        const isNotBlank = text.value.match(NO_WS_REGEXP);\n        const hasExpansionSibling = context &&\n            (context.prev instanceof Expansion || context.next instanceof Expansion);\n        if (isNotBlank || hasExpansionSibling) {\n            // Process the whitespace in the tokens of this Text node\n            const tokens = text.tokens.map(token => token.type === 5 /* TEXT */ ? createWhitespaceProcessedTextToken(token) : token);\n            // Process the whitespace of the value of this Text node\n            const value = processWhitespace(text.value);\n            return new Text(value, text.sourceSpan, tokens, text.i18n);\n        }\n        return null;\n    }\n    visitComment(comment, context) {\n        return comment;\n    }\n    visitExpansion(expansion, context) {\n        return expansion;\n    }\n    visitExpansionCase(expansionCase, context) {\n        return expansionCase;\n    }\n}\nfunction createWhitespaceProcessedTextToken({ type, parts, sourceSpan }) {\n    return { type, parts: [processWhitespace(parts[0])], sourceSpan };\n}\nfunction processWhitespace(text) {\n    return replaceNgsp(text).replace(WS_REPLACE_REGEXP, ' ');\n}\nfunction removeWhitespaces(htmlAstWithErrors) {\n    return new ParseTreeResult(visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);\n}\nfunction visitAllWithSiblings(visitor, nodes) {\n    const result = [];\n    nodes.forEach((ast, i) => {\n        const context = { prev: nodes[i - 1], next: nodes[i + 1] };\n        const astResult = ast.visit(visitor, context);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction mapEntry(key, value) {\n    return { key, value, quoted: false };\n}\nfunction mapLiteral(obj, quoted = false) {\n    return literalMap(Object.keys(obj).map(key => ({\n        key,\n        quoted,\n        value: obj[key],\n    })));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!\n//                               Reach out to mprobst for details.\n//\n// =================================================================================================\n/** Map from tagName|propertyName to SecurityContext. Properties applying to all tags use '*'. */\nlet _SECURITY_SCHEMA;\nfunction SECURITY_SCHEMA() {\n    if (!_SECURITY_SCHEMA) {\n        _SECURITY_SCHEMA = {};\n        // Case is insignificant below, all element and attribute names are lower-cased for lookup.\n        registerContext(SecurityContext.HTML, [\n            'iframe|srcdoc',\n            '*|innerHTML',\n            '*|outerHTML',\n        ]);\n        registerContext(SecurityContext.STYLE, ['*|style']);\n        // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\n        registerContext(SecurityContext.URL, [\n            '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',\n            'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',\n            'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',\n            'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',\n        ]);\n        registerContext(SecurityContext.RESOURCE_URL, [\n            'applet|code',\n            'applet|codebase',\n            'base|href',\n            'embed|src',\n            'frame|src',\n            'head|profile',\n            'html|manifest',\n            'iframe|src',\n            'link|href',\n            'media|src',\n            'object|codebase',\n            'object|data',\n            'script|src',\n        ]);\n    }\n    return _SECURITY_SCHEMA;\n}\nfunction registerContext(ctx, specs) {\n    for (const spec of specs)\n        _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ElementSchemaRegistry {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EVENT = 'event';\nconst BOOLEAN = 'boolean';\nconst NUMBER = 'number';\nconst STRING = 'string';\nconst OBJECT = 'object';\n/**\n * This array represents the DOM schema. It encodes inheritance, properties, and events.\n *\n * ## Overview\n *\n * Each line represents one kind of element. The `element_inheritance` and properties are joined\n * using `element_inheritance|properties` syntax.\n *\n * ## Element Inheritance\n *\n * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\n * Here the individual elements are separated by `,` (commas). Every element in the list\n * has identical properties.\n *\n * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\n * specified then `\"\"` (blank) element is assumed.\n *\n * NOTE: The blank element inherits from root `[Element]` element, the super element of all\n * elements.\n *\n * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\n *\n * ## Properties\n *\n * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\n * by a special character designating its type:\n *\n * - (no prefix): property is a string.\n * - `*`: property represents an event.\n * - `!`: property is a boolean.\n * - `#`: property is a number.\n * - `%`: property is an object.\n *\n * ## Query\n *\n * The class creates an internal squas representation which allows to easily answer the query of\n * if a given property exist on a given element.\n *\n * NOTE: We don't yet support querying for types or events.\n * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\n *       see dom_element_schema_registry_spec.ts\n */\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!\n//\n// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in\n// dom_security_schema.ts. Reach out to mprobst & rjamet for details.\n//\n// =================================================================================================\nconst SCHEMA = [\n    '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +\n        /* added manually to avoid breaking changes */\n        ',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored',\n    '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n    'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n    'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume',\n    ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',\n    ':svg:graphics^:svg:|',\n    ':svg:animation^:svg:|*begin,*end,*repeat',\n    ':svg:geometry^:svg:|',\n    ':svg:componentTransferFunction^:svg:|',\n    ':svg:gradient^:svg:|',\n    ':svg:textContent^:svg:graphics|',\n    ':svg:textPositioning^:svg:textContent|',\n    'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',\n    'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username',\n    'audio^media|',\n    'br^[HTMLElement]|clear',\n    'base^[HTMLElement]|href,target',\n    'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\n    'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\n    'canvas^[HTMLElement]|#height,#width',\n    'content^[HTMLElement]|select',\n    'dl^[HTMLElement]|!compact',\n    'datalist^[HTMLElement]|',\n    'details^[HTMLElement]|!open',\n    'dialog^[HTMLElement]|!open,returnValue',\n    'dir^[HTMLElement]|!compact',\n    'div^[HTMLElement]|align',\n    'embed^[HTMLElement]|align,height,name,src,type,width',\n    'fieldset^[HTMLElement]|!disabled,name',\n    'font^[HTMLElement]|color,face,size',\n    'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\n    'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\n    'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\n    'hr^[HTMLElement]|align,color,!noShade,size,width',\n    'head^[HTMLElement]|',\n    'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',\n    'html^[HTMLElement]|version',\n    'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\n    'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\n    'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\n    'li^[HTMLElement]|type,#value',\n    'label^[HTMLElement]|htmlFor',\n    'legend^[HTMLElement]|align',\n    'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type',\n    'map^[HTMLElement]|name',\n    'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\n    'menu^[HTMLElement]|!compact',\n    'meta^[HTMLElement]|content,httpEquiv,name,scheme',\n    'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',\n    'ins,del^[HTMLElement]|cite,dateTime',\n    'ol^[HTMLElement]|!compact,!reversed,#start,type',\n    'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\n    'optgroup^[HTMLElement]|!disabled,label',\n    'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',\n    'output^[HTMLElement]|defaultValue,%htmlFor,name,value',\n    'p^[HTMLElement]|align',\n    'param^[HTMLElement]|name,type,value,valueType',\n    'picture^[HTMLElement]|',\n    'pre^[HTMLElement]|#width',\n    'progress^[HTMLElement]|#max,#value',\n    'q,blockquote,cite^[HTMLElement]|',\n    'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',\n    'select^[HTMLElement]|autocomplete,!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\n    'shadow^[HTMLElement]|',\n    'slot^[HTMLElement]|name',\n    'source^[HTMLElement]|media,sizes,src,srcset,type',\n    'span^[HTMLElement]|',\n    'style^[HTMLElement]|!disabled,media,type',\n    'caption^[HTMLElement]|align',\n    'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\n    'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',\n    'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\n    'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',\n    'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',\n    'template^[HTMLElement]|',\n    'textarea^[HTMLElement]|autocapitalize,autocomplete,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\n    'title^[HTMLElement]|text',\n    'track^[HTMLElement]|!default,kind,label,src,srclang',\n    'ul^[HTMLElement]|!compact,type',\n    'unknown^[HTMLElement]|',\n    'video^media|#height,poster,#width',\n    ':svg:a^:svg:graphics|',\n    ':svg:animate^:svg:animation|',\n    ':svg:animateMotion^:svg:animation|',\n    ':svg:animateTransform^:svg:animation|',\n    ':svg:circle^:svg:geometry|',\n    ':svg:clipPath^:svg:graphics|',\n    ':svg:defs^:svg:graphics|',\n    ':svg:desc^:svg:|',\n    ':svg:discard^:svg:|',\n    ':svg:ellipse^:svg:geometry|',\n    ':svg:feBlend^:svg:|',\n    ':svg:feColorMatrix^:svg:|',\n    ':svg:feComponentTransfer^:svg:|',\n    ':svg:feComposite^:svg:|',\n    ':svg:feConvolveMatrix^:svg:|',\n    ':svg:feDiffuseLighting^:svg:|',\n    ':svg:feDisplacementMap^:svg:|',\n    ':svg:feDistantLight^:svg:|',\n    ':svg:feDropShadow^:svg:|',\n    ':svg:feFlood^:svg:|',\n    ':svg:feFuncA^:svg:componentTransferFunction|',\n    ':svg:feFuncB^:svg:componentTransferFunction|',\n    ':svg:feFuncG^:svg:componentTransferFunction|',\n    ':svg:feFuncR^:svg:componentTransferFunction|',\n    ':svg:feGaussianBlur^:svg:|',\n    ':svg:feImage^:svg:|',\n    ':svg:feMerge^:svg:|',\n    ':svg:feMergeNode^:svg:|',\n    ':svg:feMorphology^:svg:|',\n    ':svg:feOffset^:svg:|',\n    ':svg:fePointLight^:svg:|',\n    ':svg:feSpecularLighting^:svg:|',\n    ':svg:feSpotLight^:svg:|',\n    ':svg:feTile^:svg:|',\n    ':svg:feTurbulence^:svg:|',\n    ':svg:filter^:svg:|',\n    ':svg:foreignObject^:svg:graphics|',\n    ':svg:g^:svg:graphics|',\n    ':svg:image^:svg:graphics|',\n    ':svg:line^:svg:geometry|',\n    ':svg:linearGradient^:svg:gradient|',\n    ':svg:mpath^:svg:|',\n    ':svg:marker^:svg:|',\n    ':svg:mask^:svg:|',\n    ':svg:metadata^:svg:|',\n    ':svg:path^:svg:geometry|',\n    ':svg:pattern^:svg:|',\n    ':svg:polygon^:svg:geometry|',\n    ':svg:polyline^:svg:geometry|',\n    ':svg:radialGradient^:svg:gradient|',\n    ':svg:rect^:svg:geometry|',\n    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\n    ':svg:script^:svg:|type',\n    ':svg:set^:svg:animation|',\n    ':svg:stop^:svg:|',\n    ':svg:style^:svg:|!disabled,media,title,type',\n    ':svg:switch^:svg:graphics|',\n    ':svg:symbol^:svg:|',\n    ':svg:tspan^:svg:textPositioning|',\n    ':svg:text^:svg:textPositioning|',\n    ':svg:textPath^:svg:textContent|',\n    ':svg:title^:svg:|',\n    ':svg:use^:svg:graphics|',\n    ':svg:view^:svg:|#zoomAndPan',\n    'data^[HTMLElement]|value',\n    'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name',\n    'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',\n    'summary^[HTMLElement]|',\n    'time^[HTMLElement]|dateTime',\n    ':svg:cursor^:svg:|',\n];\nconst _ATTR_TO_PROP = {\n    'class': 'className',\n    'for': 'htmlFor',\n    'formaction': 'formAction',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\n// Invert _ATTR_TO_PROP.\nconst _PROP_TO_ATTR = Object.keys(_ATTR_TO_PROP).reduce((inverted, attr) => {\n    inverted[_ATTR_TO_PROP[attr]] = attr;\n    return inverted;\n}, {});\nclass DomElementSchemaRegistry extends ElementSchemaRegistry {\n    constructor() {\n        super();\n        this._schema = {};\n        // We don't allow binding to events for security reasons. Allowing event bindings would almost\n        // certainly introduce bad XSS vulnerabilities. Instead, we store events in a separate schema.\n        this._eventSchema = {};\n        SCHEMA.forEach(encodedType => {\n            const type = {};\n            const events = new Set();\n            const [strType, strProperties] = encodedType.split('|');\n            const properties = strProperties.split(',');\n            const [typeNames, superName] = strType.split('^');\n            typeNames.split(',').forEach(tag => {\n                this._schema[tag.toLowerCase()] = type;\n                this._eventSchema[tag.toLowerCase()] = events;\n            });\n            const superType = superName && this._schema[superName.toLowerCase()];\n            if (superType) {\n                Object.keys(superType).forEach((prop) => {\n                    type[prop] = superType[prop];\n                });\n                for (const superEvent of this._eventSchema[superName.toLowerCase()]) {\n                    events.add(superEvent);\n                }\n            }\n            properties.forEach((property) => {\n                if (property.length > 0) {\n                    switch (property[0]) {\n                        case '*':\n                            events.add(property.substring(1));\n                            break;\n                        case '!':\n                            type[property.substring(1)] = BOOLEAN;\n                            break;\n                        case '#':\n                            type[property.substring(1)] = NUMBER;\n                            break;\n                        case '%':\n                            type[property.substring(1)] = OBJECT;\n                            break;\n                        default:\n                            type[property] = STRING;\n                    }\n                }\n            });\n        });\n    }\n    hasProperty(tagName, propName, schemaMetas) {\n        if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {\n            return true;\n        }\n        if (tagName.indexOf('-') > -1) {\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\n                return false;\n            }\n            if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\n                // Can't tell now as we don't know which properties a custom element will get\n                // once it is instantiated\n                return true;\n            }\n        }\n        const elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];\n        return !!elementProperties[propName];\n    }\n    hasElement(tagName, schemaMetas) {\n        if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {\n            return true;\n        }\n        if (tagName.indexOf('-') > -1) {\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\n                return true;\n            }\n            if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\n                // Allow any custom elements\n                return true;\n            }\n        }\n        return !!this._schema[tagName.toLowerCase()];\n    }\n    /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is based on a list of allowed tags|attributes. All attributes in the schema\n     * above are assumed to have the 'NONE' security context, i.e. that they are safe inert\n     * string values. Only specific well known attack vectors are assigned their appropriate context.\n     */\n    securityContext(tagName, propName, isAttribute) {\n        if (isAttribute) {\n            // NB: For security purposes, use the mapped property name, not the attribute name.\n            propName = this.getMappedPropName(propName);\n        }\n        // Make sure comparisons are case insensitive, so that case differences between attribute and\n        // property names do not have a security impact.\n        tagName = tagName.toLowerCase();\n        propName = propName.toLowerCase();\n        let ctx = SECURITY_SCHEMA()[tagName + '|' + propName];\n        if (ctx) {\n            return ctx;\n        }\n        ctx = SECURITY_SCHEMA()['*|' + propName];\n        return ctx ? ctx : SecurityContext.NONE;\n    }\n    getMappedPropName(propName) {\n        return _ATTR_TO_PROP[propName] || propName;\n    }\n    getDefaultComponentElementName() {\n        return 'ng-component';\n    }\n    validateProperty(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            const msg = `Binding to event property '${name}' is disallowed for security reasons, ` +\n                `please use (${name.slice(2)})=...` +\n                `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n                ` current module.`;\n            return { error: true, msg: msg };\n        }\n        else {\n            return { error: false };\n        }\n    }\n    validateAttribute(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n                `please use (${name.slice(2)})=...`;\n            return { error: true, msg: msg };\n        }\n        else {\n            return { error: false };\n        }\n    }\n    allKnownElementNames() {\n        return Object.keys(this._schema);\n    }\n    allKnownAttributesOfElement(tagName) {\n        const elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];\n        // Convert properties to attributes.\n        return Object.keys(elementProperties).map(prop => { var _a; return (_a = _PROP_TO_ATTR[prop]) !== null && _a !== void 0 ? _a : prop; });\n    }\n    allKnownEventsOfElement(tagName) {\n        var _a;\n        return Array.from((_a = this._eventSchema[tagName.toLowerCase()]) !== null && _a !== void 0 ? _a : []);\n    }\n    normalizeAnimationStyleProperty(propName) {\n        return dashCaseToCamelCase(propName);\n    }\n    normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\n        let unit = '';\n        const strVal = val.toString().trim();\n        let errorMsg = null;\n        if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {\n            if (typeof val === 'number') {\n                unit = 'px';\n            }\n            else {\n                const valAndSuffixMatch = val.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;\n                }\n            }\n        }\n        return { error: errorMsg, value: strVal + unit };\n    }\n}\nfunction _isPixelDimensionStyle(prop) {\n    switch (prop) {\n        case 'width':\n        case 'height':\n        case 'minWidth':\n        case 'minHeight':\n        case 'maxWidth':\n        case 'maxHeight':\n        case 'left':\n        case 'top':\n        case 'bottom':\n        case 'right':\n        case 'fontSize':\n        case 'outlineWidth':\n        case 'outlineOffset':\n        case 'paddingTop':\n        case 'paddingLeft':\n        case 'paddingBottom':\n        case 'paddingRight':\n        case 'marginTop':\n        case 'marginLeft':\n        case 'marginBottom':\n        case 'marginRight':\n        case 'borderRadius':\n        case 'borderWidth':\n        case 'borderTopWidth':\n        case 'borderLeftWidth':\n        case 'borderRightWidth':\n        case 'borderBottomWidth':\n        case 'textIndent':\n            return true;\n        default:\n            return false;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Set of tagName|propertyName corresponding to Trusted Types sinks. Properties applying to all\n * tags use '*'.\n *\n * Extracted from, and should be kept in sync with\n * https://w3c.github.io/webappsec-trusted-types/dist/spec/#integrations\n */\nconst TRUSTED_TYPES_SINKS = new Set([\n    // NOTE: All strings in this set *must* be lowercase!\n    // TrustedHTML\n    'iframe|srcdoc',\n    '*|innerhtml',\n    '*|outerhtml',\n    // NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.\n    // TrustedScriptURL\n    'embed|src',\n    'object|codebase',\n    'object|data',\n]);\n/**\n * isTrustedTypesSink returns true if the given property on the given DOM tag is a Trusted Types\n * sink. In that case, use `ElementSchemaRegistry.securityContext` to determine which particular\n * Trusted Type is required for values passed to the sink:\n * - SecurityContext.HTML corresponds to TrustedHTML\n * - SecurityContext.RESOURCE_URL corresponds to TrustedScriptURL\n */\nfunction isTrustedTypesSink(tagName, propName) {\n    // Make sure comparisons are case insensitive, so that case differences between attribute and\n    // property names do not have a security impact.\n    tagName = tagName.toLowerCase();\n    propName = propName.toLowerCase();\n    return TRUSTED_TYPES_SINKS.has(tagName + '|' + propName) ||\n        TRUSTED_TYPES_SINKS.has('*|' + propName);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PROPERTY_PARTS_SEPARATOR = '.';\nconst ATTRIBUTE_PREFIX = 'attr';\nconst CLASS_PREFIX = 'class';\nconst STYLE_PREFIX = 'style';\nconst TEMPLATE_ATTR_PREFIX$1 = '*';\nconst ANIMATE_PROP_PREFIX = 'animate-';\n/**\n * Parses bindings in templates and in the directive host area.\n */\nclass BindingParser {\n    constructor(_exprParser, _interpolationConfig, _schemaRegistry, errors) {\n        this._exprParser = _exprParser;\n        this._interpolationConfig = _interpolationConfig;\n        this._schemaRegistry = _schemaRegistry;\n        this.errors = errors;\n    }\n    get interpolationConfig() {\n        return this._interpolationConfig;\n    }\n    createBoundHostProperties(properties, sourceSpan) {\n        const boundProps = [];\n        for (const propName of Object.keys(properties)) {\n            const expression = properties[propName];\n            if (typeof expression === 'string') {\n                this.parsePropertyBinding(propName, expression, true, sourceSpan, sourceSpan.start.offset, undefined, [], \n                // Use the `sourceSpan` for  `keySpan`. This isn't really accurate, but neither is the\n                // sourceSpan, as it represents the sourceSpan of the host itself rather than the\n                // source of the host binding (which doesn't exist in the template). Regardless,\n                // neither of these values are used in Ivy but are only here to satisfy the function\n                // signature. This should likely be refactored in the future so that `sourceSpan`\n                // isn't being used inaccurately.\n                boundProps, sourceSpan);\n            }\n            else {\n                this._reportError(`Value of the host property binding \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\n            }\n        }\n        return boundProps;\n    }\n    createDirectiveHostPropertyAsts(hostProperties, elementSelector, sourceSpan) {\n        const boundProps = this.createBoundHostProperties(hostProperties, sourceSpan);\n        return boundProps &&\n            boundProps.map((prop) => this.createBoundElementProperty(elementSelector, prop));\n    }\n    createDirectiveHostEventAsts(hostListeners, sourceSpan) {\n        const targetEvents = [];\n        for (const propName of Object.keys(hostListeners)) {\n            const expression = hostListeners[propName];\n            if (typeof expression === 'string') {\n                // Use the `sourceSpan` for  `keySpan` and `handlerSpan`. This isn't really accurate, but\n                // neither is the `sourceSpan`, as it represents the `sourceSpan` of the host itself\n                // rather than the source of the host binding (which doesn't exist in the template).\n                // Regardless, neither of these values are used in Ivy but are only here to satisfy the\n                // function signature. This should likely be refactored in the future so that `sourceSpan`\n                // isn't being used inaccurately.\n                this.parseEvent(propName, expression, sourceSpan, sourceSpan, [], targetEvents, sourceSpan);\n            }\n            else {\n                this._reportError(`Value of the host listener \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\n            }\n        }\n        return targetEvents;\n    }\n    parseInterpolation(value, sourceSpan) {\n        const sourceInfo = sourceSpan.start.toString();\n        const absoluteOffset = sourceSpan.fullStart.offset;\n        try {\n            const ast = this._exprParser.parseInterpolation(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n        }\n    }\n    /**\n     * Similar to `parseInterpolation`, but treats the provided string as a single expression\n     * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\n     * This is used for parsing the switch expression in ICUs.\n     */\n    parseInterpolationExpression(expression, sourceSpan) {\n        const sourceInfo = sourceSpan.start.toString();\n        const absoluteOffset = sourceSpan.start.offset;\n        try {\n            const ast = this._exprParser.parseInterpolationExpression(expression, sourceInfo, absoluteOffset);\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n        }\n    }\n    /**\n     * Parses the bindings in a microsyntax expression, and converts them to\n     * `ParsedProperty` or `ParsedVariable`.\n     *\n     * @param tplKey template binding name\n     * @param tplValue template binding value\n     * @param sourceSpan span of template binding relative to entire the template\n     * @param absoluteValueOffset start of the tplValue relative to the entire template\n     * @param targetMatchableAttrs potential attributes to match in the template\n     * @param targetProps target property bindings in the template\n     * @param targetVars target variables in the template\n     */\n    parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars, isIvyAst) {\n        const absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX$1.length;\n        const bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);\n        for (const binding of bindings) {\n            // sourceSpan is for the entire HTML attribute. bindingSpan is for a particular\n            // binding within the microsyntax expression so it's more narrow than sourceSpan.\n            const bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);\n            const key = binding.key.source;\n            const keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);\n            if (binding instanceof VariableBinding) {\n                const value = binding.value ? binding.value.source : '$implicit';\n                const valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : undefined;\n                targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));\n            }\n            else if (binding.value) {\n                const srcSpan = isIvyAst ? bindingSpan : sourceSpan;\n                const valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);\n                this._parsePropertyAst(key, binding.value, srcSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n            }\n            else {\n                targetMatchableAttrs.push([key, '' /* value */]);\n                // Since this is a literal attribute with no RHS, source span should be\n                // just the key span.\n                this.parseLiteralAttr(key, null /* value */, keySpan, absoluteValueOffset, undefined /* valueSpan */, targetMatchableAttrs, targetProps, keySpan);\n            }\n        }\n    }\n    /**\n     * Parses the bindings in a microsyntax expression, e.g.\n     * ```\n     *    <tag *tplKey=\"let value1 = prop; let value2 = localVar\">\n     * ```\n     *\n     * @param tplKey template binding name\n     * @param tplValue template binding value\n     * @param sourceSpan span of template binding relative to entire the template\n     * @param absoluteKeyOffset start of the `tplKey`\n     * @param absoluteValueOffset start of the `tplValue`\n     */\n    _parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {\n        const sourceInfo = sourceSpan.start.toString();\n        try {\n            const bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo, absoluteKeyOffset, absoluteValueOffset);\n            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n            bindingsResult.warnings.forEach((warning) => {\n                this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);\n            });\n            return bindingsResult.templateBindings;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return [];\n        }\n    }\n    parseLiteralAttr(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, \n    // TODO(atscott): keySpan is only optional here so VE template parser implementation does not\n    // have to change This should be required when VE is removed.\n    targetProps, keySpan) {\n        if (isAnimationLabel(name)) {\n            name = name.substring(1);\n            if (keySpan !== undefined) {\n                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n            }\n            if (value) {\n                this._reportError(`Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid.` +\n                    ` Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.ERROR);\n            }\n            this._parseAnimation(name, value, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n        }\n        else {\n            targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, '', absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, keySpan, valueSpan));\n        }\n    }\n    parsePropertyBinding(name, expression, isHost, sourceSpan, absoluteOffset, valueSpan, \n    // TODO(atscott): keySpan is only optional here so VE template parser implementation does not\n    // have to change This should be required when VE is removed.\n    targetMatchableAttrs, targetProps, keySpan) {\n        if (name.length === 0) {\n            this._reportError(`Property name is missing in binding`, sourceSpan);\n        }\n        let isAnimationProp = false;\n        if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n            isAnimationProp = true;\n            name = name.substring(ANIMATE_PROP_PREFIX.length);\n            if (keySpan !== undefined) {\n                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + ANIMATE_PROP_PREFIX.length, keySpan.end.offset));\n            }\n        }\n        else if (isAnimationLabel(name)) {\n            isAnimationProp = true;\n            name = name.substring(1);\n            if (keySpan !== undefined) {\n                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n            }\n        }\n        if (isAnimationProp) {\n            this._parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n        }\n        else {\n            this._parsePropertyAst(name, this._parseBinding(expression, isHost, valueSpan || sourceSpan, absoluteOffset), sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n        }\n    }\n    parsePropertyInterpolation(name, value, sourceSpan, valueSpan, targetMatchableAttrs, \n    // TODO(atscott): keySpan is only optional here so VE template parser implementation does not\n    // have to change This should be required when VE is removed.\n    targetProps, keySpan) {\n        const expr = this.parseInterpolation(value, valueSpan || sourceSpan);\n        if (expr) {\n            this._parsePropertyAst(name, expr, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n            return true;\n        }\n        return false;\n    }\n    _parsePropertyAst(name, ast, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps) {\n        targetMatchableAttrs.push([name, ast.source]);\n        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.DEFAULT, sourceSpan, keySpan, valueSpan));\n    }\n    _parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps) {\n        if (name.length === 0) {\n            this._reportError('Animation trigger is missing', sourceSpan);\n        }\n        // This will occur when a @trigger is not paired with an expression.\n        // For animations it is valid to not have an expression since */void\n        // states will be applied by angular when the element is attached/detached\n        const ast = this._parseBinding(expression || 'undefined', false, valueSpan || sourceSpan, absoluteOffset);\n        targetMatchableAttrs.push([name, ast.source]);\n        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan, keySpan, valueSpan));\n    }\n    _parseBinding(value, isHostBinding, sourceSpan, absoluteOffset) {\n        const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown)').toString();\n        try {\n            const ast = isHostBinding ?\n                this._exprParser.parseSimpleBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig) :\n                this._exprParser.parseBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n        }\n    }\n    createBoundElementProperty(elementSelector, boundProp, skipValidation = false, mapPropertyName = true) {\n        if (boundProp.isAnimation) {\n            return new BoundElementProperty(boundProp.name, 4 /* Animation */, SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);\n        }\n        let unit = null;\n        let bindingType = undefined;\n        let boundPropertyName = null;\n        const parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n        let securityContexts = undefined;\n        // Check for special cases (prefix style, attr, class)\n        if (parts.length > 1) {\n            if (parts[0] == ATTRIBUTE_PREFIX) {\n                boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);\n                if (!skipValidation) {\n                    this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n                }\n                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);\n                const nsSeparatorIdx = boundPropertyName.indexOf(':');\n                if (nsSeparatorIdx > -1) {\n                    const ns = boundPropertyName.substring(0, nsSeparatorIdx);\n                    const name = boundPropertyName.substring(nsSeparatorIdx + 1);\n                    boundPropertyName = mergeNsAndName(ns, name);\n                }\n                bindingType = 1 /* Attribute */;\n            }\n            else if (parts[0] == CLASS_PREFIX) {\n                boundPropertyName = parts[1];\n                bindingType = 2 /* Class */;\n                securityContexts = [SecurityContext.NONE];\n            }\n            else if (parts[0] == STYLE_PREFIX) {\n                unit = parts.length > 2 ? parts[2] : null;\n                boundPropertyName = parts[1];\n                bindingType = 3 /* Style */;\n                securityContexts = [SecurityContext.STYLE];\n            }\n        }\n        // If not a special case, use the full property name\n        if (boundPropertyName === null) {\n            const mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);\n            boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;\n            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);\n            bindingType = 0 /* Property */;\n            if (!skipValidation) {\n                this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);\n            }\n        }\n        return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);\n    }\n    // TODO: keySpan should be required but was made optional to avoid changing VE parser.\n    parseEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {\n        if (name.length === 0) {\n            this._reportError(`Event name is missing in binding`, sourceSpan);\n        }\n        if (isAnimationLabel(name)) {\n            name = name.substr(1);\n            if (keySpan !== undefined) {\n                keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n            }\n            this._parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan);\n        }\n        else {\n            this._parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan);\n        }\n    }\n    calcPossibleSecurityContexts(selector, propName, isAttribute) {\n        const prop = this._schemaRegistry.getMappedPropName(propName);\n        return calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);\n    }\n    _parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan) {\n        const matches = splitAtPeriod(name, [name, '']);\n        const eventName = matches[0];\n        const phase = matches[1].toLowerCase();\n        const ast = this._parseAction(expression, handlerSpan);\n        targetEvents.push(new ParsedEvent(eventName, phase, 1 /* Animation */, ast, sourceSpan, handlerSpan, keySpan));\n        if (eventName.length === 0) {\n            this._reportError(`Animation event name is missing in binding`, sourceSpan);\n        }\n        if (phase) {\n            if (phase !== 'start' && phase !== 'done') {\n                this._reportError(`The provided animation output phase value \"${phase}\" for \"@${eventName}\" is not supported (use start or done)`, sourceSpan);\n            }\n        }\n        else {\n            this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);\n        }\n    }\n    _parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {\n        // long format: 'target: eventName'\n        const [target, eventName] = splitAtColon(name, [null, name]);\n        const ast = this._parseAction(expression, handlerSpan);\n        targetMatchableAttrs.push([name, ast.source]);\n        targetEvents.push(new ParsedEvent(eventName, target, 0 /* Regular */, ast, sourceSpan, handlerSpan, keySpan));\n        // Don't detect directives for event names for now,\n        // so don't add the event name to the matchableAttrs\n    }\n    _parseAction(value, sourceSpan) {\n        const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown').toString();\n        const absoluteOffset = (sourceSpan && sourceSpan.start) ? sourceSpan.start.offset : 0;\n        try {\n            const ast = this._exprParser.parseAction(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n            if (ast) {\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            }\n            if (!ast || ast.ast instanceof EmptyExpr) {\n                this._reportError(`Empty expressions are not allowed`, sourceSpan);\n                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n            }\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n        }\n    }\n    _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n        this.errors.push(new ParseError(sourceSpan, message, level));\n    }\n    _reportExpressionParserErrors(errors, sourceSpan) {\n        for (const error of errors) {\n            this._reportError(error.message, sourceSpan);\n        }\n    }\n    /**\n     * @param propName the name of the property / attribute\n     * @param sourceSpan\n     * @param isAttr true when binding to an attribute\n     */\n    _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {\n        const report = isAttr ? this._schemaRegistry.validateAttribute(propName) :\n            this._schemaRegistry.validateProperty(propName);\n        if (report.error) {\n            this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);\n        }\n    }\n}\nclass PipeCollector extends RecursiveAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.pipes = new Map();\n    }\n    visitPipe(ast, context) {\n        this.pipes.set(ast.name, ast);\n        ast.exp.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    }\n}\nfunction isAnimationLabel(name) {\n    return name[0] == '@';\n}\nfunction calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {\n    const ctxs = [];\n    CssSelector.parse(selector).forEach((selector) => {\n        const elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n        const notElementNames = new Set(selector.notSelectors.filter(selector => selector.isElementSelector())\n            .map((selector) => selector.element));\n        const possibleElementNames = elementNames.filter(elementName => !notElementNames.has(elementName));\n        ctxs.push(...possibleElementNames.map(elementName => registry.securityContext(elementName, propName, isAttribute)));\n    });\n    return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n/**\n * Compute a new ParseSourceSpan based off an original `sourceSpan` by using\n * absolute offsets from the specified `absoluteSpan`.\n *\n * @param sourceSpan original source span\n * @param absoluteSpan absolute source span to move to\n */\nfunction moveParseSourceSpan(sourceSpan, absoluteSpan) {\n    // The difference of two absolute offsets provide the relative offset\n    const startDiff = absoluteSpan.start - sourceSpan.start.offset;\n    const endDiff = absoluteSpan.end - sourceSpan.end.offset;\n    return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff), sourceSpan.fullStart.moveBy(startDiff), sourceSpan.details);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Some of the code comes from WebComponents.JS\n// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js\nfunction isStyleUrlResolvable(url) {\n    if (url == null || url.length === 0 || url[0] == '/')\n        return false;\n    const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n}\nconst URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst NG_CONTENT_SELECT_ATTR$1 = 'select';\nconst LINK_ELEMENT = 'link';\nconst LINK_STYLE_REL_ATTR = 'rel';\nconst LINK_STYLE_HREF_ATTR = 'href';\nconst LINK_STYLE_REL_VALUE = 'stylesheet';\nconst STYLE_ELEMENT = 'style';\nconst SCRIPT_ELEMENT = 'script';\nconst NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nconst NG_PROJECT_AS = 'ngProjectAs';\nfunction preparseElement(ast) {\n    let selectAttr = null;\n    let hrefAttr = null;\n    let relAttr = null;\n    let nonBindable = false;\n    let projectAs = '';\n    ast.attrs.forEach(attr => {\n        const lcAttrName = attr.name.toLowerCase();\n        if (lcAttrName == NG_CONTENT_SELECT_ATTR$1) {\n            selectAttr = attr.value;\n        }\n        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n            hrefAttr = attr.value;\n        }\n        else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n            relAttr = attr.value;\n        }\n        else if (attr.name == NG_NON_BINDABLE_ATTR) {\n            nonBindable = true;\n        }\n        else if (attr.name == NG_PROJECT_AS) {\n            if (attr.value.length > 0) {\n                projectAs = attr.value;\n            }\n        }\n    });\n    selectAttr = normalizeNgContentSelect(selectAttr);\n    const nodeName = ast.name.toLowerCase();\n    let type = PreparsedElementType.OTHER;\n    if (isNgContent(nodeName)) {\n        type = PreparsedElementType.NG_CONTENT;\n    }\n    else if (nodeName == STYLE_ELEMENT) {\n        type = PreparsedElementType.STYLE;\n    }\n    else if (nodeName == SCRIPT_ELEMENT) {\n        type = PreparsedElementType.SCRIPT;\n    }\n    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n        type = PreparsedElementType.STYLESHEET;\n    }\n    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\nvar PreparsedElementType;\n(function (PreparsedElementType) {\n    PreparsedElementType[PreparsedElementType[\"NG_CONTENT\"] = 0] = \"NG_CONTENT\";\n    PreparsedElementType[PreparsedElementType[\"STYLE\"] = 1] = \"STYLE\";\n    PreparsedElementType[PreparsedElementType[\"STYLESHEET\"] = 2] = \"STYLESHEET\";\n    PreparsedElementType[PreparsedElementType[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    PreparsedElementType[PreparsedElementType[\"OTHER\"] = 4] = \"OTHER\";\n})(PreparsedElementType || (PreparsedElementType = {}));\nclass PreparsedElement {\n    constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n        this.type = type;\n        this.selectAttr = selectAttr;\n        this.hrefAttr = hrefAttr;\n        this.nonBindable = nonBindable;\n        this.projectAs = projectAs;\n    }\n}\nfunction normalizeNgContentSelect(selectAttr) {\n    if (selectAttr === null || selectAttr.length === 0) {\n        return '*';\n    }\n    return selectAttr;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BIND_NAME_REGEXP = /^(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*)$/;\n// Group 1 = \"bind-\"\nconst KW_BIND_IDX = 1;\n// Group 2 = \"let-\"\nconst KW_LET_IDX = 2;\n// Group 3 = \"ref-/#\"\nconst KW_REF_IDX = 3;\n// Group 4 = \"on-\"\nconst KW_ON_IDX = 4;\n// Group 5 = \"bindon-\"\nconst KW_BINDON_IDX = 5;\n// Group 6 = \"@\"\nconst KW_AT_IDX = 6;\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\nconst IDENT_KW_IDX = 7;\nconst BINDING_DELIMS = {\n    BANANA_BOX: { start: '[(', end: ')]' },\n    PROPERTY: { start: '[', end: ']' },\n    EVENT: { start: '(', end: ')' },\n};\nconst TEMPLATE_ATTR_PREFIX = '*';\nfunction htmlAstToRender3Ast(htmlNodes, bindingParser, options) {\n    const transformer = new HtmlAstToIvyAst(bindingParser, options);\n    const ivyNodes = visitAll(transformer, htmlNodes);\n    // Errors might originate in either the binding parser or the html to ivy transformer\n    const allErrors = bindingParser.errors.concat(transformer.errors);\n    const result = {\n        nodes: ivyNodes,\n        errors: allErrors,\n        styleUrls: transformer.styleUrls,\n        styles: transformer.styles,\n        ngContentSelectors: transformer.ngContentSelectors\n    };\n    if (options.collectCommentNodes) {\n        result.commentNodes = transformer.commentNodes;\n    }\n    return result;\n}\nclass HtmlAstToIvyAst {\n    constructor(bindingParser, options) {\n        this.bindingParser = bindingParser;\n        this.options = options;\n        this.errors = [];\n        this.styles = [];\n        this.styleUrls = [];\n        this.ngContentSelectors = [];\n        // This array will be populated if `Render3ParseOptions['collectCommentNodes']` is true\n        this.commentNodes = [];\n        this.inI18nBlock = false;\n    }\n    // HTML visitor\n    visitElement(element) {\n        const isI18nRootElement = isI18nRootNode(element.i18n);\n        if (isI18nRootElement) {\n            if (this.inI18nBlock) {\n                this.reportError('Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.', element.sourceSpan);\n            }\n            this.inI18nBlock = true;\n        }\n        const preparsedElement = preparseElement(element);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT) {\n            return null;\n        }\n        else if (preparsedElement.type === PreparsedElementType.STYLE) {\n            const contents = textContents(element);\n            if (contents !== null) {\n                this.styles.push(contents);\n            }\n            return null;\n        }\n        else if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n            isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n            this.styleUrls.push(preparsedElement.hrefAttr);\n            return null;\n        }\n        // Whether the element is a `<ng-template>`\n        const isTemplateElement = isNgTemplate(element.name);\n        const parsedProperties = [];\n        const boundEvents = [];\n        const variables = [];\n        const references = [];\n        const attributes = [];\n        const i18nAttrsMeta = {};\n        const templateParsedProperties = [];\n        const templateVariables = [];\n        // Whether the element has any *-attribute\n        let elementHasInlineTemplate = false;\n        for (const attribute of element.attrs) {\n            let hasBinding = false;\n            const normalizedName = normalizeAttributeName(attribute.name);\n            // `*attr` defines template bindings\n            let isTemplateBinding = false;\n            if (attribute.i18n) {\n                i18nAttrsMeta[attribute.name] = attribute.i18n;\n            }\n            if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n                // *-attributes\n                if (elementHasInlineTemplate) {\n                    this.reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attribute.sourceSpan);\n                }\n                isTemplateBinding = true;\n                elementHasInlineTemplate = true;\n                const templateValue = attribute.value;\n                const templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);\n                const parsedVariables = [];\n                const absoluteValueOffset = attribute.valueSpan ?\n                    attribute.valueSpan.start.offset :\n                    // If there is no value span the attribute does not have a value, like `attr` in\n                    //`<div attr></div>`. In this case, point to one character beyond the last character of\n                    // the attribute name.\n                    attribute.sourceSpan.start.offset + attribute.name.length;\n                this.bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attribute.sourceSpan, absoluteValueOffset, [], templateParsedProperties, parsedVariables, true /* isIvyAst */);\n                templateVariables.push(...parsedVariables.map(v => new Variable(v.name, v.value, v.sourceSpan, v.keySpan, v.valueSpan)));\n            }\n            else {\n                // Check for variables, events, property bindings, interpolation\n                hasBinding = this.parseAttribute(isTemplateElement, attribute, [], parsedProperties, boundEvents, variables, references);\n            }\n            if (!hasBinding && !isTemplateBinding) {\n                // don't include the bindings as attributes as well in the AST\n                attributes.push(this.visitAttribute(attribute));\n            }\n        }\n        const children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children);\n        let parsedElement;\n        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n            // `<ng-content>`\n            if (element.children &&\n                !element.children.every((node) => isEmptyTextNode(node) || isCommentNode(node))) {\n                this.reportError(`<ng-content> element cannot have content.`, element.sourceSpan);\n            }\n            const selector = preparsedElement.selectAttr;\n            const attrs = element.attrs.map(attr => this.visitAttribute(attr));\n            parsedElement = new Content(selector, attrs, element.sourceSpan, element.i18n);\n            this.ngContentSelectors.push(selector);\n        }\n        else if (isTemplateElement) {\n            // `<ng-template>`\n            const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n            parsedElement = new Template(element.name, attributes, attrs.bound, boundEvents, [ /* no template attributes */], children, references, variables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n        }\n        else {\n            const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n            parsedElement = new Element$1(element.name, attributes, attrs.bound, boundEvents, children, references, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n        }\n        if (elementHasInlineTemplate) {\n            // If this node is an inline-template (e.g. has *ngFor) then we need to create a template\n            // node that contains this node.\n            // Moreover, if the node is an element, then we need to hoist its attributes to the template\n            // node for matching against content projection selectors.\n            const attrs = this.extractAttributes('ng-template', templateParsedProperties, i18nAttrsMeta);\n            const templateAttrs = [];\n            attrs.literal.forEach(attr => templateAttrs.push(attr));\n            attrs.bound.forEach(attr => templateAttrs.push(attr));\n            const hoistedAttrs = parsedElement instanceof Element$1 ?\n                {\n                    attributes: parsedElement.attributes,\n                    inputs: parsedElement.inputs,\n                    outputs: parsedElement.outputs,\n                } :\n                { attributes: [], inputs: [], outputs: [] };\n            // For <ng-template>s with structural directives on them, avoid passing i18n information to\n            // the wrapping template to prevent unnecessary i18n instructions from being generated. The\n            // necessary i18n meta information will be extracted from child elements.\n            const i18n = isTemplateElement && isI18nRootElement ? undefined : element.i18n;\n            // TODO(pk): test for this case\n            parsedElement = new Template(parsedElement.name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs, [parsedElement], [ /* no references */], templateVariables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, i18n);\n        }\n        if (isI18nRootElement) {\n            this.inI18nBlock = false;\n        }\n        return parsedElement;\n    }\n    visitAttribute(attribute) {\n        return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);\n    }\n    visitText(text) {\n        return this._visitTextWithInterpolation(text.value, text.sourceSpan, text.i18n);\n    }\n    visitExpansion(expansion) {\n        if (!expansion.i18n) {\n            // do not generate Icu in case it was created\n            // outside of i18n block in a template\n            return null;\n        }\n        if (!isI18nRootNode(expansion.i18n)) {\n            throw new Error(`Invalid type \"${expansion.i18n.constructor}\" for \"i18n\" property of ${expansion.sourceSpan.toString()}. Expected a \"Message\"`);\n        }\n        const message = expansion.i18n;\n        const vars = {};\n        const placeholders = {};\n        // extract VARs from ICUs - we process them separately while\n        // assembling resulting message via goog.getMsg function, since\n        // we need to pass them to top-level goog.getMsg call\n        Object.keys(message.placeholders).forEach(key => {\n            const value = message.placeholders[key];\n            if (key.startsWith(I18N_ICU_VAR_PREFIX)) {\n                // Currently when the `plural` or `select` keywords in an ICU contain trailing spaces (e.g.\n                // `{count, select , ...}`), these spaces are also included into the key names in ICU vars\n                // (e.g. \"VAR_SELECT \"). These trailing spaces are not desirable, since they will later be\n                // converted into `_` symbols while normalizing placeholder names, which might lead to\n                // mismatches at runtime (i.e. placeholder will not be replaced with the correct value).\n                const formattedKey = key.trim();\n                const ast = this.bindingParser.parseInterpolationExpression(value.text, value.sourceSpan);\n                vars[formattedKey] = new BoundText(ast, value.sourceSpan);\n            }\n            else {\n                placeholders[key] = this._visitTextWithInterpolation(value.text, value.sourceSpan);\n            }\n        });\n        return new Icu$1(vars, placeholders, expansion.sourceSpan, message);\n    }\n    visitExpansionCase(expansionCase) {\n        return null;\n    }\n    visitComment(comment) {\n        if (this.options.collectCommentNodes) {\n            this.commentNodes.push(new Comment$1(comment.value || '', comment.sourceSpan));\n        }\n        return null;\n    }\n    // convert view engine `ParsedProperty` to a format suitable for IVY\n    extractAttributes(elementName, properties, i18nPropsMeta) {\n        const bound = [];\n        const literal = [];\n        properties.forEach(prop => {\n            const i18n = i18nPropsMeta[prop.name];\n            if (prop.isLiteral) {\n                literal.push(new TextAttribute(prop.name, prop.expression.source || '', prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n));\n            }\n            else {\n                // Note that validation is skipped and property mapping is disabled\n                // due to the fact that we need to make sure a given prop is not an\n                // input of a directive and directive matching happens at runtime.\n                const bep = this.bindingParser.createBoundElementProperty(elementName, prop, /* skipValidation */ true, /* mapPropertyName */ false);\n                bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n));\n            }\n        });\n        return { bound, literal };\n    }\n    parseAttribute(isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references) {\n        const name = normalizeAttributeName(attribute.name);\n        const value = attribute.value;\n        const srcSpan = attribute.sourceSpan;\n        const absoluteOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : srcSpan.start.offset;\n        function createKeySpan(srcSpan, prefix, identifier) {\n            // We need to adjust the start location for the keySpan to account for the removed 'data-'\n            // prefix from `normalizeAttributeName`.\n            const normalizationAdjustment = attribute.name.length - name.length;\n            const keySpanStart = srcSpan.start.moveBy(prefix.length + normalizationAdjustment);\n            const keySpanEnd = keySpanStart.moveBy(identifier.length);\n            return new ParseSourceSpan(keySpanStart, keySpanEnd, keySpanStart, identifier);\n        }\n        const bindParts = name.match(BIND_NAME_REGEXP);\n        if (bindParts) {\n            if (bindParts[KW_BIND_IDX] != null) {\n                const identifier = bindParts[IDENT_KW_IDX];\n                const keySpan = createKeySpan(srcSpan, bindParts[KW_BIND_IDX], identifier);\n                this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n            }\n            else if (bindParts[KW_LET_IDX]) {\n                if (isTemplateElement) {\n                    const identifier = bindParts[IDENT_KW_IDX];\n                    const keySpan = createKeySpan(srcSpan, bindParts[KW_LET_IDX], identifier);\n                    this.parseVariable(identifier, value, srcSpan, keySpan, attribute.valueSpan, variables);\n                }\n                else {\n                    this.reportError(`\"let-\" is only supported on ng-template elements.`, srcSpan);\n                }\n            }\n            else if (bindParts[KW_REF_IDX]) {\n                const identifier = bindParts[IDENT_KW_IDX];\n                const keySpan = createKeySpan(srcSpan, bindParts[KW_REF_IDX], identifier);\n                this.parseReference(identifier, value, srcSpan, keySpan, attribute.valueSpan, references);\n            }\n            else if (bindParts[KW_ON_IDX]) {\n                const events = [];\n                const identifier = bindParts[IDENT_KW_IDX];\n                const keySpan = createKeySpan(srcSpan, bindParts[KW_ON_IDX], identifier);\n                this.bindingParser.parseEvent(identifier, value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, keySpan);\n                addEvents(events, boundEvents);\n            }\n            else if (bindParts[KW_BINDON_IDX]) {\n                const identifier = bindParts[IDENT_KW_IDX];\n                const keySpan = createKeySpan(srcSpan, bindParts[KW_BINDON_IDX], identifier);\n                this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n                this.parseAssignmentEvent(identifier, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, keySpan);\n            }\n            else if (bindParts[KW_AT_IDX]) {\n                const keySpan = createKeySpan(srcSpan, '', name);\n                this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n            }\n            return true;\n        }\n        // We didn't see a kw-prefixed property binding, but we have not yet checked\n        // for the []/()/[()] syntax.\n        let delims = null;\n        if (name.startsWith(BINDING_DELIMS.BANANA_BOX.start)) {\n            delims = BINDING_DELIMS.BANANA_BOX;\n        }\n        else if (name.startsWith(BINDING_DELIMS.PROPERTY.start)) {\n            delims = BINDING_DELIMS.PROPERTY;\n        }\n        else if (name.startsWith(BINDING_DELIMS.EVENT.start)) {\n            delims = BINDING_DELIMS.EVENT;\n        }\n        if (delims !== null &&\n            // NOTE: older versions of the parser would match a start/end delimited\n            // binding iff the property name was terminated by the ending delimiter\n            // and the identifier in the binding was non-empty.\n            // TODO(ayazhafiz): update this to handle malformed bindings.\n            name.endsWith(delims.end) && name.length > delims.start.length + delims.end.length) {\n            const identifier = name.substring(delims.start.length, name.length - delims.end.length);\n            const keySpan = createKeySpan(srcSpan, delims.start, identifier);\n            if (delims.start === BINDING_DELIMS.BANANA_BOX.start) {\n                this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n                this.parseAssignmentEvent(identifier, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, keySpan);\n            }\n            else if (delims.start === BINDING_DELIMS.PROPERTY.start) {\n                this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n            }\n            else {\n                const events = [];\n                this.bindingParser.parseEvent(identifier, value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, keySpan);\n                addEvents(events, boundEvents);\n            }\n            return true;\n        }\n        // No explicit binding found.\n        const keySpan = createKeySpan(srcSpan, '' /* prefix */, name);\n        const hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n        return hasBinding;\n    }\n    _visitTextWithInterpolation(value, sourceSpan, i18n) {\n        const valueNoNgsp = replaceNgsp(value);\n        const expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan);\n        return expr ? new BoundText(expr, sourceSpan, i18n) : new Text$3(valueNoNgsp, sourceSpan);\n    }\n    parseVariable(identifier, value, sourceSpan, keySpan, valueSpan, variables) {\n        if (identifier.indexOf('-') > -1) {\n            this.reportError(`\"-\" is not allowed in variable names`, sourceSpan);\n        }\n        else if (identifier.length === 0) {\n            this.reportError(`Variable does not have a name`, sourceSpan);\n        }\n        variables.push(new Variable(identifier, value, sourceSpan, keySpan, valueSpan));\n    }\n    parseReference(identifier, value, sourceSpan, keySpan, valueSpan, references) {\n        if (identifier.indexOf('-') > -1) {\n            this.reportError(`\"-\" is not allowed in reference names`, sourceSpan);\n        }\n        else if (identifier.length === 0) {\n            this.reportError(`Reference does not have a name`, sourceSpan);\n        }\n        else if (references.some(reference => reference.name === identifier)) {\n            this.reportError(`Reference \"#${identifier}\" is defined more than once`, sourceSpan);\n        }\n        references.push(new Reference(identifier, value, sourceSpan, keySpan, valueSpan));\n    }\n    parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents, keySpan) {\n        const events = [];\n        this.bindingParser.parseEvent(`${name}Change`, `${expression}=$event`, sourceSpan, valueSpan || sourceSpan, targetMatchableAttrs, events, keySpan);\n        addEvents(events, boundEvents);\n    }\n    reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n        this.errors.push(new ParseError(sourceSpan, message, level));\n    }\n}\nclass NonBindableVisitor {\n    visitElement(ast) {\n        const preparsedElement = preparseElement(ast);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE ||\n            preparsedElement.type === PreparsedElementType.STYLESHEET) {\n            // Skipping <script> for security reasons\n            // Skipping <style> and stylesheets as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        const children = visitAll(this, ast.children, null);\n        return new Element$1(ast.name, visitAll(this, ast.attrs), \n        /* inputs */ [], /* outputs */ [], children, /* references */ [], ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);\n    }\n    visitComment(comment) {\n        return null;\n    }\n    visitAttribute(attribute) {\n        return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);\n    }\n    visitText(text) {\n        return new Text$3(text.value, text.sourceSpan);\n    }\n    visitExpansion(expansion) {\n        return null;\n    }\n    visitExpansionCase(expansionCase) {\n        return null;\n    }\n}\nconst NON_BINDABLE_VISITOR = new NonBindableVisitor();\nfunction normalizeAttributeName(attrName) {\n    return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n}\nfunction addEvents(events, boundEvents) {\n    boundEvents.push(...events.map(e => BoundEvent.fromParsedEvent(e)));\n}\nfunction isEmptyTextNode(node) {\n    return node instanceof Text && node.value.trim().length == 0;\n}\nfunction isCommentNode(node) {\n    return node instanceof Comment;\n}\nfunction textContents(node) {\n    if (node.children.length !== 1 || !(node.children[0] instanceof Text)) {\n        return null;\n    }\n    else {\n        return node.children[0].value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TagType;\n(function (TagType) {\n    TagType[TagType[\"ELEMENT\"] = 0] = \"ELEMENT\";\n    TagType[TagType[\"TEMPLATE\"] = 1] = \"TEMPLATE\";\n})(TagType || (TagType = {}));\n/**\n * Generates an object that is used as a shared state between parent and all child contexts.\n */\nfunction setupRegistry() {\n    return { getUniqueId: getSeqNumberGenerator(), icus: new Map() };\n}\n/**\n * I18nContext is a helper class which keeps track of all i18n-related aspects\n * (accumulates placeholders, bindings, etc) between i18nStart and i18nEnd instructions.\n *\n * When we enter a nested template, the top-level context is being passed down\n * to the nested component, which uses this context to generate a child instance\n * of I18nContext class (to handle nested template) and at the end, reconciles it back\n * with the parent context.\n *\n * @param index Instruction index of i18nStart, which initiates this context\n * @param ref Reference to a translation const that represents the content if thus context\n * @param level Nestng level defined for child contexts\n * @param templateIndex Instruction index of a template which this context belongs to\n * @param meta Meta information (id, meaning, description, etc) associated with this context\n */\nclass I18nContext {\n    constructor(index, ref, level = 0, templateIndex = null, meta, registry) {\n        this.index = index;\n        this.ref = ref;\n        this.level = level;\n        this.templateIndex = templateIndex;\n        this.meta = meta;\n        this.registry = registry;\n        this.bindings = new Set();\n        this.placeholders = new Map();\n        this.isEmitted = false;\n        this._unresolvedCtxCount = 0;\n        this._registry = registry || setupRegistry();\n        this.id = this._registry.getUniqueId();\n    }\n    appendTag(type, node, index, closed) {\n        if (node.isVoid && closed) {\n            return; // ignore \"close\" for void tags\n        }\n        const ph = node.isVoid || !closed ? node.startName : node.closeName;\n        const content = { type, index, ctx: this.id, isVoid: node.isVoid, closed };\n        updatePlaceholderMap(this.placeholders, ph, content);\n    }\n    get icus() {\n        return this._registry.icus;\n    }\n    get isRoot() {\n        return this.level === 0;\n    }\n    get isResolved() {\n        return this._unresolvedCtxCount === 0;\n    }\n    getSerializedPlaceholders() {\n        const result = new Map();\n        this.placeholders.forEach((values, key) => result.set(key, values.map(serializePlaceholderValue)));\n        return result;\n    }\n    // public API to accumulate i18n-related content\n    appendBinding(binding) {\n        this.bindings.add(binding);\n    }\n    appendIcu(name, ref) {\n        updatePlaceholderMap(this._registry.icus, name, ref);\n    }\n    appendBoundText(node) {\n        const phs = assembleBoundTextPlaceholders(node, this.bindings.size, this.id);\n        phs.forEach((values, key) => updatePlaceholderMap(this.placeholders, key, ...values));\n    }\n    appendTemplate(node, index) {\n        // add open and close tags at the same time,\n        // since we process nested templates separately\n        this.appendTag(TagType.TEMPLATE, node, index, false);\n        this.appendTag(TagType.TEMPLATE, node, index, true);\n        this._unresolvedCtxCount++;\n    }\n    appendElement(node, index, closed) {\n        this.appendTag(TagType.ELEMENT, node, index, closed);\n    }\n    appendProjection(node, index) {\n        // Add open and close tags at the same time, since `<ng-content>` has no content,\n        // so when we come across `<ng-content>` we can register both open and close tags.\n        // Note: runtime i18n logic doesn't distinguish `<ng-content>` tag placeholders and\n        // regular element tag placeholders, so we generate element placeholders for both types.\n        this.appendTag(TagType.ELEMENT, node, index, false);\n        this.appendTag(TagType.ELEMENT, node, index, true);\n    }\n    /**\n     * Generates an instance of a child context based on the root one,\n     * when we enter a nested template within I18n section.\n     *\n     * @param index Instruction index of corresponding i18nStart, which initiates this context\n     * @param templateIndex Instruction index of a template which this context belongs to\n     * @param meta Meta information (id, meaning, description, etc) associated with this context\n     *\n     * @returns I18nContext instance\n     */\n    forkChildContext(index, templateIndex, meta) {\n        return new I18nContext(index, this.ref, this.level + 1, templateIndex, meta, this._registry);\n    }\n    /**\n     * Reconciles child context into parent one once the end of the i18n block is reached (i18nEnd).\n     *\n     * @param context Child I18nContext instance to be reconciled with parent context.\n     */\n    reconcileChildContext(context) {\n        // set the right context id for open and close\n        // template tags, so we can use it as sub-block ids\n        ['start', 'close'].forEach((op) => {\n            const key = context.meta[`${op}Name`];\n            const phs = this.placeholders.get(key) || [];\n            const tag = phs.find(findTemplateFn(this.id, context.templateIndex));\n            if (tag) {\n                tag.ctx = context.id;\n            }\n        });\n        // reconcile placeholders\n        const childPhs = context.placeholders;\n        childPhs.forEach((values, key) => {\n            const phs = this.placeholders.get(key);\n            if (!phs) {\n                this.placeholders.set(key, values);\n                return;\n            }\n            // try to find matching template...\n            const tmplIdx = phs.findIndex(findTemplateFn(context.id, context.templateIndex));\n            if (tmplIdx >= 0) {\n                // ... if found - replace it with nested template content\n                const isCloseTag = key.startsWith('CLOSE');\n                const isTemplateTag = key.endsWith('NG-TEMPLATE');\n                if (isTemplateTag) {\n                    // current template's content is placed before or after\n                    // parent template tag, depending on the open/close atrribute\n                    phs.splice(tmplIdx + (isCloseTag ? 0 : 1), 0, ...values);\n                }\n                else {\n                    const idx = isCloseTag ? values.length - 1 : 0;\n                    values[idx].tmpl = phs[tmplIdx];\n                    phs.splice(tmplIdx, 1, ...values);\n                }\n            }\n            else {\n                // ... otherwise just append content to placeholder value\n                phs.push(...values);\n            }\n            this.placeholders.set(key, phs);\n        });\n        this._unresolvedCtxCount--;\n    }\n}\n//\n// Helper methods\n//\nfunction wrap(symbol, index, contextId, closed) {\n    const state = closed ? '/' : '';\n    return wrapI18nPlaceholder(`${state}${symbol}${index}`, contextId);\n}\nfunction wrapTag(symbol, { index, ctx, isVoid }, closed) {\n    return isVoid ? wrap(symbol, index, ctx) + wrap(symbol, index, ctx, true) :\n        wrap(symbol, index, ctx, closed);\n}\nfunction findTemplateFn(ctx, templateIndex) {\n    return (token) => typeof token === 'object' && token.type === TagType.TEMPLATE &&\n        token.index === templateIndex && token.ctx === ctx;\n}\nfunction serializePlaceholderValue(value) {\n    const element = (data, closed) => wrapTag('#', data, closed);\n    const template = (data, closed) => wrapTag('*', data, closed);\n    const projection = (data, closed) => wrapTag('!', data, closed);\n    switch (value.type) {\n        case TagType.ELEMENT:\n            // close element tag\n            if (value.closed) {\n                return element(value, true) + (value.tmpl ? template(value.tmpl, true) : '');\n            }\n            // open element tag that also initiates a template\n            if (value.tmpl) {\n                return template(value.tmpl) + element(value) +\n                    (value.isVoid ? template(value.tmpl, true) : '');\n            }\n            return element(value);\n        case TagType.TEMPLATE:\n            return template(value, value.closed);\n        default:\n            return value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass IcuSerializerVisitor {\n    visitText(text) {\n        return text.value;\n    }\n    visitContainer(container) {\n        return container.children.map(child => child.visit(this)).join('');\n    }\n    visitIcu(icu) {\n        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        const result = `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;\n        return result;\n    }\n    visitTagPlaceholder(ph) {\n        return ph.isVoid ?\n            this.formatPh(ph.startName) :\n            `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n    }\n    visitPlaceholder(ph) {\n        return this.formatPh(ph.name);\n    }\n    visitIcuPlaceholder(ph, context) {\n        return this.formatPh(ph.name);\n    }\n    formatPh(value) {\n        return `{${formatI18nPlaceholderName(value, /* useCamelCase */ false)}}`;\n    }\n}\nconst serializer = new IcuSerializerVisitor();\nfunction serializeIcuNode(icu) {\n    return icu.visit(serializer);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst TAG_TO_PLACEHOLDER_NAMES = {\n    'A': 'LINK',\n    'B': 'BOLD_TEXT',\n    'BR': 'LINE_BREAK',\n    'EM': 'EMPHASISED_TEXT',\n    'H1': 'HEADING_LEVEL1',\n    'H2': 'HEADING_LEVEL2',\n    'H3': 'HEADING_LEVEL3',\n    'H4': 'HEADING_LEVEL4',\n    'H5': 'HEADING_LEVEL5',\n    'H6': 'HEADING_LEVEL6',\n    'HR': 'HORIZONTAL_RULE',\n    'I': 'ITALIC_TEXT',\n    'LI': 'LIST_ITEM',\n    'LINK': 'MEDIA_LINK',\n    'OL': 'ORDERED_LIST',\n    'P': 'PARAGRAPH',\n    'Q': 'QUOTATION',\n    'S': 'STRIKETHROUGH_TEXT',\n    'SMALL': 'SMALL_TEXT',\n    'SUB': 'SUBSTRIPT',\n    'SUP': 'SUPERSCRIPT',\n    'TBODY': 'TABLE_BODY',\n    'TD': 'TABLE_CELL',\n    'TFOOT': 'TABLE_FOOTER',\n    'TH': 'TABLE_HEADER_CELL',\n    'THEAD': 'TABLE_HEADER',\n    'TR': 'TABLE_ROW',\n    'TT': 'MONOSPACED_TEXT',\n    'U': 'UNDERLINED_TEXT',\n    'UL': 'UNORDERED_LIST',\n};\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nclass PlaceholderRegistry {\n    constructor() {\n        // Count the occurrence of the base name top generate a unique name\n        this._placeHolderNameCounts = {};\n        // Maps signature to placeholder names\n        this._signatureToName = {};\n    }\n    getStartTagPlaceholderName(tag, attrs, isVoid) {\n        const signature = this._hashTag(tag, attrs, isVoid);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const upperTag = tag.toUpperCase();\n        const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n        const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);\n        this._signatureToName[signature] = name;\n        return name;\n    }\n    getCloseTagPlaceholderName(tag) {\n        const signature = this._hashClosingTag(tag);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const upperTag = tag.toUpperCase();\n        const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n        const name = this._generateUniqueName(`CLOSE_${baseName}`);\n        this._signatureToName[signature] = name;\n        return name;\n    }\n    getPlaceholderName(name, content) {\n        const upperName = name.toUpperCase();\n        const signature = `PH: ${upperName}=${content}`;\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const uniqueName = this._generateUniqueName(upperName);\n        this._signatureToName[signature] = uniqueName;\n        return uniqueName;\n    }\n    getUniquePlaceholder(name) {\n        return this._generateUniqueName(name.toUpperCase());\n    }\n    // Generate a hash for a tag - does not take attribute order into account\n    _hashTag(tag, attrs, isVoid) {\n        const start = `<${tag}`;\n        const strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join('');\n        const end = isVoid ? '/>' : `></${tag}>`;\n        return start + strAttrs + end;\n    }\n    _hashClosingTag(tag) {\n        return this._hashTag(`/${tag}`, {}, false);\n    }\n    _generateUniqueName(base) {\n        const seen = this._placeHolderNameCounts.hasOwnProperty(base);\n        if (!seen) {\n            this._placeHolderNameCounts[base] = 1;\n            return base;\n        }\n        const id = this._placeHolderNameCounts[base];\n        this._placeHolderNameCounts[base] = id + 1;\n        return `${base}_${id}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _expParser = new Parser$1(new Lexer());\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n */\nfunction createI18nMessageFactory(interpolationConfig) {\n    const visitor = new _I18nVisitor(_expParser, interpolationConfig);\n    return (nodes, meaning, description, customId, visitNodeFn) => visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n}\nfunction noopVisitNodeFn(_html, i18n) {\n    return i18n;\n}\nclass _I18nVisitor {\n    constructor(_expressionParser, _interpolationConfig) {\n        this._expressionParser = _expressionParser;\n        this._interpolationConfig = _interpolationConfig;\n    }\n    toI18nMessage(nodes, meaning = '', description = '', customId = '', visitNodeFn) {\n        const context = {\n            isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,\n            icuDepth: 0,\n            placeholderRegistry: new PlaceholderRegistry(),\n            placeholderToContent: {},\n            placeholderToMessage: {},\n            visitNodeFn: visitNodeFn || noopVisitNodeFn,\n        };\n        const i18nodes = visitAll(this, nodes, context);\n        return new Message(i18nodes, context.placeholderToContent, context.placeholderToMessage, meaning, description, customId);\n    }\n    visitElement(el, context) {\n        var _a;\n        const children = visitAll(this, el.children, context);\n        const attrs = {};\n        el.attrs.forEach(attr => {\n            // Do not visit the attributes, translatable ones are top-level ASTs\n            attrs[attr.name] = attr.value;\n        });\n        const isVoid = getHtmlTagDefinition(el.name).isVoid;\n        const startPhName = context.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n        context.placeholderToContent[startPhName] = {\n            text: el.startSourceSpan.toString(),\n            sourceSpan: el.startSourceSpan,\n        };\n        let closePhName = '';\n        if (!isVoid) {\n            closePhName = context.placeholderRegistry.getCloseTagPlaceholderName(el.name);\n            context.placeholderToContent[closePhName] = {\n                text: `</${el.name}>`,\n                sourceSpan: (_a = el.endSourceSpan) !== null && _a !== void 0 ? _a : el.sourceSpan,\n            };\n        }\n        const node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n        return context.visitNodeFn(el, node);\n    }\n    visitAttribute(attribute, context) {\n        const node = attribute.valueTokens === undefined || attribute.valueTokens.length === 1 ?\n            new Text$2(attribute.value, attribute.valueSpan || attribute.sourceSpan) :\n            this._visitTextWithInterpolation(attribute.valueTokens, attribute.valueSpan || attribute.sourceSpan, context, attribute.i18n);\n        return context.visitNodeFn(attribute, node);\n    }\n    visitText(text, context) {\n        const node = text.tokens.length === 1 ?\n            new Text$2(text.value, text.sourceSpan) :\n            this._visitTextWithInterpolation(text.tokens, text.sourceSpan, context, text.i18n);\n        return context.visitNodeFn(text, node);\n    }\n    visitComment(comment, context) {\n        return null;\n    }\n    visitExpansion(icu, context) {\n        context.icuDepth++;\n        const i18nIcuCases = {};\n        const i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n        icu.cases.forEach((caze) => {\n            i18nIcuCases[caze.value] = new Container(caze.expression.map((node) => node.visit(this, context)), caze.expSourceSpan);\n        });\n        context.icuDepth--;\n        if (context.isIcu || context.icuDepth > 0) {\n            // Returns an ICU node when:\n            // - the message (vs a part of the message) is an ICU message, or\n            // - the ICU message is nested.\n            const expPh = context.placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);\n            i18nIcu.expressionPlaceholder = expPh;\n            context.placeholderToContent[expPh] = {\n                text: icu.switchValue,\n                sourceSpan: icu.switchValueSourceSpan,\n            };\n            return context.visitNodeFn(icu, i18nIcu);\n        }\n        // Else returns a placeholder\n        // ICU placeholders should not be replaced with their original content but with the their\n        // translations.\n        // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n        const phName = context.placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n        context.placeholderToMessage[phName] = this.toI18nMessage([icu], '', '', '', undefined);\n        const node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n        return context.visitNodeFn(icu, node);\n    }\n    visitExpansionCase(_icuCase, _context) {\n        throw new Error('Unreachable code');\n    }\n    /**\n     * Convert, text and interpolated tokens up into text and placeholder pieces.\n     *\n     * @param tokens The text and interpolated tokens.\n     * @param sourceSpan The span of the whole of the `text` string.\n     * @param context The current context of the visitor, used to compute and store placeholders.\n     * @param previousI18n Any i18n metadata associated with this `text` from a previous pass.\n     */\n    _visitTextWithInterpolation(tokens, sourceSpan, context, previousI18n) {\n        // Return a sequence of `Text` and `Placeholder` nodes grouped in a `Container`.\n        const nodes = [];\n        // We will only create a container if there are actually interpolations,\n        // so this flag tracks that.\n        let hasInterpolation = false;\n        for (const token of tokens) {\n            switch (token.type) {\n                case 8 /* INTERPOLATION */:\n                case 17 /* ATTR_VALUE_INTERPOLATION */:\n                    hasInterpolation = true;\n                    const expression = token.parts[1];\n                    const baseName = extractPlaceholderName(expression) || 'INTERPOLATION';\n                    const phName = context.placeholderRegistry.getPlaceholderName(baseName, expression);\n                    context.placeholderToContent[phName] = {\n                        text: token.parts.join(''),\n                        sourceSpan: token.sourceSpan\n                    };\n                    nodes.push(new Placeholder(expression, phName, token.sourceSpan));\n                    break;\n                default:\n                    if (token.parts[0].length > 0) {\n                        // This token is text or an encoded entity.\n                        // If it is following on from a previous text node then merge it into that node\n                        // Otherwise, if it is following an interpolation, then add a new node.\n                        const previous = nodes[nodes.length - 1];\n                        if (previous instanceof Text$2) {\n                            previous.value += token.parts[0];\n                            previous.sourceSpan = new ParseSourceSpan(previous.sourceSpan.start, token.sourceSpan.end, previous.sourceSpan.fullStart, previous.sourceSpan.details);\n                        }\n                        else {\n                            nodes.push(new Text$2(token.parts[0], token.sourceSpan));\n                        }\n                    }\n                    break;\n            }\n        }\n        if (hasInterpolation) {\n            // Whitespace removal may have invalidated the interpolation source-spans.\n            reusePreviousSourceSpans(nodes, previousI18n);\n            return new Container(nodes, sourceSpan);\n        }\n        else {\n            return nodes[0];\n        }\n    }\n}\n/**\n * Re-use the source-spans from `previousI18n` metadata for the `nodes`.\n *\n * Whitespace removal can invalidate the source-spans of interpolation nodes, so we\n * reuse the source-span stored from a previous pass before the whitespace was removed.\n *\n * @param nodes The `Text` and `Placeholder` nodes to be processed.\n * @param previousI18n Any i18n metadata for these `nodes` stored from a previous pass.\n */\nfunction reusePreviousSourceSpans(nodes, previousI18n) {\n    if (previousI18n instanceof Message) {\n        // The `previousI18n` is an i18n `Message`, so we are processing an `Attribute` with i18n\n        // metadata. The `Message` should consist only of a single `Container` that contains the\n        // parts (`Text` and `Placeholder`) to process.\n        assertSingleContainerMessage(previousI18n);\n        previousI18n = previousI18n.nodes[0];\n    }\n    if (previousI18n instanceof Container) {\n        // The `previousI18n` is a `Container`, which means that this is a second i18n extraction pass\n        // after whitespace has been removed from the AST nodes.\n        assertEquivalentNodes(previousI18n.children, nodes);\n        // Reuse the source-spans from the first pass.\n        for (let i = 0; i < nodes.length; i++) {\n            nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;\n        }\n    }\n}\n/**\n * Asserts that the `message` contains exactly one `Container` node.\n */\nfunction assertSingleContainerMessage(message) {\n    const nodes = message.nodes;\n    if (nodes.length !== 1 || !(nodes[0] instanceof Container)) {\n        throw new Error('Unexpected previous i18n message - expected it to consist of only a single `Container` node.');\n    }\n}\n/**\n * Asserts that the `previousNodes` and `node` collections have the same number of elements and\n * corresponding elements have the same node type.\n */\nfunction assertEquivalentNodes(previousNodes, nodes) {\n    if (previousNodes.length !== nodes.length) {\n        throw new Error('The number of i18n message children changed between first and second pass.');\n    }\n    if (previousNodes.some((node, i) => nodes[i].constructor !== node.constructor)) {\n        throw new Error('The types of the i18n message children changed between first and second pass.');\n    }\n}\nconst _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\nfunction extractPlaceholderName(input) {\n    return input.split(_CUSTOM_PH_EXP)[2];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An i18n error.\n */\nclass I18nError extends ParseError {\n    constructor(span, msg) {\n        super(span, msg);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst setI18nRefs = (htmlNode, i18nNode) => {\n    if (htmlNode instanceof NodeWithI18n) {\n        if (i18nNode instanceof IcuPlaceholder && htmlNode.i18n instanceof Message) {\n            // This html node represents an ICU but this is a second processing pass, and the legacy id\n            // was computed in the previous pass and stored in the `i18n` property as a message.\n            // We are about to wipe out that property so capture the previous message to be reused when\n            // generating the message for this ICU later. See `_generateI18nMessage()`.\n            i18nNode.previousMessage = htmlNode.i18n;\n        }\n        htmlNode.i18n = i18nNode;\n    }\n    return i18nNode;\n};\n/**\n * This visitor walks over HTML parse tree and converts information stored in\n * i18n-related attributes (\"i18n\" and \"i18n-*\") into i18n meta object that is\n * stored with other element's and attribute's information.\n */\nclass I18nMetaVisitor {\n    constructor(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG, keepI18nAttrs = false, enableI18nLegacyMessageIdFormat = false) {\n        this.interpolationConfig = interpolationConfig;\n        this.keepI18nAttrs = keepI18nAttrs;\n        this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat;\n        // whether visited nodes contain i18n information\n        this.hasI18nMeta = false;\n        this._errors = [];\n        // i18n message generation factory\n        this._createI18nMessage = createI18nMessageFactory(this.interpolationConfig);\n    }\n    _generateI18nMessage(nodes, meta = '', visitNodeFn) {\n        const { meaning, description, customId } = this._parseMetadata(meta);\n        const message = this._createI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n        this._setMessageId(message, meta);\n        this._setLegacyIds(message, meta);\n        return message;\n    }\n    visitAllWithErrors(nodes) {\n        const result = nodes.map(node => node.visit(this, null));\n        return new ParseTreeResult(result, this._errors);\n    }\n    visitElement(element) {\n        let message = undefined;\n        if (hasI18nAttrs(element)) {\n            this.hasI18nMeta = true;\n            const attrs = [];\n            const attrsMeta = {};\n            for (const attr of element.attrs) {\n                if (attr.name === I18N_ATTR) {\n                    // root 'i18n' node attribute\n                    const i18n = element.i18n || attr.value;\n                    message = this._generateI18nMessage(element.children, i18n, setI18nRefs);\n                    if (message.nodes.length === 0) {\n                        // Ignore the message if it is empty.\n                        message = undefined;\n                    }\n                    // Store the message on the element\n                    element.i18n = message;\n                }\n                else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {\n                    // 'i18n-*' attributes\n                    const name = attr.name.slice(I18N_ATTR_PREFIX.length);\n                    if (isTrustedTypesSink(element.name, name)) {\n                        this._reportError(attr, `Translating attribute '${name}' is disallowed for security reasons.`);\n                    }\n                    else {\n                        attrsMeta[name] = attr.value;\n                    }\n                }\n                else {\n                    // non-i18n attributes\n                    attrs.push(attr);\n                }\n            }\n            // set i18n meta for attributes\n            if (Object.keys(attrsMeta).length) {\n                for (const attr of attrs) {\n                    const meta = attrsMeta[attr.name];\n                    // do not create translation for empty attributes\n                    if (meta !== undefined && attr.value) {\n                        attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);\n                    }\n                }\n            }\n            if (!this.keepI18nAttrs) {\n                // update element's attributes,\n                // keeping only non-i18n related ones\n                element.attrs = attrs;\n            }\n        }\n        visitAll(this, element.children, message);\n        return element;\n    }\n    visitExpansion(expansion, currentMessage) {\n        let message;\n        const meta = expansion.i18n;\n        this.hasI18nMeta = true;\n        if (meta instanceof IcuPlaceholder) {\n            // set ICU placeholder name (e.g. \"ICU_1\"),\n            // generated while processing root element contents,\n            // so we can reference it when we output translation\n            const name = meta.name;\n            message = this._generateI18nMessage([expansion], meta);\n            const icu = icuFromI18nMessage(message);\n            icu.name = name;\n            if (currentMessage !== null) {\n                // Also update the placeholderToMessage map with this new message\n                currentMessage.placeholderToMessage[name] = message;\n            }\n        }\n        else {\n            // ICU is a top level message, try to use metadata from container element if provided via\n            // `context` argument. Note: context may not be available for standalone ICUs (without\n            // wrapping element), so fallback to ICU metadata in this case.\n            message = this._generateI18nMessage([expansion], currentMessage || meta);\n        }\n        expansion.i18n = message;\n        return expansion;\n    }\n    visitText(text) {\n        return text;\n    }\n    visitAttribute(attribute) {\n        return attribute;\n    }\n    visitComment(comment) {\n        return comment;\n    }\n    visitExpansionCase(expansionCase) {\n        return expansionCase;\n    }\n    /**\n     * Parse the general form `meta` passed into extract the explicit metadata needed to create a\n     * `Message`.\n     *\n     * There are three possibilities for the `meta` variable\n     * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.\n     * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.\n     * 4) other: ignore this and just process the message metadata as normal\n     *\n     * @param meta the bucket that holds information about the message\n     * @returns the parsed metadata.\n     */\n    _parseMetadata(meta) {\n        return typeof meta === 'string' ? parseI18nMeta(meta) :\n            meta instanceof Message ? meta : {};\n    }\n    /**\n     * Generate (or restore) message id if not specified already.\n     */\n    _setMessageId(message, meta) {\n        if (!message.id) {\n            message.id = meta instanceof Message && meta.id || decimalDigest(message);\n        }\n    }\n    /**\n     * Update the `message` with a `legacyId` if necessary.\n     *\n     * @param message the message whose legacy id should be set\n     * @param meta information about the message being processed\n     */\n    _setLegacyIds(message, meta) {\n        if (this.enableI18nLegacyMessageIdFormat) {\n            message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];\n        }\n        else if (typeof meta !== 'string') {\n            // This occurs if we are doing the 2nd pass after whitespace removal (see `parseTemplate()` in\n            // `packages/compiler/src/render3/view/template.ts`).\n            // In that case we want to reuse the legacy message generated in the 1st pass (see\n            // `setI18nRefs()`).\n            const previousMessage = meta instanceof Message ?\n                meta :\n                meta instanceof IcuPlaceholder ? meta.previousMessage : undefined;\n            message.legacyIds = previousMessage ? previousMessage.legacyIds : [];\n        }\n    }\n    _reportError(node, msg) {\n        this._errors.push(new I18nError(node.sourceSpan, msg));\n    }\n}\n/** I18n separators for metadata **/\nconst I18N_MEANING_SEPARATOR = '|';\nconst I18N_ID_SEPARATOR = '@@';\n/**\n * Parses i18n metas like:\n *  - \"@@id\",\n *  - \"description[@@id]\",\n *  - \"meaning|description[@@id]\"\n * and returns an object with parsed output.\n *\n * @param meta String that represents i18n meta\n * @returns Object with id, meaning and description fields\n */\nfunction parseI18nMeta(meta = '') {\n    let customId;\n    let meaning;\n    let description;\n    meta = meta.trim();\n    if (meta) {\n        const idIndex = meta.indexOf(I18N_ID_SEPARATOR);\n        const descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);\n        let meaningAndDesc;\n        [meaningAndDesc, customId] =\n            (idIndex > -1) ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ''];\n        [meaning, description] = (descIndex > -1) ?\n            [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n            ['', meaningAndDesc];\n    }\n    return { customId, meaning, description };\n}\n// Converts i18n meta information for a message (id, description, meaning)\n// to a JsDoc statement formatted as expected by the Closure compiler.\nfunction i18nMetaToJSDoc(meta) {\n    const tags = [];\n    if (meta.description) {\n        tags.push({ tagName: \"desc\" /* Desc */, text: meta.description });\n    }\n    if (meta.meaning) {\n        tags.push({ tagName: \"meaning\" /* Meaning */, text: meta.meaning });\n    }\n    return tags.length == 0 ? null : jsDocComment(tags);\n}\n\n/** Closure uses `goog.getMsg(message)` to lookup translations */\nconst GOOG_GET_MSG = 'goog.getMsg';\nfunction createGoogleGetMsgStatements(variable$1, message, closureVar, params) {\n    const messageString = serializeI18nMessageForGetMsg(message);\n    const args = [literal(messageString)];\n    if (Object.keys(params).length) {\n        args.push(mapLiteral(params, true));\n    }\n    // /**\n    //  * @desc description of message\n    //  * @meaning meaning of message\n    //  */\n    // const MSG_... = goog.getMsg(..);\n    // I18N_X = MSG_...;\n    const googGetMsgStmt = closureVar.set(variable(GOOG_GET_MSG).callFn(args)).toConstDecl();\n    const metaComment = i18nMetaToJSDoc(message);\n    if (metaComment !== null) {\n        googGetMsgStmt.addLeadingComment(metaComment);\n    }\n    const i18nAssignmentStmt = new ExpressionStatement(variable$1.set(closureVar));\n    return [googGetMsgStmt, i18nAssignmentStmt];\n}\n/**\n * This visitor walks over i18n tree and generates its string representation, including ICUs and\n * placeholders in `{$placeholder}` (for plain messages) or `{PLACEHOLDER}` (inside ICUs) format.\n */\nclass GetMsgSerializerVisitor {\n    formatPh(value) {\n        return `{$${formatI18nPlaceholderName(value)}}`;\n    }\n    visitText(text) {\n        return text.value;\n    }\n    visitContainer(container) {\n        return container.children.map(child => child.visit(this)).join('');\n    }\n    visitIcu(icu) {\n        return serializeIcuNode(icu);\n    }\n    visitTagPlaceholder(ph) {\n        return ph.isVoid ?\n            this.formatPh(ph.startName) :\n            `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n    }\n    visitPlaceholder(ph) {\n        return this.formatPh(ph.name);\n    }\n    visitIcuPlaceholder(ph, context) {\n        return this.formatPh(ph.name);\n    }\n}\nconst serializerVisitor = new GetMsgSerializerVisitor();\nfunction serializeI18nMessageForGetMsg(message) {\n    return message.nodes.map(node => node.visit(serializerVisitor, null)).join('');\n}\n\nfunction createLocalizeStatements(variable, message, params) {\n    const { messageParts, placeHolders } = serializeI18nMessageForLocalize(message);\n    const sourceSpan = getSourceSpan(message);\n    const expressions = placeHolders.map(ph => params[ph.text]);\n    const localizedString$1 = localizedString(message, messageParts, placeHolders, expressions, sourceSpan);\n    const variableInitialization = variable.set(localizedString$1);\n    return [new ExpressionStatement(variableInitialization)];\n}\n/**\n * This visitor walks over an i18n tree, capturing literal strings and placeholders.\n *\n * The result can be used for generating the `$localize` tagged template literals.\n */\nclass LocalizeSerializerVisitor {\n    constructor(placeholderToMessage, pieces) {\n        this.placeholderToMessage = placeholderToMessage;\n        this.pieces = pieces;\n    }\n    visitText(text) {\n        if (this.pieces[this.pieces.length - 1] instanceof LiteralPiece) {\n            // Two literal pieces in a row means that there was some comment node in-between.\n            this.pieces[this.pieces.length - 1].text += text.value;\n        }\n        else {\n            const sourceSpan = new ParseSourceSpan(text.sourceSpan.fullStart, text.sourceSpan.end, text.sourceSpan.fullStart, text.sourceSpan.details);\n            this.pieces.push(new LiteralPiece(text.value, sourceSpan));\n        }\n    }\n    visitContainer(container) {\n        container.children.forEach(child => child.visit(this));\n    }\n    visitIcu(icu) {\n        this.pieces.push(new LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));\n    }\n    visitTagPlaceholder(ph) {\n        var _a, _b;\n        this.pieces.push(this.createPlaceholderPiece(ph.startName, (_a = ph.startSourceSpan) !== null && _a !== void 0 ? _a : ph.sourceSpan));\n        if (!ph.isVoid) {\n            ph.children.forEach(child => child.visit(this));\n            this.pieces.push(this.createPlaceholderPiece(ph.closeName, (_b = ph.endSourceSpan) !== null && _b !== void 0 ? _b : ph.sourceSpan));\n        }\n    }\n    visitPlaceholder(ph) {\n        this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));\n    }\n    visitIcuPlaceholder(ph) {\n        this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan, this.placeholderToMessage[ph.name]));\n    }\n    createPlaceholderPiece(name, sourceSpan, associatedMessage) {\n        return new PlaceholderPiece(formatI18nPlaceholderName(name, /* useCamelCase */ false), sourceSpan, associatedMessage);\n    }\n}\n/**\n * Serialize an i18n message into two arrays: messageParts and placeholders.\n *\n * These arrays will be used to generate `$localize` tagged template literals.\n *\n * @param message The message to be serialized.\n * @returns an object containing the messageParts and placeholders.\n */\nfunction serializeI18nMessageForLocalize(message) {\n    const pieces = [];\n    const serializerVisitor = new LocalizeSerializerVisitor(message.placeholderToMessage, pieces);\n    message.nodes.forEach(node => node.visit(serializerVisitor));\n    return processMessagePieces(pieces);\n}\nfunction getSourceSpan(message) {\n    const startNode = message.nodes[0];\n    const endNode = message.nodes[message.nodes.length - 1];\n    return new ParseSourceSpan(startNode.sourceSpan.fullStart, endNode.sourceSpan.end, startNode.sourceSpan.fullStart, startNode.sourceSpan.details);\n}\n/**\n * Convert the list of serialized MessagePieces into two arrays.\n *\n * One contains the literal string pieces and the other the placeholders that will be replaced by\n * expressions when rendering `$localize` tagged template literals.\n *\n * @param pieces The pieces to process.\n * @returns an object containing the messageParts and placeholders.\n */\nfunction processMessagePieces(pieces) {\n    const messageParts = [];\n    const placeHolders = [];\n    if (pieces[0] instanceof PlaceholderPiece) {\n        // The first piece was a placeholder so we need to add an initial empty message part.\n        messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));\n    }\n    for (let i = 0; i < pieces.length; i++) {\n        const part = pieces[i];\n        if (part instanceof LiteralPiece) {\n            messageParts.push(part);\n        }\n        else {\n            placeHolders.push(part);\n            if (pieces[i - 1] instanceof PlaceholderPiece) {\n                // There were two placeholders in a row, so we need to add an empty message part.\n                messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));\n            }\n        }\n    }\n    if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {\n        // The last piece was a placeholder so we need to add a final empty message part.\n        messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));\n    }\n    return { messageParts, placeHolders };\n}\nfunction createEmptyMessagePart(location) {\n    return new LiteralPiece('', new ParseSourceSpan(location, location));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Selector attribute name of `<ng-content>`\nconst NG_CONTENT_SELECT_ATTR = 'select';\n// Attribute name of `ngProjectAs`.\nconst NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n// Global symbols available only inside event bindings.\nconst EVENT_BINDING_SCOPE_GLOBALS = new Set(['$event']);\n// List of supported global targets for event listeners\nconst GLOBAL_TARGET_RESOLVERS = new Map([['window', Identifiers$1.resolveWindow], ['document', Identifiers$1.resolveDocument], ['body', Identifiers$1.resolveBody]]);\nconst LEADING_TRIVIA_CHARS = [' ', '\\n', '\\r', '\\t'];\n//  if (rf & flags) { .. }\nfunction renderFlagCheckIfStmt(flags, statements) {\n    return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);\n}\nfunction prepareEventListenerParameters(eventAst, handlerName = null, scope = null) {\n    const { type, name, target, phase, handler } = eventAst;\n    if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {\n        throw new Error(`Unexpected global target '${target}' defined for '${name}' event.\n        Supported list of global targets: ${Array.from(GLOBAL_TARGET_RESOLVERS.keys())}.`);\n    }\n    const eventArgumentName = '$event';\n    const implicitReceiverAccesses = new Set();\n    const implicitReceiverExpr = (scope === null || scope.bindingLevel === 0) ?\n        variable(CONTEXT_NAME) :\n        scope.getOrCreateSharedContextVar(0);\n    const bindingExpr = convertActionBinding(scope, implicitReceiverExpr, handler, 'b', () => error('Unexpected interpolation'), eventAst.handlerSpan, implicitReceiverAccesses, EVENT_BINDING_SCOPE_GLOBALS);\n    const statements = [];\n    if (scope) {\n        // `variableDeclarations` needs to run first, because\n        // `restoreViewStatement` depends on the result.\n        statements.push(...scope.variableDeclarations());\n        statements.unshift(...scope.restoreViewStatement());\n    }\n    statements.push(...bindingExpr.render3Stmts);\n    const eventName = type === 1 /* Animation */ ? prepareSyntheticListenerName(name, phase) : name;\n    const fnName = handlerName && sanitizeIdentifier(handlerName);\n    const fnArgs = [];\n    if (implicitReceiverAccesses.has(eventArgumentName)) {\n        fnArgs.push(new FnParam(eventArgumentName, DYNAMIC_TYPE));\n    }\n    const handlerFn = fn(fnArgs, statements, INFERRED_TYPE, null, fnName);\n    const params = [literal(eventName), handlerFn];\n    if (target) {\n        params.push(literal(false), // `useCapture` flag, defaults to `false`\n        importExpr(GLOBAL_TARGET_RESOLVERS.get(target)));\n    }\n    return params;\n}\nfunction createComponentDefConsts() {\n    return {\n        prepareStatements: [],\n        constExpressions: [],\n        i18nVarRefsCache: new Map(),\n    };\n}\nclass TemplateDefinitionBuilder {\n    constructor(constantPool, parentBindingScope, level = 0, contextName, i18nContext, templateIndex, templateName, directiveMatcher, directives, pipeTypeByName, pipes, _namespace, relativeContextFilePath, i18nUseExternalIds, _constants = createComponentDefConsts()) {\n        this.constantPool = constantPool;\n        this.level = level;\n        this.contextName = contextName;\n        this.i18nContext = i18nContext;\n        this.templateIndex = templateIndex;\n        this.templateName = templateName;\n        this.directiveMatcher = directiveMatcher;\n        this.directives = directives;\n        this.pipeTypeByName = pipeTypeByName;\n        this.pipes = pipes;\n        this._namespace = _namespace;\n        this.i18nUseExternalIds = i18nUseExternalIds;\n        this._constants = _constants;\n        this._dataIndex = 0;\n        this._bindingContext = 0;\n        this._prefixCode = [];\n        /**\n         * List of callbacks to generate creation mode instructions. We store them here as we process\n         * the template so bindings in listeners are resolved only once all nodes have been visited.\n         * This ensures all local refs and context variables are available for matching.\n         */\n        this._creationCodeFns = [];\n        /**\n         * List of callbacks to generate update mode instructions. We store them here as we process\n         * the template so bindings are resolved only once all nodes have been visited. This ensures\n         * all local refs and context variables are available for matching.\n         */\n        this._updateCodeFns = [];\n        /** Index of the currently-selected node. */\n        this._currentIndex = 0;\n        /** Temporary variable declarations generated from visiting pipes, literals, etc. */\n        this._tempVariables = [];\n        /**\n         * List of callbacks to build nested templates. Nested templates must not be visited until\n         * after the parent template has finished visiting all of its nodes. This ensures that all\n         * local ref bindings in nested templates are able to find local ref values if the refs\n         * are defined after the template declaration.\n         */\n        this._nestedTemplateFns = [];\n        this._unsupported = unsupported;\n        // i18n context local to this template\n        this.i18n = null;\n        // Number of slots to reserve for pureFunctions\n        this._pureFunctionSlots = 0;\n        // Number of binding slots\n        this._bindingSlots = 0;\n        // Projection slots found in the template. Projection slots can distribute projected\n        // nodes based on a selector, or can just use the wildcard selector to match\n        // all nodes which aren't matching any selector.\n        this._ngContentReservedSlots = [];\n        // Number of non-default selectors found in all parent templates of this template. We need to\n        // track it to properly adjust projection slot index in the `projection` instruction.\n        this._ngContentSelectorsOffset = 0;\n        // Expression that should be used as implicit receiver when converting template\n        // expressions to output AST.\n        this._implicitReceiverExpr = null;\n        // These should be handled in the template or element directly.\n        this.visitReference = invalid;\n        this.visitVariable = invalid;\n        this.visitTextAttribute = invalid;\n        this.visitBoundAttribute = invalid;\n        this.visitBoundEvent = invalid;\n        this._bindingScope = parentBindingScope.nestedScope(level);\n        // Turn the relative context file path into an identifier by replacing non-alphanumeric\n        // characters with underscores.\n        this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_') + '_';\n        this._valueConverter = new ValueConverter(constantPool, () => this.allocateDataSlot(), (numSlots) => this.allocatePureFunctionSlots(numSlots), (name, localName, slot, value) => {\n            const pipeType = pipeTypeByName.get(name);\n            if (pipeType) {\n                this.pipes.add(pipeType);\n            }\n            this._bindingScope.set(this.level, localName, value);\n            this.creationInstruction(null, Identifiers$1.pipe, [literal(slot), literal(name)]);\n        });\n    }\n    buildTemplateFunction(nodes, variables, ngContentSelectorsOffset = 0, i18n) {\n        this._ngContentSelectorsOffset = ngContentSelectorsOffset;\n        if (this._namespace !== Identifiers$1.namespaceHTML) {\n            this.creationInstruction(null, this._namespace);\n        }\n        // Create variable bindings\n        variables.forEach(v => this.registerContextVariables(v));\n        // Initiate i18n context in case:\n        // - this template has parent i18n context\n        // - or the template has i18n meta associated with it,\n        //   but it's not initiated by the Element (e.g. <ng-template i18n>)\n        const initI18nContext = this.i18nContext ||\n            (isI18nRootNode(i18n) && !isSingleI18nIcu(i18n) &&\n                !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n));\n        const selfClosingI18nInstruction = hasTextChildrenOnly(nodes);\n        if (initI18nContext) {\n            this.i18nStart(null, i18n, selfClosingI18nInstruction);\n        }\n        // This is the initial pass through the nodes of this template. In this pass, we\n        // queue all creation mode and update mode instructions for generation in the second\n        // pass. It's necessary to separate the passes to ensure local refs are defined before\n        // resolving bindings. We also count bindings in this pass as we walk bound expressions.\n        visitAll$1(this, nodes);\n        // Add total binding count to pure function count so pure function instructions are\n        // generated with the correct slot offset when update instructions are processed.\n        this._pureFunctionSlots += this._bindingSlots;\n        // Pipes are walked in the first pass (to enqueue `pipe()` creation instructions and\n        // `pipeBind` update instructions), so we have to update the slot offsets manually\n        // to account for bindings.\n        this._valueConverter.updatePipeSlotOffsets(this._bindingSlots);\n        // Nested templates must be processed before creation instructions so template()\n        // instructions can be generated with the correct internal const count.\n        this._nestedTemplateFns.forEach(buildTemplateFn => buildTemplateFn());\n        // Output the `projectionDef` instruction when some `<ng-content>` tags are present.\n        // The `projectionDef` instruction is only emitted for the component template and\n        // is skipped for nested templates (<ng-template> tags).\n        if (this.level === 0 && this._ngContentReservedSlots.length) {\n            const parameters = [];\n            // By default the `projectionDef` instructions creates one slot for the wildcard\n            // selector if no parameters are passed. Therefore we only want to allocate a new\n            // array for the projection slots if the default projection slot is not sufficient.\n            if (this._ngContentReservedSlots.length > 1 || this._ngContentReservedSlots[0] !== '*') {\n                const r3ReservedSlots = this._ngContentReservedSlots.map(s => s !== '*' ? parseSelectorToR3Selector(s) : s);\n                parameters.push(this.constantPool.getConstLiteral(asLiteral(r3ReservedSlots), true));\n            }\n            // Since we accumulate ngContent selectors while processing template elements,\n            // we *prepend* `projectionDef` to creation instructions block, to put it before\n            // any `projection` instructions\n            this.creationInstruction(null, Identifiers$1.projectionDef, parameters, /* prepend */ true);\n        }\n        if (initI18nContext) {\n            this.i18nEnd(null, selfClosingI18nInstruction);\n        }\n        // Generate all the creation mode instructions (e.g. resolve bindings in listeners)\n        const creationStatements = this._creationCodeFns.map((fn) => fn());\n        // Generate all the update mode instructions (e.g. resolve property or text bindings)\n        const updateStatements = this._updateCodeFns.map((fn) => fn());\n        //  Variable declaration must occur after binding resolution so we can generate context\n        //  instructions that build on each other.\n        // e.g. const b = nextContext().$implicit(); const b = nextContext();\n        const creationVariables = this._bindingScope.viewSnapshotStatements();\n        const updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);\n        const creationBlock = creationStatements.length > 0 ?\n            [renderFlagCheckIfStmt(1 /* Create */, creationVariables.concat(creationStatements))] :\n            [];\n        const updateBlock = updateStatements.length > 0 ?\n            [renderFlagCheckIfStmt(2 /* Update */, updateVariables.concat(updateStatements))] :\n            [];\n        return fn(\n        // i.e. (rf: RenderFlags, ctx: any)\n        [new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [\n            // Temporary variable declarations for query refresh (i.e. let _t: any;)\n            ...this._prefixCode,\n            // Creating mode (i.e. if (rf & RenderFlags.Create) { ... })\n            ...creationBlock,\n            // Binding and refresh mode (i.e. if (rf & RenderFlags.Update) {...})\n            ...updateBlock,\n        ], INFERRED_TYPE, null, this.templateName);\n    }\n    // LocalResolver\n    getLocal(name) {\n        return this._bindingScope.get(name);\n    }\n    // LocalResolver\n    notifyImplicitReceiverUse() {\n        this._bindingScope.notifyImplicitReceiverUse();\n    }\n    // LocalResolver\n    maybeRestoreView() {\n        this._bindingScope.maybeRestoreView();\n    }\n    i18nTranslate(message, params = {}, ref, transformFn) {\n        const _ref = ref || this.i18nGenerateMainBlockVar();\n        // Closure Compiler requires const names to start with `MSG_` but disallows any other const to\n        // start with `MSG_`. We define a variable starting with `MSG_` just for the `goog.getMsg` call\n        const closureVar = this.i18nGenerateClosureVar(message.id);\n        const statements = getTranslationDeclStmts(message, _ref, closureVar, params, transformFn);\n        this._constants.prepareStatements.push(...statements);\n        return _ref;\n    }\n    registerContextVariables(variable$1) {\n        const scopedName = this._bindingScope.freshReferenceName();\n        const retrievalLevel = this.level;\n        const lhs = variable(variable$1.name + scopedName);\n        this._bindingScope.set(retrievalLevel, variable$1.name, lhs, 1 /* CONTEXT */, (scope, relativeLevel) => {\n            let rhs;\n            if (scope.bindingLevel === retrievalLevel) {\n                if (scope.isListenerScope() && scope.hasRestoreViewVariable()) {\n                    // e.g. restoredCtx.\n                    // We have to get the context from a view reference, if one is available, because\n                    // the context that was passed in during creation may not be correct anymore.\n                    // For more information see: https://github.com/angular/angular/pull/40360.\n                    rhs = variable(RESTORED_VIEW_CONTEXT_NAME);\n                    scope.notifyRestoredViewContextUse();\n                }\n                else {\n                    // e.g. ctx\n                    rhs = variable(CONTEXT_NAME);\n                }\n            }\n            else {\n                const sharedCtxVar = scope.getSharedContextName(retrievalLevel);\n                // e.g. ctx_r0   OR  x(2);\n                rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);\n            }\n            // e.g. const $item$ = x(2).$implicit;\n            return [lhs.set(rhs.prop(variable$1.value || IMPLICIT_REFERENCE)).toConstDecl()];\n        });\n    }\n    i18nAppendBindings(expressions) {\n        if (expressions.length > 0) {\n            expressions.forEach(expression => this.i18n.appendBinding(expression));\n        }\n    }\n    i18nBindProps(props) {\n        const bound = {};\n        Object.keys(props).forEach(key => {\n            const prop = props[key];\n            if (prop instanceof Text$3) {\n                bound[key] = literal(prop.value);\n            }\n            else {\n                const value = prop.value.visit(this._valueConverter);\n                this.allocateBindingSlots(value);\n                if (value instanceof Interpolation) {\n                    const { strings, expressions } = value;\n                    const { id, bindings } = this.i18n;\n                    const label = assembleI18nBoundString(strings, bindings.size, id);\n                    this.i18nAppendBindings(expressions);\n                    bound[key] = literal(label);\n                }\n            }\n        });\n        return bound;\n    }\n    // Generates top level vars for i18n blocks (i.e. `i18n_N`).\n    i18nGenerateMainBlockVar() {\n        return variable(this.constantPool.uniqueName(TRANSLATION_VAR_PREFIX));\n    }\n    // Generates vars with Closure-specific names for i18n blocks (i.e. `MSG_XXX`).\n    i18nGenerateClosureVar(messageId) {\n        let name;\n        const suffix = this.fileBasedI18nSuffix.toUpperCase();\n        if (this.i18nUseExternalIds) {\n            const prefix = getTranslationConstPrefix(`EXTERNAL_`);\n            const uniqueSuffix = this.constantPool.uniqueName(suffix);\n            name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;\n        }\n        else {\n            const prefix = getTranslationConstPrefix(suffix);\n            name = this.constantPool.uniqueName(prefix);\n        }\n        return variable(name);\n    }\n    i18nUpdateRef(context) {\n        const { icus, meta, isRoot, isResolved, isEmitted } = context;\n        if (isRoot && isResolved && !isEmitted && !isSingleI18nIcu(meta)) {\n            context.isEmitted = true;\n            const placeholders = context.getSerializedPlaceholders();\n            let icuMapping = {};\n            let params = placeholders.size ? placeholdersToParams(placeholders) : {};\n            if (icus.size) {\n                icus.forEach((refs, key) => {\n                    if (refs.length === 1) {\n                        // if we have one ICU defined for a given\n                        // placeholder - just output its reference\n                        params[key] = refs[0];\n                    }\n                    else {\n                        // ... otherwise we need to activate post-processing\n                        // to replace ICU placeholders with proper values\n                        const placeholder = wrapI18nPlaceholder(`${I18N_ICU_MAPPING_PREFIX}${key}`);\n                        params[key] = literal(placeholder);\n                        icuMapping[key] = literalArr(refs);\n                    }\n                });\n            }\n            // translation requires post processing in 2 cases:\n            // - if we have placeholders with multiple values (ex. `START_DIV`: [�#1�, �#2�, ...])\n            // - if we have multiple ICUs that refer to the same placeholder name\n            const needsPostprocessing = Array.from(placeholders.values()).some((value) => value.length > 1) ||\n                Object.keys(icuMapping).length;\n            let transformFn;\n            if (needsPostprocessing) {\n                transformFn = (raw) => {\n                    const args = [raw];\n                    if (Object.keys(icuMapping).length) {\n                        args.push(mapLiteral(icuMapping, true));\n                    }\n                    return instruction(null, Identifiers$1.i18nPostprocess, args);\n                };\n            }\n            this.i18nTranslate(meta, params, context.ref, transformFn);\n        }\n    }\n    i18nStart(span = null, meta, selfClosing) {\n        const index = this.allocateDataSlot();\n        this.i18n = this.i18nContext ?\n            this.i18nContext.forkChildContext(index, this.templateIndex, meta) :\n            new I18nContext(index, this.i18nGenerateMainBlockVar(), 0, this.templateIndex, meta);\n        // generate i18nStart instruction\n        const { id, ref } = this.i18n;\n        const params = [literal(index), this.addToConsts(ref)];\n        if (id > 0) {\n            // do not push 3rd argument (sub-block id)\n            // into i18nStart call for top level i18n context\n            params.push(literal(id));\n        }\n        this.creationInstruction(span, selfClosing ? Identifiers$1.i18n : Identifiers$1.i18nStart, params);\n    }\n    i18nEnd(span = null, selfClosing) {\n        if (!this.i18n) {\n            throw new Error('i18nEnd is executed with no i18n context present');\n        }\n        if (this.i18nContext) {\n            this.i18nContext.reconcileChildContext(this.i18n);\n            this.i18nUpdateRef(this.i18nContext);\n        }\n        else {\n            this.i18nUpdateRef(this.i18n);\n        }\n        // setup accumulated bindings\n        const { index, bindings } = this.i18n;\n        if (bindings.size) {\n            const chainBindings = [];\n            bindings.forEach(binding => {\n                chainBindings.push({ sourceSpan: span, value: () => this.convertPropertyBinding(binding) });\n            });\n            // for i18n block, advance to the most recent element index (by taking the current number of\n            // elements and subtracting one) before invoking `i18nExp` instructions, to make sure the\n            // necessary lifecycle hooks of components/directives are properly flushed.\n            this.updateInstructionChainWithAdvance(this.getConstCount() - 1, Identifiers$1.i18nExp, chainBindings);\n            this.updateInstruction(span, Identifiers$1.i18nApply, [literal(index)]);\n        }\n        if (!selfClosing) {\n            this.creationInstruction(span, Identifiers$1.i18nEnd);\n        }\n        this.i18n = null; // reset local i18n context\n    }\n    i18nAttributesInstruction(nodeIndex, attrs, sourceSpan) {\n        let hasBindings = false;\n        const i18nAttrArgs = [];\n        const bindings = [];\n        attrs.forEach(attr => {\n            const message = attr.i18n;\n            const converted = attr.value.visit(this._valueConverter);\n            this.allocateBindingSlots(converted);\n            if (converted instanceof Interpolation) {\n                const placeholders = assembleBoundTextPlaceholders(message);\n                const params = placeholdersToParams(placeholders);\n                i18nAttrArgs.push(literal(attr.name), this.i18nTranslate(message, params));\n                converted.expressions.forEach(expression => {\n                    hasBindings = true;\n                    bindings.push({\n                        sourceSpan,\n                        value: () => this.convertPropertyBinding(expression),\n                    });\n                });\n            }\n        });\n        if (bindings.length > 0) {\n            this.updateInstructionChainWithAdvance(nodeIndex, Identifiers$1.i18nExp, bindings);\n        }\n        if (i18nAttrArgs.length > 0) {\n            const index = literal(this.allocateDataSlot());\n            const constIndex = this.addToConsts(literalArr(i18nAttrArgs));\n            this.creationInstruction(sourceSpan, Identifiers$1.i18nAttributes, [index, constIndex]);\n            if (hasBindings) {\n                this.updateInstruction(sourceSpan, Identifiers$1.i18nApply, [index]);\n            }\n        }\n    }\n    getNamespaceInstruction(namespaceKey) {\n        switch (namespaceKey) {\n            case 'math':\n                return Identifiers$1.namespaceMathML;\n            case 'svg':\n                return Identifiers$1.namespaceSVG;\n            default:\n                return Identifiers$1.namespaceHTML;\n        }\n    }\n    addNamespaceInstruction(nsInstruction, element) {\n        this._namespace = nsInstruction;\n        this.creationInstruction(element.startSourceSpan, nsInstruction);\n    }\n    /**\n     * Adds an update instruction for an interpolated property or attribute, such as\n     * `prop=\"{{value}}\"` or `attr.title=\"{{value}}\"`\n     */\n    interpolatedUpdateInstruction(instruction, elementIndex, attrName, input, value, params) {\n        this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, instruction, () => [literal(attrName), ...this.getUpdateInstructionArguments(value), ...params]);\n    }\n    visitContent(ngContent) {\n        const slot = this.allocateDataSlot();\n        const projectionSlotIdx = this._ngContentSelectorsOffset + this._ngContentReservedSlots.length;\n        const parameters = [literal(slot)];\n        this._ngContentReservedSlots.push(ngContent.selector);\n        const nonContentSelectAttributes = ngContent.attributes.filter(attr => attr.name.toLowerCase() !== NG_CONTENT_SELECT_ATTR);\n        const attributes = this.getAttributeExpressions(ngContent.name, nonContentSelectAttributes, [], []);\n        if (attributes.length > 0) {\n            parameters.push(literal(projectionSlotIdx), literalArr(attributes));\n        }\n        else if (projectionSlotIdx !== 0) {\n            parameters.push(literal(projectionSlotIdx));\n        }\n        this.creationInstruction(ngContent.sourceSpan, Identifiers$1.projection, parameters);\n        if (this.i18n) {\n            this.i18n.appendProjection(ngContent.i18n, slot);\n        }\n    }\n    visitElement(element) {\n        var _a, _b;\n        const elementIndex = this.allocateDataSlot();\n        const stylingBuilder = new StylingBuilder(null);\n        let isNonBindableMode = false;\n        const isI18nRootElement = isI18nRootNode(element.i18n) && !isSingleI18nIcu(element.i18n);\n        const outputAttrs = [];\n        const [namespaceKey, elementName] = splitNsName(element.name);\n        const isNgContainer$1 = isNgContainer(element.name);\n        // Handle styling, i18n, ngNonBindable attributes\n        for (const attr of element.attributes) {\n            const { name, value } = attr;\n            if (name === NON_BINDABLE_ATTR) {\n                isNonBindableMode = true;\n            }\n            else if (name === 'style') {\n                stylingBuilder.registerStyleAttr(value);\n            }\n            else if (name === 'class') {\n                stylingBuilder.registerClassAttr(value);\n            }\n            else {\n                outputAttrs.push(attr);\n            }\n        }\n        // Match directives on non i18n attributes\n        this.matchDirectives(element.name, element);\n        // Regular element or ng-container creation mode\n        const parameters = [literal(elementIndex)];\n        if (!isNgContainer$1) {\n            parameters.push(literal(elementName));\n        }\n        // Add the attributes\n        const allOtherInputs = [];\n        const boundI18nAttrs = [];\n        element.inputs.forEach(input => {\n            const stylingInputWasSet = stylingBuilder.registerBoundInput(input);\n            if (!stylingInputWasSet) {\n                if (input.type === 0 /* Property */ && input.i18n) {\n                    boundI18nAttrs.push(input);\n                }\n                else {\n                    allOtherInputs.push(input);\n                }\n            }\n        });\n        // add attributes for directive and projection matching purposes\n        const attributes = this.getAttributeExpressions(element.name, outputAttrs, allOtherInputs, element.outputs, stylingBuilder, [], boundI18nAttrs);\n        parameters.push(this.addAttrsToConsts(attributes));\n        // local refs (ex.: <div #foo #bar=\"baz\">)\n        const refs = this.prepareRefsArray(element.references);\n        parameters.push(this.addToConsts(refs));\n        const wasInNamespace = this._namespace;\n        const currentNamespace = this.getNamespaceInstruction(namespaceKey);\n        // If the namespace is changing now, include an instruction to change it\n        // during element creation.\n        if (currentNamespace !== wasInNamespace) {\n            this.addNamespaceInstruction(currentNamespace, element);\n        }\n        if (this.i18n) {\n            this.i18n.appendElement(element.i18n, elementIndex);\n        }\n        // Note that we do not append text node instructions and ICUs inside i18n section,\n        // so we exclude them while calculating whether current element has children\n        const hasChildren = (!isI18nRootElement && this.i18n) ? !hasTextChildrenOnly(element.children) :\n            element.children.length > 0;\n        const createSelfClosingInstruction = !stylingBuilder.hasBindingsWithPipes &&\n            element.outputs.length === 0 && boundI18nAttrs.length === 0 && !hasChildren;\n        const createSelfClosingI18nInstruction = !createSelfClosingInstruction && hasTextChildrenOnly(element.children);\n        if (createSelfClosingInstruction) {\n            this.creationInstruction(element.sourceSpan, isNgContainer$1 ? Identifiers$1.elementContainer : Identifiers$1.element, trimTrailingNulls(parameters));\n        }\n        else {\n            this.creationInstruction(element.startSourceSpan, isNgContainer$1 ? Identifiers$1.elementContainerStart : Identifiers$1.elementStart, trimTrailingNulls(parameters));\n            if (isNonBindableMode) {\n                this.creationInstruction(element.startSourceSpan, Identifiers$1.disableBindings);\n            }\n            if (boundI18nAttrs.length > 0) {\n                this.i18nAttributesInstruction(elementIndex, boundI18nAttrs, (_a = element.startSourceSpan) !== null && _a !== void 0 ? _a : element.sourceSpan);\n            }\n            // Generate Listeners (outputs)\n            if (element.outputs.length > 0) {\n                const listeners = element.outputs.map((outputAst) => ({\n                    sourceSpan: outputAst.sourceSpan,\n                    params: this.prepareListenerParameter(element.name, outputAst, elementIndex)\n                }));\n                this.creationInstructionChain(Identifiers$1.listener, listeners);\n            }\n            // Note: it's important to keep i18n/i18nStart instructions after i18nAttributes and\n            // listeners, to make sure i18nAttributes instruction targets current element at runtime.\n            if (isI18nRootElement) {\n                this.i18nStart(element.startSourceSpan, element.i18n, createSelfClosingI18nInstruction);\n            }\n        }\n        // the code here will collect all update-level styling instructions and add them to the\n        // update block of the template function AOT code. Instructions like `styleProp`,\n        // `styleMap`, `classMap`, `classProp`\n        // are all generated and assigned in the code below.\n        const stylingInstructions = stylingBuilder.buildUpdateLevelInstructions(this._valueConverter);\n        const limit = stylingInstructions.length - 1;\n        for (let i = 0; i <= limit; i++) {\n            const instruction = stylingInstructions[i];\n            this._bindingSlots += this.processStylingUpdateInstruction(elementIndex, instruction);\n        }\n        // the reason why `undefined` is used is because the renderer understands this as a\n        // special value to symbolize that there is no RHS to this binding\n        // TODO (matsko): revisit this once FW-959 is approached\n        const emptyValueBindInstruction = literal(undefined);\n        const propertyBindings = [];\n        const attributeBindings = [];\n        // Generate element input bindings\n        allOtherInputs.forEach(input => {\n            const inputType = input.type;\n            if (inputType === 4 /* Animation */) {\n                const value = input.value.visit(this._valueConverter);\n                // animation bindings can be presented in the following formats:\n                // 1. [@binding]=\"fooExp\"\n                // 2. [@binding]=\"{value:fooExp, params:{...}}\"\n                // 3. [@binding]\n                // 4. @binding\n                // All formats will be valid for when a synthetic binding is created.\n                // The reasoning for this is because the renderer should get each\n                // synthetic binding value in the order of the array that they are\n                // defined in...\n                const hasValue = value instanceof LiteralPrimitive ? !!value.value : true;\n                this.allocateBindingSlots(value);\n                propertyBindings.push({\n                    name: prepareSyntheticPropertyName(input.name),\n                    sourceSpan: input.sourceSpan,\n                    value: () => hasValue ? this.convertPropertyBinding(value) : emptyValueBindInstruction\n                });\n            }\n            else {\n                // we must skip attributes with associated i18n context, since these attributes are handled\n                // separately and corresponding `i18nExp` and `i18nApply` instructions will be generated\n                if (input.i18n)\n                    return;\n                const value = input.value.visit(this._valueConverter);\n                if (value !== undefined) {\n                    const params = [];\n                    const [attrNamespace, attrName] = splitNsName(input.name);\n                    const isAttributeBinding = inputType === 1 /* Attribute */;\n                    const sanitizationRef = resolveSanitizationFn(input.securityContext, isAttributeBinding);\n                    if (sanitizationRef)\n                        params.push(sanitizationRef);\n                    if (attrNamespace) {\n                        const namespaceLiteral = literal(attrNamespace);\n                        if (sanitizationRef) {\n                            params.push(namespaceLiteral);\n                        }\n                        else {\n                            // If there wasn't a sanitization ref, we need to add\n                            // an extra param so that we can pass in the namespace.\n                            params.push(literal(null), namespaceLiteral);\n                        }\n                    }\n                    this.allocateBindingSlots(value);\n                    if (inputType === 0 /* Property */) {\n                        if (value instanceof Interpolation) {\n                            // prop=\"{{value}}\" and friends\n                            this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), elementIndex, attrName, input, value, params);\n                        }\n                        else {\n                            // [prop]=\"value\"\n                            // Collect all the properties so that we can chain into a single function at the end.\n                            propertyBindings.push({\n                                name: attrName,\n                                sourceSpan: input.sourceSpan,\n                                value: () => this.convertPropertyBinding(value),\n                                params\n                            });\n                        }\n                    }\n                    else if (inputType === 1 /* Attribute */) {\n                        if (value instanceof Interpolation && getInterpolationArgsLength(value) > 1) {\n                            // attr.name=\"text{{value}}\" and friends\n                            this.interpolatedUpdateInstruction(getAttributeInterpolationExpression(value), elementIndex, attrName, input, value, params);\n                        }\n                        else {\n                            const boundValue = value instanceof Interpolation ? value.expressions[0] : value;\n                            // [attr.name]=\"value\" or attr.name=\"{{value}}\"\n                            // Collect the attribute bindings so that they can be chained at the end.\n                            attributeBindings.push({\n                                name: attrName,\n                                sourceSpan: input.sourceSpan,\n                                value: () => this.convertPropertyBinding(boundValue),\n                                params\n                            });\n                        }\n                    }\n                    else {\n                        // class prop\n                        this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, Identifiers$1.classProp, () => {\n                            return [\n                                literal(elementIndex), literal(attrName), this.convertPropertyBinding(value),\n                                ...params\n                            ];\n                        });\n                    }\n                }\n            }\n        });\n        if (propertyBindings.length > 0) {\n            this.updateInstructionChainWithAdvance(elementIndex, Identifiers$1.property, propertyBindings);\n        }\n        if (attributeBindings.length > 0) {\n            this.updateInstructionChainWithAdvance(elementIndex, Identifiers$1.attribute, attributeBindings);\n        }\n        // Traverse element child nodes\n        visitAll$1(this, element.children);\n        if (!isI18nRootElement && this.i18n) {\n            this.i18n.appendElement(element.i18n, elementIndex, true);\n        }\n        if (!createSelfClosingInstruction) {\n            // Finish element construction mode.\n            const span = (_b = element.endSourceSpan) !== null && _b !== void 0 ? _b : element.sourceSpan;\n            if (isI18nRootElement) {\n                this.i18nEnd(span, createSelfClosingI18nInstruction);\n            }\n            if (isNonBindableMode) {\n                this.creationInstruction(span, Identifiers$1.enableBindings);\n            }\n            this.creationInstruction(span, isNgContainer$1 ? Identifiers$1.elementContainerEnd : Identifiers$1.elementEnd);\n        }\n    }\n    visitTemplate(template) {\n        var _a;\n        const NG_TEMPLATE_TAG_NAME = 'ng-template';\n        const templateIndex = this.allocateDataSlot();\n        if (this.i18n) {\n            this.i18n.appendTemplate(template.i18n, templateIndex);\n        }\n        const tagNameWithoutNamespace = template.tagName ? splitNsName(template.tagName)[1] : template.tagName;\n        const contextName = `${this.contextName}${template.tagName ? '_' + sanitizeIdentifier(template.tagName) : ''}_${templateIndex}`;\n        const templateName = `${contextName}_Template`;\n        const parameters = [\n            literal(templateIndex),\n            variable(templateName),\n            // We don't care about the tag's namespace here, because we infer\n            // it based on the parent nodes inside the template instruction.\n            literal(tagNameWithoutNamespace),\n        ];\n        // find directives matching on a given <ng-template> node\n        this.matchDirectives(NG_TEMPLATE_TAG_NAME, template);\n        // prepare attributes parameter (including attributes used for directive matching)\n        const attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, template.attributes, template.inputs, template.outputs, undefined /* styles */, template.templateAttrs);\n        parameters.push(this.addAttrsToConsts(attrsExprs));\n        // local refs (ex.: <ng-template #foo>)\n        if (template.references && template.references.length) {\n            const refs = this.prepareRefsArray(template.references);\n            parameters.push(this.addToConsts(refs));\n            parameters.push(importExpr(Identifiers$1.templateRefExtractor));\n        }\n        // Create the template function\n        const templateVisitor = new TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, templateIndex, templateName, this.directiveMatcher, this.directives, this.pipeTypeByName, this.pipes, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds, this._constants);\n        // Nested templates must not be visited until after their parent templates have completed\n        // processing, so they are queued here until after the initial pass. Otherwise, we wouldn't\n        // be able to support bindings in nested templates to local refs that occur after the\n        // template definition. e.g. <div *ngIf=\"showing\">{{ foo }}</div>  <div #foo></div>\n        this._nestedTemplateFns.push(() => {\n            const templateFunctionExpr = templateVisitor.buildTemplateFunction(template.children, template.variables, this._ngContentReservedSlots.length + this._ngContentSelectorsOffset, template.i18n);\n            this.constantPool.statements.push(templateFunctionExpr.toDeclStmt(templateName));\n            if (templateVisitor._ngContentReservedSlots.length) {\n                this._ngContentReservedSlots.push(...templateVisitor._ngContentReservedSlots);\n            }\n        });\n        // e.g. template(1, MyComp_Template_1)\n        this.creationInstruction(template.sourceSpan, Identifiers$1.templateCreate, () => {\n            parameters.splice(2, 0, literal(templateVisitor.getConstCount()), literal(templateVisitor.getVarCount()));\n            return trimTrailingNulls(parameters);\n        });\n        // handle property bindings e.g. ɵɵproperty('ngForOf', ctx.items), et al;\n        this.templatePropertyBindings(templateIndex, template.templateAttrs);\n        // Only add normal input/output binding instructions on explicit <ng-template> elements.\n        if (tagNameWithoutNamespace === NG_TEMPLATE_TAG_NAME) {\n            const [i18nInputs, inputs] = partitionArray(template.inputs, hasI18nMeta);\n            // Add i18n attributes that may act as inputs to directives. If such attributes are present,\n            // generate `i18nAttributes` instruction. Note: we generate it only for explicit <ng-template>\n            // elements, in case of inline templates, corresponding instructions will be generated in the\n            // nested template function.\n            if (i18nInputs.length > 0) {\n                this.i18nAttributesInstruction(templateIndex, i18nInputs, (_a = template.startSourceSpan) !== null && _a !== void 0 ? _a : template.sourceSpan);\n            }\n            // Add the input bindings\n            if (inputs.length > 0) {\n                this.templatePropertyBindings(templateIndex, inputs);\n            }\n            // Generate listeners for directive output\n            if (template.outputs.length > 0) {\n                const listeners = template.outputs.map((outputAst) => ({\n                    sourceSpan: outputAst.sourceSpan,\n                    params: this.prepareListenerParameter('ng_template', outputAst, templateIndex)\n                }));\n                this.creationInstructionChain(Identifiers$1.listener, listeners);\n            }\n        }\n    }\n    visitBoundText(text) {\n        if (this.i18n) {\n            const value = text.value.visit(this._valueConverter);\n            this.allocateBindingSlots(value);\n            if (value instanceof Interpolation) {\n                this.i18n.appendBoundText(text.i18n);\n                this.i18nAppendBindings(value.expressions);\n            }\n            return;\n        }\n        const nodeIndex = this.allocateDataSlot();\n        this.creationInstruction(text.sourceSpan, Identifiers$1.text, [literal(nodeIndex)]);\n        const value = text.value.visit(this._valueConverter);\n        this.allocateBindingSlots(value);\n        if (value instanceof Interpolation) {\n            this.updateInstructionWithAdvance(nodeIndex, text.sourceSpan, getTextInterpolationExpression(value), () => this.getUpdateInstructionArguments(value));\n        }\n        else {\n            error('Text nodes should be interpolated and never bound directly.');\n        }\n    }\n    visitText(text) {\n        // when a text element is located within a translatable\n        // block, we exclude this text element from instructions set,\n        // since it will be captured in i18n content and processed at runtime\n        if (!this.i18n) {\n            this.creationInstruction(text.sourceSpan, Identifiers$1.text, [literal(this.allocateDataSlot()), literal(text.value)]);\n        }\n    }\n    visitIcu(icu) {\n        let initWasInvoked = false;\n        // if an ICU was created outside of i18n block, we still treat\n        // it as a translatable entity and invoke i18nStart and i18nEnd\n        // to generate i18n context and the necessary instructions\n        if (!this.i18n) {\n            initWasInvoked = true;\n            this.i18nStart(null, icu.i18n, true);\n        }\n        const i18n = this.i18n;\n        const vars = this.i18nBindProps(icu.vars);\n        const placeholders = this.i18nBindProps(icu.placeholders);\n        // output ICU directly and keep ICU reference in context\n        const message = icu.i18n;\n        // we always need post-processing function for ICUs, to make sure that:\n        // - all placeholders in a form of {PLACEHOLDER} are replaced with actual values (note:\n        // `goog.getMsg` does not process ICUs and uses the `{PLACEHOLDER}` format for placeholders\n        // inside ICUs)\n        // - all ICU vars (such as `VAR_SELECT` or `VAR_PLURAL`) are replaced with correct values\n        const transformFn = (raw) => {\n            const params = Object.assign(Object.assign({}, vars), placeholders);\n            const formatted = i18nFormatPlaceholderNames(params, /* useCamelCase */ false);\n            return instruction(null, Identifiers$1.i18nPostprocess, [raw, mapLiteral(formatted, true)]);\n        };\n        // in case the whole i18n message is a single ICU - we do not need to\n        // create a separate top-level translation, we can use the root ref instead\n        // and make this ICU a top-level translation\n        // note: ICU placeholders are replaced with actual values in `i18nPostprocess` function\n        // separately, so we do not pass placeholders into `i18nTranslate` function.\n        if (isSingleI18nIcu(i18n.meta)) {\n            this.i18nTranslate(message, /* placeholders */ {}, i18n.ref, transformFn);\n        }\n        else {\n            // output ICU directly and keep ICU reference in context\n            const ref = this.i18nTranslate(message, /* placeholders */ {}, /* ref */ undefined, transformFn);\n            i18n.appendIcu(icuFromI18nMessage(message).name, ref);\n        }\n        if (initWasInvoked) {\n            this.i18nEnd(null, true);\n        }\n        return null;\n    }\n    allocateDataSlot() {\n        return this._dataIndex++;\n    }\n    getConstCount() {\n        return this._dataIndex;\n    }\n    getVarCount() {\n        return this._pureFunctionSlots;\n    }\n    getConsts() {\n        return this._constants;\n    }\n    getNgContentSelectors() {\n        return this._ngContentReservedSlots.length ?\n            this.constantPool.getConstLiteral(asLiteral(this._ngContentReservedSlots), true) :\n            null;\n    }\n    bindingContext() {\n        return `${this._bindingContext++}`;\n    }\n    templatePropertyBindings(templateIndex, attrs) {\n        const propertyBindings = [];\n        attrs.forEach(input => {\n            if (input instanceof BoundAttribute) {\n                const value = input.value.visit(this._valueConverter);\n                if (value !== undefined) {\n                    this.allocateBindingSlots(value);\n                    if (value instanceof Interpolation) {\n                        // Params typically contain attribute namespace and value sanitizer, which is applicable\n                        // for regular HTML elements, but not applicable for <ng-template> (since props act as\n                        // inputs to directives), so keep params array empty.\n                        const params = [];\n                        // prop=\"{{value}}\" case\n                        this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), templateIndex, input.name, input, value, params);\n                    }\n                    else {\n                        // [prop]=\"value\" case\n                        propertyBindings.push({\n                            name: input.name,\n                            sourceSpan: input.sourceSpan,\n                            value: () => this.convertPropertyBinding(value)\n                        });\n                    }\n                }\n            }\n        });\n        if (propertyBindings.length > 0) {\n            this.updateInstructionChainWithAdvance(templateIndex, Identifiers$1.property, propertyBindings);\n        }\n    }\n    // Bindings must only be resolved after all local refs have been visited, so all\n    // instructions are queued in callbacks that execute once the initial pass has completed.\n    // Otherwise, we wouldn't be able to support local refs that are defined after their\n    // bindings. e.g. {{ foo }} <div #foo></div>\n    instructionFn(fns, span, reference, paramsOrFn, prepend = false) {\n        fns[prepend ? 'unshift' : 'push'](() => {\n            const params = Array.isArray(paramsOrFn) ? paramsOrFn : paramsOrFn();\n            return instruction(span, reference, params).toStmt();\n        });\n    }\n    processStylingUpdateInstruction(elementIndex, instruction) {\n        let allocateBindingSlots = 0;\n        if (instruction) {\n            const calls = [];\n            instruction.calls.forEach(call => {\n                allocateBindingSlots += call.allocateBindingSlots;\n                calls.push({\n                    sourceSpan: call.sourceSpan,\n                    value: () => {\n                        return call.params(value => (call.supportsInterpolation && value instanceof Interpolation) ?\n                            this.getUpdateInstructionArguments(value) :\n                            this.convertPropertyBinding(value));\n                    }\n                });\n            });\n            this.updateInstructionChainWithAdvance(elementIndex, instruction.reference, calls);\n        }\n        return allocateBindingSlots;\n    }\n    creationInstruction(span, reference, paramsOrFn, prepend) {\n        this.instructionFn(this._creationCodeFns, span, reference, paramsOrFn || [], prepend);\n    }\n    creationInstructionChain(reference, calls) {\n        const span = calls.length ? calls[0].sourceSpan : null;\n        this._creationCodeFns.push(() => {\n            return chainedInstruction(reference, calls.map(call => call.params()), span).toStmt();\n        });\n    }\n    updateInstructionWithAdvance(nodeIndex, span, reference, paramsOrFn) {\n        this.addAdvanceInstructionIfNecessary(nodeIndex, span);\n        this.updateInstruction(span, reference, paramsOrFn);\n    }\n    updateInstruction(span, reference, paramsOrFn) {\n        this.instructionFn(this._updateCodeFns, span, reference, paramsOrFn || []);\n    }\n    updateInstructionChain(reference, bindings) {\n        const span = bindings.length ? bindings[0].sourceSpan : null;\n        this._updateCodeFns.push(() => {\n            const calls = bindings.map(property => {\n                const value = property.value();\n                const fnParams = Array.isArray(value) ? value : [value];\n                if (property.params) {\n                    fnParams.push(...property.params);\n                }\n                if (property.name) {\n                    // We want the property name to always be the first function parameter.\n                    fnParams.unshift(literal(property.name));\n                }\n                return fnParams;\n            });\n            return chainedInstruction(reference, calls, span).toStmt();\n        });\n    }\n    updateInstructionChainWithAdvance(nodeIndex, reference, bindings) {\n        this.addAdvanceInstructionIfNecessary(nodeIndex, bindings.length ? bindings[0].sourceSpan : null);\n        this.updateInstructionChain(reference, bindings);\n    }\n    addAdvanceInstructionIfNecessary(nodeIndex, span) {\n        if (nodeIndex !== this._currentIndex) {\n            const delta = nodeIndex - this._currentIndex;\n            if (delta < 1) {\n                throw new Error('advance instruction can only go forwards');\n            }\n            this.instructionFn(this._updateCodeFns, span, Identifiers$1.advance, [literal(delta)]);\n            this._currentIndex = nodeIndex;\n        }\n    }\n    allocatePureFunctionSlots(numSlots) {\n        const originalSlots = this._pureFunctionSlots;\n        this._pureFunctionSlots += numSlots;\n        return originalSlots;\n    }\n    allocateBindingSlots(value) {\n        this._bindingSlots += value instanceof Interpolation ? value.expressions.length : 1;\n    }\n    /**\n     * Gets an expression that refers to the implicit receiver. The implicit\n     * receiver is always the root level context.\n     */\n    getImplicitReceiverExpr() {\n        if (this._implicitReceiverExpr) {\n            return this._implicitReceiverExpr;\n        }\n        return this._implicitReceiverExpr = this.level === 0 ?\n            variable(CONTEXT_NAME) :\n            this._bindingScope.getOrCreateSharedContextVar(0);\n    }\n    convertPropertyBinding(value) {\n        const convertedPropertyBinding = convertPropertyBinding(this, this.getImplicitReceiverExpr(), value, this.bindingContext(), BindingForm.Expression, () => error('Unexpected interpolation'));\n        const valExpr = convertedPropertyBinding.currValExpr;\n        this._tempVariables.push(...convertedPropertyBinding.stmts);\n        return valExpr;\n    }\n    /**\n     * Gets a list of argument expressions to pass to an update instruction expression. Also updates\n     * the temp variables state with temp variables that were identified as needing to be created\n     * while visiting the arguments.\n     * @param value The original expression we will be resolving an arguments list from.\n     */\n    getUpdateInstructionArguments(value) {\n        const { args, stmts } = convertUpdateArguments(this, this.getImplicitReceiverExpr(), value, this.bindingContext());\n        this._tempVariables.push(...stmts);\n        return args;\n    }\n    matchDirectives(elementName, elOrTpl) {\n        if (this.directiveMatcher) {\n            const selector = createCssSelector(elementName, getAttrsForDirectiveMatching(elOrTpl));\n            this.directiveMatcher.match(selector, (cssSelector, staticType) => {\n                this.directives.add(staticType);\n            });\n        }\n    }\n    /**\n     * Prepares all attribute expression values for the `TAttributes` array.\n     *\n     * The purpose of this function is to properly construct an attributes array that\n     * is passed into the `elementStart` (or just `element`) functions. Because there\n     * are many different types of attributes, the array needs to be constructed in a\n     * special way so that `elementStart` can properly evaluate them.\n     *\n     * The format looks like this:\n     *\n     * ```\n     * attrs = [prop, value, prop2, value2,\n     *   PROJECT_AS, selector,\n     *   CLASSES, class1, class2,\n     *   STYLES, style1, value1, style2, value2,\n     *   BINDINGS, name1, name2, name3,\n     *   TEMPLATE, name4, name5, name6,\n     *   I18N, name7, name8, ...]\n     * ```\n     *\n     * Note that this function will fully ignore all synthetic (@foo) attribute values\n     * because those values are intended to always be generated as property instructions.\n     */\n    getAttributeExpressions(elementName, renderAttributes, inputs, outputs, styles, templateAttrs = [], boundI18nAttrs = []) {\n        const alreadySeen = new Set();\n        const attrExprs = [];\n        let ngProjectAsAttr;\n        for (const attr of renderAttributes) {\n            if (attr.name === NG_PROJECT_AS_ATTR_NAME) {\n                ngProjectAsAttr = attr;\n            }\n            // Note that static i18n attributes aren't in the i18n array,\n            // because they're treated in the same way as regular attributes.\n            if (attr.i18n) {\n                // When i18n attributes are present on elements with structural directives\n                // (e.g. `<div *ngIf title=\"Hello\" i18n-title>`), we want to avoid generating\n                // duplicate i18n translation blocks for `ɵɵtemplate` and `ɵɵelement` instruction\n                // attributes. So we do a cache lookup to see if suitable i18n translation block\n                // already exists.\n                const { i18nVarRefsCache } = this._constants;\n                let i18nVarRef;\n                if (i18nVarRefsCache.has(attr.i18n)) {\n                    i18nVarRef = i18nVarRefsCache.get(attr.i18n);\n                }\n                else {\n                    i18nVarRef = this.i18nTranslate(attr.i18n);\n                    i18nVarRefsCache.set(attr.i18n, i18nVarRef);\n                }\n                attrExprs.push(literal(attr.name), i18nVarRef);\n            }\n            else {\n                attrExprs.push(...getAttributeNameLiterals(attr.name), trustedConstAttribute(elementName, attr));\n            }\n        }\n        // Keep ngProjectAs next to the other name, value pairs so we can verify that we match\n        // ngProjectAs marker in the attribute name slot.\n        if (ngProjectAsAttr) {\n            attrExprs.push(...getNgProjectAsLiteral(ngProjectAsAttr));\n        }\n        function addAttrExpr(key, value) {\n            if (typeof key === 'string') {\n                if (!alreadySeen.has(key)) {\n                    attrExprs.push(...getAttributeNameLiterals(key));\n                    value !== undefined && attrExprs.push(value);\n                    alreadySeen.add(key);\n                }\n            }\n            else {\n                attrExprs.push(literal(key));\n            }\n        }\n        // it's important that this occurs before BINDINGS and TEMPLATE because once `elementStart`\n        // comes across the BINDINGS or TEMPLATE markers then it will continue reading each value as\n        // as single property value cell by cell.\n        if (styles) {\n            styles.populateInitialStylingAttrs(attrExprs);\n        }\n        if (inputs.length || outputs.length) {\n            const attrsLengthBeforeInputs = attrExprs.length;\n            for (let i = 0; i < inputs.length; i++) {\n                const input = inputs[i];\n                // We don't want the animation and attribute bindings in the\n                // attributes array since they aren't used for directive matching.\n                if (input.type !== 4 /* Animation */ && input.type !== 1 /* Attribute */) {\n                    addAttrExpr(input.name);\n                }\n            }\n            for (let i = 0; i < outputs.length; i++) {\n                const output = outputs[i];\n                if (output.type !== 1 /* Animation */) {\n                    addAttrExpr(output.name);\n                }\n            }\n            // this is a cheap way of adding the marker only after all the input/output\n            // values have been filtered (by not including the animation ones) and added\n            // to the expressions. The marker is important because it tells the runtime\n            // code that this is where attributes without values start...\n            if (attrExprs.length !== attrsLengthBeforeInputs) {\n                attrExprs.splice(attrsLengthBeforeInputs, 0, literal(3 /* Bindings */));\n            }\n        }\n        if (templateAttrs.length) {\n            attrExprs.push(literal(4 /* Template */));\n            templateAttrs.forEach(attr => addAttrExpr(attr.name));\n        }\n        if (boundI18nAttrs.length) {\n            attrExprs.push(literal(6 /* I18n */));\n            boundI18nAttrs.forEach(attr => addAttrExpr(attr.name));\n        }\n        return attrExprs;\n    }\n    addToConsts(expression) {\n        if (isNull(expression)) {\n            return TYPED_NULL_EXPR;\n        }\n        const consts = this._constants.constExpressions;\n        // Try to reuse a literal that's already in the array, if possible.\n        for (let i = 0; i < consts.length; i++) {\n            if (consts[i].isEquivalent(expression)) {\n                return literal(i);\n            }\n        }\n        return literal(consts.push(expression) - 1);\n    }\n    addAttrsToConsts(attrs) {\n        return attrs.length > 0 ? this.addToConsts(literalArr(attrs)) : TYPED_NULL_EXPR;\n    }\n    prepareRefsArray(references) {\n        if (!references || references.length === 0) {\n            return TYPED_NULL_EXPR;\n        }\n        const refsParam = flatten(references.map(reference => {\n            const slot = this.allocateDataSlot();\n            // Generate the update temporary.\n            const variableName = this._bindingScope.freshReferenceName();\n            const retrievalLevel = this.level;\n            const lhs = variable(variableName);\n            this._bindingScope.set(retrievalLevel, reference.name, lhs, 0 /* DEFAULT */, (scope, relativeLevel) => {\n                // e.g. nextContext(2);\n                const nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : [];\n                // e.g. const $foo$ = reference(1);\n                const refExpr = lhs.set(importExpr(Identifiers$1.reference).callFn([literal(slot)]));\n                return nextContextStmt.concat(refExpr.toConstDecl());\n            }, true);\n            return [reference.name, reference.value];\n        }));\n        return asLiteral(refsParam);\n    }\n    prepareListenerParameter(tagName, outputAst, index) {\n        return () => {\n            const eventName = outputAst.name;\n            const bindingFnName = outputAst.type === 1 /* Animation */ ?\n                // synthetic @listener.foo values are treated the exact same as are standard listeners\n                prepareSyntheticListenerFunctionName(eventName, outputAst.phase) :\n                sanitizeIdentifier(eventName);\n            const handlerName = `${this.templateName}_${tagName}_${bindingFnName}_${index}_listener`;\n            const scope = this._bindingScope.nestedScope(this._bindingScope.bindingLevel, EVENT_BINDING_SCOPE_GLOBALS);\n            return prepareEventListenerParameters(outputAst, handlerName, scope);\n        };\n    }\n}\nclass ValueConverter extends AstMemoryEfficientTransformer {\n    constructor(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {\n        super();\n        this.constantPool = constantPool;\n        this.allocateSlot = allocateSlot;\n        this.allocatePureFunctionSlots = allocatePureFunctionSlots;\n        this.definePipe = definePipe;\n        this._pipeBindExprs = [];\n    }\n    // AstMemoryEfficientTransformer\n    visitPipe(pipe, context) {\n        // Allocate a slot to create the pipe\n        const slot = this.allocateSlot();\n        const slotPseudoLocal = `PIPE:${slot}`;\n        // Allocate one slot for the result plus one slot per pipe argument\n        const pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe.args.length);\n        const target = new PropertyRead(pipe.span, pipe.sourceSpan, pipe.nameSpan, new ImplicitReceiver(pipe.span, pipe.sourceSpan), slotPseudoLocal);\n        const { identifier, isVarLength } = pipeBindingCallInfo(pipe.args);\n        this.definePipe(pipe.name, slotPseudoLocal, slot, importExpr(identifier));\n        const args = [pipe.exp, ...pipe.args];\n        const convertedArgs = isVarLength ?\n            this.visitAll([new LiteralArray(pipe.span, pipe.sourceSpan, args)]) :\n            this.visitAll(args);\n        const pipeBindExpr = new Call(pipe.span, pipe.sourceSpan, target, [\n            new LiteralPrimitive(pipe.span, pipe.sourceSpan, slot),\n            new LiteralPrimitive(pipe.span, pipe.sourceSpan, pureFunctionSlot),\n            ...convertedArgs,\n        ], null);\n        this._pipeBindExprs.push(pipeBindExpr);\n        return pipeBindExpr;\n    }\n    updatePipeSlotOffsets(bindingSlots) {\n        this._pipeBindExprs.forEach((pipe) => {\n            // update the slot offset arg (index 1) to account for binding slots\n            const slotOffset = pipe.args[1];\n            slotOffset.value += bindingSlots;\n        });\n    }\n    visitLiteralArray(array, context) {\n        return new BuiltinFunctionCall(array.span, array.sourceSpan, this.visitAll(array.expressions), values => {\n            // If the literal has calculated (non-literal) elements transform it into\n            // calls to literal factories that compose the literal and will cache intermediate\n            // values.\n            const literal = literalArr(values);\n            return getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);\n        });\n    }\n    visitLiteralMap(map, context) {\n        return new BuiltinFunctionCall(map.span, map.sourceSpan, this.visitAll(map.values), values => {\n            // If the literal has calculated (non-literal) elements  transform it into\n            // calls to literal factories that compose the literal and will cache intermediate\n            // values.\n            const literal = literalMap(values.map((value, index) => ({ key: map.keys[index].key, value, quoted: map.keys[index].quoted })));\n            return getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);\n        });\n    }\n}\n// Pipes always have at least one parameter, the value they operate on\nconst pipeBindingIdentifiers = [Identifiers$1.pipeBind1, Identifiers$1.pipeBind2, Identifiers$1.pipeBind3, Identifiers$1.pipeBind4];\nfunction pipeBindingCallInfo(args) {\n    const identifier = pipeBindingIdentifiers[args.length];\n    return {\n        identifier: identifier || Identifiers$1.pipeBindV,\n        isVarLength: !identifier,\n    };\n}\nconst pureFunctionIdentifiers = [\n    Identifiers$1.pureFunction0, Identifiers$1.pureFunction1, Identifiers$1.pureFunction2, Identifiers$1.pureFunction3, Identifiers$1.pureFunction4,\n    Identifiers$1.pureFunction5, Identifiers$1.pureFunction6, Identifiers$1.pureFunction7, Identifiers$1.pureFunction8\n];\nfunction pureFunctionCallInfo(args) {\n    const identifier = pureFunctionIdentifiers[args.length];\n    return {\n        identifier: identifier || Identifiers$1.pureFunctionV,\n        isVarLength: !identifier,\n    };\n}\nfunction instruction(span, reference, params) {\n    return importExpr(reference, null, span).callFn(params, span);\n}\n// e.g. x(2);\nfunction generateNextContextExpr(relativeLevelDiff) {\n    return importExpr(Identifiers$1.nextContext)\n        .callFn(relativeLevelDiff > 1 ? [literal(relativeLevelDiff)] : []);\n}\nfunction getLiteralFactory(constantPool, literal$1, allocateSlots) {\n    const { literalFactory, literalFactoryArguments } = constantPool.getLiteralFactory(literal$1);\n    // Allocate 1 slot for the result plus 1 per argument\n    const startSlot = allocateSlots(1 + literalFactoryArguments.length);\n    const { identifier, isVarLength } = pureFunctionCallInfo(literalFactoryArguments);\n    // Literal factories are pure functions that only need to be re-invoked when the parameters\n    // change.\n    const args = [literal(startSlot), literalFactory];\n    if (isVarLength) {\n        args.push(literalArr(literalFactoryArguments));\n    }\n    else {\n        args.push(...literalFactoryArguments);\n    }\n    return importExpr(identifier).callFn(args);\n}\n/**\n * Gets an array of literals that can be added to an expression\n * to represent the name and namespace of an attribute. E.g.\n * `:xlink:href` turns into `[AttributeMarker.NamespaceURI, 'xlink', 'href']`.\n *\n * @param name Name of the attribute, including the namespace.\n */\nfunction getAttributeNameLiterals(name) {\n    const [attributeNamespace, attributeName] = splitNsName(name);\n    const nameLiteral = literal(attributeName);\n    if (attributeNamespace) {\n        return [\n            literal(0 /* NamespaceURI */), literal(attributeNamespace), nameLiteral\n        ];\n    }\n    return [nameLiteral];\n}\n/** The prefix used to get a shared context in BindingScope's map. */\nconst SHARED_CONTEXT_KEY = '$$shared_ctx$$';\nclass BindingScope {\n    constructor(bindingLevel = 0, parent = null, globals) {\n        this.bindingLevel = bindingLevel;\n        this.parent = parent;\n        this.globals = globals;\n        /** Keeps a map from local variables to their BindingData. */\n        this.map = new Map();\n        this.referenceNameIndex = 0;\n        this.restoreViewVariable = null;\n        this.usesRestoredViewContext = false;\n        if (globals !== undefined) {\n            for (const name of globals) {\n                this.set(0, name, variable(name));\n            }\n        }\n    }\n    static createRootScope() {\n        return new BindingScope();\n    }\n    get(name) {\n        let current = this;\n        while (current) {\n            let value = current.map.get(name);\n            if (value != null) {\n                if (current !== this) {\n                    // make a local copy and reset the `declare` state\n                    value = {\n                        retrievalLevel: value.retrievalLevel,\n                        lhs: value.lhs,\n                        declareLocalCallback: value.declareLocalCallback,\n                        declare: false,\n                        priority: value.priority\n                    };\n                    // Cache the value locally.\n                    this.map.set(name, value);\n                    // Possibly generate a shared context var\n                    this.maybeGenerateSharedContextVar(value);\n                    this.maybeRestoreView();\n                }\n                if (value.declareLocalCallback && !value.declare) {\n                    value.declare = true;\n                }\n                return value.lhs;\n            }\n            current = current.parent;\n        }\n        // If we get to this point, we are looking for a property on the top level component\n        // - If level === 0, we are on the top and don't need to re-declare `ctx`.\n        // - If level > 0, we are in an embedded view. We need to retrieve the name of the\n        // local var we used to store the component context, e.g. const $comp$ = x();\n        return this.bindingLevel === 0 ? null : this.getComponentProperty(name);\n    }\n    /**\n     * Create a local variable for later reference.\n     *\n     * @param retrievalLevel The level from which this value can be retrieved\n     * @param name Name of the variable.\n     * @param lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param priority The sorting priority of this var\n     * @param declareLocalCallback The callback to invoke when declaring this local var\n     * @param localRef Whether or not this is a local ref\n     */\n    set(retrievalLevel, name, lhs, priority = 0 /* DEFAULT */, declareLocalCallback, localRef) {\n        if (this.map.has(name)) {\n            if (localRef) {\n                // Do not throw an error if it's a local ref and do not update existing value,\n                // so the first defined ref is always returned.\n                return this;\n            }\n            error(`The name ${name} is already defined in scope to be ${this.map.get(name)}`);\n        }\n        this.map.set(name, {\n            retrievalLevel: retrievalLevel,\n            lhs: lhs,\n            declare: false,\n            declareLocalCallback: declareLocalCallback,\n            priority: priority,\n        });\n        return this;\n    }\n    // Implemented as part of LocalResolver.\n    getLocal(name) {\n        return this.get(name);\n    }\n    // Implemented as part of LocalResolver.\n    notifyImplicitReceiverUse() {\n        if (this.bindingLevel !== 0) {\n            // Since the implicit receiver is accessed in an embedded view, we need to\n            // ensure that we declare a shared context variable for the current template\n            // in the update variables.\n            this.map.get(SHARED_CONTEXT_KEY + 0).declare = true;\n        }\n    }\n    nestedScope(level, globals) {\n        const newScope = new BindingScope(level, this, globals);\n        if (level > 0)\n            newScope.generateSharedContextVar(0);\n        return newScope;\n    }\n    /**\n     * Gets or creates a shared context variable and returns its expression. Note that\n     * this does not mean that the shared variable will be declared. Variables in the\n     * binding scope will be only declared if they are used.\n     */\n    getOrCreateSharedContextVar(retrievalLevel) {\n        const bindingKey = SHARED_CONTEXT_KEY + retrievalLevel;\n        if (!this.map.has(bindingKey)) {\n            this.generateSharedContextVar(retrievalLevel);\n        }\n        // Shared context variables are always generated as \"ReadVarExpr\".\n        return this.map.get(bindingKey).lhs;\n    }\n    getSharedContextName(retrievalLevel) {\n        const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel);\n        // Shared context variables are always generated as \"ReadVarExpr\".\n        return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;\n    }\n    maybeGenerateSharedContextVar(value) {\n        if (value.priority === 1 /* CONTEXT */ &&\n            value.retrievalLevel < this.bindingLevel) {\n            const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);\n            if (sharedCtxObj) {\n                sharedCtxObj.declare = true;\n            }\n            else {\n                this.generateSharedContextVar(value.retrievalLevel);\n            }\n        }\n    }\n    generateSharedContextVar(retrievalLevel) {\n        const lhs = variable(CONTEXT_NAME + this.freshReferenceName());\n        this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {\n            retrievalLevel: retrievalLevel,\n            lhs: lhs,\n            declareLocalCallback: (scope, relativeLevel) => {\n                // const ctx_r0 = nextContext(2);\n                return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];\n            },\n            declare: false,\n            priority: 2 /* SHARED_CONTEXT */,\n        });\n    }\n    getComponentProperty(name) {\n        const componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);\n        componentValue.declare = true;\n        this.maybeRestoreView();\n        return componentValue.lhs.prop(name);\n    }\n    maybeRestoreView() {\n        // View restoration is required for listener instructions inside embedded views, because\n        // they only run in creation mode and they can have references to the context object.\n        // If the context object changes in update mode, the reference will be incorrect, because\n        // it was established during creation.\n        if (this.isListenerScope()) {\n            if (!this.parent.restoreViewVariable) {\n                // parent saves variable to generate a shared `const $s$ = getCurrentView();` instruction\n                this.parent.restoreViewVariable = variable(this.parent.freshReferenceName());\n            }\n            this.restoreViewVariable = this.parent.restoreViewVariable;\n        }\n    }\n    restoreViewStatement() {\n        const statements = [];\n        if (this.restoreViewVariable) {\n            const restoreCall = instruction(null, Identifiers$1.restoreView, [this.restoreViewVariable]);\n            // Either `const restoredCtx = restoreView($state$);` or `restoreView($state$);`\n            // depending on whether it is being used.\n            statements.push(this.usesRestoredViewContext ?\n                variable(RESTORED_VIEW_CONTEXT_NAME).set(restoreCall).toConstDecl() :\n                restoreCall.toStmt());\n        }\n        return statements;\n    }\n    viewSnapshotStatements() {\n        // const $state$ = getCurrentView();\n        return this.restoreViewVariable ?\n            [this.restoreViewVariable.set(instruction(null, Identifiers$1.getCurrentView, [])).toConstDecl()] :\n            [];\n    }\n    isListenerScope() {\n        return this.parent && this.parent.bindingLevel === this.bindingLevel;\n    }\n    variableDeclarations() {\n        let currentContextLevel = 0;\n        return Array.from(this.map.values())\n            .filter(value => value.declare)\n            .sort((a, b) => b.retrievalLevel - a.retrievalLevel || b.priority - a.priority)\n            .reduce((stmts, value) => {\n            const levelDiff = this.bindingLevel - value.retrievalLevel;\n            const currStmts = value.declareLocalCallback(this, levelDiff - currentContextLevel);\n            currentContextLevel = levelDiff;\n            return stmts.concat(currStmts);\n        }, []);\n    }\n    freshReferenceName() {\n        let current = this;\n        // Find the top scope as it maintains the global reference count\n        while (current.parent)\n            current = current.parent;\n        const ref = `${REFERENCE_PREFIX}${current.referenceNameIndex++}`;\n        return ref;\n    }\n    hasRestoreViewVariable() {\n        return !!this.restoreViewVariable;\n    }\n    notifyRestoredViewContextUse() {\n        this.usesRestoredViewContext = true;\n    }\n}\n/**\n * Creates a `CssSelector` given a tag name and a map of attributes\n */\nfunction createCssSelector(elementName, attributes) {\n    const cssSelector = new CssSelector();\n    const elementNameNoNs = splitNsName(elementName)[1];\n    cssSelector.setElement(elementNameNoNs);\n    Object.getOwnPropertyNames(attributes).forEach((name) => {\n        const nameNoNs = splitNsName(name)[1];\n        const value = attributes[name];\n        cssSelector.addAttribute(nameNoNs, value);\n        if (name.toLowerCase() === 'class') {\n            const classes = value.trim().split(/\\s+/);\n            classes.forEach(className => cssSelector.addClassName(className));\n        }\n    });\n    return cssSelector;\n}\n/**\n * Creates an array of expressions out of an `ngProjectAs` attributes\n * which can be added to the instruction parameters.\n */\nfunction getNgProjectAsLiteral(attribute) {\n    // Parse the attribute value into a CssSelectorList. Note that we only take the\n    // first selector, because we don't support multiple selectors in ngProjectAs.\n    const parsedR3Selector = parseSelectorToR3Selector(attribute.value)[0];\n    return [literal(5 /* ProjectAs */), asLiteral(parsedR3Selector)];\n}\n/**\n * Gets the instruction to generate for an interpolated property\n * @param interpolation An Interpolation AST\n */\nfunction getPropertyInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers$1.propertyInterpolate;\n        case 3:\n            return Identifiers$1.propertyInterpolate1;\n        case 5:\n            return Identifiers$1.propertyInterpolate2;\n        case 7:\n            return Identifiers$1.propertyInterpolate3;\n        case 9:\n            return Identifiers$1.propertyInterpolate4;\n        case 11:\n            return Identifiers$1.propertyInterpolate5;\n        case 13:\n            return Identifiers$1.propertyInterpolate6;\n        case 15:\n            return Identifiers$1.propertyInterpolate7;\n        case 17:\n            return Identifiers$1.propertyInterpolate8;\n        default:\n            return Identifiers$1.propertyInterpolateV;\n    }\n}\n/**\n * Gets the instruction to generate for an interpolated attribute\n * @param interpolation An Interpolation AST\n */\nfunction getAttributeInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 3:\n            return Identifiers$1.attributeInterpolate1;\n        case 5:\n            return Identifiers$1.attributeInterpolate2;\n        case 7:\n            return Identifiers$1.attributeInterpolate3;\n        case 9:\n            return Identifiers$1.attributeInterpolate4;\n        case 11:\n            return Identifiers$1.attributeInterpolate5;\n        case 13:\n            return Identifiers$1.attributeInterpolate6;\n        case 15:\n            return Identifiers$1.attributeInterpolate7;\n        case 17:\n            return Identifiers$1.attributeInterpolate8;\n        default:\n            return Identifiers$1.attributeInterpolateV;\n    }\n}\n/**\n * Gets the instruction to generate for interpolated text.\n * @param interpolation An Interpolation AST\n */\nfunction getTextInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers$1.textInterpolate;\n        case 3:\n            return Identifiers$1.textInterpolate1;\n        case 5:\n            return Identifiers$1.textInterpolate2;\n        case 7:\n            return Identifiers$1.textInterpolate3;\n        case 9:\n            return Identifiers$1.textInterpolate4;\n        case 11:\n            return Identifiers$1.textInterpolate5;\n        case 13:\n            return Identifiers$1.textInterpolate6;\n        case 15:\n            return Identifiers$1.textInterpolate7;\n        case 17:\n            return Identifiers$1.textInterpolate8;\n        default:\n            return Identifiers$1.textInterpolateV;\n    }\n}\n/**\n * Parse a template into render3 `Node`s and additional metadata, with no other dependencies.\n *\n * @param template text of the template to parse\n * @param templateUrl URL to use for source mapping of the parsed template\n * @param options options to modify how the template is parsed\n */\nfunction parseTemplate(template, templateUrl, options = {}) {\n    const { interpolationConfig, preserveWhitespaces, enableI18nLegacyMessageIdFormat } = options;\n    const bindingParser = makeBindingParser(interpolationConfig);\n    const htmlParser = new HtmlParser();\n    const parseResult = htmlParser.parse(template, templateUrl, Object.assign(Object.assign({ leadingTriviaChars: LEADING_TRIVIA_CHARS }, options), { tokenizeExpansionForms: true }));\n    if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors &&\n        parseResult.errors.length > 0) {\n        const parsedTemplate = {\n            interpolationConfig,\n            preserveWhitespaces,\n            errors: parseResult.errors,\n            nodes: [],\n            styleUrls: [],\n            styles: [],\n            ngContentSelectors: []\n        };\n        if (options.collectCommentNodes) {\n            parsedTemplate.commentNodes = [];\n        }\n        return parsedTemplate;\n    }\n    let rootNodes = parseResult.rootNodes;\n    // process i18n meta information (scan attributes, generate ids)\n    // before we run whitespace removal process, because existing i18n\n    // extraction process (ng extract-i18n) relies on a raw content to generate\n    // message ids\n    const i18nMetaVisitor = new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */ !preserveWhitespaces, enableI18nLegacyMessageIdFormat);\n    const i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);\n    if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors &&\n        i18nMetaResult.errors.length > 0) {\n        const parsedTemplate = {\n            interpolationConfig,\n            preserveWhitespaces,\n            errors: i18nMetaResult.errors,\n            nodes: [],\n            styleUrls: [],\n            styles: [],\n            ngContentSelectors: []\n        };\n        if (options.collectCommentNodes) {\n            parsedTemplate.commentNodes = [];\n        }\n        return parsedTemplate;\n    }\n    rootNodes = i18nMetaResult.rootNodes;\n    if (!preserveWhitespaces) {\n        rootNodes = visitAll(new WhitespaceVisitor(), rootNodes);\n        // run i18n meta visitor again in case whitespaces are removed (because that might affect\n        // generated i18n message content) and first pass indicated that i18n content is present in a\n        // template. During this pass i18n IDs generated at the first pass will be preserved, so we can\n        // mimic existing extraction process (ng extract-i18n)\n        if (i18nMetaVisitor.hasI18nMeta) {\n            rootNodes = visitAll(new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */ false), rootNodes);\n        }\n    }\n    const { nodes, errors, styleUrls, styles, ngContentSelectors, commentNodes } = htmlAstToRender3Ast(rootNodes, bindingParser, { collectCommentNodes: !!options.collectCommentNodes });\n    errors.push(...parseResult.errors, ...i18nMetaResult.errors);\n    const parsedTemplate = {\n        interpolationConfig,\n        preserveWhitespaces,\n        errors: errors.length > 0 ? errors : null,\n        nodes,\n        styleUrls,\n        styles,\n        ngContentSelectors\n    };\n    if (options.collectCommentNodes) {\n        parsedTemplate.commentNodes = commentNodes;\n    }\n    return parsedTemplate;\n}\nconst elementRegistry = new DomElementSchemaRegistry();\n/**\n * Construct a `BindingParser` with a default configuration.\n */\nfunction makeBindingParser(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    return new BindingParser(new IvyParser(new Lexer()), interpolationConfig, elementRegistry, []);\n}\nfunction resolveSanitizationFn(context, isAttribute) {\n    switch (context) {\n        case SecurityContext.HTML:\n            return importExpr(Identifiers$1.sanitizeHtml);\n        case SecurityContext.SCRIPT:\n            return importExpr(Identifiers$1.sanitizeScript);\n        case SecurityContext.STYLE:\n            // the compiler does not fill in an instruction for [style.prop?] binding\n            // values because the style algorithm knows internally what props are subject\n            // to sanitization (only [attr.style] values are explicitly sanitized)\n            return isAttribute ? importExpr(Identifiers$1.sanitizeStyle) : null;\n        case SecurityContext.URL:\n            return importExpr(Identifiers$1.sanitizeUrl);\n        case SecurityContext.RESOURCE_URL:\n            return importExpr(Identifiers$1.sanitizeResourceUrl);\n        default:\n            return null;\n    }\n}\nfunction trustedConstAttribute(tagName, attr) {\n    const value = asLiteral(attr.value);\n    if (isTrustedTypesSink(tagName, attr.name)) {\n        switch (elementRegistry.securityContext(tagName, attr.name, /* isAttribute */ true)) {\n            case SecurityContext.HTML:\n                return taggedTemplate(importExpr(Identifiers$1.trustConstantHtml), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);\n            // NB: no SecurityContext.SCRIPT here, as the corresponding tags are stripped by the compiler.\n            case SecurityContext.RESOURCE_URL:\n                return taggedTemplate(importExpr(Identifiers$1.trustConstantResourceUrl), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);\n            default:\n                return value;\n        }\n    }\n    else {\n        return value;\n    }\n}\nfunction isSingleElementTemplate(children) {\n    return children.length === 1 && children[0] instanceof Element$1;\n}\nfunction isTextNode(node) {\n    return node instanceof Text$3 || node instanceof BoundText || node instanceof Icu$1;\n}\nfunction hasTextChildrenOnly(children) {\n    return children.every(isTextNode);\n}\n/** Name of the global variable that is used to determine if we use Closure translations or not */\nconst NG_I18N_CLOSURE_MODE = 'ngI18nClosureMode';\n/**\n * Generate statements that define a given translation message.\n *\n * ```\n * var I18N_1;\n * if (typeof ngI18nClosureMode !== undefined && ngI18nClosureMode) {\n *     var MSG_EXTERNAL_XXX = goog.getMsg(\n *          \"Some message with {$interpolation}!\",\n *          { \"interpolation\": \"\\uFFFD0\\uFFFD\" }\n *     );\n *     I18N_1 = MSG_EXTERNAL_XXX;\n * }\n * else {\n *     I18N_1 = $localize`Some message with ${'\\uFFFD0\\uFFFD'}!`;\n * }\n * ```\n *\n * @param message The original i18n AST message node\n * @param variable The variable that will be assigned the translation, e.g. `I18N_1`.\n * @param closureVar The variable for Closure `goog.getMsg` calls, e.g. `MSG_EXTERNAL_XXX`.\n * @param params Object mapping placeholder names to their values (e.g.\n * `{ \"interpolation\": \"\\uFFFD0\\uFFFD\" }`).\n * @param transformFn Optional transformation function that will be applied to the translation (e.g.\n * post-processing).\n * @returns An array of statements that defined a given translation.\n */\nfunction getTranslationDeclStmts(message, variable, closureVar, params = {}, transformFn) {\n    const statements = [\n        declareI18nVariable(variable),\n        ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable, message, closureVar, i18nFormatPlaceholderNames(params, /* useCamelCase */ true)), createLocalizeStatements(variable, message, i18nFormatPlaceholderNames(params, /* useCamelCase */ false))),\n    ];\n    if (transformFn) {\n        statements.push(new ExpressionStatement(variable.set(transformFn(variable))));\n    }\n    return statements;\n}\n/**\n * Create the expression that will be used to guard the closure mode block\n * It is equivalent to:\n *\n * ```\n * typeof ngI18nClosureMode !== undefined && ngI18nClosureMode\n * ```\n */\nfunction createClosureModeGuard() {\n    return typeofExpr(variable(NG_I18N_CLOSURE_MODE))\n        .notIdentical(literal('undefined', STRING_TYPE))\n        .and(variable(NG_I18N_CLOSURE_MODE));\n}\nfunction flatten(list) {\n    return list.reduce((flat, item) => {\n        const flatItem = Array.isArray(item) ? flatten(item) : item;\n        return flat.concat(flatItem);\n    }, []);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This regex matches any binding names that contain the \"attr.\" prefix, e.g. \"attr.required\"\n// If there is a match, the first matching group will contain the attribute name to bind.\nconst ATTR_REGEX = /attr\\.([^\\]]+)/;\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\nfunction baseDirectiveFields(meta, constantPool, bindingParser) {\n    const definitionMap = new DefinitionMap();\n    const selectors = parseSelectorToR3Selector(meta.selector);\n    // e.g. `type: MyDirective`\n    definitionMap.set('type', meta.internalType);\n    // e.g. `selectors: [['', 'someDir', '']]`\n    if (selectors.length > 0) {\n        definitionMap.set('selectors', asLiteral(selectors));\n    }\n    if (meta.queries.length > 0) {\n        // e.g. `contentQueries: (rf, ctx, dirIndex) => { ... }\n        definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool, meta.name));\n    }\n    if (meta.viewQueries.length) {\n        definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));\n    }\n    // e.g. `hostBindings: (rf, ctx) => { ... }\n    definitionMap.set('hostBindings', createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || '', meta.name, definitionMap));\n    // e.g 'inputs: {a: 'a'}`\n    definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true));\n    // e.g 'outputs: {a: 'a'}`\n    definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));\n    if (meta.exportAs !== null) {\n        definitionMap.set('exportAs', literalArr(meta.exportAs.map(e => literal(e))));\n    }\n    return definitionMap;\n}\n/**\n * Add features to the definition map.\n */\nfunction addFeatures(definitionMap, meta) {\n    // e.g. `features: [NgOnChangesFeature]`\n    const features = [];\n    const providers = meta.providers;\n    const viewProviders = meta.viewProviders;\n    if (providers || viewProviders) {\n        const args = [providers || new LiteralArrayExpr([])];\n        if (viewProviders) {\n            args.push(viewProviders);\n        }\n        features.push(importExpr(Identifiers$1.ProvidersFeature).callFn(args));\n    }\n    if (meta.usesInheritance) {\n        features.push(importExpr(Identifiers$1.InheritDefinitionFeature));\n    }\n    if (meta.fullInheritance) {\n        features.push(importExpr(Identifiers$1.CopyDefinitionFeature));\n    }\n    if (meta.lifecycle.usesOnChanges) {\n        features.push(importExpr(Identifiers$1.NgOnChangesFeature));\n    }\n    if (features.length) {\n        definitionMap.set('features', literalArr(features));\n    }\n}\n/**\n * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.\n */\nfunction compileDirectiveFromMetadata(meta, constantPool, bindingParser) {\n    const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n    addFeatures(definitionMap, meta);\n    const expression = importExpr(Identifiers$1.defineDirective).callFn([definitionMap.toLiteralMap()], undefined, true);\n    const type = createDirectiveType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.\n */\nfunction compileComponentFromMetadata(meta, constantPool, bindingParser) {\n    const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n    addFeatures(definitionMap, meta);\n    const selector = meta.selector && CssSelector.parse(meta.selector);\n    const firstSelector = selector && selector[0];\n    // e.g. `attr: [\"class\", \".my.app\"]`\n    // This is optional an only included if the first selector of a component specifies attributes.\n    if (firstSelector) {\n        const selectorAttributes = firstSelector.getAttrs();\n        if (selectorAttributes.length) {\n            definitionMap.set('attrs', constantPool.getConstLiteral(literalArr(selectorAttributes.map(value => value != null ? literal(value) : literal(undefined))), \n            /* forceShared */ true));\n        }\n    }\n    // Generate the CSS matcher that recognize directive\n    let directiveMatcher = null;\n    if (meta.directives.length > 0) {\n        const matcher = new SelectorMatcher();\n        for (const { selector, type } of meta.directives) {\n            matcher.addSelectables(CssSelector.parse(selector), type);\n        }\n        directiveMatcher = matcher;\n    }\n    // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`\n    const templateTypeName = meta.name;\n    const templateName = templateTypeName ? `${templateTypeName}_Template` : null;\n    const directivesUsed = new Set();\n    const pipesUsed = new Set();\n    const changeDetection = meta.changeDetection;\n    const template = meta.template;\n    const templateBuilder = new TemplateDefinitionBuilder(constantPool, BindingScope.createRootScope(), 0, templateTypeName, null, null, templateName, directiveMatcher, directivesUsed, meta.pipes, pipesUsed, Identifiers$1.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds);\n    const templateFunctionExpression = templateBuilder.buildTemplateFunction(template.nodes, []);\n    // We need to provide this so that dynamically generated components know what\n    // projected content blocks to pass through to the component when it is instantiated.\n    const ngContentSelectors = templateBuilder.getNgContentSelectors();\n    if (ngContentSelectors) {\n        definitionMap.set('ngContentSelectors', ngContentSelectors);\n    }\n    // e.g. `decls: 2`\n    definitionMap.set('decls', literal(templateBuilder.getConstCount()));\n    // e.g. `vars: 2`\n    definitionMap.set('vars', literal(templateBuilder.getVarCount()));\n    // Generate `consts` section of ComponentDef:\n    // - either as an array:\n    //   `consts: [['one', 'two'], ['three', 'four']]`\n    // - or as a factory function in case additional statements are present (to support i18n):\n    //   `consts: function() { var i18n_0; if (ngI18nClosureMode) {...} else {...} return [i18n_0]; }`\n    const { constExpressions, prepareStatements } = templateBuilder.getConsts();\n    if (constExpressions.length > 0) {\n        let constsExpr = literalArr(constExpressions);\n        // Prepare statements are present - turn `consts` into a function.\n        if (prepareStatements.length > 0) {\n            constsExpr = fn([], [...prepareStatements, new ReturnStatement(constsExpr)]);\n        }\n        definitionMap.set('consts', constsExpr);\n    }\n    definitionMap.set('template', templateFunctionExpression);\n    // e.g. `directives: [MyDirective]`\n    if (directivesUsed.size) {\n        const directivesList = literalArr(Array.from(directivesUsed));\n        const directivesExpr = compileDeclarationList(directivesList, meta.declarationListEmitMode);\n        definitionMap.set('directives', directivesExpr);\n    }\n    // e.g. `pipes: [MyPipe]`\n    if (pipesUsed.size) {\n        const pipesList = literalArr(Array.from(pipesUsed));\n        const pipesExpr = compileDeclarationList(pipesList, meta.declarationListEmitMode);\n        definitionMap.set('pipes', pipesExpr);\n    }\n    if (meta.encapsulation === null) {\n        meta.encapsulation = ViewEncapsulation.Emulated;\n    }\n    // e.g. `styles: [str1, str2]`\n    if (meta.styles && meta.styles.length) {\n        const styleValues = meta.encapsulation == ViewEncapsulation.Emulated ?\n            compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) :\n            meta.styles;\n        const strings = styleValues.map(str => constantPool.getConstLiteral(literal(str)));\n        definitionMap.set('styles', literalArr(strings));\n    }\n    else if (meta.encapsulation === ViewEncapsulation.Emulated) {\n        // If there is no style, don't generate css selectors on elements\n        meta.encapsulation = ViewEncapsulation.None;\n    }\n    // Only set view encapsulation if it's not the default value\n    if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n        definitionMap.set('encapsulation', literal(meta.encapsulation));\n    }\n    // e.g. `animation: [trigger('123', [])]`\n    if (meta.animations !== null) {\n        definitionMap.set('data', literalMap([{ key: 'animation', value: meta.animations, quoted: false }]));\n    }\n    // Only set the change detection flag if it's defined and it's not the default.\n    if (changeDetection != null && changeDetection !== ChangeDetectionStrategy.Default) {\n        definitionMap.set('changeDetection', literal(changeDetection));\n    }\n    const expression = importExpr(Identifiers$1.defineComponent).callFn([definitionMap.toLiteralMap()], undefined, true);\n    const type = createComponentType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Creates the type specification from the component meta. This type is inserted into .d.ts files\n * to be consumed by upstream compilations.\n */\nfunction createComponentType(meta) {\n    const typeParams = createDirectiveTypeParams(meta);\n    typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));\n    return expressionType(importExpr(Identifiers$1.ComponentDeclaration, typeParams));\n}\n/**\n * Compiles the array literal of declarations into an expression according to the provided emit\n * mode.\n */\nfunction compileDeclarationList(list, mode) {\n    switch (mode) {\n        case 0 /* Direct */:\n            // directives: [MyDir],\n            return list;\n        case 1 /* Closure */:\n            // directives: function () { return [MyDir]; }\n            return fn([], [new ReturnStatement(list)]);\n        case 2 /* ClosureResolved */:\n            // directives: function () { return [MyDir].map(ng.resolveForwardRef); }\n            const resolvedList = list.prop('map').callFn([importExpr(Identifiers$1.resolveForwardRef)]);\n            return fn([], [new ReturnStatement(resolvedList)]);\n    }\n}\nfunction prepareQueryParams(query, constantPool) {\n    const parameters = [getQueryPredicate(query, constantPool), literal(toQueryFlags(query))];\n    if (query.read) {\n        parameters.push(query.read);\n    }\n    return parameters;\n}\n/**\n * Translates query flags into `TQueryFlags` type in packages/core/src/render3/interfaces/query.ts\n * @param query\n */\nfunction toQueryFlags(query) {\n    return (query.descendants ? 1 /* descendants */ : 0 /* none */) |\n        (query.static ? 2 /* isStatic */ : 0 /* none */) |\n        (query.emitDistinctChangesOnly ? 4 /* emitDistinctChangesOnly */ : 0 /* none */);\n}\nfunction convertAttributesToExpressions(attributes) {\n    const values = [];\n    for (let key of Object.getOwnPropertyNames(attributes)) {\n        const value = attributes[key];\n        values.push(literal(key), value);\n    }\n    return values;\n}\n// Define and update any content queries\nfunction createContentQueriesFunction(queries, constantPool, name) {\n    const createStatements = [];\n    const updateStatements = [];\n    const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n    for (const query of queries) {\n        // creation, e.g. r3.contentQuery(dirIndex, somePredicate, true, null);\n        createStatements.push(importExpr(Identifiers$1.contentQuery)\n            .callFn([variable('dirIndex'), ...prepareQueryParams(query, constantPool)])\n            .toStmt());\n        // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));\n        const temporary = tempAllocator();\n        const getQueryList = importExpr(Identifiers$1.loadQuery).callFn([]);\n        const refresh = importExpr(Identifiers$1.queryRefresh).callFn([temporary.set(getQueryList)]);\n        const updateDirective = variable(CONTEXT_NAME)\n            .prop(query.propertyName)\n            .set(query.first ? temporary.prop('first') : temporary);\n        updateStatements.push(refresh.and(updateDirective).toStmt());\n    }\n    const contentQueriesFnName = name ? `${name}_ContentQueries` : null;\n    return fn([\n        new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null),\n        new FnParam('dirIndex', null)\n    ], [\n        renderFlagCheckIfStmt(1 /* Create */, createStatements),\n        renderFlagCheckIfStmt(2 /* Update */, updateStatements)\n    ], INFERRED_TYPE, null, contentQueriesFnName);\n}\nfunction stringAsType(str) {\n    return expressionType(literal(str));\n}\nfunction stringMapAsType(map) {\n    const mapValues = Object.keys(map).map(key => {\n        const value = Array.isArray(map[key]) ? map[key][0] : map[key];\n        return {\n            key,\n            value: literal(value),\n            quoted: true,\n        };\n    });\n    return expressionType(literalMap(mapValues));\n}\nfunction stringArrayAsType(arr) {\n    return arr.length > 0 ? expressionType(literalArr(arr.map(value => literal(value)))) :\n        NONE_TYPE;\n}\nfunction createDirectiveTypeParams(meta) {\n    // On the type side, remove newlines from the selector as it will need to fit into a TypeScript\n    // string literal, which must be on one line.\n    const selectorForType = meta.selector !== null ? meta.selector.replace(/\\n/g, '') : null;\n    return [\n        typeWithParameters(meta.type.type, meta.typeArgumentCount),\n        selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE,\n        meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE,\n        stringMapAsType(meta.inputs),\n        stringMapAsType(meta.outputs),\n        stringArrayAsType(meta.queries.map(q => q.propertyName)),\n    ];\n}\n/**\n * Creates the type specification from the directive meta. This type is inserted into .d.ts files\n * to be consumed by upstream compilations.\n */\nfunction createDirectiveType(meta) {\n    const typeParams = createDirectiveTypeParams(meta);\n    return expressionType(importExpr(Identifiers$1.DirectiveDeclaration, typeParams));\n}\n// Define and update any view queries\nfunction createViewQueriesFunction(viewQueries, constantPool, name) {\n    const createStatements = [];\n    const updateStatements = [];\n    const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n    viewQueries.forEach((query) => {\n        // creation, e.g. r3.viewQuery(somePredicate, true);\n        const queryDefinition = importExpr(Identifiers$1.viewQuery).callFn(prepareQueryParams(query, constantPool));\n        createStatements.push(queryDefinition.toStmt());\n        // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));\n        const temporary = tempAllocator();\n        const getQueryList = importExpr(Identifiers$1.loadQuery).callFn([]);\n        const refresh = importExpr(Identifiers$1.queryRefresh).callFn([temporary.set(getQueryList)]);\n        const updateDirective = variable(CONTEXT_NAME)\n            .prop(query.propertyName)\n            .set(query.first ? temporary.prop('first') : temporary);\n        updateStatements.push(refresh.and(updateDirective).toStmt());\n    });\n    const viewQueryFnName = name ? `${name}_Query` : null;\n    return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [\n        renderFlagCheckIfStmt(1 /* Create */, createStatements),\n        renderFlagCheckIfStmt(2 /* Update */, updateStatements)\n    ], INFERRED_TYPE, null, viewQueryFnName);\n}\n// Return a host binding function or null if one is not necessary.\nfunction createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {\n    const bindingContext = variable(CONTEXT_NAME);\n    const styleBuilder = new StylingBuilder(bindingContext);\n    const { styleAttr, classAttr } = hostBindingsMetadata.specialAttributes;\n    if (styleAttr !== undefined) {\n        styleBuilder.registerStyleAttr(styleAttr);\n    }\n    if (classAttr !== undefined) {\n        styleBuilder.registerClassAttr(classAttr);\n    }\n    const createStatements = [];\n    const updateStatements = [];\n    const hostBindingSourceSpan = typeSourceSpan;\n    // Calculate host event bindings\n    const eventBindings = bindingParser.createDirectiveHostEventAsts(hostBindingsMetadata.listeners, hostBindingSourceSpan);\n    if (eventBindings && eventBindings.length) {\n        const listeners = createHostListeners(eventBindings, name);\n        createStatements.push(...listeners);\n    }\n    // Calculate the host property bindings\n    const bindings = bindingParser.createBoundHostProperties(hostBindingsMetadata.properties, hostBindingSourceSpan);\n    const allOtherBindings = [];\n    // We need to calculate the total amount of binding slots required by\n    // all the instructions together before any value conversions happen.\n    // Value conversions may require additional slots for interpolation and\n    // bindings with pipes. These calculates happen after this block.\n    let totalHostVarsCount = 0;\n    bindings && bindings.forEach((binding) => {\n        const stylingInputWasSet = styleBuilder.registerInputBasedOnName(binding.name, binding.expression, hostBindingSourceSpan);\n        if (stylingInputWasSet) {\n            totalHostVarsCount += MIN_STYLING_BINDING_SLOTS_REQUIRED;\n        }\n        else {\n            allOtherBindings.push(binding);\n            totalHostVarsCount++;\n        }\n    });\n    let valueConverter;\n    const getValueConverter = () => {\n        if (!valueConverter) {\n            const hostVarsCountFn = (numSlots) => {\n                const originalVarsCount = totalHostVarsCount;\n                totalHostVarsCount += numSlots;\n                return originalVarsCount;\n            };\n            valueConverter = new ValueConverter(constantPool, () => error('Unexpected node'), // new nodes are illegal here\n            hostVarsCountFn, () => error('Unexpected pipe')); // pipes are illegal here\n        }\n        return valueConverter;\n    };\n    const propertyBindings = [];\n    const attributeBindings = [];\n    const syntheticHostBindings = [];\n    allOtherBindings.forEach((binding) => {\n        // resolve literal arrays and literal objects\n        const value = binding.expression.visit(getValueConverter());\n        const bindingExpr = bindingFn(bindingContext, value);\n        const { bindingName, instruction, isAttribute } = getBindingNameAndInstruction(binding);\n        const securityContexts = bindingParser.calcPossibleSecurityContexts(selector, bindingName, isAttribute)\n            .filter(context => context !== SecurityContext.NONE);\n        let sanitizerFn = null;\n        if (securityContexts.length) {\n            if (securityContexts.length === 2 &&\n                securityContexts.indexOf(SecurityContext.URL) > -1 &&\n                securityContexts.indexOf(SecurityContext.RESOURCE_URL) > -1) {\n                // Special case for some URL attributes (such as \"src\" and \"href\") that may be a part\n                // of different security contexts. In this case we use special sanitization function and\n                // select the actual sanitizer at runtime based on a tag name that is provided while\n                // invoking sanitization function.\n                sanitizerFn = importExpr(Identifiers$1.sanitizeUrlOrResourceUrl);\n            }\n            else {\n                sanitizerFn = resolveSanitizationFn(securityContexts[0], isAttribute);\n            }\n        }\n        const instructionParams = [literal(bindingName), bindingExpr.currValExpr];\n        if (sanitizerFn) {\n            instructionParams.push(sanitizerFn);\n        }\n        updateStatements.push(...bindingExpr.stmts);\n        if (instruction === Identifiers$1.hostProperty) {\n            propertyBindings.push(instructionParams);\n        }\n        else if (instruction === Identifiers$1.attribute) {\n            attributeBindings.push(instructionParams);\n        }\n        else if (instruction === Identifiers$1.syntheticHostProperty) {\n            syntheticHostBindings.push(instructionParams);\n        }\n        else {\n            updateStatements.push(importExpr(instruction).callFn(instructionParams).toStmt());\n        }\n    });\n    if (propertyBindings.length > 0) {\n        updateStatements.push(chainedInstruction(Identifiers$1.hostProperty, propertyBindings).toStmt());\n    }\n    if (attributeBindings.length > 0) {\n        updateStatements.push(chainedInstruction(Identifiers$1.attribute, attributeBindings).toStmt());\n    }\n    if (syntheticHostBindings.length > 0) {\n        updateStatements.push(chainedInstruction(Identifiers$1.syntheticHostProperty, syntheticHostBindings).toStmt());\n    }\n    // since we're dealing with directives/components and both have hostBinding\n    // functions, we need to generate a special hostAttrs instruction that deals\n    // with both the assignment of styling as well as static attributes to the host\n    // element. The instruction below will instruct all initial styling (styling\n    // that is inside of a host binding within a directive/component) to be attached\n    // to the host element alongside any of the provided host attributes that were\n    // collected earlier.\n    const hostAttrs = convertAttributesToExpressions(hostBindingsMetadata.attributes);\n    styleBuilder.assignHostAttrs(hostAttrs, definitionMap);\n    if (styleBuilder.hasBindings) {\n        // finally each binding that was registered in the statement above will need to be added to\n        // the update block of a component/directive templateFn/hostBindingsFn so that the bindings\n        // are evaluated and updated for the element.\n        styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach(instruction => {\n            if (instruction.calls.length > 0) {\n                const calls = [];\n                instruction.calls.forEach(call => {\n                    // we subtract a value of `1` here because the binding slot was already allocated\n                    // at the top of this method when all the input bindings were counted.\n                    totalHostVarsCount +=\n                        Math.max(call.allocateBindingSlots - MIN_STYLING_BINDING_SLOTS_REQUIRED, 0);\n                    calls.push(convertStylingCall(call, bindingContext, bindingFn));\n                });\n                updateStatements.push(chainedInstruction(instruction.reference, calls).toStmt());\n            }\n        });\n    }\n    if (totalHostVarsCount) {\n        definitionMap.set('hostVars', literal(totalHostVarsCount));\n    }\n    if (createStatements.length > 0 || updateStatements.length > 0) {\n        const hostBindingsFnName = name ? `${name}_HostBindings` : null;\n        const statements = [];\n        if (createStatements.length > 0) {\n            statements.push(renderFlagCheckIfStmt(1 /* Create */, createStatements));\n        }\n        if (updateStatements.length > 0) {\n            statements.push(renderFlagCheckIfStmt(2 /* Update */, updateStatements));\n        }\n        return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], statements, INFERRED_TYPE, null, hostBindingsFnName);\n    }\n    return null;\n}\nfunction bindingFn(implicit, value) {\n    return convertPropertyBinding(null, implicit, value, 'b', BindingForm.Expression, () => error('Unexpected interpolation'));\n}\nfunction convertStylingCall(call, bindingContext, bindingFn) {\n    return call.params(value => bindingFn(bindingContext, value).currValExpr);\n}\nfunction getBindingNameAndInstruction(binding) {\n    let bindingName = binding.name;\n    let instruction;\n    // Check to see if this is an attr binding or a property binding\n    const attrMatches = bindingName.match(ATTR_REGEX);\n    if (attrMatches) {\n        bindingName = attrMatches[1];\n        instruction = Identifiers$1.attribute;\n    }\n    else {\n        if (binding.isAnimation) {\n            bindingName = prepareSyntheticPropertyName(bindingName);\n            // host bindings that have a synthetic property (e.g. @foo) should always be rendered\n            // in the context of the component and not the parent. Therefore there is a special\n            // compatibility instruction available for this purpose.\n            instruction = Identifiers$1.syntheticHostProperty;\n        }\n        else {\n            instruction = Identifiers$1.hostProperty;\n        }\n    }\n    return { bindingName, instruction, isAttribute: !!attrMatches };\n}\nfunction createHostListeners(eventBindings, name) {\n    const listeners = [];\n    const syntheticListeners = [];\n    const instructions = [];\n    eventBindings.forEach(binding => {\n        let bindingName = binding.name && sanitizeIdentifier(binding.name);\n        const bindingFnName = binding.type === 1 /* Animation */ ?\n            prepareSyntheticListenerFunctionName(bindingName, binding.targetOrPhase) :\n            bindingName;\n        const handlerName = name && bindingName ? `${name}_${bindingFnName}_HostBindingHandler` : null;\n        const params = prepareEventListenerParameters(BoundEvent.fromParsedEvent(binding), handlerName);\n        if (binding.type == 1 /* Animation */) {\n            syntheticListeners.push(params);\n        }\n        else {\n            listeners.push(params);\n        }\n    });\n    if (syntheticListeners.length > 0) {\n        instructions.push(chainedInstruction(Identifiers$1.syntheticHostListener, syntheticListeners).toStmt());\n    }\n    if (listeners.length > 0) {\n        instructions.push(chainedInstruction(Identifiers$1.listener, listeners).toStmt());\n    }\n    return instructions;\n}\nconst HOST_REG_EXP = /^(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\))$/;\nfunction parseHostBindings(host) {\n    const attributes = {};\n    const listeners = {};\n    const properties = {};\n    const specialAttributes = {};\n    for (const key of Object.keys(host)) {\n        const value = host[key];\n        const matches = key.match(HOST_REG_EXP);\n        if (matches === null) {\n            switch (key) {\n                case 'class':\n                    if (typeof value !== 'string') {\n                        // TODO(alxhub): make this a diagnostic.\n                        throw new Error(`Class binding must be string`);\n                    }\n                    specialAttributes.classAttr = value;\n                    break;\n                case 'style':\n                    if (typeof value !== 'string') {\n                        // TODO(alxhub): make this a diagnostic.\n                        throw new Error(`Style binding must be string`);\n                    }\n                    specialAttributes.styleAttr = value;\n                    break;\n                default:\n                    if (typeof value === 'string') {\n                        attributes[key] = literal(value);\n                    }\n                    else {\n                        attributes[key] = value;\n                    }\n            }\n        }\n        else if (matches[1 /* Binding */] != null) {\n            if (typeof value !== 'string') {\n                // TODO(alxhub): make this a diagnostic.\n                throw new Error(`Property binding must be string`);\n            }\n            // synthetic properties (the ones that have a `@` as a prefix)\n            // are still treated the same as regular properties. Therefore\n            // there is no point in storing them in a separate map.\n            properties[matches[1 /* Binding */]] = value;\n        }\n        else if (matches[2 /* Event */] != null) {\n            if (typeof value !== 'string') {\n                // TODO(alxhub): make this a diagnostic.\n                throw new Error(`Event binding must be string`);\n            }\n            listeners[matches[2 /* Event */]] = value;\n        }\n    }\n    return { attributes, listeners, properties, specialAttributes };\n}\n/**\n * Verifies host bindings and returns the list of errors (if any). Empty array indicates that a\n * given set of host bindings has no errors.\n *\n * @param bindings set of host bindings to verify.\n * @param sourceSpan source span where host bindings were defined.\n * @returns array of errors associated with a given set of host bindings.\n */\nfunction verifyHostBindings(bindings, sourceSpan) {\n    // TODO: abstract out host bindings verification logic and use it instead of\n    // creating events and properties ASTs to detect errors (FW-996)\n    const bindingParser = makeBindingParser();\n    bindingParser.createDirectiveHostEventAsts(bindings.listeners, sourceSpan);\n    bindingParser.createBoundHostProperties(bindings.properties, sourceSpan);\n    return bindingParser.errors;\n}\nfunction compileStyles(styles, selector, hostSelector) {\n    const shadowCss = new ShadowCss();\n    return styles.map(style => {\n        return shadowCss.shimCssText(style, selector, hostSelector);\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface for retrieving documents by URL that the compiler uses to\n * load templates.\n *\n * This is an abstract class, rather than an interface, so that it can be used\n * as injection token.\n */\nclass ResourceLoader {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CompilerFacadeImpl {\n    constructor(jitEvaluator = new JitEvaluator()) {\n        this.jitEvaluator = jitEvaluator;\n        this.FactoryTarget = FactoryTarget$1;\n        this.ResourceLoader = ResourceLoader;\n        this.elementSchemaRegistry = new DomElementSchemaRegistry();\n    }\n    compilePipe(angularCoreEnv, sourceMapUrl, facade) {\n        const metadata = {\n            name: facade.name,\n            type: wrapReference(facade.type),\n            internalType: new WrappedNodeExpr(facade.type),\n            typeArgumentCount: 0,\n            deps: null,\n            pipeName: facade.pipeName,\n            pure: facade.pure,\n        };\n        const res = compilePipeFromMetadata(metadata);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compilePipeDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n        const meta = convertDeclarePipeFacadeToMetadata(declaration);\n        const res = compilePipeFromMetadata(meta);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileInjectable(angularCoreEnv, sourceMapUrl, facade) {\n        var _a;\n        const { expression, statements } = compileInjectable({\n            name: facade.name,\n            type: wrapReference(facade.type),\n            internalType: new WrappedNodeExpr(facade.type),\n            typeArgumentCount: facade.typeArgumentCount,\n            providedIn: computeProvidedIn(facade.providedIn),\n            useClass: convertToProviderExpression(facade, USE_CLASS),\n            useFactory: wrapExpression(facade, USE_FACTORY),\n            useValue: convertToProviderExpression(facade, USE_VALUE),\n            useExisting: convertToProviderExpression(facade, USE_EXISTING),\n            deps: (_a = facade.deps) === null || _a === void 0 ? void 0 : _a.map(convertR3DependencyMetadata),\n        }, \n        /* resolveForwardRefs */ true);\n        return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n    }\n    compileInjectableDeclaration(angularCoreEnv, sourceMapUrl, facade) {\n        var _a;\n        const { expression, statements } = compileInjectable({\n            name: facade.type.name,\n            type: wrapReference(facade.type),\n            internalType: new WrappedNodeExpr(facade.type),\n            typeArgumentCount: 0,\n            providedIn: computeProvidedIn(facade.providedIn),\n            useClass: convertToProviderExpression(facade, USE_CLASS),\n            useFactory: wrapExpression(facade, USE_FACTORY),\n            useValue: convertToProviderExpression(facade, USE_VALUE),\n            useExisting: convertToProviderExpression(facade, USE_EXISTING),\n            deps: (_a = facade.deps) === null || _a === void 0 ? void 0 : _a.map(convertR3DeclareDependencyMetadata),\n        }, \n        /* resolveForwardRefs */ true);\n        return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n    }\n    compileInjector(angularCoreEnv, sourceMapUrl, facade) {\n        const meta = {\n            name: facade.name,\n            type: wrapReference(facade.type),\n            internalType: new WrappedNodeExpr(facade.type),\n            providers: new WrappedNodeExpr(facade.providers),\n            imports: facade.imports.map(i => new WrappedNodeExpr(i)),\n        };\n        const res = compileInjector(meta);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileInjectorDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n        const meta = convertDeclareInjectorFacadeToMetadata(declaration);\n        const res = compileInjector(meta);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileNgModule(angularCoreEnv, sourceMapUrl, facade) {\n        const meta = {\n            type: wrapReference(facade.type),\n            internalType: new WrappedNodeExpr(facade.type),\n            adjacentType: new WrappedNodeExpr(facade.type),\n            bootstrap: facade.bootstrap.map(wrapReference),\n            declarations: facade.declarations.map(wrapReference),\n            imports: facade.imports.map(wrapReference),\n            exports: facade.exports.map(wrapReference),\n            emitInline: true,\n            containsForwardDecls: false,\n            schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,\n            id: facade.id ? new WrappedNodeExpr(facade.id) : null,\n        };\n        const res = compileNgModule(meta);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileNgModuleDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n        const expression = compileNgModuleDeclarationExpression(declaration);\n        return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileDirective(angularCoreEnv, sourceMapUrl, facade) {\n        const meta = convertDirectiveFacadeToMetadata(facade);\n        return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n    }\n    compileDirectiveDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n        const typeSourceSpan = this.createParseSourceSpan('Directive', declaration.type.name, sourceMapUrl);\n        const meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);\n        return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n    }\n    compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta) {\n        const constantPool = new ConstantPool();\n        const bindingParser = makeBindingParser();\n        const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n    }\n    compileComponent(angularCoreEnv, sourceMapUrl, facade) {\n        // Parse the template and check for errors.\n        const { template, interpolation } = parseJitTemplate(facade.template, facade.name, sourceMapUrl, facade.preserveWhitespaces, facade.interpolation);\n        // Compile the component metadata, including template, into an expression.\n        const meta = Object.assign(Object.assign(Object.assign({}, facade), convertDirectiveFacadeToMetadata(facade)), { selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(), template, declarationListEmitMode: 0 /* Direct */, styles: [...facade.styles, ...template.styles], encapsulation: facade.encapsulation, interpolation, changeDetection: facade.changeDetection, animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null, viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) :\n                null, relativeContextFilePath: '', i18nUseExternalIds: true });\n        const jitExpressionSourceMap = `ng:///${facade.name}.js`;\n        return this.compileComponentFromMeta(angularCoreEnv, jitExpressionSourceMap, meta);\n    }\n    compileComponentDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n        const typeSourceSpan = this.createParseSourceSpan('Component', declaration.type.name, sourceMapUrl);\n        const meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);\n        return this.compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta);\n    }\n    compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta) {\n        const constantPool = new ConstantPool();\n        const bindingParser = makeBindingParser(meta.interpolation);\n        const res = compileComponentFromMetadata(meta, constantPool, bindingParser);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n    }\n    compileFactory(angularCoreEnv, sourceMapUrl, meta) {\n        const factoryRes = compileFactoryFunction({\n            name: meta.name,\n            type: wrapReference(meta.type),\n            internalType: new WrappedNodeExpr(meta.type),\n            typeArgumentCount: meta.typeArgumentCount,\n            deps: convertR3DependencyMetadataArray(meta.deps),\n            target: meta.target,\n        });\n        return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);\n    }\n    compileFactoryDeclaration(angularCoreEnv, sourceMapUrl, meta) {\n        const factoryRes = compileFactoryFunction({\n            name: meta.type.name,\n            type: wrapReference(meta.type),\n            internalType: new WrappedNodeExpr(meta.type),\n            typeArgumentCount: 0,\n            deps: Array.isArray(meta.deps) ? meta.deps.map(convertR3DeclareDependencyMetadata) :\n                meta.deps,\n            target: meta.target,\n        });\n        return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);\n    }\n    createParseSourceSpan(kind, typeName, sourceUrl) {\n        return r3JitTypeSourceSpan(kind, typeName, sourceUrl);\n    }\n    /**\n     * JIT compiles an expression and returns the result of executing that expression.\n     *\n     * @param def the definition which will be compiled and executed to get the value to patch\n     * @param context an object map of @angular/core symbol names to symbols which will be available\n     * in the context of the compiled expression\n     * @param sourceUrl a URL to use for the source map of the compiled expression\n     * @param preStatements a collection of statements that should be evaluated before the expression.\n     */\n    jitExpression(def, context, sourceUrl, preStatements) {\n        // The ConstantPool may contain Statements which declare variables used in the final expression.\n        // Therefore, its statements need to precede the actual JIT operation. The final statement is a\n        // declaration of $def which is set to the expression being compiled.\n        const statements = [\n            ...preStatements,\n            new DeclareVarStmt('$def', def, undefined, [StmtModifier.Exported]),\n        ];\n        const res = this.jitEvaluator.evaluateStatements(sourceUrl, statements, new R3JitReflector(context), /* enableSourceMaps */ true);\n        return res['$def'];\n    }\n}\nconst USE_CLASS = Object.keys({ useClass: null })[0];\nconst USE_FACTORY = Object.keys({ useFactory: null })[0];\nconst USE_VALUE = Object.keys({ useValue: null })[0];\nconst USE_EXISTING = Object.keys({ useExisting: null })[0];\nfunction convertToR3QueryMetadata(facade) {\n    return Object.assign(Object.assign({}, facade), { predicate: convertQueryPredicate(facade.predicate), read: facade.read ? new WrappedNodeExpr(facade.read) : null, static: facade.static, emitDistinctChangesOnly: facade.emitDistinctChangesOnly });\n}\nfunction convertQueryDeclarationToMetadata(declaration) {\n    var _a, _b, _c, _d;\n    return {\n        propertyName: declaration.propertyName,\n        first: (_a = declaration.first) !== null && _a !== void 0 ? _a : false,\n        predicate: convertQueryPredicate(declaration.predicate),\n        descendants: (_b = declaration.descendants) !== null && _b !== void 0 ? _b : false,\n        read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,\n        static: (_c = declaration.static) !== null && _c !== void 0 ? _c : false,\n        emitDistinctChangesOnly: (_d = declaration.emitDistinctChangesOnly) !== null && _d !== void 0 ? _d : true,\n    };\n}\nfunction convertQueryPredicate(predicate) {\n    return Array.isArray(predicate) ?\n        // The predicate is an array of strings so pass it through.\n        predicate :\n        // The predicate is a type - assume that we will need to unwrap any `forwardRef()` calls.\n        createMayBeForwardRefExpression(new WrappedNodeExpr(predicate), 1 /* Wrapped */);\n}\nfunction convertDirectiveFacadeToMetadata(facade) {\n    const inputsFromMetadata = parseInputOutputs(facade.inputs || []);\n    const outputsFromMetadata = parseInputOutputs(facade.outputs || []);\n    const propMetadata = facade.propMetadata;\n    const inputsFromType = {};\n    const outputsFromType = {};\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(ann => {\n                if (isInput(ann)) {\n                    inputsFromType[field] =\n                        ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;\n                }\n                else if (isOutput(ann)) {\n                    outputsFromType[field] = ann.bindingPropertyName || field;\n                }\n            });\n        }\n    }\n    return Object.assign(Object.assign({}, facade), { typeArgumentCount: 0, typeSourceSpan: facade.typeSourceSpan, type: wrapReference(facade.type), internalType: new WrappedNodeExpr(facade.type), deps: null, host: extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host), inputs: Object.assign(Object.assign({}, inputsFromMetadata), inputsFromType), outputs: Object.assign(Object.assign({}, outputsFromMetadata), outputsFromType), queries: facade.queries.map(convertToR3QueryMetadata), providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null, viewQueries: facade.viewQueries.map(convertToR3QueryMetadata), fullInheritance: false });\n}\nfunction convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    return {\n        name: declaration.type.name,\n        type: wrapReference(declaration.type),\n        typeSourceSpan,\n        internalType: new WrappedNodeExpr(declaration.type),\n        selector: (_a = declaration.selector) !== null && _a !== void 0 ? _a : null,\n        inputs: (_b = declaration.inputs) !== null && _b !== void 0 ? _b : {},\n        outputs: (_c = declaration.outputs) !== null && _c !== void 0 ? _c : {},\n        host: convertHostDeclarationToMetadata(declaration.host),\n        queries: ((_d = declaration.queries) !== null && _d !== void 0 ? _d : []).map(convertQueryDeclarationToMetadata),\n        viewQueries: ((_e = declaration.viewQueries) !== null && _e !== void 0 ? _e : []).map(convertQueryDeclarationToMetadata),\n        providers: declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) :\n            null,\n        exportAs: (_f = declaration.exportAs) !== null && _f !== void 0 ? _f : null,\n        usesInheritance: (_g = declaration.usesInheritance) !== null && _g !== void 0 ? _g : false,\n        lifecycle: { usesOnChanges: (_h = declaration.usesOnChanges) !== null && _h !== void 0 ? _h : false },\n        deps: null,\n        typeArgumentCount: 0,\n        fullInheritance: false,\n    };\n}\nfunction convertHostDeclarationToMetadata(host = {}) {\n    var _a, _b, _c;\n    return {\n        attributes: convertOpaqueValuesToExpressions((_a = host.attributes) !== null && _a !== void 0 ? _a : {}),\n        listeners: (_b = host.listeners) !== null && _b !== void 0 ? _b : {},\n        properties: (_c = host.properties) !== null && _c !== void 0 ? _c : {},\n        specialAttributes: {\n            classAttr: host.classAttribute,\n            styleAttr: host.styleAttribute,\n        },\n    };\n}\nfunction convertOpaqueValuesToExpressions(obj) {\n    const result = {};\n    for (const key of Object.keys(obj)) {\n        result[key] = new WrappedNodeExpr(obj[key]);\n    }\n    return result;\n}\nfunction convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl) {\n    var _a, _b, _c, _d, _e, _f;\n    const { template, interpolation } = parseJitTemplate(declaration.template, declaration.type.name, sourceMapUrl, (_a = declaration.preserveWhitespaces) !== null && _a !== void 0 ? _a : false, declaration.interpolation);\n    return Object.assign(Object.assign({}, convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan)), { template, styles: (_b = declaration.styles) !== null && _b !== void 0 ? _b : [], directives: ((_c = declaration.components) !== null && _c !== void 0 ? _c : [])\n            .concat((_d = declaration.directives) !== null && _d !== void 0 ? _d : [])\n            .map(convertUsedDirectiveDeclarationToMetadata), pipes: convertUsedPipesToMetadata(declaration.pipes), viewProviders: declaration.viewProviders !== undefined ?\n            new WrappedNodeExpr(declaration.viewProviders) :\n            null, animations: declaration.animations !== undefined ? new WrappedNodeExpr(declaration.animations) :\n            null, changeDetection: (_e = declaration.changeDetection) !== null && _e !== void 0 ? _e : ChangeDetectionStrategy.Default, encapsulation: (_f = declaration.encapsulation) !== null && _f !== void 0 ? _f : ViewEncapsulation.Emulated, interpolation, declarationListEmitMode: 2 /* ClosureResolved */, relativeContextFilePath: '', i18nUseExternalIds: true });\n}\nfunction convertUsedDirectiveDeclarationToMetadata(declaration) {\n    var _a, _b, _c;\n    return {\n        selector: declaration.selector,\n        type: new WrappedNodeExpr(declaration.type),\n        inputs: (_a = declaration.inputs) !== null && _a !== void 0 ? _a : [],\n        outputs: (_b = declaration.outputs) !== null && _b !== void 0 ? _b : [],\n        exportAs: (_c = declaration.exportAs) !== null && _c !== void 0 ? _c : null,\n    };\n}\nfunction convertUsedPipesToMetadata(declaredPipes) {\n    const pipes = new Map();\n    if (declaredPipes === undefined) {\n        return pipes;\n    }\n    for (const pipeName of Object.keys(declaredPipes)) {\n        const pipeType = declaredPipes[pipeName];\n        pipes.set(pipeName, new WrappedNodeExpr(pipeType));\n    }\n    return pipes;\n}\nfunction parseJitTemplate(template, typeName, sourceMapUrl, preserveWhitespaces, interpolation) {\n    const interpolationConfig = interpolation ? InterpolationConfig.fromArray(interpolation) : DEFAULT_INTERPOLATION_CONFIG;\n    // Parse the template and check for errors.\n    const parsed = parseTemplate(template, sourceMapUrl, { preserveWhitespaces, interpolationConfig });\n    if (parsed.errors !== null) {\n        const errors = parsed.errors.map(err => err.toString()).join(', ');\n        throw new Error(`Errors during JIT compilation of template for ${typeName}: ${errors}`);\n    }\n    return { template: parsed, interpolation: interpolationConfig };\n}\n/**\n * Convert the expression, if present to an `R3ProviderExpression`.\n *\n * In JIT mode we do not want the compiler to wrap the expression in a `forwardRef()` call because,\n * if it is referencing a type that has not yet been defined, it will have already been wrapped in\n * a `forwardRef()` - either by the application developer or during partial-compilation. Thus we can\n * use `ForwardRefHandling.None`.\n */\nfunction convertToProviderExpression(obj, property) {\n    if (obj.hasOwnProperty(property)) {\n        return createMayBeForwardRefExpression(new WrappedNodeExpr(obj[property]), 0 /* None */);\n    }\n    else {\n        return undefined;\n    }\n}\nfunction wrapExpression(obj, property) {\n    if (obj.hasOwnProperty(property)) {\n        return new WrappedNodeExpr(obj[property]);\n    }\n    else {\n        return undefined;\n    }\n}\nfunction computeProvidedIn(providedIn) {\n    const expression = typeof providedIn === 'function' ? new WrappedNodeExpr(providedIn) :\n        new LiteralExpr(providedIn !== null && providedIn !== void 0 ? providedIn : null);\n    // See `convertToProviderExpression()` for why this uses `ForwardRefHandling.None`.\n    return createMayBeForwardRefExpression(expression, 0 /* None */);\n}\nfunction convertR3DependencyMetadataArray(facades) {\n    return facades == null ? null : facades.map(convertR3DependencyMetadata);\n}\nfunction convertR3DependencyMetadata(facade) {\n    const isAttributeDep = facade.attribute != null; // both `null` and `undefined`\n    const rawToken = facade.token === null ? null : new WrappedNodeExpr(facade.token);\n    // In JIT mode, if the dep is an `@Attribute()` then we use the attribute name given in\n    // `attribute` rather than the `token`.\n    const token = isAttributeDep ? new WrappedNodeExpr(facade.attribute) : rawToken;\n    return createR3DependencyMetadata(token, isAttributeDep, facade.host, facade.optional, facade.self, facade.skipSelf);\n}\nfunction convertR3DeclareDependencyMetadata(facade) {\n    var _a, _b, _c, _d, _e;\n    const isAttributeDep = (_a = facade.attribute) !== null && _a !== void 0 ? _a : false;\n    const token = facade.token === null ? null : new WrappedNodeExpr(facade.token);\n    return createR3DependencyMetadata(token, isAttributeDep, (_b = facade.host) !== null && _b !== void 0 ? _b : false, (_c = facade.optional) !== null && _c !== void 0 ? _c : false, (_d = facade.self) !== null && _d !== void 0 ? _d : false, (_e = facade.skipSelf) !== null && _e !== void 0 ? _e : false);\n}\nfunction createR3DependencyMetadata(token, isAttributeDep, host, optional, self, skipSelf) {\n    // If the dep is an `@Attribute()` the `attributeNameType` ought to be the `unknown` type.\n    // But types are not available at runtime so we just use a literal `\"<unknown>\"` string as a dummy\n    // marker.\n    const attributeNameType = isAttributeDep ? literal('unknown') : null;\n    return { token, attributeNameType, host, optional, self, skipSelf };\n}\nfunction extractHostBindings(propMetadata, sourceSpan, host) {\n    // First parse the declarations from the metadata.\n    const bindings = parseHostBindings(host || {});\n    // After that check host bindings for errors\n    const errors = verifyHostBindings(bindings, sourceSpan);\n    if (errors.length) {\n        throw new Error(errors.map((error) => error.msg).join('\\n'));\n    }\n    // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(ann => {\n                if (isHostBinding(ann)) {\n                    // Since this is a decorator, we know that the value is a class member. Always access it\n                    // through `this` so that further down the line it can't be confused for a literal value\n                    // (e.g. if there's a property called `true`).\n                    bindings.properties[ann.hostPropertyName || field] =\n                        getSafePropertyAccessString('this', field);\n                }\n                else if (isHostListener(ann)) {\n                    bindings.listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(',')})`;\n                }\n            });\n        }\n    }\n    return bindings;\n}\nfunction isHostBinding(value) {\n    return value.ngMetadataName === 'HostBinding';\n}\nfunction isHostListener(value) {\n    return value.ngMetadataName === 'HostListener';\n}\nfunction isInput(value) {\n    return value.ngMetadataName === 'Input';\n}\nfunction isOutput(value) {\n    return value.ngMetadataName === 'Output';\n}\nfunction parseInputOutputs(values) {\n    return values.reduce((map, value) => {\n        const [field, property] = value.split(',').map(piece => piece.trim());\n        map[field] = property || field;\n        return map;\n    }, {});\n}\nfunction convertDeclarePipeFacadeToMetadata(declaration) {\n    var _a;\n    return {\n        name: declaration.type.name,\n        type: wrapReference(declaration.type),\n        internalType: new WrappedNodeExpr(declaration.type),\n        typeArgumentCount: 0,\n        pipeName: declaration.name,\n        deps: null,\n        pure: (_a = declaration.pure) !== null && _a !== void 0 ? _a : true,\n    };\n}\nfunction convertDeclareInjectorFacadeToMetadata(declaration) {\n    return {\n        name: declaration.type.name,\n        type: wrapReference(declaration.type),\n        internalType: new WrappedNodeExpr(declaration.type),\n        providers: declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) :\n            null,\n        imports: declaration.imports !== undefined ?\n            declaration.imports.map(i => new WrappedNodeExpr(i)) :\n            [],\n    };\n}\nfunction publishFacade(global) {\n    const ng = global.ng || (global.ng = {});\n    ng.ɵcompilerFacade = new CompilerFacadeImpl();\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst VERSION = new Version('13.1.0');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CompilerConfig {\n    constructor({ defaultEncapsulation = ViewEncapsulation.Emulated, useJit = true, jitDevMode = false, missingTranslation = null, preserveWhitespaces, strictInjectionParameters } = {}) {\n        this.defaultEncapsulation = defaultEncapsulation;\n        this.useJit = !!useJit;\n        this.jitDevMode = !!jitDevMode;\n        this.missingTranslation = missingTranslation;\n        this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));\n        this.strictInjectionParameters = strictInjectionParameters === true;\n    }\n}\nfunction preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting = false) {\n    return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _I18N_ATTR = 'i18n';\nconst _I18N_ATTR_PREFIX = 'i18n-';\nconst _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nconst MEANING_SEPARATOR = '|';\nconst ID_SEPARATOR = '@@';\nlet i18nCommentsWarned = false;\n/**\n * Extract translatable messages from an html AST\n */\nfunction extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\n    const visitor = new _Visitor(implicitTags, implicitAttrs);\n    return visitor.extract(nodes, interpolationConfig);\n}\nfunction mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\n    const visitor = new _Visitor(implicitTags, implicitAttrs);\n    return visitor.merge(nodes, translations, interpolationConfig);\n}\nclass ExtractionResult {\n    constructor(messages, errors) {\n        this.messages = messages;\n        this.errors = errors;\n    }\n}\nvar _VisitorMode;\n(function (_VisitorMode) {\n    _VisitorMode[_VisitorMode[\"Extract\"] = 0] = \"Extract\";\n    _VisitorMode[_VisitorMode[\"Merge\"] = 1] = \"Merge\";\n})(_VisitorMode || (_VisitorMode = {}));\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * @internal\n */\nclass _Visitor {\n    constructor(_implicitTags, _implicitAttrs) {\n        this._implicitTags = _implicitTags;\n        this._implicitAttrs = _implicitAttrs;\n    }\n    /**\n     * Extracts the messages from the tree\n     */\n    extract(nodes, interpolationConfig) {\n        this._init(_VisitorMode.Extract, interpolationConfig);\n        nodes.forEach(node => node.visit(this, null));\n        if (this._inI18nBlock) {\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n        }\n        return new ExtractionResult(this._messages, this._errors);\n    }\n    /**\n     * Returns a tree where all translatable nodes are translated\n     */\n    merge(nodes, translations, interpolationConfig) {\n        this._init(_VisitorMode.Merge, interpolationConfig);\n        this._translations = translations;\n        // Construct a single fake root element\n        const wrapper = new Element('wrapper', [], nodes, undefined, undefined, undefined);\n        const translatedNode = wrapper.visit(this, null);\n        if (this._inI18nBlock) {\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n        }\n        return new ParseTreeResult(translatedNode.children, this._errors);\n    }\n    visitExpansionCase(icuCase, context) {\n        // Parse cases for translatable html attributes\n        const expression = visitAll(this, icuCase.expression, context);\n        if (this._mode === _VisitorMode.Merge) {\n            return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n        }\n    }\n    visitExpansion(icu, context) {\n        this._mayBeAddBlockChildren(icu);\n        const wasInIcu = this._inIcu;\n        if (!this._inIcu) {\n            // nested ICU messages should not be extracted but top-level translated as a whole\n            if (this._isInTranslatableSection) {\n                this._addMessage([icu]);\n            }\n            this._inIcu = true;\n        }\n        const cases = visitAll(this, icu.cases, context);\n        if (this._mode === _VisitorMode.Merge) {\n            icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n        }\n        this._inIcu = wasInIcu;\n        return icu;\n    }\n    visitComment(comment, context) {\n        const isOpening = _isOpeningComment(comment);\n        if (isOpening && this._isInTranslatableSection) {\n            this._reportError(comment, 'Could not start a block inside a translatable section');\n            return;\n        }\n        const isClosing = _isClosingComment(comment);\n        if (isClosing && !this._inI18nBlock) {\n            this._reportError(comment, 'Trying to close an unopened block');\n            return;\n        }\n        if (!this._inI18nNode && !this._inIcu) {\n            if (!this._inI18nBlock) {\n                if (isOpening) {\n                    // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\n                    if (!i18nCommentsWarned && console && console.warn) {\n                        i18nCommentsWarned = true;\n                        const details = comment.sourceSpan.details ? `, ${comment.sourceSpan.details}` : '';\n                        // TODO(ocombe): use a log service once there is a public one available\n                        console.warn(`I18n comments are deprecated, use an <ng-container> element instead (${comment.sourceSpan.start}${details})`);\n                    }\n                    this._inI18nBlock = true;\n                    this._blockStartDepth = this._depth;\n                    this._blockChildren = [];\n                    this._blockMeaningAndDesc =\n                        comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n                    this._openTranslatableSection(comment);\n                }\n            }\n            else {\n                if (isClosing) {\n                    if (this._depth == this._blockStartDepth) {\n                        this._closeTranslatableSection(comment, this._blockChildren);\n                        this._inI18nBlock = false;\n                        const message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);\n                        // merge attributes in sections\n                        const nodes = this._translateMessage(comment, message);\n                        return visitAll(this, nodes);\n                    }\n                    else {\n                        this._reportError(comment, 'I18N blocks should not cross element boundaries');\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    visitText(text, context) {\n        if (this._isInTranslatableSection) {\n            this._mayBeAddBlockChildren(text);\n        }\n        return text;\n    }\n    visitElement(el, context) {\n        this._mayBeAddBlockChildren(el);\n        this._depth++;\n        const wasInI18nNode = this._inI18nNode;\n        const wasInImplicitNode = this._inImplicitNode;\n        let childNodes = [];\n        let translatedChildNodes = undefined;\n        // Extract:\n        // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n        // - ICU messages\n        const i18nAttr = _getI18nAttr(el);\n        const i18nMeta = i18nAttr ? i18nAttr.value : '';\n        const isImplicit = this._implicitTags.some(tag => el.name === tag) && !this._inIcu &&\n            !this._isInTranslatableSection;\n        const isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n        this._inImplicitNode = wasInImplicitNode || isImplicit;\n        if (!this._isInTranslatableSection && !this._inIcu) {\n            if (i18nAttr || isTopLevelImplicit) {\n                this._inI18nNode = true;\n                const message = this._addMessage(el.children, i18nMeta);\n                translatedChildNodes = this._translateMessage(el, message);\n            }\n            if (this._mode == _VisitorMode.Extract) {\n                const isTranslatable = i18nAttr || isTopLevelImplicit;\n                if (isTranslatable)\n                    this._openTranslatableSection(el);\n                visitAll(this, el.children);\n                if (isTranslatable)\n                    this._closeTranslatableSection(el, el.children);\n            }\n        }\n        else {\n            if (i18nAttr || isTopLevelImplicit) {\n                this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\n            }\n            if (this._mode == _VisitorMode.Extract) {\n                // Descend into child nodes for extraction\n                visitAll(this, el.children);\n            }\n        }\n        if (this._mode === _VisitorMode.Merge) {\n            const visitNodes = translatedChildNodes || el.children;\n            visitNodes.forEach(child => {\n                const visited = child.visit(this, context);\n                if (visited && !this._isInTranslatableSection) {\n                    // Do not add the children from translatable sections (= i18n blocks here)\n                    // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n                    childNodes = childNodes.concat(visited);\n                }\n            });\n        }\n        this._visitAttributesOf(el);\n        this._depth--;\n        this._inI18nNode = wasInI18nNode;\n        this._inImplicitNode = wasInImplicitNode;\n        if (this._mode === _VisitorMode.Merge) {\n            const translatedAttrs = this._translateAttributes(el);\n            return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n        }\n        return null;\n    }\n    visitAttribute(attribute, context) {\n        throw new Error('unreachable code');\n    }\n    _init(mode, interpolationConfig) {\n        this._mode = mode;\n        this._inI18nBlock = false;\n        this._inI18nNode = false;\n        this._depth = 0;\n        this._inIcu = false;\n        this._msgCountAtSectionStart = undefined;\n        this._errors = [];\n        this._messages = [];\n        this._inImplicitNode = false;\n        this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n    }\n    // looks for translatable attributes\n    _visitAttributesOf(el) {\n        const explicitAttrNameToValue = {};\n        const implicitAttrNames = this._implicitAttrs[el.name] || [];\n        el.attrs.filter(attr => attr.name.startsWith(_I18N_ATTR_PREFIX))\n            .forEach(attr => explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n            attr.value);\n        el.attrs.forEach(attr => {\n            if (attr.name in explicitAttrNameToValue) {\n                this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n            }\n            else if (implicitAttrNames.some(name => attr.name === name)) {\n                this._addMessage([attr]);\n            }\n        });\n    }\n    // add a translatable message\n    _addMessage(ast, msgMeta) {\n        if (ast.length == 0 ||\n            ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {\n            // Do not create empty messages\n            return null;\n        }\n        const { meaning, description, id } = _parseMessageMeta(msgMeta);\n        const message = this._createI18nMessage(ast, meaning, description, id);\n        this._messages.push(message);\n        return message;\n    }\n    // Translates the given message given the `TranslationBundle`\n    // This is used for translating elements / blocks - see `_translateAttributes` for attributes\n    // no-op when called in extraction mode (returns [])\n    _translateMessage(el, message) {\n        if (message && this._mode === _VisitorMode.Merge) {\n            const nodes = this._translations.get(message);\n            if (nodes) {\n                return nodes;\n            }\n            this._reportError(el, `Translation unavailable for message id=\"${this._translations.digest(message)}\"`);\n        }\n        return [];\n    }\n    // translate the attributes of an element and remove i18n specific attributes\n    _translateAttributes(el) {\n        const attributes = el.attrs;\n        const i18nParsedMessageMeta = {};\n        attributes.forEach(attr => {\n            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                    _parseMessageMeta(attr.value);\n            }\n        });\n        const translatedAttributes = [];\n        attributes.forEach((attr) => {\n            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                // strip i18n specific attributes\n                return;\n            }\n            if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\n                const { meaning, description, id } = i18nParsedMessageMeta[attr.name];\n                const message = this._createI18nMessage([attr], meaning, description, id);\n                const nodes = this._translations.get(message);\n                if (nodes) {\n                    if (nodes.length == 0) {\n                        translatedAttributes.push(new Attribute(attr.name, '', attr.sourceSpan, undefined /* keySpan */, undefined /* valueSpan */, undefined /* valueTokens */, undefined /* i18n */));\n                    }\n                    else if (nodes[0] instanceof Text) {\n                        const value = nodes[0].value;\n                        translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan, undefined /* keySpan */, undefined /* valueSpan */, undefined /* valueTokens */, undefined /* i18n */));\n                    }\n                    else {\n                        this._reportError(el, `Unexpected translation for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n                    }\n                }\n                else {\n                    this._reportError(el, `Translation unavailable for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n                }\n            }\n            else {\n                translatedAttributes.push(attr);\n            }\n        });\n        return translatedAttributes;\n    }\n    /**\n     * Add the node as a child of the block when:\n     * - we are in a block,\n     * - we are not inside a ICU message (those are handled separately),\n     * - the node is a \"direct child\" of the block\n     */\n    _mayBeAddBlockChildren(node) {\n        if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n            this._blockChildren.push(node);\n        }\n    }\n    /**\n     * Marks the start of a section, see `_closeTranslatableSection`\n     */\n    _openTranslatableSection(node) {\n        if (this._isInTranslatableSection) {\n            this._reportError(node, 'Unexpected section start');\n        }\n        else {\n            this._msgCountAtSectionStart = this._messages.length;\n        }\n    }\n    /**\n     * A translatable section could be:\n     * - the content of translatable element,\n     * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n     */\n    get _isInTranslatableSection() {\n        return this._msgCountAtSectionStart !== void 0;\n    }\n    /**\n     * Terminates a section.\n     *\n     * If a section has only one significant children (comments not significant) then we should not\n     * keep the message from this children:\n     *\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n     * - one for the <p> content with meaning and description,\n     * - another one for the ICU message.\n     *\n     * In this case the last message is discarded as it contains less information (the AST is\n     * otherwise identical).\n     *\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\n     * ICU message here)\n     */\n    _closeTranslatableSection(node, directChildren) {\n        if (!this._isInTranslatableSection) {\n            this._reportError(node, 'Unexpected section end');\n            return;\n        }\n        const startIndex = this._msgCountAtSectionStart;\n        const significantChildren = directChildren.reduce((count, node) => count + (node instanceof Comment ? 0 : 1), 0);\n        if (significantChildren == 1) {\n            for (let i = this._messages.length - 1; i >= startIndex; i--) {\n                const ast = this._messages[i].nodes;\n                if (!(ast.length == 1 && ast[0] instanceof Text$2)) {\n                    this._messages.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        this._msgCountAtSectionStart = undefined;\n    }\n    _reportError(node, msg) {\n        this._errors.push(new I18nError(node.sourceSpan, msg));\n    }\n}\nfunction _isOpeningComment(n) {\n    return !!(n instanceof Comment && n.value && n.value.startsWith('i18n'));\n}\nfunction _isClosingComment(n) {\n    return !!(n instanceof Comment && n.value && n.value === '/i18n');\n}\nfunction _getI18nAttr(p) {\n    return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;\n}\nfunction _parseMessageMeta(i18n) {\n    if (!i18n)\n        return { meaning: '', description: '', id: '' };\n    const idIndex = i18n.indexOf(ID_SEPARATOR);\n    const descIndex = i18n.indexOf(MEANING_SEPARATOR);\n    const [meaningAndDesc, id] = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];\n    const [meaning, description] = (descIndex > -1) ?\n        [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n        ['', meaningAndDesc];\n    return { meaning, description, id: id.trim() };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass XmlTagDefinition {\n    constructor() {\n        this.closedByParent = false;\n        this.isVoid = false;\n        this.ignoreFirstLf = false;\n        this.canSelfClose = true;\n        this.preventNamespaceInheritance = false;\n    }\n    requireExtraParent(currentParent) {\n        return false;\n    }\n    isClosedByChild(name) {\n        return false;\n    }\n    getContentType() {\n        return TagContentType.PARSABLE_DATA;\n    }\n}\nconst _TAG_DEFINITION = new XmlTagDefinition();\nfunction getXmlTagDefinition(tagName) {\n    return _TAG_DEFINITION;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass XmlParser extends Parser {\n    constructor() {\n        super(getXmlTagDefinition);\n    }\n    parse(source, url, options) {\n        return super.parse(source, url, options);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _VERSION$1 = '1.2';\nconst _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:1.2';\n// TODO(vicb): make this a param (s/_/-/)\nconst _DEFAULT_SOURCE_LANG$1 = 'en';\nconst _PLACEHOLDER_TAG$2 = 'x';\nconst _MARKER_TAG$1 = 'mrk';\nconst _FILE_TAG = 'file';\nconst _SOURCE_TAG$1 = 'source';\nconst _SEGMENT_SOURCE_TAG = 'seg-source';\nconst _ALT_TRANS_TAG = 'alt-trans';\nconst _TARGET_TAG$1 = 'target';\nconst _UNIT_TAG$1 = 'trans-unit';\nconst _CONTEXT_GROUP_TAG = 'context-group';\nconst _CONTEXT_TAG = 'context';\n// https://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html\n// https://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html\nclass Xliff extends Serializer {\n    write(messages, locale) {\n        const visitor = new _WriteVisitor$1();\n        const transUnits = [];\n        messages.forEach(message => {\n            let contextTags = [];\n            message.sources.forEach((source) => {\n                let contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, { purpose: 'location' });\n                contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'sourcefile' }, [new Text$1(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'linenumber' }, [new Text$1(`${source.startLine}`)]), new CR(8));\n                contextTags.push(new CR(8), contextGroupTag);\n            });\n            const transUnit = new Tag(_UNIT_TAG$1, { id: message.id, datatype: 'html' });\n            transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes)), ...contextTags);\n            if (message.description) {\n                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$1(message.description)]));\n            }\n            if (message.meaning) {\n                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$1(message.meaning)]));\n            }\n            transUnit.children.push(new CR(6));\n            transUnits.push(new CR(6), transUnit);\n        });\n        const body = new Tag('body', {}, [...transUnits, new CR(4)]);\n        const file = new Tag('file', {\n            'source-language': locale || _DEFAULT_SOURCE_LANG$1,\n            datatype: 'plaintext',\n            original: 'ng2.template',\n        }, [new CR(4), body, new CR(2)]);\n        const xliff = new Tag('xliff', { version: _VERSION$1, xmlns: _XMLNS$1 }, [new CR(2), file, new CR()]);\n        return serialize([\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()\n        ]);\n    }\n    load(content, url) {\n        // xliff to xml nodes\n        const xliffParser = new XliffParser();\n        const { locale, msgIdToHtml, errors } = xliffParser.parse(content, url);\n        // xml nodes to i18n nodes\n        const i18nNodesByMsgId = {};\n        const converter = new XmlToI18n$2();\n        Object.keys(msgIdToHtml).forEach(msgId => {\n            const { i18nNodes, errors: e } = converter.convert(msgIdToHtml[msgId], url);\n            errors.push(...e);\n            i18nNodesByMsgId[msgId] = i18nNodes;\n        });\n        if (errors.length) {\n            throw new Error(`xliff parse errors:\\n${errors.join('\\n')}`);\n        }\n        return { locale: locale, i18nNodesByMsgId };\n    }\n    digest(message) {\n        return digest$1(message);\n    }\n}\nclass _WriteVisitor$1 {\n    visitText(text, context) {\n        return [new Text$1(text.value)];\n    }\n    visitContainer(container, context) {\n        const nodes = [];\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\n        return nodes;\n    }\n    visitIcu(icu, context) {\n        const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n        Object.keys(icu.cases).forEach((c) => {\n            nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));\n        });\n        nodes.push(new Text$1(`}`));\n        return nodes;\n    }\n    visitTagPlaceholder(ph, context) {\n        const ctype = getCtypeForTag(ph.tag);\n        if (ph.isVoid) {\n            // void tags have no children nor closing tags\n            return [new Tag(_PLACEHOLDER_TAG$2, { id: ph.startName, ctype, 'equiv-text': `<${ph.tag}/>` })];\n        }\n        const startTagPh = new Tag(_PLACEHOLDER_TAG$2, { id: ph.startName, ctype, 'equiv-text': `<${ph.tag}>` });\n        const closeTagPh = new Tag(_PLACEHOLDER_TAG$2, { id: ph.closeName, ctype, 'equiv-text': `</${ph.tag}>` });\n        return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n    }\n    visitPlaceholder(ph, context) {\n        return [new Tag(_PLACEHOLDER_TAG$2, { id: ph.name, 'equiv-text': `{{${ph.value}}}` })];\n    }\n    visitIcuPlaceholder(ph, context) {\n        const equivText = `{${ph.value.expression}, ${ph.value.type}, ${Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ')}}`;\n        return [new Tag(_PLACEHOLDER_TAG$2, { id: ph.name, 'equiv-text': equivText })];\n    }\n    serialize(nodes) {\n        return [].concat(...nodes.map(node => node.visit(this)));\n    }\n}\n// TODO(vicb): add error management (structure)\n// Extract messages as xml nodes from the xliff file\nclass XliffParser {\n    constructor() {\n        this._locale = null;\n    }\n    parse(xliff, url) {\n        this._unitMlString = null;\n        this._msgIdToHtml = {};\n        const xml = new XmlParser().parse(xliff, url);\n        this._errors = xml.errors;\n        visitAll(this, xml.rootNodes, null);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    }\n    visitElement(element, context) {\n        switch (element.name) {\n            case _UNIT_TAG$1:\n                this._unitMlString = null;\n                const idAttr = element.attrs.find((attr) => attr.name === 'id');\n                if (!idAttr) {\n                    this._addError(element, `<${_UNIT_TAG$1}> misses the \"id\" attribute`);\n                }\n                else {\n                    const id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, `Duplicated translations for msg ${id}`);\n                    }\n                    else {\n                        visitAll(this, element.children, null);\n                        if (typeof this._unitMlString === 'string') {\n                            this._msgIdToHtml[id] = this._unitMlString;\n                        }\n                        else {\n                            this._addError(element, `Message ${id} misses a translation`);\n                        }\n                    }\n                }\n                break;\n            // ignore those tags\n            case _SOURCE_TAG$1:\n            case _SEGMENT_SOURCE_TAG:\n            case _ALT_TRANS_TAG:\n                break;\n            case _TARGET_TAG$1:\n                const innerTextStart = element.startSourceSpan.end.offset;\n                const innerTextEnd = element.endSourceSpan.start.offset;\n                const content = element.startSourceSpan.start.file.content;\n                const innerText = content.slice(innerTextStart, innerTextEnd);\n                this._unitMlString = innerText;\n                break;\n            case _FILE_TAG:\n                const localeAttr = element.attrs.find((attr) => attr.name === 'target-language');\n                if (localeAttr) {\n                    this._locale = localeAttr.value;\n                }\n                visitAll(this, element.children, null);\n                break;\n            default:\n                // TODO(vicb): assert file structure, xliff version\n                // For now only recurse on unhandled nodes\n                visitAll(this, element.children, null);\n        }\n    }\n    visitAttribute(attribute, context) { }\n    visitText(text, context) { }\n    visitComment(comment, context) { }\n    visitExpansion(expansion, context) { }\n    visitExpansionCase(expansionCase, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n// Convert ml nodes (xliff syntax) to i18n nodes\nclass XmlToI18n$2 {\n    convert(message, url) {\n        const xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });\n        this._errors = xmlIcu.errors;\n        const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            [].concat(...visitAll(this, xmlIcu.rootNodes));\n        return {\n            i18nNodes: i18nNodes,\n            errors: this._errors,\n        };\n    }\n    visitText(text, context) {\n        return new Text$2(text.value, text.sourceSpan);\n    }\n    visitElement(el, context) {\n        if (el.name === _PLACEHOLDER_TAG$2) {\n            const nameAttr = el.attrs.find((attr) => attr.name === 'id');\n            if (nameAttr) {\n                return new Placeholder('', nameAttr.value, el.sourceSpan);\n            }\n            this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the \"id\" attribute`);\n            return null;\n        }\n        if (el.name === _MARKER_TAG$1) {\n            return [].concat(...visitAll(this, el.children));\n        }\n        this._addError(el, `Unexpected tag`);\n        return null;\n    }\n    visitExpansion(icu, context) {\n        const caseMap = {};\n        visitAll(this, icu.cases).forEach((c) => {\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n        });\n        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n    visitExpansionCase(icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: visitAll(this, icuCase.expression),\n        };\n    }\n    visitComment(comment, context) { }\n    visitAttribute(attribute, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\nfunction getCtypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n        case 'br':\n            return 'lb';\n        case 'img':\n            return 'image';\n        default:\n            return `x-${tag}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _VERSION = '2.0';\nconst _XMLNS = 'urn:oasis:names:tc:xliff:document:2.0';\n// TODO(vicb): make this a param (s/_/-/)\nconst _DEFAULT_SOURCE_LANG = 'en';\nconst _PLACEHOLDER_TAG$1 = 'ph';\nconst _PLACEHOLDER_SPANNING_TAG = 'pc';\nconst _MARKER_TAG = 'mrk';\nconst _XLIFF_TAG = 'xliff';\nconst _SOURCE_TAG = 'source';\nconst _TARGET_TAG = 'target';\nconst _UNIT_TAG = 'unit';\n// https://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html\nclass Xliff2 extends Serializer {\n    write(messages, locale) {\n        const visitor = new _WriteVisitor();\n        const units = [];\n        messages.forEach(message => {\n            const unit = new Tag(_UNIT_TAG, { id: message.id });\n            const notes = new Tag('notes');\n            if (message.description || message.meaning) {\n                if (message.description) {\n                    notes.children.push(new CR(8), new Tag('note', { category: 'description' }, [new Text$1(message.description)]));\n                }\n                if (message.meaning) {\n                    notes.children.push(new CR(8), new Tag('note', { category: 'meaning' }, [new Text$1(message.meaning)]));\n                }\n            }\n            message.sources.forEach((source) => {\n                notes.children.push(new CR(8), new Tag('note', { category: 'location' }, [\n                    new Text$1(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)\n                ]));\n            });\n            notes.children.push(new CR(6));\n            unit.children.push(new CR(6), notes);\n            const segment = new Tag('segment');\n            segment.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(6));\n            unit.children.push(new CR(6), segment, new CR(4));\n            units.push(new CR(4), unit);\n        });\n        const file = new Tag('file', { 'original': 'ng.template', id: 'ngi18n' }, [...units, new CR(2)]);\n        const xliff = new Tag(_XLIFF_TAG, { version: _VERSION, xmlns: _XMLNS, srcLang: locale || _DEFAULT_SOURCE_LANG }, [new CR(2), file, new CR()]);\n        return serialize([\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()\n        ]);\n    }\n    load(content, url) {\n        // xliff to xml nodes\n        const xliff2Parser = new Xliff2Parser();\n        const { locale, msgIdToHtml, errors } = xliff2Parser.parse(content, url);\n        // xml nodes to i18n nodes\n        const i18nNodesByMsgId = {};\n        const converter = new XmlToI18n$1();\n        Object.keys(msgIdToHtml).forEach(msgId => {\n            const { i18nNodes, errors: e } = converter.convert(msgIdToHtml[msgId], url);\n            errors.push(...e);\n            i18nNodesByMsgId[msgId] = i18nNodes;\n        });\n        if (errors.length) {\n            throw new Error(`xliff2 parse errors:\\n${errors.join('\\n')}`);\n        }\n        return { locale: locale, i18nNodesByMsgId };\n    }\n    digest(message) {\n        return decimalDigest(message);\n    }\n}\nclass _WriteVisitor {\n    visitText(text, context) {\n        return [new Text$1(text.value)];\n    }\n    visitContainer(container, context) {\n        const nodes = [];\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\n        return nodes;\n    }\n    visitIcu(icu, context) {\n        const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n        Object.keys(icu.cases).forEach((c) => {\n            nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));\n        });\n        nodes.push(new Text$1(`}`));\n        return nodes;\n    }\n    visitTagPlaceholder(ph, context) {\n        const type = getTypeForTag(ph.tag);\n        if (ph.isVoid) {\n            const tagPh = new Tag(_PLACEHOLDER_TAG$1, {\n                id: (this._nextPlaceholderId++).toString(),\n                equiv: ph.startName,\n                type: type,\n                disp: `<${ph.tag}/>`,\n            });\n            return [tagPh];\n        }\n        const tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {\n            id: (this._nextPlaceholderId++).toString(),\n            equivStart: ph.startName,\n            equivEnd: ph.closeName,\n            type: type,\n            dispStart: `<${ph.tag}>`,\n            dispEnd: `</${ph.tag}>`,\n        });\n        const nodes = [].concat(...ph.children.map(node => node.visit(this)));\n        if (nodes.length) {\n            nodes.forEach((node) => tagPc.children.push(node));\n        }\n        else {\n            tagPc.children.push(new Text$1(''));\n        }\n        return [tagPc];\n    }\n    visitPlaceholder(ph, context) {\n        const idStr = (this._nextPlaceholderId++).toString();\n        return [new Tag(_PLACEHOLDER_TAG$1, {\n                id: idStr,\n                equiv: ph.name,\n                disp: `{{${ph.value}}}`,\n            })];\n    }\n    visitIcuPlaceholder(ph, context) {\n        const cases = Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ');\n        const idStr = (this._nextPlaceholderId++).toString();\n        return [new Tag(_PLACEHOLDER_TAG$1, { id: idStr, equiv: ph.name, disp: `{${ph.value.expression}, ${ph.value.type}, ${cases}}` })];\n    }\n    serialize(nodes) {\n        this._nextPlaceholderId = 0;\n        return [].concat(...nodes.map(node => node.visit(this)));\n    }\n}\n// Extract messages as xml nodes from the xliff file\nclass Xliff2Parser {\n    constructor() {\n        this._locale = null;\n    }\n    parse(xliff, url) {\n        this._unitMlString = null;\n        this._msgIdToHtml = {};\n        const xml = new XmlParser().parse(xliff, url);\n        this._errors = xml.errors;\n        visitAll(this, xml.rootNodes, null);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    }\n    visitElement(element, context) {\n        switch (element.name) {\n            case _UNIT_TAG:\n                this._unitMlString = null;\n                const idAttr = element.attrs.find((attr) => attr.name === 'id');\n                if (!idAttr) {\n                    this._addError(element, `<${_UNIT_TAG}> misses the \"id\" attribute`);\n                }\n                else {\n                    const id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, `Duplicated translations for msg ${id}`);\n                    }\n                    else {\n                        visitAll(this, element.children, null);\n                        if (typeof this._unitMlString === 'string') {\n                            this._msgIdToHtml[id] = this._unitMlString;\n                        }\n                        else {\n                            this._addError(element, `Message ${id} misses a translation`);\n                        }\n                    }\n                }\n                break;\n            case _SOURCE_TAG:\n                // ignore source message\n                break;\n            case _TARGET_TAG:\n                const innerTextStart = element.startSourceSpan.end.offset;\n                const innerTextEnd = element.endSourceSpan.start.offset;\n                const content = element.startSourceSpan.start.file.content;\n                const innerText = content.slice(innerTextStart, innerTextEnd);\n                this._unitMlString = innerText;\n                break;\n            case _XLIFF_TAG:\n                const localeAttr = element.attrs.find((attr) => attr.name === 'trgLang');\n                if (localeAttr) {\n                    this._locale = localeAttr.value;\n                }\n                const versionAttr = element.attrs.find((attr) => attr.name === 'version');\n                if (versionAttr) {\n                    const version = versionAttr.value;\n                    if (version !== '2.0') {\n                        this._addError(element, `The XLIFF file version ${version} is not compatible with XLIFF 2.0 serializer`);\n                    }\n                    else {\n                        visitAll(this, element.children, null);\n                    }\n                }\n                break;\n            default:\n                visitAll(this, element.children, null);\n        }\n    }\n    visitAttribute(attribute, context) { }\n    visitText(text, context) { }\n    visitComment(comment, context) { }\n    visitExpansion(expansion, context) { }\n    visitExpansionCase(expansionCase, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n// Convert ml nodes (xliff syntax) to i18n nodes\nclass XmlToI18n$1 {\n    convert(message, url) {\n        const xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });\n        this._errors = xmlIcu.errors;\n        const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            [].concat(...visitAll(this, xmlIcu.rootNodes));\n        return {\n            i18nNodes,\n            errors: this._errors,\n        };\n    }\n    visitText(text, context) {\n        return new Text$2(text.value, text.sourceSpan);\n    }\n    visitElement(el, context) {\n        switch (el.name) {\n            case _PLACEHOLDER_TAG$1:\n                const nameAttr = el.attrs.find((attr) => attr.name === 'equiv');\n                if (nameAttr) {\n                    return [new Placeholder('', nameAttr.value, el.sourceSpan)];\n                }\n                this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equiv\" attribute`);\n                break;\n            case _PLACEHOLDER_SPANNING_TAG:\n                const startAttr = el.attrs.find((attr) => attr.name === 'equivStart');\n                const endAttr = el.attrs.find((attr) => attr.name === 'equivEnd');\n                if (!startAttr) {\n                    this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equivStart\" attribute`);\n                }\n                else if (!endAttr) {\n                    this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equivEnd\" attribute`);\n                }\n                else {\n                    const startId = startAttr.value;\n                    const endId = endAttr.value;\n                    const nodes = [];\n                    return nodes.concat(new Placeholder('', startId, el.sourceSpan), ...el.children.map(node => node.visit(this, null)), new Placeholder('', endId, el.sourceSpan));\n                }\n                break;\n            case _MARKER_TAG:\n                return [].concat(...visitAll(this, el.children));\n            default:\n                this._addError(el, `Unexpected tag`);\n        }\n        return null;\n    }\n    visitExpansion(icu, context) {\n        const caseMap = {};\n        visitAll(this, icu.cases).forEach((c) => {\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n        });\n        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n    visitExpansionCase(icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: [].concat(...visitAll(this, icuCase.expression)),\n        };\n    }\n    visitComment(comment, context) { }\n    visitAttribute(attribute, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\nfunction getTypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n        case 'br':\n        case 'b':\n        case 'i':\n        case 'u':\n            return 'fmt';\n        case 'img':\n            return 'image';\n        case 'a':\n            return 'link';\n        default:\n            return 'other';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _TRANSLATIONS_TAG = 'translationbundle';\nconst _TRANSLATION_TAG = 'translation';\nconst _PLACEHOLDER_TAG = 'ph';\nclass Xtb extends Serializer {\n    write(messages, locale) {\n        throw new Error('Unsupported');\n    }\n    load(content, url) {\n        // xtb to xml nodes\n        const xtbParser = new XtbParser();\n        const { locale, msgIdToHtml, errors } = xtbParser.parse(content, url);\n        // xml nodes to i18n nodes\n        const i18nNodesByMsgId = {};\n        const converter = new XmlToI18n();\n        // Because we should be able to load xtb files that rely on features not supported by angular,\n        // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n        // converted\n        Object.keys(msgIdToHtml).forEach(msgId => {\n            const valueFn = function () {\n                const { i18nNodes, errors } = converter.convert(msgIdToHtml[msgId], url);\n                if (errors.length) {\n                    throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n                }\n                return i18nNodes;\n            };\n            createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n        });\n        if (errors.length) {\n            throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n        }\n        return { locale: locale, i18nNodesByMsgId };\n    }\n    digest(message) {\n        return digest(message);\n    }\n    createNameMapper(message) {\n        return new SimplePlaceholderMapper(message, toPublicName);\n    }\n}\nfunction createLazyProperty(messages, id, valueFn) {\n    Object.defineProperty(messages, id, {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            const value = valueFn();\n            Object.defineProperty(messages, id, { enumerable: true, value });\n            return value;\n        },\n        set: _ => {\n            throw new Error('Could not overwrite an XTB translation');\n        },\n    });\n}\n// Extract messages as xml nodes from the xtb file\nclass XtbParser {\n    constructor() {\n        this._locale = null;\n    }\n    parse(xtb, url) {\n        this._bundleDepth = 0;\n        this._msgIdToHtml = {};\n        // We can not parse the ICU messages at this point as some messages might not originate\n        // from Angular that could not be lex'd.\n        const xml = new XmlParser().parse(xtb, url);\n        this._errors = xml.errors;\n        visitAll(this, xml.rootNodes);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    }\n    visitElement(element, context) {\n        switch (element.name) {\n            case _TRANSLATIONS_TAG:\n                this._bundleDepth++;\n                if (this._bundleDepth > 1) {\n                    this._addError(element, `<${_TRANSLATIONS_TAG}> elements can not be nested`);\n                }\n                const langAttr = element.attrs.find((attr) => attr.name === 'lang');\n                if (langAttr) {\n                    this._locale = langAttr.value;\n                }\n                visitAll(this, element.children, null);\n                this._bundleDepth--;\n                break;\n            case _TRANSLATION_TAG:\n                const idAttr = element.attrs.find((attr) => attr.name === 'id');\n                if (!idAttr) {\n                    this._addError(element, `<${_TRANSLATION_TAG}> misses the \"id\" attribute`);\n                }\n                else {\n                    const id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, `Duplicated translations for msg ${id}`);\n                    }\n                    else {\n                        const innerTextStart = element.startSourceSpan.end.offset;\n                        const innerTextEnd = element.endSourceSpan.start.offset;\n                        const content = element.startSourceSpan.start.file.content;\n                        const innerText = content.slice(innerTextStart, innerTextEnd);\n                        this._msgIdToHtml[id] = innerText;\n                    }\n                }\n                break;\n            default:\n                this._addError(element, 'Unexpected tag');\n        }\n    }\n    visitAttribute(attribute, context) { }\n    visitText(text, context) { }\n    visitComment(comment, context) { }\n    visitExpansion(expansion, context) { }\n    visitExpansionCase(expansionCase, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n// Convert ml nodes (xtb syntax) to i18n nodes\nclass XmlToI18n {\n    convert(message, url) {\n        const xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });\n        this._errors = xmlIcu.errors;\n        const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            visitAll(this, xmlIcu.rootNodes);\n        return {\n            i18nNodes,\n            errors: this._errors,\n        };\n    }\n    visitText(text, context) {\n        return new Text$2(text.value, text.sourceSpan);\n    }\n    visitExpansion(icu, context) {\n        const caseMap = {};\n        visitAll(this, icu.cases).forEach(c => {\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n        });\n        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n    visitExpansionCase(icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: visitAll(this, icuCase.expression),\n        };\n    }\n    visitElement(el, context) {\n        if (el.name === _PLACEHOLDER_TAG) {\n            const nameAttr = el.attrs.find((attr) => attr.name === 'name');\n            if (nameAttr) {\n                return new Placeholder('', nameAttr.value, el.sourceSpan);\n            }\n            this._addError(el, `<${_PLACEHOLDER_TAG}> misses the \"name\" attribute`);\n        }\n        else {\n            this._addError(el, `Unexpected tag`);\n        }\n        return null;\n    }\n    visitComment(comment, context) { }\n    visitAttribute(attribute, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A container for translated messages\n */\nclass TranslationBundle {\n    constructor(_i18nNodesByMsgId = {}, locale, digest, mapperFactory, missingTranslationStrategy = MissingTranslationStrategy.Warning, console) {\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this.digest = digest;\n        this.mapperFactory = mapperFactory;\n        this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);\n    }\n    // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n    static load(content, url, serializer, missingTranslationStrategy, console) {\n        const { locale, i18nNodesByMsgId } = serializer.load(content, url);\n        const digestFn = (m) => serializer.digest(m);\n        const mapperFactory = (m) => serializer.createNameMapper(m);\n        return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n    }\n    // Returns the translation as HTML nodes from the given source message.\n    get(srcMsg) {\n        const html = this._i18nToHtml.convert(srcMsg);\n        if (html.errors.length) {\n            throw new Error(html.errors.join('\\n'));\n        }\n        return html.nodes;\n    }\n    has(srcMsg) {\n        return this.digest(srcMsg) in this._i18nNodesByMsgId;\n    }\n}\nclass I18nToHtmlVisitor {\n    constructor(_i18nNodesByMsgId = {}, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this._locale = _locale;\n        this._digest = _digest;\n        this._mapperFactory = _mapperFactory;\n        this._missingTranslationStrategy = _missingTranslationStrategy;\n        this._console = _console;\n        this._contextStack = [];\n        this._errors = [];\n    }\n    convert(srcMsg) {\n        this._contextStack.length = 0;\n        this._errors.length = 0;\n        // i18n to text\n        const text = this._convertToText(srcMsg);\n        // text to html\n        const url = srcMsg.nodes[0].sourceSpan.start.file.url;\n        const html = new HtmlParser().parse(text, url, { tokenizeExpansionForms: true });\n        return {\n            nodes: html.rootNodes,\n            errors: [...this._errors, ...html.errors],\n        };\n    }\n    visitText(text, context) {\n        // `convert()` uses an `HtmlParser` to return `html.Node`s\n        // we should then make sure that any special characters are escaped\n        return escapeXml(text.value);\n    }\n    visitContainer(container, context) {\n        return container.children.map(n => n.visit(this)).join('');\n    }\n    visitIcu(icu, context) {\n        const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n        // TODO(vicb): Once all format switch to using expression placeholders\n        // we should throw when the placeholder is not in the source message\n        const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\n            this._srcMsg.placeholders[icu.expression].text :\n            icu.expression;\n        return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;\n    }\n    visitPlaceholder(ph, context) {\n        const phName = this._mapper(ph.name);\n        if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n            return this._srcMsg.placeholders[phName].text;\n        }\n        if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n            return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n        }\n        this._addError(ph, `Unknown placeholder \"${ph.name}\"`);\n        return '';\n    }\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    visitTagPlaceholder(ph, context) {\n        const tag = `${ph.tag}`;\n        const attrs = Object.keys(ph.attrs).map(name => `${name}=\"${ph.attrs[name]}\"`).join(' ');\n        if (ph.isVoid) {\n            return `<${tag} ${attrs}/>`;\n        }\n        const children = ph.children.map((c) => c.visit(this)).join('');\n        return `<${tag} ${attrs}>${children}</${tag}>`;\n    }\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    visitIcuPlaceholder(ph, context) {\n        // An ICU placeholder references the source message to be serialized\n        return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n    }\n    /**\n     * Convert a source message to a translated text string:\n     * - text nodes are replaced with their translation,\n     * - placeholders are replaced with their content,\n     * - ICU nodes are converted to ICU expressions.\n     */\n    _convertToText(srcMsg) {\n        const id = this._digest(srcMsg);\n        const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n        let nodes;\n        this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });\n        this._srcMsg = srcMsg;\n        if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n            // When there is a translation use its nodes as the source\n            // And create a mapper to convert serialized placeholder names to internal names\n            nodes = this._i18nNodesByMsgId[id];\n            this._mapper = (name) => mapper ? mapper.toInternalName(name) : name;\n        }\n        else {\n            // When no translation has been found\n            // - report an error / a warning / nothing,\n            // - use the nodes from the original message\n            // - placeholders are already internal and need no mapper\n            if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n                const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n                this._addError(srcMsg.nodes[0], `Missing translation for message \"${id}\"${ctx}`);\n            }\n            else if (this._console &&\n                this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n                const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n                this._console.warn(`Missing translation for message \"${id}\"${ctx}`);\n            }\n            nodes = srcMsg.nodes;\n            this._mapper = (name) => name;\n        }\n        const text = nodes.map(node => node.visit(this)).join('');\n        const context = this._contextStack.pop();\n        this._srcMsg = context.msg;\n        this._mapper = context.mapper;\n        return text;\n    }\n    _addError(el, msg) {\n        this._errors.push(new I18nError(el.sourceSpan, msg));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass I18NHtmlParser {\n    constructor(_htmlParser, translations, translationsFormat, missingTranslation = MissingTranslationStrategy.Warning, console) {\n        this._htmlParser = _htmlParser;\n        if (translations) {\n            const serializer = createSerializer(translationsFormat);\n            this._translationBundle =\n                TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n        }\n        else {\n            this._translationBundle =\n                new TranslationBundle({}, null, digest$1, undefined, missingTranslation, console);\n        }\n    }\n    parse(source, url, options = {}) {\n        const interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n        const parseResult = this._htmlParser.parse(source, url, Object.assign({ interpolationConfig }, options));\n        if (parseResult.errors.length) {\n            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n        }\n        return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n    }\n}\nfunction createSerializer(format) {\n    format = (format || 'xlf').toLowerCase();\n    switch (format) {\n        case 'xmb':\n            return new Xmb();\n        case 'xtb':\n            return new Xtb();\n        case 'xliff2':\n        case 'xlf2':\n            return new Xliff2();\n        case 'xliff':\n        case 'xlf':\n        default:\n            return new Xliff();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A container for message extracted from the templates.\n */\nclass MessageBundle {\n    constructor(_htmlParser, _implicitTags, _implicitAttrs, _locale = null) {\n        this._htmlParser = _htmlParser;\n        this._implicitTags = _implicitTags;\n        this._implicitAttrs = _implicitAttrs;\n        this._locale = _locale;\n        this._messages = [];\n    }\n    updateFromTemplate(html, url, interpolationConfig) {\n        const htmlParserResult = this._htmlParser.parse(html, url, { tokenizeExpansionForms: true, interpolationConfig });\n        if (htmlParserResult.errors.length) {\n            return htmlParserResult.errors;\n        }\n        const i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n        if (i18nParserResult.errors.length) {\n            return i18nParserResult.errors;\n        }\n        this._messages.push(...i18nParserResult.messages);\n        return [];\n    }\n    // Return the message in the internal format\n    // The public (serialized) format might be different, see the `write` method.\n    getMessages() {\n        return this._messages;\n    }\n    write(serializer, filterSources) {\n        const messages = {};\n        const mapperVisitor = new MapPlaceholderNames();\n        // Deduplicate messages based on their ID\n        this._messages.forEach(message => {\n            const id = serializer.digest(message);\n            if (!messages.hasOwnProperty(id)) {\n                messages[id] = message;\n            }\n            else {\n                messages[id].sources.push(...message.sources);\n            }\n        });\n        // Transform placeholder names using the serializer mapping\n        const msgList = Object.keys(messages).map(id => {\n            const mapper = serializer.createNameMapper(messages[id]);\n            const src = messages[id];\n            const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n            let transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);\n            transformedMessage.sources = src.sources;\n            if (filterSources) {\n                transformedMessage.sources.forEach((source) => source.filePath = filterSources(source.filePath));\n            }\n            return transformedMessage;\n        });\n        return serializer.write(msgList, this._locale);\n    }\n}\n// Transform an i18n AST by renaming the placeholder nodes with the given mapper\nclass MapPlaceholderNames extends CloneVisitor {\n    convert(nodes, mapper) {\n        return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;\n    }\n    visitTagPlaceholder(ph, mapper) {\n        const startName = mapper.toPublicName(ph.startName);\n        const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;\n        const children = ph.children.map(n => n.visit(this, mapper));\n        return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n    }\n    visitPlaceholder(ph, mapper) {\n        return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n    }\n    visitIcuPlaceholder(ph, mapper) {\n        return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar FactoryTarget;\n(function (FactoryTarget) {\n    FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n    FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n    FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n    FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n    FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Processes `Target`s with a given set of directives and performs a binding operation, which\n * returns an object similar to TypeScript's `ts.TypeChecker` that contains knowledge about the\n * target.\n */\nclass R3TargetBinder {\n    constructor(directiveMatcher) {\n        this.directiveMatcher = directiveMatcher;\n    }\n    /**\n     * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains\n     * metadata about the types referenced in the template.\n     */\n    bind(target) {\n        if (!target.template) {\n            // TODO(alxhub): handle targets which contain things like HostBindings, etc.\n            throw new Error('Binding without a template not yet supported');\n        }\n        // First, parse the template into a `Scope` structure. This operation captures the syntactic\n        // scopes in the template and makes them available for later use.\n        const scope = Scope.apply(target.template);\n        // Use the `Scope` to extract the entities present at every level of the template.\n        const templateEntities = extractTemplateEntities(scope);\n        // Next, perform directive matching on the template using the `DirectiveBinder`. This returns:\n        //   - directives: Map of nodes (elements & ng-templates) to the directives on them.\n        //   - bindings: Map of inputs, outputs, and attributes to the directive/element that claims\n        //     them. TODO(alxhub): handle multiple directives claiming an input/output/etc.\n        //   - references: Map of #references to their targets.\n        const { directives, bindings, references } = DirectiveBinder.apply(target.template, this.directiveMatcher);\n        // Finally, run the TemplateBinder to bind references, variables, and other entities within the\n        // template. This extracts all the metadata that doesn't depend on directive matching.\n        const { expressions, symbols, nestingLevel, usedPipes } = TemplateBinder.applyWithScope(target.template, scope);\n        return new R3BoundTarget(target, directives, bindings, references, expressions, symbols, nestingLevel, templateEntities, usedPipes);\n    }\n}\n/**\n * Represents a binding scope within a template.\n *\n * Any variables, references, or other named entities declared within the template will\n * be captured and available by name in `namedEntities`. Additionally, child templates will\n * be analyzed and have their child `Scope`s available in `childScopes`.\n */\nclass Scope {\n    constructor(parentScope, template) {\n        this.parentScope = parentScope;\n        this.template = template;\n        /**\n         * Named members of the `Scope`, such as `Reference`s or `Variable`s.\n         */\n        this.namedEntities = new Map();\n        /**\n         * Child `Scope`s for immediately nested `Template`s.\n         */\n        this.childScopes = new Map();\n    }\n    static newRootScope() {\n        return new Scope(null, null);\n    }\n    /**\n     * Process a template (either as a `Template` sub-template with variables, or a plain array of\n     * template `Node`s) and construct its `Scope`.\n     */\n    static apply(template) {\n        const scope = Scope.newRootScope();\n        scope.ingest(template);\n        return scope;\n    }\n    /**\n     * Internal method to process the template and populate the `Scope`.\n     */\n    ingest(template) {\n        if (template instanceof Template) {\n            // Variables on an <ng-template> are defined in the inner scope.\n            template.variables.forEach(node => this.visitVariable(node));\n            // Process the nodes of the template.\n            template.children.forEach(node => node.visit(this));\n        }\n        else {\n            // No overarching `Template` instance, so process the nodes directly.\n            template.forEach(node => node.visit(this));\n        }\n    }\n    visitElement(element) {\n        // `Element`s in the template may have `Reference`s which are captured in the scope.\n        element.references.forEach(node => this.visitReference(node));\n        // Recurse into the `Element`'s children.\n        element.children.forEach(node => node.visit(this));\n    }\n    visitTemplate(template) {\n        // References on a <ng-template> are defined in the outer scope, so capture them before\n        // processing the template's child scope.\n        template.references.forEach(node => this.visitReference(node));\n        // Next, create an inner scope and process the template within it.\n        const scope = new Scope(this, template);\n        scope.ingest(template);\n        this.childScopes.set(template, scope);\n    }\n    visitVariable(variable) {\n        // Declare the variable if it's not already.\n        this.maybeDeclare(variable);\n    }\n    visitReference(reference) {\n        // Declare the variable if it's not already.\n        this.maybeDeclare(reference);\n    }\n    // Unused visitors.\n    visitContent(content) { }\n    visitBoundAttribute(attr) { }\n    visitBoundEvent(event) { }\n    visitBoundText(text) { }\n    visitText(text) { }\n    visitTextAttribute(attr) { }\n    visitIcu(icu) { }\n    maybeDeclare(thing) {\n        // Declare something with a name, as long as that name isn't taken.\n        if (!this.namedEntities.has(thing.name)) {\n            this.namedEntities.set(thing.name, thing);\n        }\n    }\n    /**\n     * Look up a variable within this `Scope`.\n     *\n     * This can recurse into a parent `Scope` if it's available.\n     */\n    lookup(name) {\n        if (this.namedEntities.has(name)) {\n            // Found in the local scope.\n            return this.namedEntities.get(name);\n        }\n        else if (this.parentScope !== null) {\n            // Not in the local scope, but there's a parent scope so check there.\n            return this.parentScope.lookup(name);\n        }\n        else {\n            // At the top level and it wasn't found.\n            return null;\n        }\n    }\n    /**\n     * Get the child scope for a `Template`.\n     *\n     * This should always be defined.\n     */\n    getChildScope(template) {\n        const res = this.childScopes.get(template);\n        if (res === undefined) {\n            throw new Error(`Assertion error: child scope for ${template} not found`);\n        }\n        return res;\n    }\n}\n/**\n * Processes a template and matches directives on nodes (elements and templates).\n *\n * Usually used via the static `apply()` method.\n */\nclass DirectiveBinder {\n    constructor(matcher, directives, bindings, references) {\n        this.matcher = matcher;\n        this.directives = directives;\n        this.bindings = bindings;\n        this.references = references;\n    }\n    /**\n     * Process a template (list of `Node`s) and perform directive matching against each node.\n     *\n     * @param template the list of template `Node`s to match (recursively).\n     * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for\n     * this template.\n     * @returns three maps which contain information about directives in the template: the\n     * `directives` map which lists directives matched on each node, the `bindings` map which\n     * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`\n     * map which resolves #references (`Reference`s) within the template to the named directive or\n     * template node.\n     */\n    static apply(template, selectorMatcher) {\n        const directives = new Map();\n        const bindings = new Map();\n        const references = new Map();\n        const matcher = new DirectiveBinder(selectorMatcher, directives, bindings, references);\n        matcher.ingest(template);\n        return { directives, bindings, references };\n    }\n    ingest(template) {\n        template.forEach(node => node.visit(this));\n    }\n    visitElement(element) {\n        this.visitElementOrTemplate(element.name, element);\n    }\n    visitTemplate(template) {\n        this.visitElementOrTemplate('ng-template', template);\n    }\n    visitElementOrTemplate(elementName, node) {\n        // First, determine the HTML shape of the node for the purpose of directive matching.\n        // Do this by building up a `CssSelector` for the node.\n        const cssSelector = createCssSelector(elementName, getAttrsForDirectiveMatching(node));\n        // Next, use the `SelectorMatcher` to get the list of directives on the node.\n        const directives = [];\n        this.matcher.match(cssSelector, (_, directive) => directives.push(directive));\n        if (directives.length > 0) {\n            this.directives.set(node, directives);\n        }\n        // Resolve any references that are created on this node.\n        node.references.forEach(ref => {\n            let dirTarget = null;\n            // If the reference expression is empty, then it matches the \"primary\" directive on the node\n            // (if there is one). Otherwise it matches the host node itself (either an element or\n            // <ng-template> node).\n            if (ref.value.trim() === '') {\n                // This could be a reference to a component if there is one.\n                dirTarget = directives.find(dir => dir.isComponent) || null;\n            }\n            else {\n                // This should be a reference to a directive exported via exportAs.\n                dirTarget =\n                    directives.find(dir => dir.exportAs !== null && dir.exportAs.some(value => value === ref.value)) ||\n                        null;\n                // Check if a matching directive was found.\n                if (dirTarget === null) {\n                    // No matching directive was found - this reference points to an unknown target. Leave it\n                    // unmapped.\n                    return;\n                }\n            }\n            if (dirTarget !== null) {\n                // This reference points to a directive.\n                this.references.set(ref, { directive: dirTarget, node });\n            }\n            else {\n                // This reference points to the node itself.\n                this.references.set(ref, node);\n            }\n        });\n        const setAttributeBinding = (attribute, ioType) => {\n            const dir = directives.find(dir => dir[ioType].hasBindingPropertyName(attribute.name));\n            const binding = dir !== undefined ? dir : node;\n            this.bindings.set(attribute, binding);\n        };\n        // Node inputs (bound attributes) and text attributes can be bound to an\n        // input on a directive.\n        node.inputs.forEach(input => setAttributeBinding(input, 'inputs'));\n        node.attributes.forEach(attr => setAttributeBinding(attr, 'inputs'));\n        if (node instanceof Template) {\n            node.templateAttrs.forEach(attr => setAttributeBinding(attr, 'inputs'));\n        }\n        // Node outputs (bound events) can be bound to an output on a directive.\n        node.outputs.forEach(output => setAttributeBinding(output, 'outputs'));\n        // Recurse into the node's children.\n        node.children.forEach(child => child.visit(this));\n    }\n    // Unused visitors.\n    visitContent(content) { }\n    visitVariable(variable) { }\n    visitReference(reference) { }\n    visitTextAttribute(attribute) { }\n    visitBoundAttribute(attribute) { }\n    visitBoundEvent(attribute) { }\n    visitBoundAttributeOrEvent(node) { }\n    visitText(text) { }\n    visitBoundText(text) { }\n    visitIcu(icu) { }\n}\n/**\n * Processes a template and extract metadata about expressions and symbols within.\n *\n * This is a companion to the `DirectiveBinder` that doesn't require knowledge of directives matched\n * within the template in order to operate.\n *\n * Expressions are visited by the superclass `RecursiveAstVisitor`, with custom logic provided\n * by overridden methods from that visitor.\n */\nclass TemplateBinder extends RecursiveAstVisitor {\n    constructor(bindings, symbols, usedPipes, nestingLevel, scope, template, level) {\n        super();\n        this.bindings = bindings;\n        this.symbols = symbols;\n        this.usedPipes = usedPipes;\n        this.nestingLevel = nestingLevel;\n        this.scope = scope;\n        this.template = template;\n        this.level = level;\n        this.pipesUsed = [];\n        // Save a bit of processing time by constructing this closure in advance.\n        this.visitNode = (node) => node.visit(this);\n    }\n    // This method is defined to reconcile the type of TemplateBinder since both\n    // RecursiveAstVisitor and Visitor define the visit() method in their\n    // interfaces.\n    visit(node, context) {\n        if (node instanceof AST) {\n            node.visit(this, context);\n        }\n        else {\n            node.visit(this);\n        }\n    }\n    /**\n     * Process a template and extract metadata about expressions and symbols within.\n     *\n     * @param template the nodes of the template to process\n     * @param scope the `Scope` of the template being processed.\n     * @returns three maps which contain metadata about the template: `expressions` which interprets\n     * special `AST` nodes in expressions as pointing to references or variables declared within the\n     * template, `symbols` which maps those variables and references to the nested `Template` which\n     * declares them, if any, and `nestingLevel` which associates each `Template` with a integer\n     * nesting level (how many levels deep within the template structure the `Template` is), starting\n     * at 1.\n     */\n    static applyWithScope(template, scope) {\n        const expressions = new Map();\n        const symbols = new Map();\n        const nestingLevel = new Map();\n        const usedPipes = new Set();\n        // The top-level template has nesting level 0.\n        const binder = new TemplateBinder(expressions, symbols, usedPipes, nestingLevel, scope, template instanceof Template ? template : null, 0);\n        binder.ingest(template);\n        return { expressions, symbols, nestingLevel, usedPipes };\n    }\n    ingest(template) {\n        if (template instanceof Template) {\n            // For <ng-template>s, process only variables and child nodes. Inputs, outputs, templateAttrs,\n            // and references were all processed in the scope of the containing template.\n            template.variables.forEach(this.visitNode);\n            template.children.forEach(this.visitNode);\n            // Set the nesting level.\n            this.nestingLevel.set(template, this.level);\n        }\n        else {\n            // Visit each node from the top-level template.\n            template.forEach(this.visitNode);\n        }\n    }\n    visitElement(element) {\n        // Visit the inputs, outputs, and children of the element.\n        element.inputs.forEach(this.visitNode);\n        element.outputs.forEach(this.visitNode);\n        element.children.forEach(this.visitNode);\n    }\n    visitTemplate(template) {\n        // First, visit inputs, outputs and template attributes of the template node.\n        template.inputs.forEach(this.visitNode);\n        template.outputs.forEach(this.visitNode);\n        template.templateAttrs.forEach(this.visitNode);\n        // References are also evaluated in the outer context.\n        template.references.forEach(this.visitNode);\n        // Next, recurse into the template using its scope, and bumping the nesting level up by one.\n        const childScope = this.scope.getChildScope(template);\n        const binder = new TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.nestingLevel, childScope, template, this.level + 1);\n        binder.ingest(template);\n    }\n    visitVariable(variable) {\n        // Register the `Variable` as a symbol in the current `Template`.\n        if (this.template !== null) {\n            this.symbols.set(variable, this.template);\n        }\n    }\n    visitReference(reference) {\n        // Register the `Reference` as a symbol in the current `Template`.\n        if (this.template !== null) {\n            this.symbols.set(reference, this.template);\n        }\n    }\n    // Unused template visitors\n    visitText(text) { }\n    visitContent(content) { }\n    visitTextAttribute(attribute) { }\n    visitIcu(icu) {\n        Object.keys(icu.vars).forEach(key => icu.vars[key].visit(this));\n        Object.keys(icu.placeholders).forEach(key => icu.placeholders[key].visit(this));\n    }\n    // The remaining visitors are concerned with processing AST expressions within template bindings\n    visitBoundAttribute(attribute) {\n        attribute.value.visit(this);\n    }\n    visitBoundEvent(event) {\n        event.handler.visit(this);\n    }\n    visitBoundText(text) {\n        text.value.visit(this);\n    }\n    visitPipe(ast, context) {\n        this.usedPipes.add(ast.name);\n        return super.visitPipe(ast, context);\n    }\n    // These five types of AST expressions can refer to expression roots, which could be variables\n    // or references in the current scope.\n    visitPropertyRead(ast, context) {\n        this.maybeMap(context, ast, ast.name);\n        return super.visitPropertyRead(ast, context);\n    }\n    visitSafePropertyRead(ast, context) {\n        this.maybeMap(context, ast, ast.name);\n        return super.visitSafePropertyRead(ast, context);\n    }\n    visitPropertyWrite(ast, context) {\n        this.maybeMap(context, ast, ast.name);\n        return super.visitPropertyWrite(ast, context);\n    }\n    maybeMap(scope, ast, name) {\n        // If the receiver of the expression isn't the `ImplicitReceiver`, this isn't the root of an\n        // `AST` expression that maps to a `Variable` or `Reference`.\n        if (!(ast.receiver instanceof ImplicitReceiver)) {\n            return;\n        }\n        // Check whether the name exists in the current scope. If so, map it. Otherwise, the name is\n        // probably a property on the top-level component context.\n        let target = this.scope.lookup(name);\n        if (target !== null) {\n            this.bindings.set(ast, target);\n        }\n    }\n}\n/**\n * Metadata container for a `Target` that allows queries for specific bits of metadata.\n *\n * See `BoundTarget` for documentation on the individual methods.\n */\nclass R3BoundTarget {\n    constructor(target, directives, bindings, references, exprTargets, symbols, nestingLevel, templateEntities, usedPipes) {\n        this.target = target;\n        this.directives = directives;\n        this.bindings = bindings;\n        this.references = references;\n        this.exprTargets = exprTargets;\n        this.symbols = symbols;\n        this.nestingLevel = nestingLevel;\n        this.templateEntities = templateEntities;\n        this.usedPipes = usedPipes;\n    }\n    getEntitiesInTemplateScope(template) {\n        var _a;\n        return (_a = this.templateEntities.get(template)) !== null && _a !== void 0 ? _a : new Set();\n    }\n    getDirectivesOfNode(node) {\n        return this.directives.get(node) || null;\n    }\n    getReferenceTarget(ref) {\n        return this.references.get(ref) || null;\n    }\n    getConsumerOfBinding(binding) {\n        return this.bindings.get(binding) || null;\n    }\n    getExpressionTarget(expr) {\n        return this.exprTargets.get(expr) || null;\n    }\n    getTemplateOfSymbol(symbol) {\n        return this.symbols.get(symbol) || null;\n    }\n    getNestingLevel(template) {\n        return this.nestingLevel.get(template) || 0;\n    }\n    getUsedDirectives() {\n        const set = new Set();\n        this.directives.forEach(dirs => dirs.forEach(dir => set.add(dir)));\n        return Array.from(set.values());\n    }\n    getUsedPipes() {\n        return Array.from(this.usedPipes);\n    }\n}\nfunction extractTemplateEntities(rootScope) {\n    const entityMap = new Map();\n    function extractScopeEntities(scope) {\n        if (entityMap.has(scope.template)) {\n            return entityMap.get(scope.template);\n        }\n        const currentEntities = scope.namedEntities;\n        let templateEntities;\n        if (scope.parentScope !== null) {\n            templateEntities = new Map([...extractScopeEntities(scope.parentScope), ...currentEntities]);\n        }\n        else {\n            templateEntities = new Map(currentEntities);\n        }\n        entityMap.set(scope.template, templateEntities);\n        return templateEntities;\n    }\n    const scopesToProcess = [rootScope];\n    while (scopesToProcess.length > 0) {\n        const scope = scopesToProcess.pop();\n        for (const childScope of scope.childScopes.values()) {\n            scopesToProcess.push(childScope);\n        }\n        extractScopeEntities(scope);\n    }\n    const templateEntities = new Map();\n    for (const [template, entities] of entityMap) {\n        templateEntities.set(template, new Set(entities.values()));\n    }\n    return templateEntities;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction compileClassMetadata(metadata) {\n    var _a, _b;\n    // Generate an ngDevMode guarded call to setClassMetadata with the class identifier and its\n    // metadata.\n    const fnCall = importExpr(Identifiers$1.setClassMetadata).callFn([\n        metadata.type,\n        metadata.decorators,\n        (_a = metadata.ctorParameters) !== null && _a !== void 0 ? _a : literal(null),\n        (_b = metadata.propDecorators) !== null && _b !== void 0 ? _b : literal(null),\n    ]);\n    const iife = fn([], [devOnlyGuardedExpression(fnCall).toStmt()]);\n    return iife.callFn([]);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$6 = '12.0.0';\nfunction compileDeclareClassMetadata(metadata) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$6));\n    definitionMap.set('version', literal('13.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n    definitionMap.set('type', metadata.type);\n    definitionMap.set('decorators', metadata.decorators);\n    definitionMap.set('ctorParameters', metadata.ctorParameters);\n    definitionMap.set('propDecorators', metadata.propDecorators);\n    return importExpr(Identifiers$1.declareClassMetadata).callFn([definitionMap.toLiteralMap()]);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates an array literal expression from the given array, mapping all values to an expression\n * using the provided mapping function. If the array is empty or null, then null is returned.\n *\n * @param values The array to transfer into literal array expression.\n * @param mapper The logic to use for creating an expression for the array's values.\n * @returns An array literal expression representing `values`, or null if `values` is empty or\n * is itself null.\n */\nfunction toOptionalLiteralArray(values, mapper) {\n    if (values === null || values.length === 0) {\n        return null;\n    }\n    return literalArr(values.map(value => mapper(value)));\n}\n/**\n * Creates an object literal expression from the given object, mapping all values to an expression\n * using the provided mapping function. If the object has no keys, then null is returned.\n *\n * @param object The object to transfer into an object literal expression.\n * @param mapper The logic to use for creating an expression for the object's values.\n * @returns An object literal expression representing `object`, or null if `object` does not have\n * any keys.\n */\nfunction toOptionalLiteralMap(object, mapper) {\n    const entries = Object.keys(object).map(key => {\n        const value = object[key];\n        return { key, value: mapper(value), quoted: true };\n    });\n    if (entries.length > 0) {\n        return literalMap(entries);\n    }\n    else {\n        return null;\n    }\n}\nfunction compileDependencies(deps) {\n    if (deps === 'invalid') {\n        // The `deps` can be set to the string \"invalid\"  by the `unwrapConstructorDependencies()`\n        // function, which tries to convert `ConstructorDeps` into `R3DependencyMetadata[]`.\n        return literal('invalid');\n    }\n    else if (deps === null) {\n        return literal(null);\n    }\n    else {\n        return literalArr(deps.map(compileDependency));\n    }\n}\nfunction compileDependency(dep) {\n    const depMeta = new DefinitionMap();\n    depMeta.set('token', dep.token);\n    if (dep.attributeNameType !== null) {\n        depMeta.set('attribute', literal(true));\n    }\n    if (dep.host) {\n        depMeta.set('host', literal(true));\n    }\n    if (dep.optional) {\n        depMeta.set('optional', literal(true));\n    }\n    if (dep.self) {\n        depMeta.set('self', literal(true));\n    }\n    if (dep.skipSelf) {\n        depMeta.set('skipSelf', literal(true));\n    }\n    return depMeta.toLiteralMap();\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$5 = '12.0.0';\n/**\n * Compile a directive declaration defined by the `R3DirectiveMetadata`.\n */\nfunction compileDeclareDirectiveFromMetadata(meta) {\n    const definitionMap = createDirectiveDefinitionMap(meta);\n    const expression = importExpr(Identifiers$1.declareDirective).callFn([definitionMap.toLiteralMap()]);\n    const type = createDirectiveType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for a directive into a `DefinitionMap`. This allows for reusing\n * this logic for components, as they extend the directive metadata.\n */\nfunction createDirectiveDefinitionMap(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$5));\n    definitionMap.set('version', literal('13.1.0'));\n    // e.g. `type: MyDirective`\n    definitionMap.set('type', meta.internalType);\n    // e.g. `selector: 'some-dir'`\n    if (meta.selector !== null) {\n        definitionMap.set('selector', literal(meta.selector));\n    }\n    definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true));\n    definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));\n    definitionMap.set('host', compileHostMetadata(meta.host));\n    definitionMap.set('providers', meta.providers);\n    if (meta.queries.length > 0) {\n        definitionMap.set('queries', literalArr(meta.queries.map(compileQuery)));\n    }\n    if (meta.viewQueries.length > 0) {\n        definitionMap.set('viewQueries', literalArr(meta.viewQueries.map(compileQuery)));\n    }\n    if (meta.exportAs !== null) {\n        definitionMap.set('exportAs', asLiteral(meta.exportAs));\n    }\n    if (meta.usesInheritance) {\n        definitionMap.set('usesInheritance', literal(true));\n    }\n    if (meta.lifecycle.usesOnChanges) {\n        definitionMap.set('usesOnChanges', literal(true));\n    }\n    definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n    return definitionMap;\n}\n/**\n * Compiles the metadata of a single query into its partial declaration form as declared\n * by `R3DeclareQueryMetadata`.\n */\nfunction compileQuery(query) {\n    const meta = new DefinitionMap();\n    meta.set('propertyName', literal(query.propertyName));\n    if (query.first) {\n        meta.set('first', literal(true));\n    }\n    meta.set('predicate', Array.isArray(query.predicate) ? asLiteral(query.predicate) :\n        convertFromMaybeForwardRefExpression(query.predicate));\n    if (!query.emitDistinctChangesOnly) {\n        // `emitDistinctChangesOnly` is special because we expect it to be `true`.\n        // Therefore we explicitly emit the field, and explicitly place it only when it's `false`.\n        meta.set('emitDistinctChangesOnly', literal(false));\n    }\n    else {\n        // The linker will assume that an absent `emitDistinctChangesOnly` flag is by default `true`.\n    }\n    if (query.descendants) {\n        meta.set('descendants', literal(true));\n    }\n    meta.set('read', query.read);\n    if (query.static) {\n        meta.set('static', literal(true));\n    }\n    return meta.toLiteralMap();\n}\n/**\n * Compiles the host metadata into its partial declaration form as declared\n * in `R3DeclareDirectiveMetadata['host']`\n */\nfunction compileHostMetadata(meta) {\n    const hostMetadata = new DefinitionMap();\n    hostMetadata.set('attributes', toOptionalLiteralMap(meta.attributes, expression => expression));\n    hostMetadata.set('listeners', toOptionalLiteralMap(meta.listeners, literal));\n    hostMetadata.set('properties', toOptionalLiteralMap(meta.properties, literal));\n    if (meta.specialAttributes.styleAttr) {\n        hostMetadata.set('styleAttribute', literal(meta.specialAttributes.styleAttr));\n    }\n    if (meta.specialAttributes.classAttr) {\n        hostMetadata.set('classAttribute', literal(meta.specialAttributes.classAttr));\n    }\n    if (hostMetadata.values.length > 0) {\n        return hostMetadata.toLiteralMap();\n    }\n    else {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Compile a component declaration defined by the `R3ComponentMetadata`.\n */\nfunction compileDeclareComponentFromMetadata(meta, template, additionalTemplateInfo) {\n    const definitionMap = createComponentDefinitionMap(meta, template, additionalTemplateInfo);\n    const expression = importExpr(Identifiers$1.declareComponent).callFn([definitionMap.toLiteralMap()]);\n    const type = createComponentType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for a component into a `DefinitionMap`.\n */\nfunction createComponentDefinitionMap(meta, template, templateInfo) {\n    const definitionMap = createDirectiveDefinitionMap(meta);\n    definitionMap.set('template', getTemplateExpression(template, templateInfo));\n    if (templateInfo.isInline) {\n        definitionMap.set('isInline', literal(true));\n    }\n    definitionMap.set('styles', toOptionalLiteralArray(meta.styles, literal));\n    definitionMap.set('components', compileUsedDirectiveMetadata(meta, directive => directive.isComponent === true));\n    definitionMap.set('directives', compileUsedDirectiveMetadata(meta, directive => directive.isComponent !== true));\n    definitionMap.set('pipes', compileUsedPipeMetadata(meta));\n    definitionMap.set('viewProviders', meta.viewProviders);\n    definitionMap.set('animations', meta.animations);\n    if (meta.changeDetection !== undefined) {\n        definitionMap.set('changeDetection', importExpr(Identifiers$1.ChangeDetectionStrategy)\n            .prop(ChangeDetectionStrategy[meta.changeDetection]));\n    }\n    if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n        definitionMap.set('encapsulation', importExpr(Identifiers$1.ViewEncapsulation).prop(ViewEncapsulation[meta.encapsulation]));\n    }\n    if (meta.interpolation !== DEFAULT_INTERPOLATION_CONFIG) {\n        definitionMap.set('interpolation', literalArr([literal(meta.interpolation.start), literal(meta.interpolation.end)]));\n    }\n    if (template.preserveWhitespaces === true) {\n        definitionMap.set('preserveWhitespaces', literal(true));\n    }\n    return definitionMap;\n}\nfunction getTemplateExpression(template, templateInfo) {\n    // If the template has been defined using a direct literal, we use that expression directly\n    // without any modifications. This is ensures proper source mapping from the partially\n    // compiled code to the source file declaring the template. Note that this does not capture\n    // template literals referenced indirectly through an identifier.\n    if (templateInfo.inlineTemplateLiteralExpression !== null) {\n        return templateInfo.inlineTemplateLiteralExpression;\n    }\n    // If the template is defined inline but not through a literal, the template has been resolved\n    // through static interpretation. We create a literal but cannot provide any source span. Note\n    // that we cannot use the expression defining the template because the linker expects the template\n    // to be defined as a literal in the declaration.\n    if (templateInfo.isInline) {\n        return literal(templateInfo.content, null, null);\n    }\n    // The template is external so we must synthesize an expression node with\n    // the appropriate source-span.\n    const contents = templateInfo.content;\n    const file = new ParseSourceFile(contents, templateInfo.sourceUrl);\n    const start = new ParseLocation(file, 0, 0, 0);\n    const end = computeEndLocation(file, contents);\n    const span = new ParseSourceSpan(start, end);\n    return literal(contents, null, span);\n}\nfunction computeEndLocation(file, contents) {\n    const length = contents.length;\n    let lineStart = 0;\n    let lastLineStart = 0;\n    let line = 0;\n    do {\n        lineStart = contents.indexOf('\\n', lastLineStart);\n        if (lineStart !== -1) {\n            lastLineStart = lineStart + 1;\n            line++;\n        }\n    } while (lineStart !== -1);\n    return new ParseLocation(file, length, line, length - lastLineStart);\n}\n/**\n * Compiles the directives as registered in the component metadata into an array literal of the\n * individual directives. If the component does not use any directives, then null is returned.\n */\nfunction compileUsedDirectiveMetadata(meta, predicate) {\n    const wrapType = meta.declarationListEmitMode !== 0 /* Direct */ ?\n        generateForwardRef :\n        (expr) => expr;\n    const directives = meta.directives.filter(predicate);\n    return toOptionalLiteralArray(directives, directive => {\n        const dirMeta = new DefinitionMap();\n        dirMeta.set('type', wrapType(directive.type));\n        dirMeta.set('selector', literal(directive.selector));\n        dirMeta.set('inputs', toOptionalLiteralArray(directive.inputs, literal));\n        dirMeta.set('outputs', toOptionalLiteralArray(directive.outputs, literal));\n        dirMeta.set('exportAs', toOptionalLiteralArray(directive.exportAs, literal));\n        return dirMeta.toLiteralMap();\n    });\n}\n/**\n * Compiles the pipes as registered in the component metadata into an object literal, where the\n * pipe's name is used as key and a reference to its type as value. If the component does not use\n * any pipes, then null is returned.\n */\nfunction compileUsedPipeMetadata(meta) {\n    if (meta.pipes.size === 0) {\n        return null;\n    }\n    const wrapType = meta.declarationListEmitMode !== 0 /* Direct */ ?\n        generateForwardRef :\n        (expr) => expr;\n    const entries = [];\n    for (const [name, pipe] of meta.pipes) {\n        entries.push({ key: name, value: wrapType(pipe), quoted: true });\n    }\n    return literalMap(entries);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$4 = '12.0.0';\nfunction compileDeclareFactoryFunction(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$4));\n    definitionMap.set('version', literal('13.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n    definitionMap.set('type', meta.internalType);\n    definitionMap.set('deps', compileDependencies(meta.deps));\n    definitionMap.set('target', importExpr(Identifiers$1.FactoryTarget).prop(FactoryTarget$1[meta.target]));\n    return {\n        expression: importExpr(Identifiers$1.declareFactory).callFn([definitionMap.toLiteralMap()]),\n        statements: [],\n        type: createFactoryType(meta),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$3 = '12.0.0';\n/**\n * Compile a Injectable declaration defined by the `R3InjectableMetadata`.\n */\nfunction compileDeclareInjectableFromMetadata(meta) {\n    const definitionMap = createInjectableDefinitionMap(meta);\n    const expression = importExpr(Identifiers$1.declareInjectable).callFn([definitionMap.toLiteralMap()]);\n    const type = createInjectableType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for a Injectable into a `DefinitionMap`.\n */\nfunction createInjectableDefinitionMap(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$3));\n    definitionMap.set('version', literal('13.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n    definitionMap.set('type', meta.internalType);\n    // Only generate providedIn property if it has a non-null value\n    if (meta.providedIn !== undefined) {\n        const providedIn = convertFromMaybeForwardRefExpression(meta.providedIn);\n        if (providedIn.value !== null) {\n            definitionMap.set('providedIn', providedIn);\n        }\n    }\n    if (meta.useClass !== undefined) {\n        definitionMap.set('useClass', convertFromMaybeForwardRefExpression(meta.useClass));\n    }\n    if (meta.useExisting !== undefined) {\n        definitionMap.set('useExisting', convertFromMaybeForwardRefExpression(meta.useExisting));\n    }\n    if (meta.useValue !== undefined) {\n        definitionMap.set('useValue', convertFromMaybeForwardRefExpression(meta.useValue));\n    }\n    // Factories do not contain `ForwardRef`s since any types are already wrapped in a function call\n    // so the types will not be eagerly evaluated. Therefore we do not need to process this expression\n    // with `convertFromProviderExpression()`.\n    if (meta.useFactory !== undefined) {\n        definitionMap.set('useFactory', meta.useFactory);\n    }\n    if (meta.deps !== undefined) {\n        definitionMap.set('deps', literalArr(meta.deps.map(compileDependency)));\n    }\n    return definitionMap;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$2 = '12.0.0';\nfunction compileDeclareInjectorFromMetadata(meta) {\n    const definitionMap = createInjectorDefinitionMap(meta);\n    const expression = importExpr(Identifiers$1.declareInjector).callFn([definitionMap.toLiteralMap()]);\n    const type = createInjectorType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for an Injector into a `DefinitionMap`.\n */\nfunction createInjectorDefinitionMap(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$2));\n    definitionMap.set('version', literal('13.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n    definitionMap.set('type', meta.internalType);\n    definitionMap.set('providers', meta.providers);\n    if (meta.imports.length > 0) {\n        definitionMap.set('imports', literalArr(meta.imports));\n    }\n    return definitionMap;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION$1 = '12.0.0';\nfunction compileDeclareNgModuleFromMetadata(meta) {\n    const definitionMap = createNgModuleDefinitionMap(meta);\n    const expression = importExpr(Identifiers$1.declareNgModule).callFn([definitionMap.toLiteralMap()]);\n    const type = createNgModuleType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for an NgModule into a `DefinitionMap`.\n */\nfunction createNgModuleDefinitionMap(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$1));\n    definitionMap.set('version', literal('13.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n    definitionMap.set('type', meta.internalType);\n    // We only generate the keys in the metadata if the arrays contain values.\n    // We must wrap the arrays inside a function if any of the values are a forward reference to a\n    // not-yet-declared class. This is to support JIT execution of the `ɵɵngDeclareNgModule()` call.\n    // In the linker these wrappers are stripped and then reapplied for the `ɵɵdefineNgModule()` call.\n    if (meta.bootstrap.length > 0) {\n        definitionMap.set('bootstrap', refsToArray(meta.bootstrap, meta.containsForwardDecls));\n    }\n    if (meta.declarations.length > 0) {\n        definitionMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));\n    }\n    if (meta.imports.length > 0) {\n        definitionMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));\n    }\n    if (meta.exports.length > 0) {\n        definitionMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));\n    }\n    if (meta.schemas !== null && meta.schemas.length > 0) {\n        definitionMap.set('schemas', literalArr(meta.schemas.map(ref => ref.value)));\n    }\n    if (meta.id !== null) {\n        definitionMap.set('id', meta.id);\n    }\n    return definitionMap;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\n * must update this constant to prevent old partial-linkers from incorrectly processing the\n * declaration.\n *\n * Do not include any prerelease in these versions as they are ignored.\n */\nconst MINIMUM_PARTIAL_LINKER_VERSION = '12.0.0';\n/**\n * Compile a Pipe declaration defined by the `R3PipeMetadata`.\n */\nfunction compileDeclarePipeFromMetadata(meta) {\n    const definitionMap = createPipeDefinitionMap(meta);\n    const expression = importExpr(Identifiers$1.declarePipe).callFn([definitionMap.toLiteralMap()]);\n    const type = createPipeType(meta);\n    return { expression, type, statements: [] };\n}\n/**\n * Gathers the declaration fields for a Pipe into a `DefinitionMap`.\n */\nfunction createPipeDefinitionMap(meta) {\n    const definitionMap = new DefinitionMap();\n    definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION));\n    definitionMap.set('version', literal('13.1.0'));\n    definitionMap.set('ngImport', importExpr(Identifiers$1.core));\n    // e.g. `type: MyPipe`\n    definitionMap.set('type', meta.internalType);\n    // e.g. `name: \"myPipe\"`\n    definitionMap.set('name', literal(meta.pipeName));\n    if (meta.pure === false) {\n        // e.g. `pure: false`\n        definitionMap.set('pure', literal(meta.pure));\n    }\n    return definitionMap;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n// This function call has a global side effects and publishes the compiler into global namespace for\n// the late binding of the Compiler to the @angular/core for jit compilation.\npublishFacade(_global);\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { AST, ASTWithName, ASTWithSource, AbsoluteSourceSpan, ArrayType, AssertNotNull, AstMemoryEfficientTransformer, AstPath, AstTransformer, Attribute, Binary, BinaryOperator, BinaryOperatorExpr, BindingPipe, BoundElementProperty, BuiltinMethod, BuiltinType, BuiltinTypeName, BuiltinVar, CUSTOM_ELEMENTS_SCHEMA, Call, CastExpr, Chain, ChangeDetectionStrategy, ClassField, ClassMethod, ClassStmt, CommaExpr, Comment, CompilerConfig, Conditional, ConditionalExpr, ConstantPool, CssSelector, DEFAULT_INTERPOLATION_CONFIG, DYNAMIC_TYPE, DeclareFunctionStmt, DeclareVarStmt, DomElementSchemaRegistry, EOF, Element, ElementSchemaRegistry, EmitterVisitorContext, EmptyExpr, Expansion, ExpansionCase, Expression, ExpressionBinding, ExpressionStatement, ExpressionType, ExternalExpr, ExternalReference, FactoryTarget$1 as FactoryTarget, FunctionExpr, HtmlParser, HtmlTagDefinition, I18NHtmlParser, Identifiers, IfStmt, ImplicitReceiver, InstantiateExpr, Interpolation, InterpolationConfig, InvokeFunctionExpr, IvyParser, JSDocComment, JitEvaluator, KeyedRead, KeyedWrite, LeadingComment, Lexer, LiteralArray, LiteralArrayExpr, LiteralExpr, LiteralMap, LiteralMapExpr, LiteralPrimitive, LocalizedString, MapType, MessageBundle, NONE_TYPE, NO_ERRORS_SCHEMA, NodeWithI18n, NonNullAssert, NotExpr, ParseError, ParseErrorLevel, ParseLocation, ParseSourceFile, ParseSourceSpan, ParseSpan, ParseTreeResult, ParsedEvent, ParsedProperty, ParsedPropertyType, ParsedVariable, Parser$1 as Parser, ParserError, PrefixNot, PropertyRead, PropertyWrite, Quote, R3BoundTarget, Identifiers$1 as R3Identifiers, R3TargetBinder, ReadKeyExpr, ReadPropExpr, ReadVarExpr, RecursiveAstVisitor, RecursiveVisitor, ResourceLoader, ReturnStatement, STRING_TYPE, SafeKeyedRead, SafePropertyRead, SelectorContext, SelectorListContext, SelectorMatcher, Serializer, SplitInterpolation, Statement, StmtModifier, TagContentType, TaggedTemplateExpr, TemplateBindingParseResult, TemplateLiteral, TemplateLiteralElement, Text, ThisReceiver, ThrowStmt, BoundAttribute as TmplAstBoundAttribute, BoundEvent as TmplAstBoundEvent, BoundText as TmplAstBoundText, Content as TmplAstContent, Element$1 as TmplAstElement, Icu$1 as TmplAstIcu, RecursiveVisitor$1 as TmplAstRecursiveVisitor, Reference as TmplAstReference, Template as TmplAstTemplate, Text$3 as TmplAstText, TextAttribute as TmplAstTextAttribute, Variable as TmplAstVariable, Token, TokenType, TreeError, TryCatchStmt, Type, TypeofExpr, Unary, UnaryOperator, UnaryOperatorExpr, VERSION, VariableBinding, Version, ViewEncapsulation, WrappedNodeExpr, WriteKeyExpr, WritePropExpr, WriteVarExpr, Xliff, Xliff2, Xmb, XmlParser, Xtb, _ParseAST, collectExternalReferences, compileClassMetadata, compileComponentFromMetadata, compileDeclareClassMetadata, compileDeclareComponentFromMetadata, compileDeclareDirectiveFromMetadata, compileDeclareFactoryFunction, compileDeclareInjectableFromMetadata, compileDeclareInjectorFromMetadata, compileDeclareNgModuleFromMetadata, compileDeclarePipeFromMetadata, compileDirectiveFromMetadata, compileFactoryFunction, compileInjectable, compileInjector, compileNgModule, compilePipeFromMetadata, computeMsgId, core, createInjectableType, createMayBeForwardRefExpression, devOnlyGuardedExpression, emitDistinctChangesOnlyDefaultValue, findNode, getHtmlTagDefinition, getNsPrefix, getParseErrors, getSafePropertyAccessString, identifierName, isIdentifier, isNgContainer, isNgContent, isNgTemplate, isSyntaxError, jsDocComment, leadingComment, literalMap, makeBindingParser, mergeNsAndName, output_ast as outputAst, parseHostBindings, parseTemplate, preserveWhitespacesDefault, publishFacade, r3JitTypeSourceSpan, sanitizeIdentifier, splitNsName, syntaxError, verifyHostBindings, visitAll };\n"]},"metadata":{},"sourceType":"module"}