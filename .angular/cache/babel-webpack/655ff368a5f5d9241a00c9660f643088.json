{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Injectable } from '@angular/core';\nimport * as nearley from 'nearley';\nimport * as oracle_grammar from './../_parser/create-table-oracle-to-json';\n\nString.prototype.replaceAllDecimalCommaToDecimalDot = function () {\n  var regex = {\n    valueBtwParentheses: \"\\\\(([^)]*)\\\\)\",\n    onlyNumeric: \"(([0-9]+(\\\\,[0-9]+)?)(\\\\.[0-9]+)?)\"\n  };\n  return this.replace(/^\\((.+)\\)$/, '$1').replace(new RegExp(regex.valueBtwParentheses, \"g\"), function (currentString, first) {\n    var r = new RegExp(regex.onlyNumeric, 'g');\n\n    if (r.test(first)) {\n      return \"(\" + first.replace(/,/g, '.') + \")\";\n    }\n\n    return currentString;\n  });\n};\n\nvar CreateTableToJsonService = /*#__PURE__*/function () {\n  function CreateTableToJsonService() {\n    _classCallCheck(this, CreateTableToJsonService);\n\n    this._errors = {};\n    this.category = 'form';\n    this._customLabel = this.getCustomLabelName();\n    this._schemas = [];\n  }\n\n  _createClass(CreateTableToJsonService, [{\n    key: \"setDataBase\",\n    value: function setDataBase(database) {\n      this._database = database;\n    }\n  }, {\n    key: \"getDataBase\",\n    value: function getDataBase() {\n      return this._database;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      this._sql = this._sql.replace(/\\s+/g, \" \").toLowerCase();\n      var p = new nearley.Parser(oracle_grammar);\n      /*if(this.getDataBase() == 'mysql'){\r\n          p = new Parser('mysql');\r\n      }*/\n\n      try {\n        var options = {};\n        /*if(this.getDataBase() == 'mysql'){\r\n            const options = {};\r\n            p.feed(this._sql);\r\n            const parsedJsonFormat = p.results;\r\n            const compactJsonTablesArray = p.toCompactJson(parsedJsonFormat);\r\n            this._rawSchema = compactJsonTablesArray;\r\n            this.convertDataMysql();\r\n        }*/\n\n        if (this.getDataBase() == 'oracle') {\n          var results = p.feed(this._sql.replaceAllDecimalCommaToDecimalDot()).results;\n          this._rawSchema = results[0];\n          this.convertDataOracle();\n        }\n      } catch (error) {\n        //this._errors.push(error);\n        this._errors = this.reportError(error, p);\n      }\n    }\n  }, {\n    key: \"reportError\",\n    value: function reportError(e, parser) {\n      console.log(parser);\n\n      if (parser.table) {\n        var s = parser.lexer.buffer;\n        var i = s.lastIndexOf(\" \", parser.current);\n        var j = s.indexOf(\" \", i + 1);\n        console.log(s.substr(i, j - i)); //var afterbang = s.substring(parser.current, s.indexOf(' ', parser.current));\n        //console.log(afterbang);\n\n        var lastColumnIndex = parser.table.length - 2;\n        var lastColumn = parser.table[lastColumnIndex];\n        var token = parser.lexer.buffer[parser.current];\n        return {\n          title: \"You have an error in your SQL syntax.\",\n\n          /*msg: this.setCharAt(\r\n              parser.lexer.buffer,\r\n              parser.current,\r\n              token\r\n          )*/\n          msg: this.replaceBetween(parser.lexer.buffer, i, j, s.substr(i, j - i))\n        };\n      }\n\n      return {};\n    }\n  }, {\n    key: \"replaceBetween\",\n    value: function replaceBetween(str, start, end, what) {\n      return {\n        str: str,\n        strBegin: str.substring(0, start),\n        strMiddle: what,\n        strEnd: str.substring(end),\n        hue: str.substring(0, start) + what + str.substring(end)\n      };\n    }\n  }, {\n    key: \"convertDataMysql\",\n    value: function convertDataMysql() {\n      var _this = this;\n\n      if (this._rawSchema.length > 0) {\n        this._schemas = this._rawSchema.map(function (schema) {\n          var data = schema.columns.map(function (column) {\n            return {\n              html: {\n                category: _this.category,\n                tag: column.definition || 'text',\n                label: _this.customLabelName(column.name)\n              },\n              definition: column\n            };\n          });\n          var unique_keys = schema.uniqueKeys || [];\n          var primary_key = schema.primaryKey || [];\n          return {\n            name: schema.name,\n            data: data,\n            //columns: schema.columns,\n            primary_key: primary_key.columns.map(function (item) {\n              return item.column;\n            }),\n            unique_keys: unique_keys.map(function (item) {\n              return item.columns.map(function (d) {\n                return d.column;\n              });\n            }).map(function (item) {\n              return item[0];\n            })\n          };\n        });\n        console.log('schema', this._schemas);\n        console.log('rawSchema', this._rawSchema);\n      }\n    }\n  }, {\n    key: \"convertDataOracle\",\n    value: function convertDataOracle() {\n      var _this2 = this;\n\n      if (Array.isArray(this._rawSchema) && this._rawSchema.length > 0) {\n        this._rawSchema.forEach(function (schema) {\n          var data = [];\n          var definitions = [];\n          var primaryKey = [];\n          var create_table_statement = schema.create_table_statement;\n          var create_definition = schema.create_definition;\n          var last_create_definition = schema.last_create_definition;\n          _this2._table_name = create_table_statement.table_name;\n          create_definition.push(last_create_definition);\n          create_definition.forEach(function (column) {\n            var column_name = column.name;\n            var data_type = column.data_type;\n            var column_definition = column.column_definition;\n            var is_primary_key = false;\n            var options = {\n              nullable: true\n            };\n\n            if (column_definition instanceof Array && column_definition.length > 0) {\n              column_definition.forEach(function (c) {\n                if (typeof c.nullable != 'undefined') {\n                  options.nullable = c.nullable;\n                }\n\n                if (typeof c.values != 'undefined') {\n                  data_type.values = c.values;\n                }\n              });\n            }\n\n            if (is_primary_key) {\n              primaryKey.push({\n                column: column_name\n              });\n            }\n\n            var content = {\n              name: column_name,\n              type: data_type,\n              options: options,\n              html: {\n                category: _this2.category,\n                tag: data_type.tag,\n                label: _this2.customLabelName(column_name)\n              }\n            };\n            data.push(content);\n          });\n\n          _this2._schemas.push({\n            name: _this2._table_name,\n            data: data,\n            primaryKey: primaryKey,\n            definitions: definitions\n          });\n        });\n      }\n\n      console.log(this._schemas);\n    }\n  }, {\n    key: \"customLabelName\",\n    value: function customLabelName(column_name) {\n      var _this3 = this;\n\n      return column_name.split('_').map(function (partialName) {\n        var value = _this3._customLabel[partialName];\n        if (typeof value !== 'undefined') partialName = value;\n        return partialName.charAt(0).toUpperCase() + partialName.substr(1);\n      }).join(' ').trim();\n    }\n  }, {\n    key: \"hasError\",\n    value: function hasError() {\n      return Object.keys(this._errors).length > 0 ? true : false;\n    }\n  }, {\n    key: \"getError\",\n    value: function getError() {\n      return this._errors;\n    }\n  }, {\n    key: \"setSql\",\n    value: function setSql(sql) {\n      this._sql = sql;\n    }\n  }, {\n    key: \"getSchemas\",\n    value: function getSchemas() {\n      return this._schemas;\n    }\n  }, {\n    key: \"getRawData\",\n    value: function getRawData() {\n      return this._rawSchema;\n    }\n  }, {\n    key: \"getTableName\",\n    value: function getTableName() {\n      return this._table_name;\n    }\n  }, {\n    key: \"getCustomLabelName\",\n    value: function getCustomLabelName() {\n      return {\n        'dat': 'Data',\n        'qtd': 'Quantidade',\n        'cod': 'Código',\n        'dsc': 'Descrição',\n        'ind': '',\n        'usu': 'Usuário',\n        'tpo': 'Tipo',\n        'nom': 'Nome',\n        'est': 'Estado',\n        'acao': 'Ação',\n        'psv': 'Processo Seletivo',\n        'per': 'Porcentagem',\n        'abv': 'Abreviatura',\n        'obs': 'Observação',\n        'num': 'Número',\n        'usuario': 'Usuário',\n        'docto': 'Documento',\n        'doc': 'Documento',\n        'val': 'Valor',\n        'valor': 'Valor',\n        'sta': 'Status',\n        'config': 'Configuração',\n        'inicio': 'Ínicio',\n        'termino': 'Término',\n        'situacao': 'Situação',\n        'nivel': 'Nível'\n      };\n    }\n  }]);\n\n  return CreateTableToJsonService;\n}();\n\nCreateTableToJsonService.ctorParameters = function () {\n  return [];\n};\n\nCreateTableToJsonService = __decorate([Injectable({\n  providedIn: 'root'\n}), __metadata(\"design:paramtypes\", [])], CreateTableToJsonService);\nexport { CreateTableToJsonService };","map":{"version":3,"sources":["C:/dev/saltiest/src/app/_services/create-table-to-json.service.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","Injectable","nearley","oracle_grammar","String","prototype","replaceAllDecimalCommaToDecimalDot","regex","valueBtwParentheses","onlyNumeric","replace","RegExp","currentString","first","test","CreateTableToJsonService","_errors","category","_customLabel","getCustomLabelName","_schemas","database","_database","_sql","toLowerCase","p","Parser","options","getDataBase","results","feed","_rawSchema","convertDataOracle","error","reportError","e","parser","console","log","table","s","lexer","buffer","lastIndexOf","current","j","indexOf","substr","lastColumnIndex","lastColumn","token","title","msg","replaceBetween","str","start","end","what","strBegin","substring","strMiddle","strEnd","hue","map","schema","data","columns","column","html","tag","definition","label","customLabelName","name","unique_keys","uniqueKeys","primary_key","primaryKey","item","Array","isArray","forEach","definitions","create_table_statement","create_definition","last_create_definition","_table_name","table_name","push","column_name","data_type","column_definition","is_primary_key","nullable","values","content","type","split","partialName","value","charAt","toUpperCase","join","trim","keys","sql","ctorParameters","providedIn"],"mappings":";;;AAAA,IAAIA,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,IAAIQ,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC1D,MAAI,OAAON,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACO,QAAf,KAA4B,UAA/D,EAA2E,OAAOP,OAAO,CAACO,QAAR,CAAiBF,CAAjB,EAAoBC,CAApB,CAAP;AAC9E,CAFD;;AAGA,SAASE,UAAT,QAA2B,eAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,SAAzB;AACA,OAAO,KAAKC,cAAZ,MAAgC,0CAAhC;;AACAC,MAAM,CAACC,SAAP,CAAiBC,kCAAjB,GAAsD,YAAY;AAC9D,MAAIC,KAAK,GAAG;AACRC,IAAAA,mBAAmB,iBADX;AAERC,IAAAA,WAAW;AAFH,GAAZ;AAIA,SAAO,KAAKC,OAAL,CAAa,YAAb,EAA2B,IAA3B,EACFA,OADE,CACM,IAAIC,MAAJ,CAAWJ,KAAK,CAACC,mBAAjB,EAAsC,GAAtC,CADN,EACkD,UAACI,aAAD,EAAgBC,KAAhB,EAA0B;AAC/E,QAAIxB,CAAC,GAAG,IAAIsB,MAAJ,CAAWJ,KAAK,CAACE,WAAjB,EAA8B,GAA9B,CAAR;;AACA,QAAIpB,CAAC,CAACyB,IAAF,CAAOD,KAAP,CAAJ,EAAmB;AACf,aAAO,MAAMA,KAAK,CAACH,OAAN,CAAc,IAAd,EAAoB,GAApB,CAAN,GAAiC,GAAxC;AACH;;AACD,WAAOE,aAAP;AACH,GAPM,CAAP;AAQH,CAbD;;AAcA,IAAIG,wBAAwB;AACxB,sCAAc;AAAA;;AACV,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,QAAL,GAAgB,MAAhB;AACA,SAAKC,YAAL,GAAoB,KAAKC,kBAAL,EAApB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACH;;AANuB;AAAA;AAAA,WAOxB,qBAAYC,QAAZ,EAAsB;AAClB,WAAKC,SAAL,GAAiBD,QAAjB;AACH;AATuB;AAAA;AAAA,WAUxB,uBAAc;AACV,aAAO,KAAKC,SAAZ;AACH;AAZuB;AAAA;AAAA,WAaxB,iBAAQ;AACJ,WAAKC,IAAL,GAAY,KAAKA,IAAL,CAAUb,OAAV,CAAkB,MAAlB,EAA0B,GAA1B,EAA+Bc,WAA/B,EAAZ;AACA,UAAIC,CAAC,GAAG,IAAIvB,OAAO,CAACwB,MAAZ,CAAmBvB,cAAnB,CAAR;AACA;AACR;AACA;;AACQ,UAAI;AACA,YAAMwB,OAAO,GAAG,EAAhB;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AACY,YAAI,KAAKC,WAAL,MAAsB,QAA1B,EAAoC;AAChC,cAAMC,OAAO,GAAGJ,CAAC,CAACK,IAAF,CAAO,KAAKP,IAAL,CAAUjB,kCAAV,EAAP,EAAuDuB,OAAvE;AACA,eAAKE,UAAL,GAAkBF,OAAO,CAAC,CAAD,CAAzB;AACA,eAAKG,iBAAL;AACH;AACJ,OAfD,CAgBA,OAAOC,KAAP,EAAc;AACV;AACA,aAAKjB,OAAL,GAAe,KAAKkB,WAAL,CAAiBD,KAAjB,EAAwBR,CAAxB,CAAf;AACH;AACJ;AAvCuB;AAAA;AAAA,WAwCxB,qBAAYU,CAAZ,EAAeC,MAAf,EAAuB;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAIA,MAAM,CAACG,KAAX,EAAkB;AACd,YAAIC,CAAC,GAAGJ,MAAM,CAACK,KAAP,CAAaC,MAArB;AACA,YAAI/C,CAAC,GAAG6C,CAAC,CAACG,WAAF,CAAc,GAAd,EAAmBP,MAAM,CAACQ,OAA1B,CAAR;AACA,YAAIC,CAAC,GAAGL,CAAC,CAACM,OAAF,CAAU,GAAV,EAAenD,CAAC,GAAG,CAAnB,CAAR;AACA0C,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACO,MAAF,CAASpD,CAAT,EAAYkD,CAAC,GAAGlD,CAAhB,CAAZ,EAJc,CAKd;AACA;;AACA,YAAMqD,eAAe,GAAGZ,MAAM,CAACG,KAAP,CAAanD,MAAb,GAAsB,CAA9C;AACA,YAAM6D,UAAU,GAAGb,MAAM,CAACG,KAAP,CAAaS,eAAb,CAAnB;AACA,YAAME,KAAK,GAAGd,MAAM,CAACK,KAAP,CAAaC,MAAb,CAAoBN,MAAM,CAACQ,OAA3B,CAAd;AACA,eAAO;AACHO,UAAAA,KAAK,yCADF;;AAEH;AAChB;AACA;AACA;AACA;AACgBC,UAAAA,GAAG,EAAE,KAAKC,cAAL,CAAoBjB,MAAM,CAACK,KAAP,CAAaC,MAAjC,EAAyC/C,CAAzC,EAA4CkD,CAA5C,EAA+CL,CAAC,CAACO,MAAF,CAASpD,CAAT,EAAYkD,CAAC,GAAGlD,CAAhB,CAA/C;AAPF,SAAP;AASH;;AACD,aAAO,EAAP;AACH;AA/DuB;AAAA;AAAA,WAgExB,wBAAe2D,GAAf,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AAClC,aAAO;AACHH,QAAAA,GAAG,EAAEA,GADF;AAEHI,QAAAA,QAAQ,EAAEJ,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBJ,KAAjB,CAFP;AAGHK,QAAAA,SAAS,EAAEH,IAHR;AAIHI,QAAAA,MAAM,EAAEP,GAAG,CAACK,SAAJ,CAAcH,GAAd,CAJL;AAKHM,QAAAA,GAAG,EAAER,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBJ,KAAjB,IAA0BE,IAA1B,GAAiCH,GAAG,CAACK,SAAJ,CAAcH,GAAd;AALnC,OAAP;AAOH;AAxEuB;AAAA;AAAA,WAyExB,4BAAmB;AAAA;;AACf,UAAI,KAAKzB,UAAL,CAAgB3C,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,aAAKgC,QAAL,GAAgB,KAAKW,UAAL,CAAgBgC,GAAhB,CAAoB,UAAAC,MAAM,EAAI;AAC1C,cAAIC,IAAI,GAAGD,MAAM,CAACE,OAAP,CAAeH,GAAf,CAAmB,UAAAI,MAAM,EAAI;AACpC,mBAAO;AACHC,cAAAA,IAAI,EAAE;AACFnD,gBAAAA,QAAQ,EAAE,KAAI,CAACA,QADb;AAEFoD,gBAAAA,GAAG,EAAEF,MAAM,CAACG,UAAP,IAAqB,MAFxB;AAGFC,gBAAAA,KAAK,EAAE,KAAI,CAACC,eAAL,CAAqBL,MAAM,CAACM,IAA5B;AAHL,eADH;AAMHH,cAAAA,UAAU,EAAEH;AANT,aAAP;AAQH,WATU,CAAX;AAUA,cAAIO,WAAW,GAAGV,MAAM,CAACW,UAAP,IAAqB,EAAvC;AACA,cAAIC,WAAW,GAAGZ,MAAM,CAACa,UAAP,IAAqB,EAAvC;AACA,iBAAO;AACHJ,YAAAA,IAAI,EAAET,MAAM,CAACS,IADV;AAEHR,YAAAA,IAAI,EAAEA,IAFH;AAGH;AACAW,YAAAA,WAAW,EAAEA,WAAW,CAACV,OAAZ,CAAoBH,GAApB,CAAwB,UAAAe,IAAI;AAAA,qBAAIA,IAAI,CAACX,MAAT;AAAA,aAA5B,CAJV;AAKHO,YAAAA,WAAW,EAAEA,WAAW,CACnBX,GADQ,CACJ,UAAAe,IAAI;AAAA,qBAAIA,IAAI,CAACZ,OAAL,CAAaH,GAAb,CAAiB,UAAAvE,CAAC;AAAA,uBAAIA,CAAC,CAAC2E,MAAN;AAAA,eAAlB,CAAJ;AAAA,aADA,EAERJ,GAFQ,CAEJ,UAAAe,IAAI;AAAA,qBAAIA,IAAI,CAAC,CAAD,CAAR;AAAA,aAFA;AALV,WAAP;AASH,SAtBe,CAAhB;AAuBAzC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,KAAKlB,QAA3B;AACAiB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,KAAKP,UAA9B;AACH;AACJ;AArGuB;AAAA;AAAA,WAsGxB,6BAAoB;AAAA;;AAChB,UAAIgD,KAAK,CAACC,OAAN,CAAc,KAAKjD,UAAnB,KAAkC,KAAKA,UAAL,CAAgB3C,MAAhB,GAAyB,CAA/D,EAAkE;AAC9D,aAAK2C,UAAL,CAAgBkD,OAAhB,CAAwB,UAAAjB,MAAM,EAAI;AAC9B,cAAIC,IAAI,GAAG,EAAX;AACA,cAAIiB,WAAW,GAAG,EAAlB;AACA,cAAIL,UAAU,GAAG,EAAjB;AACA,cAAMM,sBAAsB,GAAGnB,MAAM,CAACmB,sBAAtC;AACA,cAAMC,iBAAiB,GAAGpB,MAAM,CAACoB,iBAAjC;AACA,cAAMC,sBAAsB,GAAGrB,MAAM,CAACqB,sBAAtC;AACA,UAAA,MAAI,CAACC,WAAL,GAAmBH,sBAAsB,CAACI,UAA1C;AACAH,UAAAA,iBAAiB,CAACI,IAAlB,CAAuBH,sBAAvB;AACAD,UAAAA,iBAAiB,CAACH,OAAlB,CAA0B,UAAAd,MAAM,EAAI;AAChC,gBAAMsB,WAAW,GAAGtB,MAAM,CAACM,IAA3B;AACA,gBAAMiB,SAAS,GAAGvB,MAAM,CAACuB,SAAzB;AACA,gBAAMC,iBAAiB,GAAGxB,MAAM,CAACwB,iBAAjC;AACA,gBAAMC,cAAc,GAAG,KAAvB;AACA,gBAAIjE,OAAO,GAAG;AACVkE,cAAAA,QAAQ,EAAE;AADA,aAAd;;AAGA,gBAAIF,iBAAiB,YAAYZ,KAA7B,IAAsCY,iBAAiB,CAACvG,MAAlB,GAA2B,CAArE,EAAwE;AACpEuG,cAAAA,iBAAiB,CAACV,OAAlB,CAA0B,UAAA/F,CAAC,EAAI;AAC3B,oBAAI,OAAOA,CAAC,CAAC2G,QAAT,IAAqB,WAAzB,EAAsC;AAClClE,kBAAAA,OAAO,CAACkE,QAAR,GAAmB3G,CAAC,CAAC2G,QAArB;AACH;;AACD,oBAAI,OAAO3G,CAAC,CAAC4G,MAAT,IAAmB,WAAvB,EAAoC;AAChCJ,kBAAAA,SAAS,CAACI,MAAV,GAAmB5G,CAAC,CAAC4G,MAArB;AACH;AACJ,eAPD;AAQH;;AACD,gBAAIF,cAAJ,EAAoB;AAChBf,cAAAA,UAAU,CAACW,IAAX,CAAgB;AACZrB,gBAAAA,MAAM,EAAEsB;AADI,eAAhB;AAGH;;AACD,gBAAIM,OAAO,GAAG;AACVtB,cAAAA,IAAI,EAAEgB,WADI;AAEVO,cAAAA,IAAI,EAAEN,SAFI;AAGV/D,cAAAA,OAAO,EAAEA,OAHC;AAIVyC,cAAAA,IAAI,EAAE;AACFnD,gBAAAA,QAAQ,EAAE,MAAI,CAACA,QADb;AAEFoD,gBAAAA,GAAG,EAAEqB,SAAS,CAACrB,GAFb;AAGFE,gBAAAA,KAAK,EAAE,MAAI,CAACC,eAAL,CAAqBiB,WAArB;AAHL;AAJI,aAAd;AAUAxB,YAAAA,IAAI,CAACuB,IAAL,CAAUO,OAAV;AACH,WAlCD;;AAmCA,UAAA,MAAI,CAAC3E,QAAL,CAAcoE,IAAd,CAAmB;AACff,YAAAA,IAAI,EAAE,MAAI,CAACa,WADI;AAEfrB,YAAAA,IAAI,EAAEA,IAFS;AAGfY,YAAAA,UAAU,EAAEA,UAHG;AAIfK,YAAAA,WAAW,EAAEA;AAJE,WAAnB;AAMH,SAlDD;AAmDH;;AACD7C,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,QAAjB;AACH;AA7JuB;AAAA;AAAA,WA8JxB,yBAAgBqE,WAAhB,EAA6B;AAAA;;AACzB,aAAOA,WAAW,CACbQ,KADE,CACI,GADJ,EAEFlC,GAFE,CAEE,UAAAmC,WAAW,EAAI;AACpB,YAAIC,KAAK,GAAG,MAAI,CAACjF,YAAL,CAAkBgF,WAAlB,CAAZ;AACA,YAAI,OAAOC,KAAP,KAAiB,WAArB,EACID,WAAW,GAAGC,KAAd;AACJ,eAAOD,WAAW,CAACE,MAAZ,CAAmB,CAAnB,EAAsBC,WAAtB,KAAsCH,WAAW,CAACnD,MAAZ,CAAmB,CAAnB,CAA7C;AACH,OAPM,EAQFuD,IARE,CAQG,GARH,EASFC,IATE,EAAP;AAUH;AAzKuB;AAAA;AAAA,WA0KxB,oBAAW;AACP,aAAOjH,MAAM,CAACkH,IAAP,CAAY,KAAKxF,OAAjB,EAA0B5B,MAA1B,GAAmC,CAAnC,GAAuC,IAAvC,GAA8C,KAArD;AACH;AA5KuB;AAAA;AAAA,WA6KxB,oBAAW;AACP,aAAO,KAAK4B,OAAZ;AACH;AA/KuB;AAAA;AAAA,WAgLxB,gBAAOyF,GAAP,EAAY;AACR,WAAKlF,IAAL,GAAYkF,GAAZ;AACH;AAlLuB;AAAA;AAAA,WAmLxB,sBAAa;AACT,aAAO,KAAKrF,QAAZ;AACH;AArLuB;AAAA;AAAA,WAsLxB,sBAAa;AACT,aAAO,KAAKW,UAAZ;AACH;AAxLuB;AAAA;AAAA,WAyLxB,wBAAe;AACX,aAAO,KAAKuD,WAAZ;AACH;AA3LuB;AAAA;AAAA,WA4LxB,8BAAqB;AACjB,aAAO;AACH,eAAO,MADJ;AAEH,eAAO,YAFJ;AAGH,eAAO,QAHJ;AAIH,eAAO,WAJJ;AAKH,eAAO,EALJ;AAMH,eAAO,SANJ;AAOH,eAAO,MAPJ;AAQH,eAAO,MARJ;AASH,eAAO,QATJ;AAUH,gBAAQ,MAVL;AAWH,eAAO,mBAXJ;AAYH,eAAO,aAZJ;AAaH,eAAO,aAbJ;AAcH,eAAO,YAdJ;AAeH,eAAO,QAfJ;AAgBH,mBAAW,SAhBR;AAiBH,iBAAS,WAjBN;AAkBH,eAAO,WAlBJ;AAmBH,eAAO,OAnBJ;AAoBH,iBAAS,OApBN;AAqBH,eAAO,QArBJ;AAsBH,kBAAU,cAtBP;AAuBH,kBAAU,QAvBP;AAwBH,mBAAW,SAxBR;AAyBH,oBAAY,UAzBT;AA0BH,iBAAS;AA1BN,OAAP;AA4BH;AAzNuB;;AAAA;AAAA,GAA5B;;AA2NAvE,wBAAwB,CAAC2F,cAAzB,GAA0C;AAAA,SAAM,EAAN;AAAA,CAA1C;;AACA3F,wBAAwB,GAAGlC,UAAU,CAAC,CAClCoB,UAAU,CAAC;AACP0G,EAAAA,UAAU,EAAE;AADL,CAAD,CADwB,EAIlC9G,UAAU,CAAC,mBAAD,EAAsB,EAAtB,CAJwB,CAAD,EAKlCkB,wBALkC,CAArC;AAMA,SAASA,wBAAT","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport * as nearley from 'nearley';\r\nimport * as oracle_grammar from './../_parser/create-table-oracle-to-json';\r\nString.prototype.replaceAllDecimalCommaToDecimalDot = function () {\r\n    let regex = {\r\n        valueBtwParentheses: `\\\\(([^)]*)\\\\)`,\r\n        onlyNumeric: `(([0-9]+(\\\\,[0-9]+)?)(\\\\.[0-9]+)?)`\r\n    };\r\n    return this.replace(/^\\((.+)\\)$/, '$1')\r\n        .replace(new RegExp(regex.valueBtwParentheses, \"g\"), (currentString, first) => {\r\n        let r = new RegExp(regex.onlyNumeric, 'g');\r\n        if (r.test(first)) {\r\n            return \"(\" + first.replace(/,/g, '.') + \")\";\r\n        }\r\n        return currentString;\r\n    });\r\n};\r\nlet CreateTableToJsonService = class CreateTableToJsonService {\r\n    constructor() {\r\n        this._errors = {};\r\n        this.category = 'form';\r\n        this._customLabel = this.getCustomLabelName();\r\n        this._schemas = [];\r\n    }\r\n    setDataBase(database) {\r\n        this._database = database;\r\n    }\r\n    getDataBase() {\r\n        return this._database;\r\n    }\r\n    parse() {\r\n        this._sql = this._sql.replace(/\\s+/g, \" \").toLowerCase();\r\n        let p = new nearley.Parser(oracle_grammar);\r\n        /*if(this.getDataBase() == 'mysql'){\r\n            p = new Parser('mysql');\r\n        }*/\r\n        try {\r\n            const options = {};\r\n            /*if(this.getDataBase() == 'mysql'){\r\n                const options = {};\r\n                p.feed(this._sql);\r\n                const parsedJsonFormat = p.results;\r\n                const compactJsonTablesArray = p.toCompactJson(parsedJsonFormat);\r\n                this._rawSchema = compactJsonTablesArray;\r\n                this.convertDataMysql();\r\n            }*/\r\n            if (this.getDataBase() == 'oracle') {\r\n                const results = p.feed(this._sql.replaceAllDecimalCommaToDecimalDot()).results;\r\n                this._rawSchema = results[0];\r\n                this.convertDataOracle();\r\n            }\r\n        }\r\n        catch (error) {\r\n            //this._errors.push(error);\r\n            this._errors = this.reportError(error, p);\r\n        }\r\n    }\r\n    reportError(e, parser) {\r\n        console.log(parser);\r\n        if (parser.table) {\r\n            var s = parser.lexer.buffer;\r\n            var i = s.lastIndexOf(\" \", parser.current);\r\n            var j = s.indexOf(\" \", i + 1);\r\n            console.log(s.substr(i, j - i));\r\n            //var afterbang = s.substring(parser.current, s.indexOf(' ', parser.current));\r\n            //console.log(afterbang);\r\n            const lastColumnIndex = parser.table.length - 2;\r\n            const lastColumn = parser.table[lastColumnIndex];\r\n            const token = parser.lexer.buffer[parser.current];\r\n            return {\r\n                title: `You have an error in your SQL syntax.`,\r\n                /*msg: this.setCharAt(\r\n                    parser.lexer.buffer,\r\n                    parser.current,\r\n                    token\r\n                )*/\r\n                msg: this.replaceBetween(parser.lexer.buffer, i, j, s.substr(i, j - i))\r\n            };\r\n        }\r\n        return {};\r\n    }\r\n    replaceBetween(str, start, end, what) {\r\n        return {\r\n            str: str,\r\n            strBegin: str.substring(0, start),\r\n            strMiddle: what,\r\n            strEnd: str.substring(end),\r\n            hue: str.substring(0, start) + what + str.substring(end)\r\n        };\r\n    }\r\n    convertDataMysql() {\r\n        if (this._rawSchema.length > 0) {\r\n            this._schemas = this._rawSchema.map(schema => {\r\n                let data = schema.columns.map(column => {\r\n                    return {\r\n                        html: {\r\n                            category: this.category,\r\n                            tag: column.definition || 'text',\r\n                            label: this.customLabelName(column.name)\r\n                        },\r\n                        definition: column\r\n                    };\r\n                });\r\n                let unique_keys = schema.uniqueKeys || [];\r\n                let primary_key = schema.primaryKey || [];\r\n                return {\r\n                    name: schema.name,\r\n                    data: data,\r\n                    //columns: schema.columns,\r\n                    primary_key: primary_key.columns.map(item => item.column),\r\n                    unique_keys: unique_keys\r\n                        .map(item => item.columns.map(d => d.column))\r\n                        .map(item => item[0]),\r\n                };\r\n            });\r\n            console.log('schema', this._schemas);\r\n            console.log('rawSchema', this._rawSchema);\r\n        }\r\n    }\r\n    convertDataOracle() {\r\n        if (Array.isArray(this._rawSchema) && this._rawSchema.length > 0) {\r\n            this._rawSchema.forEach(schema => {\r\n                let data = [];\r\n                let definitions = [];\r\n                let primaryKey = [];\r\n                const create_table_statement = schema.create_table_statement;\r\n                const create_definition = schema.create_definition;\r\n                const last_create_definition = schema.last_create_definition;\r\n                this._table_name = create_table_statement.table_name;\r\n                create_definition.push(last_create_definition);\r\n                create_definition.forEach(column => {\r\n                    const column_name = column.name;\r\n                    const data_type = column.data_type;\r\n                    const column_definition = column.column_definition;\r\n                    const is_primary_key = false;\r\n                    let options = {\r\n                        nullable: true\r\n                    };\r\n                    if (column_definition instanceof Array && column_definition.length > 0) {\r\n                        column_definition.forEach(c => {\r\n                            if (typeof c.nullable != 'undefined') {\r\n                                options.nullable = c.nullable;\r\n                            }\r\n                            if (typeof c.values != 'undefined') {\r\n                                data_type.values = c.values;\r\n                            }\r\n                        });\r\n                    }\r\n                    if (is_primary_key) {\r\n                        primaryKey.push({\r\n                            column: column_name\r\n                        });\r\n                    }\r\n                    var content = {\r\n                        name: column_name,\r\n                        type: data_type,\r\n                        options: options,\r\n                        html: {\r\n                            category: this.category,\r\n                            tag: data_type.tag,\r\n                            label: this.customLabelName(column_name)\r\n                        }\r\n                    };\r\n                    data.push(content);\r\n                });\r\n                this._schemas.push({\r\n                    name: this._table_name,\r\n                    data: data,\r\n                    primaryKey: primaryKey,\r\n                    definitions: definitions\r\n                });\r\n            });\r\n        }\r\n        console.log(this._schemas);\r\n    }\r\n    customLabelName(column_name) {\r\n        return column_name\r\n            .split('_')\r\n            .map(partialName => {\r\n            let value = this._customLabel[partialName];\r\n            if (typeof value !== 'undefined')\r\n                partialName = value;\r\n            return partialName.charAt(0).toUpperCase() + partialName.substr(1);\r\n        })\r\n            .join(' ')\r\n            .trim();\r\n    }\r\n    hasError() {\r\n        return Object.keys(this._errors).length > 0 ? true : false;\r\n    }\r\n    getError() {\r\n        return this._errors;\r\n    }\r\n    setSql(sql) {\r\n        this._sql = sql;\r\n    }\r\n    getSchemas() {\r\n        return this._schemas;\r\n    }\r\n    getRawData() {\r\n        return this._rawSchema;\r\n    }\r\n    getTableName() {\r\n        return this._table_name;\r\n    }\r\n    getCustomLabelName() {\r\n        return {\r\n            'dat': 'Data',\r\n            'qtd': 'Quantidade',\r\n            'cod': 'Código',\r\n            'dsc': 'Descrição',\r\n            'ind': '',\r\n            'usu': 'Usuário',\r\n            'tpo': 'Tipo',\r\n            'nom': 'Nome',\r\n            'est': 'Estado',\r\n            'acao': 'Ação',\r\n            'psv': 'Processo Seletivo',\r\n            'per': 'Porcentagem',\r\n            'abv': 'Abreviatura',\r\n            'obs': 'Observação',\r\n            'num': 'Número',\r\n            'usuario': 'Usuário',\r\n            'docto': 'Documento',\r\n            'doc': 'Documento',\r\n            'val': 'Valor',\r\n            'valor': 'Valor',\r\n            'sta': 'Status',\r\n            'config': 'Configuração',\r\n            'inicio': 'Ínicio',\r\n            'termino': 'Término',\r\n            'situacao': 'Situação',\r\n            'nivel': 'Nível'\r\n        };\r\n    }\r\n};\r\nCreateTableToJsonService.ctorParameters = () => [];\r\nCreateTableToJsonService = __decorate([\r\n    Injectable({\r\n        providedIn: 'root'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], CreateTableToJsonService);\r\nexport { CreateTableToJsonService };\r\n"]},"metadata":{},"sourceType":"module"}