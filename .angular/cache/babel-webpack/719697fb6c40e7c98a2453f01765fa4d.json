{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport __NG_CLI_RESOURCE__0 from \"./config-choices.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./config-choices.component.css?ngResource\";\nimport { Component, ChangeDetectorRef } from '@angular/core';\nimport { HtmlElementService } from '../shared/services/html-element.service';\nimport { DragulaService } from 'ng2-dragula';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConfigChoiceFormComponent } from './config-choice-form/config-choice-form.component';\nimport { Location } from '@angular/common';\nimport { CHOICE_TYPE } from '../_core/consts/choice-type.const';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap, map, filter, switchMap, startWith, distinctUntilChanged, debounceTime, delay } from 'rxjs/operators';\nimport { ContentChoiceItemService } from '../shared/services/content-choice-item.service';\nimport { FormControl } from '@angular/forms';\n\nvar ConfigChoicesComponent = /*#__PURE__*/function () {\n  function ConfigChoicesComponent(htmlElementService, dragulaService, router, modalService, cd, location, contentChoiceItemService, activatedRoute) {\n    _classCallCheck(this, ConfigChoicesComponent);\n\n    this.htmlElementService = htmlElementService;\n    this.dragulaService = dragulaService;\n    this.router = router;\n    this.modalService = modalService;\n    this.cd = cd;\n    this.location = location;\n    this.contentChoiceItemService = contentChoiceItemService;\n    this.activatedRoute = activatedRoute;\n    this.queryField = new FormControl();\n    this.options = {\n      size: 'lg',\n      backdrop: 'static',\n      keyboard: false,\n      centered: true\n    };\n    this.loadingSubject = new BehaviorSubject(false);\n    this.loading$ = this.loadingSubject.asObservable();\n  }\n\n  _createClass(ConfigChoicesComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this.choiceTypes = CHOICE_TYPE; //this.activatedRoute.queryParams.subscribe(x => this.loadPage(x.page || 1));\n\n      this.choices$ = this.queryField.valueChanges.pipe(startWith(''), delay(0), map(function (value) {\n        return value.trim();\n      }), distinctUntilChanged(), tap(function (value) {\n        if (value.length > 1 || value == '') {\n          _this.loadingSubject.next(true);\n        }\n      }), filter(function (value) {\n        if (value == '' || value.length > 1) {\n          return true;\n        }\n\n        return false;\n      }), debounceTime(1000), switchMap(function (value) {\n        console.log('value', value);\n\n        if (value == '') {\n          return _this.htmlElementService.getOptionChoices();\n        }\n\n        return _this.htmlElementService.getOptionChoices().pipe(tap(function (d) {\n          console.log('jogos', d);\n        }), map(function (result) {\n          var paginateData = result.paginate.data;\n          var newData = [];\n          paginateData.forEach(function (data) {\n            if (data.description.toLowerCase().includes(value.toLowerCase())) {\n              newData.push(data);\n            }\n          });\n          console.log('paginateData', paginateData, 'newData', newData);\n          result.paginate.data = newData;\n          return result;\n        }));\n      }), tap(function () {\n        _this.loadingSubject.next(false);\n      }));\n    }\n  }, {\n    key: \"edit\",\n    value: function edit() {\n      var _this2 = this;\n\n      var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (content == null) {\n        content = {\n          description: \"\",\n          html: {\n            category: \"form\",\n            content_choice_id: null,\n            content_html_tag_id: 2,\n            choices: [],\n            group: \"\",\n            label: \"Type your Text\",\n            tag: \"radio\"\n          }\n        };\n      }\n\n      var modal = this.modalService.open(ConfigChoiceFormComponent, this.options);\n      modal.componentInstance.content = content;\n      modal.componentInstance.index = index;\n      modal.componentInstance.emitData.subscribe(function ($e) {\n        if ($e.choices.length > 0) {\n          var groups = $e.choices.map(function (choice) {\n            return choice.text;\n          });\n          _this2.choices$ = _this2.choices$.pipe(map(function (result) {\n            if (index == null) {\n              content.html.choices = $e.choices;\n              content.description = groups.join('|');\n              result.paginate.data.push(content);\n              return result;\n            }\n\n            result.paginate.data[index].html.choices = $e.choices;\n            return result;\n          }), tap(function (x) {\n            return console.log(x);\n          }));\n        }\n\n        modal.dismiss();\n      });\n    }\n  }, {\n    key: \"loadPage\",\n    value: function loadPage(page) {\n      this.choices$ = this.htmlElementService.getOptionChoices();\n      /*this.choices$ = this.htmlElementService\r\n      //.queryParams({ page: page })\r\n      .getStaticOptionChoices()\r\n      .pipe(\r\n          map(result => {\r\n              return result.paginate;\r\n          })\r\n      );*/\n\n      /*this.htmlElementService.queryParams({\r\n          page: page\r\n      }).subscribe(result => {\r\n          this.choices = result.paginate;\r\n      });*/\n    }\n  }, {\n    key: \"pageChange\",\n    value: function pageChange($e) {\n      var navigationExtras = {\n        queryParams: {\n          'page': $e\n        }\n      }; // Navigate to the login page with extras\n\n      this.router.navigate([], navigationExtras);\n    }\n  }, {\n    key: \"getChoiceType\",\n    value: function getChoiceType(tag) {\n      return this.choiceTypes[tag.toUpperCase()];\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.dragulaService.destroy('pages');\n      this.dragulaService.destroy('contents');\n      this.dragulaService.destroy('columns');\n      this.dragulaService.destroy('rowSortable');\n      this.dragulaService.destroy('sortableElements');\n    }\n  }, {\n    key: \"setchoiceType\",\n    value: function setchoiceType(content, choiceType) {\n      content.html.tag = choiceType.type;\n    }\n  }]);\n\n  return ConfigChoicesComponent;\n}();\n\nConfigChoicesComponent.ctorParameters = function () {\n  return [{\n    type: HtmlElementService\n  }, {\n    type: DragulaService\n  }, {\n    type: Router\n  }, {\n    type: NgbModal\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Location\n  }, {\n    type: ContentChoiceItemService\n  }, {\n    type: ActivatedRoute\n  }];\n};\n\nConfigChoicesComponent = __decorate([Component({\n  selector: 'app-config-choices',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n}), __metadata(\"design:paramtypes\", [HtmlElementService, DragulaService, Router, NgbModal, ChangeDetectorRef, Location, ContentChoiceItemService, ActivatedRoute])], ConfigChoicesComponent);\nexport { ConfigChoicesComponent };","map":{"version":3,"sources":["C:/dev/saltiest/src/app/config-choices/config-choices.component.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","Component","ChangeDetectorRef","HtmlElementService","DragulaService","Router","ActivatedRoute","NgbModal","ConfigChoiceFormComponent","Location","CHOICE_TYPE","BehaviorSubject","tap","map","filter","switchMap","startWith","distinctUntilChanged","debounceTime","delay","ContentChoiceItemService","FormControl","ConfigChoicesComponent","htmlElementService","dragulaService","router","modalService","cd","location","contentChoiceItemService","activatedRoute","queryField","options","size","backdrop","keyboard","centered","loadingSubject","loading$","asObservable","choiceTypes","choices$","valueChanges","pipe","value","trim","next","console","log","getOptionChoices","result","paginateData","paginate","data","newData","forEach","description","toLowerCase","includes","push","content","index","html","category","content_choice_id","content_html_tag_id","choices","group","label","tag","modal","open","componentInstance","emitData","subscribe","$e","groups","choice","text","join","x","dismiss","page","navigationExtras","queryParams","navigate","toUpperCase","destroy","choiceType","type","ctorParameters","selector","template","styles"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport __NG_CLI_RESOURCE__0 from \"./config-choices.component.html?ngResource\";\r\nimport __NG_CLI_RESOURCE__1 from \"./config-choices.component.css?ngResource\";\r\nimport { Component, ChangeDetectorRef } from '@angular/core';\r\nimport { HtmlElementService } from '../shared/services/html-element.service';\r\nimport { DragulaService } from 'ng2-dragula';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ConfigChoiceFormComponent } from './config-choice-form/config-choice-form.component';\r\nimport { Location } from '@angular/common';\r\nimport { CHOICE_TYPE } from '../_core/consts/choice-type.const';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { tap, map, filter, switchMap, startWith, distinctUntilChanged, debounceTime, delay } from 'rxjs/operators';\r\nimport { ContentChoiceItemService } from '../shared/services/content-choice-item.service';\r\nimport { FormControl } from '@angular/forms';\r\nlet ConfigChoicesComponent = class ConfigChoicesComponent {\r\n    constructor(htmlElementService, dragulaService, router, modalService, cd, location, contentChoiceItemService, activatedRoute) {\r\n        this.htmlElementService = htmlElementService;\r\n        this.dragulaService = dragulaService;\r\n        this.router = router;\r\n        this.modalService = modalService;\r\n        this.cd = cd;\r\n        this.location = location;\r\n        this.contentChoiceItemService = contentChoiceItemService;\r\n        this.activatedRoute = activatedRoute;\r\n        this.queryField = new FormControl();\r\n        this.options = {\r\n            size: 'lg',\r\n            backdrop: 'static',\r\n            keyboard: false,\r\n            centered: true\r\n        };\r\n        this.loadingSubject = new BehaviorSubject(false);\r\n        this.loading$ = this.loadingSubject.asObservable();\r\n    }\r\n    ngOnInit() {\r\n        this.choiceTypes = CHOICE_TYPE;\r\n        //this.activatedRoute.queryParams.subscribe(x => this.loadPage(x.page || 1));\r\n        this.choices$ = this.queryField\r\n            .valueChanges\r\n            .pipe(startWith(''), delay(0), map(value => value.trim()), distinctUntilChanged(), tap((value) => {\r\n            if (value.length > 1 || value == '') {\r\n                this.loadingSubject.next(true);\r\n            }\r\n        }), filter(value => {\r\n            if (value == '' || value.length > 1) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }), debounceTime(1000), switchMap((value) => {\r\n            console.log('value', value);\r\n            if (value == '') {\r\n                return this.htmlElementService\r\n                    .getOptionChoices();\r\n            }\r\n            return this.htmlElementService\r\n                .getOptionChoices()\r\n                .pipe(tap((d) => {\r\n                console.log('jogos', d);\r\n            }), map((result) => {\r\n                const paginateData = result.paginate.data;\r\n                let newData = [];\r\n                paginateData.forEach((data) => {\r\n                    if ((data.description.toLowerCase()).includes(value.toLowerCase())) {\r\n                        newData.push(data);\r\n                    }\r\n                });\r\n                console.log('paginateData', paginateData, 'newData', newData);\r\n                result.paginate.data = newData;\r\n                return result;\r\n            }));\r\n        }), tap(() => {\r\n            this.loadingSubject.next(false);\r\n        }));\r\n    }\r\n    edit(content = null, index = null) {\r\n        if (content == null) {\r\n            content = {\r\n                description: \"\",\r\n                html: {\r\n                    category: \"form\",\r\n                    content_choice_id: null,\r\n                    content_html_tag_id: 2,\r\n                    choices: [],\r\n                    group: \"\",\r\n                    label: \"Type your Text\",\r\n                    tag: \"radio\"\r\n                }\r\n            };\r\n        }\r\n        const modal = this.modalService.open(ConfigChoiceFormComponent, this.options);\r\n        modal.componentInstance.content = content;\r\n        modal.componentInstance.index = index;\r\n        modal.componentInstance.emitData\r\n            .subscribe($e => {\r\n            if ($e.choices.length > 0) {\r\n                const groups = $e.choices.map(choice => choice.text);\r\n                this.choices$ = this.choices$\r\n                    .pipe(map((result) => {\r\n                    if (index == null) {\r\n                        content.html.choices = $e.choices;\r\n                        content.description = groups.join('|');\r\n                        result.paginate.data.push(content);\r\n                        return result;\r\n                    }\r\n                    result.paginate.data[index].html.choices = $e.choices;\r\n                    return result;\r\n                }), tap(x => console.log(x)));\r\n            }\r\n            modal.dismiss();\r\n        });\r\n    }\r\n    loadPage(page) {\r\n        this.choices$ = this.htmlElementService\r\n            .getOptionChoices();\r\n        /*this.choices$ = this.htmlElementService\r\n        //.queryParams({ page: page })\r\n        .getStaticOptionChoices()\r\n        .pipe(\r\n            map(result => {\r\n                return result.paginate;\r\n            })\r\n        );*/\r\n        /*this.htmlElementService.queryParams({\r\n            page: page\r\n        }).subscribe(result => {\r\n            this.choices = result.paginate;\r\n        });*/\r\n    }\r\n    pageChange($e) {\r\n        let navigationExtras = {\r\n            queryParams: {\r\n                'page': $e\r\n            }\r\n        };\r\n        // Navigate to the login page with extras\r\n        this.router.navigate([], navigationExtras);\r\n    }\r\n    getChoiceType(tag) {\r\n        return this.choiceTypes[tag.toUpperCase()];\r\n    }\r\n    ngOnDestroy() {\r\n        this.dragulaService.destroy('pages');\r\n        this.dragulaService.destroy('contents');\r\n        this.dragulaService.destroy('columns');\r\n        this.dragulaService.destroy('rowSortable');\r\n        this.dragulaService.destroy('sortableElements');\r\n    }\r\n    setchoiceType(content, choiceType) {\r\n        content.html.tag = choiceType.type;\r\n    }\r\n};\r\nConfigChoicesComponent.ctorParameters = () => [\r\n    { type: HtmlElementService },\r\n    { type: DragulaService },\r\n    { type: Router },\r\n    { type: NgbModal },\r\n    { type: ChangeDetectorRef },\r\n    { type: Location },\r\n    { type: ContentChoiceItemService },\r\n    { type: ActivatedRoute }\r\n];\r\nConfigChoicesComponent = __decorate([\r\n    Component({\r\n        selector: 'app-config-choices',\r\n        template: __NG_CLI_RESOURCE__0,\r\n        styles: [__NG_CLI_RESOURCE__1]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [HtmlElementService,\r\n        DragulaService,\r\n        Router,\r\n        NgbModal,\r\n        ChangeDetectorRef,\r\n        Location,\r\n        ContentChoiceItemService,\r\n        ActivatedRoute])\r\n], ConfigChoicesComponent);\r\nexport { ConfigChoicesComponent };\r\n"]},"metadata":{},"sourceType":"module"}