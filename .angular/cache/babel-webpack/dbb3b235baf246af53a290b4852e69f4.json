{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport __NG_CLI_RESOURCE__0 from \"./migration.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./migration.component.css?ngResource\";\nimport { Component, Injectable } from '@angular/core';\nimport { SnakeCaseToCamelCasePipe } from '../shared/pipes/snake-case-to-camel-case.pipe';\n\nvar Laravel = /*#__PURE__*/function () {\n  function Laravel() {\n    _classCallCheck(this, Laravel);\n\n    this.tableName = '';\n    this.mysql = {\n      INT: \"integer('#columnName')#unsigned\",\n      BIGINT: \"bigInteger('#columnName')#unsigned\",\n      BLOB: \"binary\",\n      BOOLEAN: \"boolean\",\n      CHAR: \"char('#columnName', #length)\",\n      DATE: \"date('#columnName')\",\n      DATETIME: \"dateTime('#columnName')\",\n      //DATETIME: dateTimeTz('created_at'),\n      DECIMAL: \"decimal('#columnName', #total_digits_comma_decimal_digits)#unsigned\",\n      DOUBLE: \"double('#columnName', #total_digits_comma_decimal_digits)\",\n      ENUM: \"enum('#columnName', #array)\",\n      FLOAT: \"float('#columnName', #total_digits_comma_decimal_digits)\",\n      GEOMETRY: \"geometry('#columnName')\",\n      GEOMETRYCOLLECTION: \"geometryCollection('#columnName')\",\n      //INTEGER: increments('id'),\n      INTEGER: \"integer('#columnName')#unsigned\",\n      IP: \"ipAddress('#columnName')\",\n      JSON: \"json('#columnName')\",\n      JSONB: \"jsonb('#columnName')\",\n      LINESTRING: \"lineString('#columnName')\",\n      LONGTEXT: \"longText('#columnName')\",\n      MAC: \"macAddress('#columnName')\",\n      MEDIUMINT: \"mediumInteger('#columnName')#unsigned\",\n      //MEDIUMINT: mediumInteger('votes')`,\n      MEDIUMTEXT: \"mediumText('#columnName')\",\n      //BIGINT: morphs('taggable')`,\n      //CHAR: uuidMorphs('taggable')`,\n      MULTILINESTRING: \"multiLineString('#columnName')\",\n      MULTIPOINT: \"multiPoint('#columnName')\",\n      MULTIPOLYGON: \"multiPolygon('#columnName')\",\n      morphs: \"nullableMorphs('#columnName')\",\n      nullable: \"nullableUuidMorphs('#columnName')\",\n      timestamps: \"nullableTimestamps()\",\n      POINT: \"point('#columnName')\",\n      POLYGON: \"polygon('#columnName')\",\n      //rememberToken(),\n      SET: \"set('#columnName', #array)\",\n      //SMALLINT: `smallIncrements('#columnName')#unsigned`,\n      SMALLINT: \"smallInteger('#columnName')#unsigned\",\n      //TIMESTAMP: `softDeletes()`,\n      //TIMESTAMP: softDeletesTz(),\n      VARCHAR: \"string('#columnName', #length)\",\n      TEXT: \"text('#columnName')\",\n      TIME: \"time('#columnName')\",\n      //TIME: `timeTz('sunrise')`,\n      TIMESTAMP: \"timestamp('#columnName')\",\n      //TIMESTAMP: timestampTz('added_on')`,\n      //TIMESTAMP: timestamps()`,\n      //TIMESTAMP: timestampsTz()`,\n      //TINYINT: `tinyIncrements('#columnName')#unsigned`,\n      TINYINT: \"tinyInteger('#columnName')#unsigned\",\n      UUID: \"uuid('#columnName')\",\n      YEAR: \"year('#columnName')\"\n    };\n    this.schema = [];\n  }\n\n  _createClass(Laravel, [{\n    key: \"setParams\",\n    value: function setParams(content) {\n      this.content = content;\n    }\n  }, {\n    key: \"setSchema\",\n    value: function setSchema(schema) {\n      this.schema = schema;\n    }\n  }, {\n    key: \"getRules\",\n    value: function getRules() {\n      var basic = {\n        radio: ['nullable'],\n        checkbox: ['nullable'],\n        select: ['nullable'],\n        number: ['nullable', 'numeric'],\n        date: ['nullable', 'date_format:\"d/m/Y\"'],\n        text: ['nullable', 'string'],\n        textarea: ['nullable', 'string']\n      };\n      var tag = this.content.html.tag.toLowerCase();\n\n      if (typeof basic[tag] != 'undefined') {\n        basic[tag][0] = this.isRequired();\n        basic[tag].push(this.size());\n        var newBasic = basic[tag].filter(function (el) {\n          return el != \"\" && el != null;\n        });\n        return [\"\\\"\".concat(this.content.name, \"\\\" => \").concat(JSON.stringify(newBasic))].join(\",\");\n      }\n\n      return [\"\".concat(this.content.name, \" => \").concat(JSON.stringify(basic[tag]))].join(\",\");\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      if (this.content && this.content.type && this.content.type.length) {\n        var size = this.content.type.length;\n\n        if (size != null && size != '') {\n          var list = {\n            number: \"digits_between:1,\".concat(size),\n            date: 'max:' + size,\n            text: 'max:' + size,\n            radio: 'max:' + size,\n            checkbox: 'max:' + size,\n            select: 'max:' + size,\n            textarea: 'max:' + size\n          };\n          return list[this.content.html.tag];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var _this = this;\n\n      this.schema.init = {\n        fillable: [],\n        rules: [],\n        attributes: [],\n        request: []\n      };\n\n      if (this.schema.data.length > 0) {\n        this.schema.data.forEach(function (current) {\n          _this.setParams(current);\n\n          _this.schema.init.fillable.push(current.definition.name);\n\n          _this.schema.init.request.push(\"\\\"\".concat(current.name, \"\\\" => $request->\").concat(current.name));\n\n          _this.schema.init.attributes.push(\"'\".concat(current.name, \"' => '\").concat(current.html.label, \"'\"));\n\n          _this.schema.init.rules.push(_this.getRules());\n        });\n      }\n\n      return {\n        framework: {\n          validator: this.validator(),\n          controller: this.controller(),\n          model: this.model(),\n          migration: this.migration()\n        }\n      };\n    }\n  }, {\n    key: \"model\",\n    value: function model() {\n      return \"\\n\\t\\t<?php\\n\\n\\t\\tnamespace App;\\n\\t\\t\\n\\t\\tuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n\\t \\n\\t\\tclass \".concat(this.schema.name, \" extends Model {\\n\\t\\t\\tprotected $table      = '\").concat(this.schema.name, \"';\\n\\t\\t\\tprotected $primaryKey = \").concat(typeof this.schema.primary_key != 'undefined' ? this.schema.primary_key.length > 1 ? \"[\" + 'this.schema.primary_key' + \"]\" : 'this.schema.primary_key[0]' : '', \";\\n\\t\\t\\tpublic $incrementing  = true; \\n\\t\\t\\t\\n\\t\\t\\tprotected $fillable = [\\n\\t\\t\\t\\t\").concat(this.schema.data.map(function (d) {\n        return \"'\".concat(d.name, \"'\");\n      }), \"\\n\\t\\t\\t];\\n\\t\\t}\\n\\t\\t\");\n    }\n  }, {\n    key: \"controller\",\n    value: function controller() {\n      return \"\\n\\t\\t<?php\\n\\n\\t\\tnamespace App\\\\Http\\\\Controllers;\\n\\t\\t\\n\\t\\tuse Illuminate\\\\Http\\\\Request;\\n\\t\\tuse App\\\\\".concat(this.schema.name, \";\\n\\t\\tuse App\\\\Http\\\\Requests\\\\\").concat(this.schema.name, \"Request;\\n\\n\\t\\tclass \").concat(this.schema.name, \"Controller extends Controller\\n\\t\\t{\\n\\t\\t\\t/**\\n\\t\\t\\t* Display a listing of the resource.\\n\\t\\t\\t*\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function index()\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$result = \").concat(this.schema.name, \"::all();\\n\\n\\t\\t\\t\\treturn view('\").concat(this.schema.name, \".index', compact('result'));\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Show the form for creating a new resource.\\n\\t\\t\\t*\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function create()\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\treturn view('\").concat(this.schema.name, \".create');\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Store a newly created resource in storage.\\n\\t\\t\\t*\\n\\t\\t\\t* @param  \\\\Illuminate\\\\Http\\\\Request  $request\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function store(\").concat(this.schema.name, \"Request $request)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$r = \").concat(this.schema.name, \"::create([\\n\\t\\t\\t\\t\\t\").concat(this.schema.init.request.join(\"\\n\"), \"\\n\\t\\t\\t\\t]);\\n\\n\\t\\t\\t\\treturn response()\\n\\t\\t\\t\\t\\t->route('\").concat(this.schema.name, \".create')\\n\\t\\t\\t\\t\\t->json([\\n\\t\\t\\t\\t\\t\\t'success' => true\\n\\t\\t\\t\\t\\t]);\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Display the specified resource.\\n\\t\\t\\t*\\n\\t\\t\\t* @param  int  $id\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function show($id)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$result = \").concat(this.schema.name, \"::find($id);\\n\\n\\t\\t\\t\\treturn view('\").concat(this.schema.name, \".show', compact('result'));\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Show the form for editing the specified resource.\\n\\t\\t\\t*\\n\\t\\t\\t* @param  int  $id\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function edit($id)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$result = \").concat(this.schema.name, \"::find($id);\\n\\n\\t\\t\\t\\treturn view('\").concat(this.schema.name, \".edit', compact('result'));\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Update the specified resource in storage.\\n\\t\\t\\t*\\n\\t\\t\\t* @param  \\\\Illuminate\\\\Http\\\\Request $request\\n\\t\\t\\t* @param  int  $id\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function update(\").concat(this.schema.name, \"Request $request, $id)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$result = \").concat(this.schema.name, \"::find($id);\\n\\t\\t\\t\\t\\t\\t->update(\\n\\t\\t\\t\\t\\t\\t\\t\").concat(this.schema.init.request.join(\"\\n\"), \"\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t/**\\n\\t\\t\\t* Remove the specified resource from storage.\\n\\t\\t\\t*\\n\\t\\t\\t* @param  int  $id\\n\\t\\t\\t* @return \\\\Illuminate\\\\Http\\\\Response\\n\\t\\t\\t*/\\n\\t\\t\\tpublic function destroy($id)\\n\\t\\t\\t{\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t$result = \").concat(this.schema.name, \"::find($id);\\n\\t\\t\\t\\t$result->delete();\\n\\t\\t\\n\\t\\t\\t\\treturn redirect()\\n\\t\\t\\t\\t\\t->route('\").concat(this.schema.name, \".show', $id)\\n\\t\\t\\t\\t\\t->with('success', true);\\n\\t\\t\\t}\\n\\t\\t}\\t\\t\\n\\t\\t\");\n    }\n  }, {\n    key: \"validator\",\n    value: function validator() {\n      return \"\\n\\t\\t/**\\n\\t\\t * Determine if the user is authorized to make this request.\\n\\t\\t *\\n\\t\\t * @return bool\\n\\t\\t*/\\n\\t\\tpublic function authorize(){\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\n\\t\\tpublic function rules(){\\n\\t\\t\\t$rules = [\\n\\t\\t\\t\\t\".concat(this.schema.init.rules.join(\"\\n\"), \"\\n\\t\\t\\t];\\n\\t\\t\\n\\t\\t\\treturn $rules;\\n\\t\\t}\\n\\t\\n\\t\\t/**\\n\\t\\t * Get the validation rules that apply to the request.\\n\\t\\t *\\n\\t\\t * @return array\\n\\t\\t */\\n\\t\\tpublic function attributes(){\\n\\t\\t\\t$attributes = [\\n\\t\\t\\t\\t\").concat(this.schema.init.attributes.join(\"\\n\"), \"\\n\\t\\t\\t];\\n\\t\\t\\treturn $attributes;\\n\\t\\t}\\t\\t\\n\\t\\t\");\n    }\n  }, {\n    key: \"migration\",\n    value: function migration() {\n      var _this2 = this;\n\n      var $table = [];\n      var autoIncrement = {\n        INT: \"increments('#columnName')\",\n        BIGINT: \"bigIncrements('#columnName')\",\n        MEDIUMINT: \"mediumIncrements('#columnName')\",\n        SMALLINT: \"smallIncrements('#columnName')\",\n        TINYINT: \"tinyIncrements('#columnName')\"\n      };\n      var tableName = this.schema.name;\n      var schemaCreate = '';\n      $table = this.schema.data.map(function (item) {\n        var _values = '';\n        var _nullable = '';\n        var _unsigned = '';\n        var column = item;\n\n        var _dataType = column.type.datatype.toUpperCase();\n\n        var _type = _this2.mysql[column.type.datatype.toUpperCase()];\n\n        _type = _type.replace(/#unsigned/g, '');\n\n        if (typeof _type == 'undefined') {\n          _type = \"\".concat(_dataType, \"('#columnName')\");\n        }\n\n        if (column.options && column.options.autoincrement) {\n          Object.keys(autoIncrement).forEach(function (dataType) {\n            if (_dataType == dataType) {\n              _type = autoIncrement[dataType];\n            }\n          });\n        }\n\n        if (_type) {\n          _type = _type.replace(/#columnName/g, column.name);\n        }\n\n        if (column.options) {\n          if (column.options.nullable) {\n            _nullable = '->nullable()';\n          }\n\n          if (column.options.unsigned) {\n            _unsigned = '->unsigned()';\n          }\n        }\n\n        if (column.type) {\n          if (column.type.values) {\n            _values = JSON.stringify(column.type.values);\n            _type = _type.replace(/#array/g, _values);\n          }\n\n          if (column.type.length) {\n            if (column.type.length != '') {\n              _type = _type.replace(/#length/g, column.type.length);\n            }\n          }\n\n          if (column.type.decimals || column.type.digits) {\n            var total_digits_comma_decimal_digits = column.type.digits + ', ' + column.type.decimals;\n            _type = _type.replace(/#total_digits_comma_decimal_digits/g, total_digits_comma_decimal_digits);\n          }\n        }\n\n        return \"$table->\".concat(_type).concat(_unsigned).concat(_nullable, \";\");\n      });\n\n      if (this.schema.primary_key) {\n        if (this.schema.primary_key.length > 0) {\n          var pkColumns = this.schema.primary_key.map(function (item) {\n            return item.column;\n          });\n          $table.push(\"$table->primary(\".concat(JSON.stringify(pkColumns), \")\"));\n        }\n      }\n\n      if (this.schema.unirque_keys) {\n        if (this.schema.unirque_keys.length > 0) {\n          var ukColumns = [];\n          this.schema.unirque_keys.forEach(function (schemaUk) {\n            schemaUk.columns.map(function (uk) {\n              return ukColumns.push(uk.column);\n            });\n          });\n          $table.push(\"$table->unique(\".concat(JSON.stringify(ukColumns), \");\"));\n        }\n      }\n\n      if (this.schema.foreign_keys) {\n        if (this.schema.foreign_keys.length > 0) {\n          this.schema.foreign_keys.forEach(function (fk) {\n            var foreign = '';\n            var reference = '';\n            fk.columns.forEach(function (fk) {\n              foreign = \"foreign('\".concat(fk.column, \"')\");\n            });\n            fk.reference.columns.forEach(function (ref) {\n              reference = \"references('\".concat(ref.column, \"')->on('\").concat(fk.reference.table, \"')\");\n            });\n            $table.push(\"$table->\".concat(foreign, \"->\").concat(reference));\n          });\n        }\n      }\n\n      schemaCreate = \"\\n\\t\\tSchema::create('\".concat(tableName, \"', function (Blueprint $table) {\\n\\t\\t\\t\").concat($table.join(\"\\n\"), \"\\n\\t\\t});\");\n      return \"\\n\\t\\t\\t<?php\\n\\n\\t\\t\\tuse IlluminateSupportFacadesSchema;\\n\\t\\t\\tuse IlluminateDatabaseSchemaBlueprint;\\n\\t\\t\\tuse IlluminateDatabaseMigrationsMigration;\\n\\t\\t\\t\\n\\t\\t\\tclass Create\".concat(tableName, \"Table extends Migration\\n\\t\\t\\t{\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Run the migrations.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @return void\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tpublic function up()\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\").concat(schemaCreate, \"\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Reverse the migrations.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @return void\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tpublic function down()\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tSchema::drop('\").concat(tableName, \"');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\");\n    }\n  }, {\n    key: \"isRequired\",\n    value: function isRequired() {\n      if (this.content && this.content.options) {\n        return this.content.options.nullable ? 'nullable' : 'required';\n      }\n\n      return 'nullable';\n    }\n  }, {\n    key: \"setTableName\",\n    value: function setTableName(tableName) {\n      this.tableName = tableName;\n    }\n  }, {\n    key: \"getMessages\",\n    value: function getMessages() {\n      return this.messages;\n    }\n  }]);\n\n  return Laravel;\n}();\n\nLaravel.ctorParameters = function () {\n  return [];\n};\n\nLaravel = __decorate([Injectable({\n  providedIn: 'root'\n}), __metadata(\"design:paramtypes\", [])], Laravel);\nexport { Laravel };\n\nvar MigrationComponent = /*#__PURE__*/function () {\n  function MigrationComponent(snakeCaseToCamelCase, laravel) {\n    _classCallCheck(this, MigrationComponent);\n\n    this.snakeCaseToCamelCase = snakeCaseToCamelCase;\n    this.laravel = laravel;\n  }\n\n  _createClass(MigrationComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {}\n  }, {\n    key: \"getSchemas\",\n    value: function getSchemas($schemas) {\n      var _this3 = this;\n\n      this.schemas = $schemas;\n      this.schemas.map(function (schema) {\n        _this3.laravel.setSchema(schema);\n\n        schema.framework = _this3.laravel.get().framework;\n        return schema;\n      });\n      console.log(this.schemas);\n    }\n  }]);\n\n  return MigrationComponent;\n}();\n\nMigrationComponent.ctorParameters = function () {\n  return [{\n    type: SnakeCaseToCamelCasePipe\n  }, {\n    type: Laravel\n  }];\n};\n\nMigrationComponent = __decorate([Component({\n  selector: 'app-migration',\n  template: __NG_CLI_RESOURCE__0,\n  providers: [SnakeCaseToCamelCasePipe],\n  styles: [__NG_CLI_RESOURCE__1]\n}), __metadata(\"design:paramtypes\", [SnakeCaseToCamelCasePipe, Laravel])], MigrationComponent);\nexport { MigrationComponent };","map":{"version":3,"sources":["C:/dev/saltiest/src/app/migration/migration.component.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","Component","Injectable","SnakeCaseToCamelCasePipe","Laravel","tableName","mysql","INT","BIGINT","BLOB","BOOLEAN","CHAR","DATE","DATETIME","DECIMAL","DOUBLE","ENUM","FLOAT","GEOMETRY","GEOMETRYCOLLECTION","INTEGER","IP","JSON","JSONB","LINESTRING","LONGTEXT","MAC","MEDIUMINT","MEDIUMTEXT","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","morphs","nullable","timestamps","POINT","POLYGON","SET","SMALLINT","VARCHAR","TEXT","TIME","TIMESTAMP","TINYINT","UUID","YEAR","schema","content","basic","radio","checkbox","select","number","date","text","textarea","tag","html","toLowerCase","isRequired","push","size","newBasic","filter","el","name","stringify","join","type","list","init","fillable","rules","attributes","request","data","forEach","current","setParams","definition","label","getRules","framework","validator","controller","model","migration","primary_key","map","$table","autoIncrement","schemaCreate","item","_values","_nullable","_unsigned","column","_dataType","datatype","toUpperCase","_type","replace","options","autoincrement","keys","dataType","unsigned","values","decimals","digits","total_digits_comma_decimal_digits","pkColumns","unirque_keys","ukColumns","schemaUk","columns","uk","foreign_keys","fk","foreign","reference","ref","table","messages","ctorParameters","providedIn","MigrationComponent","snakeCaseToCamelCase","laravel","$schemas","schemas","setSchema","get","console","log","selector","template","providers","styles"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport __NG_CLI_RESOURCE__0 from \"./migration.component.html?ngResource\";\r\nimport __NG_CLI_RESOURCE__1 from \"./migration.component.css?ngResource\";\r\nimport { Component, Injectable } from '@angular/core';\r\nimport { SnakeCaseToCamelCasePipe } from '../shared/pipes/snake-case-to-camel-case.pipe';\r\nlet Laravel = class Laravel {\r\n    constructor() {\r\n        this.tableName = '';\r\n        this.mysql = {\r\n            INT: `integer('#columnName')#unsigned`,\r\n            BIGINT: `bigInteger('#columnName')#unsigned`,\r\n            BLOB: `binary`,\r\n            BOOLEAN: `boolean`,\r\n            CHAR: `char('#columnName', #length)`,\r\n            DATE: `date('#columnName')`,\r\n            DATETIME: `dateTime('#columnName')`,\r\n            //DATETIME: dateTimeTz('created_at'),\r\n            DECIMAL: `decimal('#columnName', #total_digits_comma_decimal_digits)#unsigned`,\r\n            DOUBLE: `double('#columnName', #total_digits_comma_decimal_digits)`,\r\n            ENUM: `enum('#columnName', #array)`,\r\n            FLOAT: `float('#columnName', #total_digits_comma_decimal_digits)`,\r\n            GEOMETRY: `geometry('#columnName')`,\r\n            GEOMETRYCOLLECTION: `geometryCollection('#columnName')`,\r\n            //INTEGER: increments('id'),\r\n            INTEGER: `integer('#columnName')#unsigned`,\r\n            IP: `ipAddress('#columnName')`,\r\n            JSON: `json('#columnName')`,\r\n            JSONB: `jsonb('#columnName')`,\r\n            LINESTRING: `lineString('#columnName')`,\r\n            LONGTEXT: `longText('#columnName')`,\r\n            MAC: `macAddress('#columnName')`,\r\n            MEDIUMINT: `mediumInteger('#columnName')#unsigned`,\r\n            //MEDIUMINT: mediumInteger('votes')`,\r\n            MEDIUMTEXT: `mediumText('#columnName')`,\r\n            //BIGINT: morphs('taggable')`,\r\n            //CHAR: uuidMorphs('taggable')`,\r\n            MULTILINESTRING: `multiLineString('#columnName')`,\r\n            MULTIPOINT: `multiPoint('#columnName')`,\r\n            MULTIPOLYGON: `multiPolygon('#columnName')`,\r\n            morphs: `nullableMorphs('#columnName')`,\r\n            nullable: `nullableUuidMorphs('#columnName')`,\r\n            timestamps: `nullableTimestamps()`,\r\n            POINT: `point('#columnName')`,\r\n            POLYGON: `polygon('#columnName')`,\r\n            //rememberToken(),\r\n            SET: `set('#columnName', #array)`,\r\n            //SMALLINT: `smallIncrements('#columnName')#unsigned`,\r\n            SMALLINT: `smallInteger('#columnName')#unsigned`,\r\n            //TIMESTAMP: `softDeletes()`,\r\n            //TIMESTAMP: softDeletesTz(),\r\n            VARCHAR: `string('#columnName', #length)`,\r\n            TEXT: `text('#columnName')`,\r\n            TIME: `time('#columnName')`,\r\n            //TIME: `timeTz('sunrise')`,\r\n            TIMESTAMP: `timestamp('#columnName')`,\r\n            //TIMESTAMP: timestampTz('added_on')`,\r\n            //TIMESTAMP: timestamps()`,\r\n            //TIMESTAMP: timestampsTz()`,\r\n            //TINYINT: `tinyIncrements('#columnName')#unsigned`,\r\n            TINYINT: `tinyInteger('#columnName')#unsigned`,\r\n            UUID: `uuid('#columnName')`,\r\n            YEAR: `year('#columnName')`\r\n        };\r\n        this.schema = [];\r\n    }\r\n    setParams(content) {\r\n        this.content = content;\r\n    }\r\n    setSchema(schema) {\r\n        this.schema = schema;\r\n    }\r\n    getRules() {\r\n        var basic = {\r\n            radio: ['nullable'],\r\n            checkbox: ['nullable'],\r\n            select: ['nullable'],\r\n            number: ['nullable', 'numeric'],\r\n            date: ['nullable', 'date_format:\"d/m/Y\"'],\r\n            text: ['nullable', 'string'],\r\n            textarea: ['nullable', 'string']\r\n        };\r\n        var tag = this.content.html.tag.toLowerCase();\r\n        if (typeof basic[tag] != 'undefined') {\r\n            basic[tag][0] = this.isRequired();\r\n            basic[tag].push(this.size());\r\n            var newBasic = basic[tag].filter(el => {\r\n                return el != \"\" && el != null;\r\n            });\r\n            return [`\"${this.content.name}\" => ${JSON.stringify(newBasic)}`].join(\",\");\r\n        }\r\n        return [`${this.content.name} => ${JSON.stringify(basic[tag])}`].join(\",\");\r\n    }\r\n    size() {\r\n        if (this.content && this.content.type && this.content.type.length) {\r\n            var size = this.content.type.length;\r\n            if (size != null && size != '') {\r\n                var list = {\r\n                    number: `digits_between:1,${size}`,\r\n                    date: 'max:' + size,\r\n                    text: 'max:' + size,\r\n                    radio: 'max:' + size,\r\n                    checkbox: 'max:' + size,\r\n                    select: 'max:' + size,\r\n                    textarea: 'max:' + size,\r\n                };\r\n                return list[this.content.html.tag];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    get() {\r\n        this.schema.init = {\r\n            fillable: [],\r\n            rules: [],\r\n            attributes: [],\r\n            request: []\r\n        };\r\n        if (this.schema.data.length > 0) {\r\n            this.schema.data.forEach(current => {\r\n                this.setParams(current);\r\n                this.schema.init.fillable.push(current.definition.name);\r\n                this.schema.init.request.push(`\"${current.name}\" => $request->${current.name}`);\r\n                this.schema.init.attributes.push(`'${current.name}' => '${current.html.label}'`);\r\n                this.schema.init.rules.push(this.getRules());\r\n            });\r\n        }\r\n        return {\r\n            framework: {\r\n                validator: this.validator(),\r\n                controller: this.controller(),\r\n                model: this.model(),\r\n                migration: this.migration()\r\n            }\r\n        };\r\n    }\r\n    model() {\r\n        return `\n\t\t<?php\n\n\t\tnamespace App;\n\t\t\n\t\tuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\n\t \n\t\tclass ${this.schema.name} extends Model {\n\t\t\tprotected $table      = '${this.schema.name}';\n\t\t\tprotected $primaryKey = ${typeof this.schema.primary_key != 'undefined'\r\n            ? this.schema.primary_key.length > 1\r\n                ? \"[\" + 'this.schema.primary_key' + \"]\"\r\n                : 'this.schema.primary_key[0]'\r\n            : ''};\n\t\t\tpublic $incrementing  = true; \n\t\t\t\n\t\t\tprotected $fillable = [\n\t\t\t\t${this.schema.data.map(d => `'${d.name}'`)}\n\t\t\t];\n\t\t}\n\t\t`;\r\n    }\r\n    controller() {\r\n        return `\n\t\t<?php\n\n\t\tnamespace App\\\\Http\\\\Controllers;\n\t\t\n\t\tuse Illuminate\\\\Http\\\\Request;\n\t\tuse App\\\\${this.schema.name};\n\t\tuse App\\\\Http\\\\Requests\\\\${this.schema.name}Request;\n\n\t\tclass ${this.schema.name}Controller extends Controller\n\t\t{\n\t\t\t/**\n\t\t\t* Display a listing of the resource.\n\t\t\t*\n\t\t\t* @return \\\\Illuminate\\\\Http\\\\Response\n\t\t\t*/\n\t\t\tpublic function index()\n\t\t\t{\n\t\t\t\t//\n\t\t\t\t$result = ${this.schema.name}::all();\n\n\t\t\t\treturn view('${this.schema.name}.index', compact('result'));\n\t\t\t}\n\t\t\n\t\t\t/**\n\t\t\t* Show the form for creating a new resource.\n\t\t\t*\n\t\t\t* @return \\\\Illuminate\\\\Http\\\\Response\n\t\t\t*/\n\t\t\tpublic function create()\n\t\t\t{\n\t\t\t\t//\n\t\t\t\treturn view('${this.schema.name}.create');\n\t\t\t}\n\t\t\n\t\t\t/**\n\t\t\t* Store a newly created resource in storage.\n\t\t\t*\n\t\t\t* @param  \\\\Illuminate\\\\Http\\\\Request  $request\n\t\t\t* @return \\\\Illuminate\\\\Http\\\\Response\n\t\t\t*/\n\t\t\tpublic function store(${this.schema.name}Request $request)\n\t\t\t{\n\t\t\t\t//\n\t\t\t\t$r = ${this.schema.name}::create([\n\t\t\t\t\t${this.schema.init.request.join(\"\\n\")}\n\t\t\t\t]);\n\n\t\t\t\treturn response()\n\t\t\t\t\t->route('${this.schema.name}.create')\n\t\t\t\t\t->json([\n\t\t\t\t\t\t'success' => true\n\t\t\t\t\t]);\n\t\t\t}\n\t\t\n\t\t\t/**\n\t\t\t* Display the specified resource.\n\t\t\t*\n\t\t\t* @param  int  $id\n\t\t\t* @return \\\\Illuminate\\\\Http\\\\Response\n\t\t\t*/\n\t\t\tpublic function show($id)\n\t\t\t{\n\t\t\t\t//\n\t\t\t\t$result = ${this.schema.name}::find($id);\n\n\t\t\t\treturn view('${this.schema.name}.show', compact('result'));\n\t\t\t}\n\t\t\n\t\t\t/**\n\t\t\t* Show the form for editing the specified resource.\n\t\t\t*\n\t\t\t* @param  int  $id\n\t\t\t* @return \\\\Illuminate\\\\Http\\\\Response\n\t\t\t*/\n\t\t\tpublic function edit($id)\n\t\t\t{\n\t\t\t\t//\n\t\t\t\t$result = ${this.schema.name}::find($id);\n\n\t\t\t\treturn view('${this.schema.name}.edit', compact('result'));\n\t\t\t}\n\t\t\n\t\t\t/**\n\t\t\t* Update the specified resource in storage.\n\t\t\t*\n\t\t\t* @param  \\\\Illuminate\\\\Http\\\\Request $request\n\t\t\t* @param  int  $id\n\t\t\t* @return \\\\Illuminate\\\\Http\\\\Response\n\t\t\t*/\n\t\t\tpublic function update(${this.schema.name}Request $request, $id)\n\t\t\t{\n\t\t\t\t//\n\t\t\t\t$result = ${this.schema.name}::find($id);\n\t\t\t\t\t\t->update(\n\t\t\t\t\t\t\t${this.schema.init.request.join(\"\\n\")}\n\t\t\t\t\t\t);\n\t\t\t}\n\t\t\n\t\t\t/**\n\t\t\t* Remove the specified resource from storage.\n\t\t\t*\n\t\t\t* @param  int  $id\n\t\t\t* @return \\\\Illuminate\\\\Http\\\\Response\n\t\t\t*/\n\t\t\tpublic function destroy($id)\n\t\t\t{\n\t\t\t\t//\n\t\t\t\t$result = ${this.schema.name}::find($id);\n\t\t\t\t$result->delete();\n\t\t\n\t\t\t\treturn redirect()\n\t\t\t\t\t->route('${this.schema.name}.show', $id)\n\t\t\t\t\t->with('success', true);\n\t\t\t}\n\t\t}\t\t\n\t\t`;\r\n    }\r\n    validator() {\r\n        return `\n\t\t/**\n\t\t * Determine if the user is authorized to make this request.\n\t\t *\n\t\t * @return bool\n\t\t*/\n\t\tpublic function authorize(){\n\t\t\treturn true;\n\t\t}\n\t\n\t\tpublic function rules(){\n\t\t\t$rules = [\n\t\t\t\t${this.schema.init.rules.join(\"\\n\")}\n\t\t\t];\n\t\t\n\t\t\treturn $rules;\n\t\t}\n\t\n\t\t/**\n\t\t * Get the validation rules that apply to the request.\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tpublic function attributes(){\n\t\t\t$attributes = [\n\t\t\t\t${this.schema.init.attributes.join(\"\\n\")}\n\t\t\t];\n\t\t\treturn $attributes;\n\t\t}\t\t\n\t\t`;\r\n    }\r\n    migration() {\r\n        let $table = [];\r\n        const autoIncrement = {\r\n            INT: `increments('#columnName')`,\r\n            BIGINT: `bigIncrements('#columnName')`,\r\n            MEDIUMINT: `mediumIncrements('#columnName')`,\r\n            SMALLINT: `smallIncrements('#columnName')`,\r\n            TINYINT: `tinyIncrements('#columnName')`,\r\n        };\r\n        let tableName = this.schema.name;\r\n        let schemaCreate = '';\r\n        $table = this.schema.data.map(item => {\r\n            let _values = '';\r\n            let _nullable = '';\r\n            let _unsigned = '';\r\n            let column = item;\r\n            let _dataType = column.type.datatype.toUpperCase();\r\n            let _type = this.mysql[column.type.datatype.toUpperCase()];\r\n            _type = _type.replace(/#unsigned/g, '');\r\n            if (typeof _type == 'undefined') {\r\n                _type = `${_dataType}('#columnName')`;\r\n            }\r\n            if (column.options && column.options.autoincrement) {\r\n                Object.keys(autoIncrement).forEach(dataType => {\r\n                    if (_dataType == dataType) {\r\n                        _type = autoIncrement[dataType];\r\n                    }\r\n                });\r\n            }\r\n            if (_type) {\r\n                _type = _type.replace(/#columnName/g, column.name);\r\n            }\r\n            if (column.options) {\r\n                if (column.options.nullable) {\r\n                    _nullable = '->nullable()';\r\n                }\r\n                if (column.options.unsigned) {\r\n                    _unsigned = '->unsigned()';\r\n                }\r\n            }\r\n            if (column.type) {\r\n                if (column.type.values) {\r\n                    _values = JSON.stringify(column.type.values);\r\n                    _type = _type.replace(/#array/g, _values);\r\n                }\r\n                if (column.type.length) {\r\n                    if (column.type.length != '') {\r\n                        _type = _type.replace(/#length/g, column.type.length);\r\n                    }\r\n                }\r\n                if (column.type.decimals || column.type.digits) {\r\n                    let total_digits_comma_decimal_digits = column.type.digits + ', ' + column.type.decimals;\r\n                    _type = _type.replace(/#total_digits_comma_decimal_digits/g, total_digits_comma_decimal_digits);\r\n                }\r\n            }\r\n            return `$table->${_type}${_unsigned}${_nullable};`;\r\n        });\r\n        if (this.schema.primary_key) {\r\n            if (this.schema.primary_key.length > 0) {\r\n                let pkColumns = this.schema.primary_key.map(item => item.column);\r\n                $table.push(`$table->primary(${JSON.stringify(pkColumns)})`);\r\n            }\r\n        }\r\n        if (this.schema.unirque_keys) {\r\n            if (this.schema.unirque_keys.length > 0) {\r\n                let ukColumns = [];\r\n                this.schema.unirque_keys.forEach(schemaUk => {\r\n                    schemaUk.columns.map(uk => ukColumns.push(uk.column));\r\n                });\r\n                $table.push(`$table->unique(${JSON.stringify(ukColumns)});`);\r\n            }\r\n        }\r\n        if (this.schema.foreign_keys) {\r\n            if (this.schema.foreign_keys.length > 0) {\r\n                this.schema.foreign_keys.forEach(fk => {\r\n                    let foreign = '';\r\n                    let reference = '';\r\n                    fk.columns.forEach(fk => {\r\n                        foreign = `foreign('${fk.column}')`;\r\n                    });\r\n                    fk.reference.columns.forEach(ref => {\r\n                        reference = `references('${ref.column}')->on('${fk.reference.table}')`;\r\n                    });\r\n                    $table.push(`$table->${foreign}->${reference}`);\r\n                });\r\n            }\r\n        }\r\n        schemaCreate = `\n\t\tSchema::create('${tableName}', function (Blueprint $table) {\n\t\t\t${$table.join(\"\\n\")}\n\t\t});`;\r\n        return `\n\t\t\t<?php\n\n\t\t\tuse Illuminate\\Support\\Facades\\Schema;\n\t\t\tuse Illuminate\\Database\\Schema\\Blueprint;\n\t\t\tuse Illuminate\\Database\\Migrations\\Migration;\n\t\t\t\n\t\t\tclass Create${tableName}Table extends Migration\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * Run the migrations.\n\t\t\t\t *\n\t\t\t\t * @return void\n\t\t\t\t */\n\t\t\t\tpublic function up()\n\t\t\t\t{\n\t\t\t\t\t${schemaCreate}\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/**\n\t\t\t\t * Reverse the migrations.\n\t\t\t\t *\n\t\t\t\t * @return void\n\t\t\t\t */\n\t\t\t\tpublic function down()\n\t\t\t\t{\n\t\t\t\t\tSchema::drop('${tableName}');\n\t\t\t\t}\n\t\t\t}`;\r\n    }\r\n    isRequired() {\r\n        if (this.content && this.content.options) {\r\n            return this.content.options.nullable ? 'nullable' : 'required';\r\n        }\r\n        return 'nullable';\r\n    }\r\n    setTableName(tableName) {\r\n        this.tableName = tableName;\r\n    }\r\n    getMessages() {\r\n        return this.messages;\r\n    }\r\n};\r\nLaravel.ctorParameters = () => [];\r\nLaravel = __decorate([\r\n    Injectable({\r\n        providedIn: 'root'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], Laravel);\r\nexport { Laravel };\r\nlet MigrationComponent = class MigrationComponent {\r\n    constructor(snakeCaseToCamelCase, laravel) {\r\n        this.snakeCaseToCamelCase = snakeCaseToCamelCase;\r\n        this.laravel = laravel;\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    getSchemas($schemas) {\r\n        this.schemas = $schemas;\r\n        this.schemas.map(schema => {\r\n            this.laravel.setSchema(schema);\r\n            schema.framework = this.laravel.get().framework;\r\n            return schema;\r\n        });\r\n        console.log(this.schemas);\r\n    }\r\n};\r\nMigrationComponent.ctorParameters = () => [\r\n    { type: SnakeCaseToCamelCasePipe },\r\n    { type: Laravel }\r\n];\r\nMigrationComponent = __decorate([\r\n    Component({\r\n        selector: 'app-migration',\r\n        template: __NG_CLI_RESOURCE__0,\r\n        providers: [SnakeCaseToCamelCasePipe],\r\n        styles: [__NG_CLI_RESOURCE__1]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [SnakeCaseToCamelCasePipe,\r\n        Laravel])\r\n], MigrationComponent);\r\nexport { MigrationComponent };\r\n"]},"metadata":{},"sourceType":"module"}