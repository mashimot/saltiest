{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { InjectionToken, Injectable, Inject, Optional, Directive, ElementRef, Renderer2, Input, Output, EventEmitter, NgModule, defineInjectable, inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { BehaviorSubject, from, of } from 'rxjs';\nimport { take, filter, tap, switchMap, map } from 'rxjs/operators';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nvar OPTIONS = new InjectionToken('OPTIONS');\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n\nvar HighlightJS = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} options\r\n   * @param {?} _document\r\n   */\n  function HighlightJS(options, _document) {\n    _classCallCheck(this, HighlightJS);\n\n    this._document = _document;\n    this.options = {\n      theme: 'github',\n      path: 'assets/lib/hljs',\n      auto: true\n    };\n    this._isReady$ = new BehaviorSubject(false);\n    this.options = Object.assign({}, this.options, options);\n\n    this._hljsLoader().subscribe();\n  } // Stream that emits when highlightjs is loaded\n\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(HighlightJS, [{\n    key: \"isReady\",\n    get: function get() {\n      return this._isReady$.pipe(filter(function (isReady) {\n        return isReady;\n      }), take(1));\n    }\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?} ignore_illegals\r\n     * @param {?=} continuation\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"highlight\",\n    value: function highlight(name, value, ignore_illegals, continuation) {\n      if (this.hljs) {\n        return this.hljs.highlight(name, value, ignore_illegals, continuation);\n      }\n    }\n    /**\r\n     * @param {?} value\r\n     * @param {?} languageSubset\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"highlightAuto\",\n    value: function highlightAuto(value, languageSubset) {\n      if (this.hljs) {\n        return this.hljs.highlightAuto(value, languageSubset);\n      }\n    }\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"fixMarkup\",\n    value: function fixMarkup(value) {\n      if (this.hljs) {\n        return this.hljs.fixMarkup(value);\n      }\n    }\n    /**\r\n     * @param {?} block\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"highlightBlock\",\n    value: function highlightBlock(block) {\n      if (this.hljs) {\n        this.hljs.highlightBlock(block);\n      }\n    }\n    /**\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"configure\",\n    value: function configure(config) {\n      if (this.hljs) {\n        this.hljs.configure(config);\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"initHighlighting\",\n    value: function initHighlighting() {\n      if (this.hljs) {\n        this.hljs.initHighlighting();\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"initHighlightingOnLoad\",\n    value: function initHighlightingOnLoad() {\n      if (this.hljs) {\n        this.hljs.initHighlightingOnLoad();\n      }\n    }\n    /**\r\n     * @param {?} name\r\n     * @param {?} language\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"registerLanguage\",\n    value: function registerLanguage(name, language) {\n      if (this.hljs) {\n        this.hljs.registerLanguage(name, language);\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"listLanguages\",\n    value: function listLanguages() {\n      if (this.hljs) {\n        return this.hljs.listLanguages();\n      }\n    }\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage(name) {\n      if (this.hljs) {\n        return this.hljs.getLanguage(name);\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"_hljsLoader\",\n    value: function _hljsLoader() {\n      if (this._document.defaultView.hljs) {\n        return this._initHLJS();\n      } else {\n        this._themeLoader().subscribe();\n\n        return this._loadScript();\n      }\n    }\n    /**\r\n     * Load hljs script\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"_loadScript\",\n    value: function _loadScript() {\n      var _this = this;\n\n      /** @type {?} */\n      var promise = new Promise(function (resolve) {\n        /** @type {?} */\n        var script = _this._document.createElement('script');\n\n        script.async = true;\n        script.type = 'text/javascript';\n        script.onload = resolve;\n        script.src = \"\".concat(_this.options.path, \"/highlight.pack.js\");\n\n        _this._document.head.appendChild(script);\n      });\n      return from(promise).pipe(switchMap(function () {\n        return _this._initHLJS();\n      }));\n    }\n    /**\r\n     * Load hljs theme\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"_themeLoader\",\n    value: function _themeLoader() {\n      var _this2 = this;\n\n      /** @type {?} */\n      var promise = new Promise(function (resolve) {\n        /** @type {?} */\n        var style = _this2._document.createElement('link');\n\n        style.rel = 'stylesheet';\n        style.type = 'text/css';\n        style.onload = resolve;\n        style.href = \"\".concat(_this2.options.path, \"/styles/\").concat(_this2.options.theme, \".css\");\n\n        _this2._document.head.appendChild(style);\n      });\n      return from(promise);\n    }\n    /**\r\n     * Initialize hljs on load\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"_initHLJS\",\n    value: function _initHLJS() {\n      var _this3 = this;\n\n      return of({}).pipe(tap(function () {\n        _this3.hljs = _this3._document.defaultView.hljs;\n\n        _this3.hljs.configure(_this3.options.config);\n\n        _this3._isReady$.next(true);\n      }));\n    }\n  }]);\n\n  return HighlightJS;\n}();\n\nHighlightJS.ɵfac = function HighlightJS_Factory(t) {\n  return new (t || HighlightJS)(ɵngcc0.ɵɵinject(OPTIONS, 8), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nHighlightJS.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HighlightJS,\n  factory: HighlightJS.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nHighlightJS.ngInjectableDef = defineInjectable({\n  factory: function HighlightJS_Factory() {\n    return new HighlightJS(inject(OPTIONS, 8), inject(DOCUMENT));\n  },\n  token: HighlightJS,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n\n/**\r\n * There are 2 ways to higlight a code\r\n *  1 - using the [code] input (default) <code highlight [code]=\"yourCode\"></code>\r\n *  2 - using element text content <code> {{yourCode}} </code>\r\n */\n\n\nvar HighlightDirective = /*#__PURE__*/(function () {\n  var HighlightDirective = /*#__PURE__*/function () {\n    /**\r\n     * @param {?} el\r\n     * @param {?} renderer\r\n     * @param {?} hljs\r\n     */\n    function HighlightDirective(el, renderer, hljs) {\n      _classCallCheck(this, HighlightDirective);\n\n      this.renderer = renderer;\n      this.hljs = hljs;\n      this.highlighted = new EventEmitter();\n      this.el = el.nativeElement;\n    }\n    /**\r\n     * @param {?} code\r\n     * @return {?}\r\n     */\n\n\n    _createClass(HighlightDirective, [{\n      key: \"setCode\",\n      set: function set(code) {\n        var _this4 = this;\n\n        this.code = code;\n        this.hljs.isReady.subscribe(function () {\n          return _this4.highlightElement(_this4.el, code);\n        });\n      }\n      /**\r\n       * @return {?}\r\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this5 = this;\n\n        /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used\r\n         * This will highlight using the text content */\n        if (!this.code && this.hljs.options.auto) {\n          this.hljs.isReady.subscribe(function () {\n            _this5.highlightTextContent();\n            /** Highlight when text content changes */\n\n\n            _this5.domObs = new MutationObserver(function () {\n              return _this5.highlightTextContent();\n            });\n\n            _this5.domObs.observe(_this5.el, {\n              childList: true,\n              subtree: true\n            });\n          });\n        }\n      }\n      /**\r\n       * Highlight using element text content\r\n       * @return {?}\r\n       */\n\n    }, {\n      key: \"highlightTextContent\",\n      value: function highlightTextContent() {\n        if (!this.highlight) {\n          if (this.el.tagName.toLowerCase() === 'code') {\n            this.highlightElement(this.el, this.el.innerText.trim());\n          } else {\n            console.warn(\"[HighlightDirective]: Use 'highlight' on <code> element only\");\n          }\n        } else if (this.highlight === 'all') {\n          this.highlightChildren(this.el, 'pre code');\n        } else {\n          this.highlightChildren(this.el, this.highlight);\n        }\n      }\n      /**\r\n       * Highlight a code block\r\n       * @param {?} el\r\n       * @param {?} code\r\n       * @return {?}\r\n       */\n\n    }, {\n      key: \"highlightElement\",\n      value: function highlightElement(el, code) {\n        /** @type {?} */\n        var res = this.hljs.highlightAuto(code, this.language);\n\n        if (res.value !== el.innerHTML) {\n          this.renderer.addClass(el, 'hljs');\n          this.renderer.setProperty(el, 'innerHTML', res.value);\n          this.highlighted.emit(res);\n        }\n      }\n      /**\r\n       * Highlight multiple code blocks\r\n       * @param {?} el\r\n       * @param {?} selector\r\n       * @return {?}\r\n       */\n\n    }, {\n      key: \"highlightChildren\",\n      value: function highlightChildren(el, selector) {\n        var _this6 = this;\n\n        /** @type {?} */\n        var codeElements = el.querySelectorAll(selector);\n        /** highlight children with the same selector */\n\n        from(codeElements).pipe(filter(function (code) {\n          return code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text';\n        }), map(function (codeElement) {\n          return _this6.highlightElement(codeElement, codeElement.innerText.trim());\n        }), take(1)).subscribe();\n      }\n      /**\r\n       * @return {?}\r\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        /** Disconnect MutationObserver */\n        if (!this.code && this.hljs.options.auto) {\n          this.domObs.disconnect();\n        }\n      }\n    }]);\n\n    return HighlightDirective;\n  }();\n\n  HighlightDirective.ɵfac = function HighlightDirective_Factory(t) {\n    return new (t || HighlightDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(HighlightJS));\n  };\n\n  HighlightDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: HighlightDirective,\n    selectors: [[\"\", \"highlight\", \"\"]],\n    inputs: {\n      setCode: [\"code\", \"setCode\"],\n      highlight: \"highlight\",\n      language: \"language\"\n    },\n    outputs: {\n      highlighted: \"highlighted\"\n    }\n  });\n  /** @nocollapse */\n\n  return HighlightDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n\n\nvar HighlightModule = /*#__PURE__*/(function () {\n  var HighlightModule = /*#__PURE__*/function () {\n    function HighlightModule() {\n      _classCallCheck(this, HighlightModule);\n    }\n\n    _createClass(HighlightModule, null, [{\n      key: \"forRoot\",\n      value:\n      /**\r\n       * @param {?=} options\r\n       * @return {?}\r\n       */\n      function forRoot(options) {\n        return {\n          ngModule: HighlightModule,\n          providers: [{\n            provide: OPTIONS,\n            useValue: options\n          }]\n        };\n      }\n    }]);\n\n    return HighlightModule;\n  }();\n\n  HighlightModule.ɵfac = function HighlightModule_Factory(t) {\n    return new (t || HighlightModule)();\n  };\n\n  HighlightModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: HighlightModule\n  });\n  HighlightModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return HighlightModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HighlightModule, {\n    declarations: [HighlightDirective],\n    exports: [HighlightDirective]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n\n\nexport { HighlightModule, HighlightJS, HighlightDirective, OPTIONS as ɵa }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}