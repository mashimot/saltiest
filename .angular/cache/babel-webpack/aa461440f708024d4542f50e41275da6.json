{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nvar FormContentConfigService = /*#__PURE__*/function () {\n  function FormContentConfigService() {\n    _classCallCheck(this, FormContentConfigService);\n\n    this.newFormConfigSubject = new Subject();\n    this.component = {\n      general: {\n        title: \"General Configuration\",\n        componentName: 'app-config-general'\n      },\n      choices: {\n        title: \"Choices\",\n        componentName: 'app-config-choices'\n      },\n      visibleIf: {\n        title: \"Vísivel Se\",\n        componentName: '<hide-when-tab content=\"content\"></hide-when-tab>'\n      },\n      htmlEditor: {\n        title: \"Html Editor\",\n        componentName: 'app-config-html-editor'\n      },\n      title: {\n        title: \"Title\",\n        componentName: 'app-config-title'\n      },\n      table: {\n        title: \"Table\",\n        componentName: 'app-config-table-builder'\n      },\n      img: {\n        title: \"Image\",\n        componentName: 'app-config-img'\n      }\n    };\n  }\n\n  _createClass(FormContentConfigService, [{\n    key: \"render\",\n    value: function render() {\n      return {\n        'h1': {\n          components: [this.component.title]\n        },\n        'h2': {\n          components: [this.component.title]\n        },\n        'h3': {\n          components: [this.component.title]\n        },\n        'h4': {\n          components: [this.component.title]\n        },\n        'h5': {\n          components: [this.component.title]\n        },\n        'h6': {\n          components: [this.component.title]\n        },\n        'legend': {\n          components: [this.component.title]\n        },\n        'radio': {\n          components: [this.component.general, this.component.choices]\n        },\n        'checkbox': {\n          components: [this.component.general, this.component.choices]\n        },\n        'select': {\n          components: [this.component.general, this.component.choices]\n        },\n        'textarea': {\n          components: [this.component.general]\n        },\n        'text': {\n          components: [this.component.general]\n        },\n        'number': {\n          components: [this.component.general]\n        },\n        'date': {\n          components: [this.component.general]\n        },\n        'image': {\n          components: [this.component.img]\n        },\n        'html': {\n          components: [this.component.htmlEditor]\n        },\n        'table': {\n          components: [this.component.table]\n        },\n        'file': {\n          components: [this.component.general]\n        }\n      };\n    }\n  }]);\n\n  return FormContentConfigService;\n}();\n\nFormContentConfigService.ctorParameters = function () {\n  return [];\n};\n\nFormContentConfigService = __decorate([Injectable({\n  providedIn: 'root'\n}), __metadata(\"design:paramtypes\", [])], FormContentConfigService);\nexport { FormContentConfigService };","map":{"version":3,"sources":["C:/dev/saltiest/src/app/_services/form-content-config.service.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","Injectable","Subject","FormContentConfigService","newFormConfigSubject","component","general","title","componentName","choices","visibleIf","htmlEditor","table","img","components","ctorParameters","providedIn"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nlet FormContentConfigService = class FormContentConfigService {\r\n    constructor() {\r\n        this.newFormConfigSubject = new Subject();\r\n        this.component = {\r\n            general: {\r\n                title: \"General Configuration\", componentName: 'app-config-general'\r\n            },\r\n            choices: {\r\n                title: \"Choices\", componentName: 'app-config-choices'\r\n            },\r\n            visibleIf: {\r\n                title: \"Vísivel Se\", componentName: '<hide-when-tab content=\"content\"></hide-when-tab>'\r\n            },\r\n            htmlEditor: {\r\n                title: \"Html Editor\", componentName: 'app-config-html-editor'\r\n            },\r\n            title: {\r\n                title: \"Title\", componentName: 'app-config-title'\r\n            },\r\n            table: {\r\n                title: \"Table\", componentName: 'app-config-table-builder'\r\n            },\r\n            img: {\r\n                title: \"Image\", componentName: 'app-config-img'\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return {\r\n            'h1': {\r\n                components: [this.component.title]\r\n            },\r\n            'h2': {\r\n                components: [this.component.title]\r\n            },\r\n            'h3': {\r\n                components: [this.component.title]\r\n            },\r\n            'h4': {\r\n                components: [this.component.title]\r\n            },\r\n            'h5': {\r\n                components: [this.component.title]\r\n            },\r\n            'h6': {\r\n                components: [this.component.title]\r\n            },\r\n            'legend': {\r\n                components: [this.component.title]\r\n            },\r\n            'radio': {\r\n                components: [this.component.general, this.component.choices]\r\n            },\r\n            'checkbox': {\r\n                components: [this.component.general, this.component.choices]\r\n            },\r\n            'select': {\r\n                components: [this.component.general, this.component.choices]\r\n            },\r\n            'textarea': {\r\n                components: [this.component.general]\r\n            },\r\n            'text': {\r\n                components: [this.component.general]\r\n            },\r\n            'number': {\r\n                components: [this.component.general]\r\n            },\r\n            'date': {\r\n                components: [this.component.general]\r\n            },\r\n            'image': {\r\n                components: [this.component.img]\r\n            },\r\n            'html': {\r\n                components: [this.component.htmlEditor]\r\n            },\r\n            'table': {\r\n                components: [this.component.table]\r\n            },\r\n            'file': {\r\n                components: [this.component.general]\r\n            }\r\n        };\r\n    }\r\n    ;\r\n};\r\nFormContentConfigService.ctorParameters = () => [];\r\nFormContentConfigService = __decorate([\r\n    Injectable({\r\n        providedIn: 'root'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], FormContentConfigService);\r\nexport { FormContentConfigService };\r\n"]},"metadata":{},"sourceType":"module"}