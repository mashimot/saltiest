{"ast":null,"code":"'use strict';\n\nvar customEvent = require('custom-event');\n\nvar eventmap = require('./eventmap');\n\nvar doc = global.document;\nvar addEvent = addEventEasy;\nvar removeEvent = removeEventEasy;\nvar hardCache = [];\n\nif (!global.addEventListener) {\n  addEvent = addEventHard;\n  removeEvent = removeEventHard;\n}\n\nmodule.exports = {\n  add: addEvent,\n  remove: removeEvent,\n  fabricate: fabricateEvent\n};\n\nfunction addEventEasy(el, type, fn, capturing) {\n  return el.addEventListener(type, fn, capturing);\n}\n\nfunction addEventHard(el, type, fn) {\n  return el.attachEvent('on' + type, wrap(el, type, fn));\n}\n\nfunction removeEventEasy(el, type, fn, capturing) {\n  return el.removeEventListener(type, fn, capturing);\n}\n\nfunction removeEventHard(el, type, fn) {\n  var listener = unwrap(el, type, fn);\n\n  if (listener) {\n    return el.detachEvent('on' + type, listener);\n  }\n}\n\nfunction fabricateEvent(el, type, model) {\n  var e = eventmap.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();\n\n  if (el.dispatchEvent) {\n    el.dispatchEvent(e);\n  } else {\n    el.fireEvent('on' + type, e);\n  }\n\n  function makeClassicEvent() {\n    var e;\n\n    if (doc.createEvent) {\n      e = doc.createEvent('Event');\n      e.initEvent(type, true, true);\n    } else if (doc.createEventObject) {\n      e = doc.createEventObject();\n    }\n\n    return e;\n  }\n\n  function makeCustomEvent() {\n    return new customEvent(type, {\n      detail: model\n    });\n  }\n}\n\nfunction wrapperFactory(el, type, fn) {\n  return function wrapper(originalEvent) {\n    var e = originalEvent || global.event;\n    e.target = e.target || e.srcElement;\n\n    e.preventDefault = e.preventDefault || function preventDefault() {\n      e.returnValue = false;\n    };\n\n    e.stopPropagation = e.stopPropagation || function stopPropagation() {\n      e.cancelBubble = true;\n    };\n\n    e.which = e.which || e.keyCode;\n    fn.call(el, e);\n  };\n}\n\nfunction wrap(el, type, fn) {\n  var wrapper = unwrap(el, type, fn) || wrapperFactory(el, type, fn);\n  hardCache.push({\n    wrapper: wrapper,\n    element: el,\n    type: type,\n    fn: fn\n  });\n  return wrapper;\n}\n\nfunction unwrap(el, type, fn) {\n  var i = find(el, type, fn);\n\n  if (i) {\n    var wrapper = hardCache[i].wrapper;\n    hardCache.splice(i, 1); // free up a tad of memory\n\n    return wrapper;\n  }\n}\n\nfunction find(el, type, fn) {\n  var i, item;\n\n  for (i = 0; i < hardCache.length; i++) {\n    item = hardCache[i];\n\n    if (item.element === el && item.type === type && item.fn === fn) {\n      return i;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}