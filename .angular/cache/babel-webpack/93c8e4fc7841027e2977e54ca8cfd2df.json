{"ast":null,"code":"import _toConsumableArray from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\"; // array in local storage for registered users\n//let users = JSON.parse(localStorage.getItem('currentUser')) || [];\n\nvar users = [{\n  id: 1,\n  username: 'test',\n  password: 'test',\n  email: 'test@test.com',\n  firstName: 'First Name',\n  lastName: 'Last Name'\n}, {\n  id: 2,\n  username: 'hadouken',\n  password: 'hadouken',\n  email: 'hadouken@hadouken.com',\n  firstName: 'First Name',\n  lastName: 'Last Name'\n}];\nexport var FakeBackendInterceptor = /*#__PURE__*/(function () {\n  var FakeBackendInterceptor = /*#__PURE__*/function () {\n    function FakeBackendInterceptor() {\n      _classCallCheck(this, FakeBackendInterceptor);\n    }\n\n    _createClass(FakeBackendInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(request, next) {\n        var url = request.url,\n            method = request.method,\n            headers = request.headers,\n            body = request.body;\n        console.log('request', request); // wrap in delayed observable to simulate server api call\n\n        return of(null).pipe(mergeMap(handleRoute)).pipe(materialize()) // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)\n        .pipe(delay(100)).pipe(dematerialize());\n\n        function handleRoute() {\n          switch (true) {\n            case url.endsWith('/api/auth/register') && method === 'POST':\n              return register();\n\n            case url.endsWith('/api/auth/login') && method === 'POST':\n              return authenticate();\n\n            case url.endsWith('/users') && method === 'GET':\n              return getUsers();\n\n            case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n              return getUserById();\n\n            case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n              return deleteUser();\n\n            default:\n              // pass through any requests not handled above\n              return next.handle(request);\n          }\n        } // route functions\n\n\n        function register() {\n          var user = body;\n\n          if (users.find(function (x) {\n            return x.username === user.username;\n          })) {\n            return error('Username \"' + user.username + '\" is already taken');\n          }\n\n          user.id = users.length ? Math.max.apply(Math, _toConsumableArray(users.map(function (x) {\n            return x.id;\n          }))) + 1 : 1;\n          users.push(user);\n          localStorage.setItem('currentUser', JSON.stringify(users));\n          return ok();\n        }\n\n        function authenticate() {\n          var email = body.email,\n              password = body.password;\n          var user = users.find(function (x) {\n            return (\n              /*x.username === username &&*/\n              x.email === email && x.password === password\n            );\n          });\n          if (!user) return error('Username or password is incorrect');\n          return ok({\n            id: user.id,\n            email: user.email,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            token: 'fake-jwt-token'\n          });\n        }\n\n        function getUsers() {\n          if (!isLoggedIn()) return unauthorized();\n          return ok(users);\n        }\n\n        function getUserById() {\n          if (!isLoggedIn()) return unauthorized();\n          var user = users.find(function (x) {\n            return x.id == idFromUrl();\n          });\n          return ok(user);\n        }\n\n        function deleteUser() {\n          if (!isLoggedIn()) return unauthorized();\n          users = users.filter(function (x) {\n            return x.id !== idFromUrl();\n          });\n          localStorage.setItem('currentUser', JSON.stringify(users));\n          return ok();\n        } // helper functions\n\n\n        function ok(body) {\n          return of(new HttpResponse({\n            status: 200,\n            body: body\n          }));\n        }\n\n        function unauthorized() {\n          return throwError({\n            status: 401,\n            error: {\n              message: 'Unauthorised'\n            }\n          });\n        }\n\n        function error(message) {\n          return throwError({\n            error: {\n              message: message\n            }\n          });\n        }\n\n        function isLoggedIn() {\n          return headers.get('Authorization') === 'Bearer fak3e-jwt-token';\n        }\n\n        function idFromUrl() {\n          var urlParts = url.split('/');\n          return parseInt(urlParts[urlParts.length - 1]);\n        }\n      }\n    }]);\n\n    return FakeBackendInterceptor;\n  }();\n\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)();\n  };\n\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport var fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module"}