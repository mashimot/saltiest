{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport __NG_CLI_RESOURCE__0 from \"./config-choice-form.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./config-choice-form.component.css?ngResource\";\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\nimport { ContentService } from 'src/app/shared/services/content.service';\nimport { ContentChoiceItemService } from 'src/app/shared/services/content-choice-item.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { DragulaService } from 'ng2-dragula';\nimport { Location } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap'; // Array Validators\n\nexport var ArrayValidators = /*#__PURE__*/function () {\n  function ArrayValidators() {\n    _classCallCheck(this, ArrayValidators);\n  }\n\n  _createClass(ArrayValidators, null, [{\n    key: \"maxLength\",\n    value: // max length\n    function maxLength(max) {\n      return function (control) {\n        if (!(control instanceof FormArray)) return;\n        return control.length > max ? {\n          arrayMaxLength: true\n        } : null;\n      };\n    } // min length\n\n  }, {\n    key: \"minLength\",\n    value: function minLength(min) {\n      return function (control) {\n        if (!(control instanceof FormArray)) return;\n        return control.length < min ? {\n          arrayMinLength: true\n        } : null;\n      };\n    }\n  }]);\n\n  return ArrayValidators;\n}();\n\nvar ConfigChoiceFormComponent = /*#__PURE__*/function () {\n  function ConfigChoiceFormComponent(contentService, contentChoiceItemService, route, location, formBuilder, dragulaService, modal) {\n    _classCallCheck(this, ConfigChoiceFormComponent);\n\n    this.contentService = contentService;\n    this.contentChoiceItemService = contentChoiceItemService;\n    this.route = route;\n    this.location = location;\n    this.formBuilder = formBuilder;\n    this.dragulaService = dragulaService;\n    this.modal = modal;\n    this.contentChoiceItemIdToUpdate = null;\n    this.contentChoiceId = -1; //dbops: DBOperation;\n\n    this.text = \"\";\n    this.subs = new Subscription();\n    this.emitData = new EventEmitter();\n    dragulaService.createGroup('sortableElements', {\n      moves: function moves(el, container, handle) {\n        return handle.classList.contains('element-handle');\n      }\n    });\n  }\n\n  _createClass(ConfigChoiceFormComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      //this.dbops = DBOperation.create;\n      var choices = this.content.html.choices;\n      this.choiceForm = this.formBuilder.group({\n        'choices': this.formBuilder.array([])\n      });\n\n      if (typeof this.parentFormGroup != 'undefined') {\n        this.choiceForm = this.parentFormGroup.get('html');\n      }\n\n      this.choiceForm.get('choices').setValidators([ArrayValidators.minLength(1)]);\n      choices.forEach(function (choice) {\n        var items = _this.choiceForm.get('choices');\n\n        items.push(_this.createChoice(choice.text, choice.value));\n      });\n      this.subs.add(this.dragulaService.dropModel('sortableChoices').subscribe(function (_ref) {\n        var sourceModel = _ref.sourceModel,\n            targetModel = _ref.targetModel,\n            item = _ref.item;\n        _this.choices.controls = sourceModel;\n        _this.text = _this.elementToString();\n      }));\n      this.text = this.elementToString();\n      /*this.choiceForm = this.formBuilder.group({\r\n          'id': [''],\r\n          'content_choice_id': ['', [\r\n          ]],\r\n          'text': ['', [\r\n              Validators.required,\r\n              Validators.minLength(1),\r\n              Validators.maxLength(2000)\r\n          ]],\r\n          'value': ['', [\r\n              Validators.required,\r\n              Validators.minLength(1),\r\n              Validators.maxLength(2000)\r\n          ]]\r\n      });\r\n      this.route.params.subscribe(result => {\r\n          this.contentChoiceId = result.id;\r\n          this.choiceForm.patchValue({\r\n              'content_choice_id': this.contentChoiceId\r\n          });\r\n          this.loadChoices();\r\n      })*/\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {}\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      /*this.dragulaService.destroy('pages');\r\n      this.dragulaService.destroy('contents');\r\n      this.dragulaService.destroy('columns');\r\n      this.dragulaService.destroy('rowSortable');*/\n      this.dragulaService.destroy('sortableElements');\n    }\n    /*public loadChoices(){\r\n        if(this.contentChoiceId != -1){\r\n            let id = this.contentChoiceId;\r\n            this.contentService.getContentChoicesById(id).subscribe(result => {\r\n                if(result.success){\r\n                    this.choices = result.data;\r\n                    console.log(this.choices);\r\n                }\r\n            });\r\n        }\r\n    }\r\n      public onSubmit(){\r\n        switch(this.dbops){\r\n            case DBOperation.create:\r\n                this.contentChoiceItemService.storeContentChoiceItem(this.choiceForm.value)\r\n                .subscribe(result => {\r\n                    console.log(result);\r\n                    if(result.success){\r\n                        this.reset();\r\n                        this.contentChoiceId = result.data.contentChoiceId;\r\n                        this.choiceForm.patchValue({\r\n                            'content_choice_id': result.data.contentChoiceId\r\n                        });\r\n                        this.loadChoices();\r\n                    }\r\n                });\r\n            break;\r\n            case DBOperation.update:\r\n                const id = this.contentChoiceItemIdToUpdate;\r\n                this.contentChoiceItemService.updateContentChoiceItem(id, this.choiceForm.value)\r\n                .subscribe(result => {\r\n                    console.log(result.data);\r\n                    if(result.success){\r\n                        this.reset();\r\n                        this.loadChoices();\r\n                    }\r\n                });\r\n            break;\r\n        }\r\n    }\r\n      public create(){\r\n        this.dbops = DBOperation.create;\r\n        this.reset();\r\n    }\r\n      public savePosition(){\r\n        let id = this.contentChoiceId;\r\n        const orderedIds = this.choices.map(item => {\r\n            return item.id;\r\n        });\r\n        this.contentService.updateContentChoicesPosition(id, orderedIds)\r\n        .subscribe(result => {\r\n            if(result.success){\r\n                this.loadChoices();\r\n            }\r\n        });\r\n    }\r\n      public editContentChoice(id: number) {\r\n        this.contentChoiceItemService.getContentChoiceItemById(id)\r\n        .subscribe(result => {\r\n            if(result.success){\r\n                const content = result.data;\r\n                this.dbops = DBOperation.update;\r\n                this.contentChoiceItemIdToUpdate = content.id;\r\n                this.choiceForm.setValue({\r\n                    'id': content.id,\r\n                    'content_choice_id': content.content_choice_id,\r\n                    'text': content.text,\r\n                    'value': content.value,\r\n                });\r\n            }\r\n        });\r\n    }\r\n      public deleteContentChoiceItem(id: number) {\r\n        this.contentChoiceItemService.deleteContentChoiceItem(id)\r\n        .subscribe(result => {\r\n            if(result.success){\r\n                this.loadChoices();\r\n                this.reset();\r\n            }\r\n        });\r\n    }\r\n      private reset() {\r\n        this.contentChoiceItemIdToUpdate = null;\r\n        const resetExcept: string[] = ['content_choice_id', 'choices', 'tag', 'category', 'label'];\r\n          Object.keys(this.choiceForm.controls).forEach(key => {\r\n            if (resetExcept.findIndex(q => q === key) === -1) {\r\n                this.choiceForm.get(key).reset();\r\n            }\r\n        });\r\n    }*/\n\n  }, {\n    key: \"choiceChanged\",\n    value: function choiceChanged() {\n      this.text = this.elementToString();\n    }\n  }, {\n    key: \"addChoice\",\n    value: function addChoice() {\n      this.choices.push(this.createChoice());\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.modal.close();\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      console.log(this.choices.value);\n      this.emitData.emit(this.choiceForm.value);\n      this.modal.close();\n    }\n  }, {\n    key: \"stringToElement\",\n    value: function stringToElement() {\n      this.choices.clear();\n\n      if (this.text.length > 0) {\n        var string = this.text.split('\\n');\n\n        for (var i = 0; i < string.length; i++) {\n          var str = string[i];\n          var firstMatch = str;\n          var secondMatch = '';\n\n          if (str.indexOf('|') !== -1) {\n            var match = str.split('|');\n            firstMatch = match[0];\n            secondMatch = str.substring(firstMatch.length + 1); //return '' if '|' was not found\n          }\n\n          var text = typeof firstMatch !== 'undefined' ? firstMatch : '';\n          var value = typeof secondMatch !== 'undefined' ? secondMatch : '';\n          this.choices.push(this.createChoice(text, value));\n        }\n      }\n    }\n  }, {\n    key: \"removeContent\",\n    value: function removeContent($index) {\n      this.choices.removeAt($index);\n      this.text = this.elementToString();\n    }\n  }, {\n    key: \"cloneThis\",\n    value: function cloneThis(name) {\n      var choicesLength = this.choices.value.length;\n\n      if (choicesLength > 0) {\n        var cloneThisObjectName = name === 'value' ? 'text' : 'value';\n\n        for (var i = 0; i < choicesLength; i++) {\n          this.choices.value[i][name] = this.choices.value[i][cloneThisObjectName];\n        }\n\n        this.text = this.elementToString();\n        this.stringToElement();\n      }\n    }\n  }, {\n    key: \"elementToString\",\n    value: function elementToString() {\n      //let string = '';\n      var string = []; //fire the `valueChanges` manually\n\n      this.choices.updateValueAndValidity({\n        onlySelf: false,\n        emitEvent: true\n      });\n      var e = this.choices.value;\n\n      if (typeof e !== 'undefined' && e.length > 0) {\n        for (var i = 0; i < e.length; i++) {\n          var str = e[i];\n          var pipe = str.value === '' ? '' : '|';\n          var element = {\n            text: typeof str.text !== 'undefined' ? str.text : '',\n            value: typeof str.value !== 'undefined' ? str.value : ''\n          };\n          string.push(\"\".concat(element.text).concat(pipe).concat(element.value));\n        }\n      }\n\n      return string.join(\"\\n\");\n    }\n  }, {\n    key: \"createChoice\",\n    value: function createChoice() {\n      var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      return this.formBuilder.group({\n        text: [text, [Validators.required, Validators.minLength(1), Validators.maxLength(2000)]],\n        value: [value, [Validators.required, Validators.minLength(1), Validators.maxLength(2000)]]\n      });\n    }\n  }, {\n    key: \"f\",\n    get: function get() {\n      return this.choiceForm;\n    }\n  }, {\n    key: \"choices\",\n    get: function get() {\n      return this.f.get('choices');\n    }\n  }]);\n\n  return ConfigChoiceFormComponent;\n}();\n\nConfigChoiceFormComponent.ctorParameters = function () {\n  return [{\n    type: ContentService\n  }, {\n    type: ContentChoiceItemService\n  }, {\n    type: ActivatedRoute\n  }, {\n    type: Location\n  }, {\n    type: FormBuilder\n  }, {\n    type: DragulaService\n  }, {\n    type: NgbActiveModal\n  }];\n};\n\nConfigChoiceFormComponent.propDecorators = {\n  content: [{\n    type: Input\n  }],\n  parentFormGroup: [{\n    type: Input\n  }],\n  emitData: [{\n    type: Output\n  }]\n};\nConfigChoiceFormComponent = __decorate([Component({\n  selector: 'app-config-choice-form',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n}), __metadata(\"design:paramtypes\", [ContentService, ContentChoiceItemService, ActivatedRoute, Location, FormBuilder, DragulaService, NgbActiveModal])], ConfigChoiceFormComponent);\nexport { ConfigChoiceFormComponent };","map":{"version":3,"sources":["C:/dev/saltiest/src/app/config-choices/config-choice-form/config-choice-form.component.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","Component","Input","Output","EventEmitter","FormGroup","FormBuilder","Validators","FormArray","ContentService","ContentChoiceItemService","ActivatedRoute","DragulaService","Location","Subscription","NgbActiveModal","ArrayValidators","max","control","arrayMaxLength","min","arrayMinLength","ConfigChoiceFormComponent","contentService","contentChoiceItemService","route","location","formBuilder","dragulaService","modal","contentChoiceItemIdToUpdate","contentChoiceId","text","subs","emitData","createGroup","moves","el","container","handle","classList","contains","choices","content","html","choiceForm","group","array","parentFormGroup","get","setValidators","minLength","forEach","choice","items","push","createChoice","value","add","dropModel","subscribe","sourceModel","targetModel","item","controls","elementToString","destroy","close","console","log","emit","clear","string","split","str","firstMatch","secondMatch","indexOf","match","substring","$index","removeAt","name","choicesLength","cloneThisObjectName","stringToElement","updateValueAndValidity","onlySelf","emitEvent","e","pipe","element","join","required","maxLength","f","ctorParameters","type","propDecorators","selector","template","styles"],"mappings":"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AA,YAAXC,IAAW,QAAXA,IAAW;AACnD,QAAA,KAAI,CAACrB,OAAL,CAAasB,QAAb,GAAwBH,WAAxB;AACA,QAAA,KAAI,CAAC7B,IAAL,GAAY,KAAI,CAACiC,eAAL,EAAZ;AACH,OAJa,CAAd;AAKA,WAAKjC,IAAL,GAAY,KAAKiC,eAAL,EAAZ;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACK;AAlEwB;AAAA;AAAA,WAmEzB,uBAAc,CACb;AApEwB;AAAA;AAAA,WAqEzB,uBAAc;AACV;AACR;AACA;AACA;AACQ,WAAKrC,cAAL,CAAoBsC,OAApB,CAA4B,kBAA5B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArK6B;AAAA;AAAA,WA6KzB,yBAAgB;AACZ,WAAKlC,IAAL,GAAY,KAAKiC,eAAL,EAAZ;AACH;AA/KwB;AAAA;AAAA,WAgLzB,qBAAY;AACR,WAAKvB,OAAL,CAAaa,IAAb,CAAkB,KAAKC,YAAL,EAAlB;AACH;AAlLwB;AAAA;AAAA,WAmLzB,kBAAS;AACL,WAAK3B,KAAL,CAAWsC,KAAX;AACH;AArLwB;AAAA;AAAA,WAsLzB,gBAAO;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK3B,OAAL,CAAae,KAAzB;AA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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport __NG_CLI_RESOURCE__0 from \"./config-choice-form.component.html?ngResource\";\r\nimport __NG_CLI_RESOURCE__1 from \"./config-choice-form.component.css?ngResource\";\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { ContentService } from 'src/app/shared/services/content.service';\r\nimport { ContentChoiceItemService } from 'src/app/shared/services/content-choice-item.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DragulaService } from 'ng2-dragula';\r\nimport { Location } from '@angular/common';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n// Array Validators\r\nexport class ArrayValidators {\r\n    // max length\r\n    static maxLength(max) {\r\n        return (control) => {\r\n            if (!(control instanceof FormArray))\r\n                return;\r\n            return control.length > max\r\n                ? { arrayMaxLength: true }\r\n                : null;\r\n        };\r\n    }\r\n    // min length\r\n    static minLength(min) {\r\n        return (control) => {\r\n            if (!(control instanceof FormArray))\r\n                return;\r\n            return control.length < min\r\n                ? { arrayMinLength: true }\r\n                : null;\r\n        };\r\n    }\r\n}\r\nlet ConfigChoiceFormComponent = class ConfigChoiceFormComponent {\r\n    constructor(contentService, contentChoiceItemService, route, location, formBuilder, dragulaService, modal) {\r\n        this.contentService = contentService;\r\n        this.contentChoiceItemService = contentChoiceItemService;\r\n        this.route = route;\r\n        this.location = location;\r\n        this.formBuilder = formBuilder;\r\n        this.dragulaService = dragulaService;\r\n        this.modal = modal;\r\n        this.contentChoiceItemIdToUpdate = null;\r\n        this.contentChoiceId = -1;\r\n        //dbops: DBOperation;\r\n        this.text = \"\";\r\n        this.subs = new Subscription();\r\n        this.emitData = new EventEmitter();\r\n        dragulaService.createGroup('sortableElements', {\r\n            moves: (el, container, handle) => {\r\n                return handle.classList.contains('element-handle');\r\n            }\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        //this.dbops = DBOperation.create;\r\n        const choices = this.content.html.choices;\r\n        this.choiceForm = this.formBuilder.group({\r\n            'choices': this.formBuilder.array([])\r\n        });\r\n        if (typeof this.parentFormGroup != 'undefined') {\r\n            this.choiceForm = this.parentFormGroup.get('html');\r\n        }\r\n        this.choiceForm.get('choices')\r\n            .setValidators([\r\n            ArrayValidators.minLength(1)\r\n        ]);\r\n        choices.forEach(choice => {\r\n            let items = this.choiceForm.get('choices');\r\n            items.push(this.createChoice(choice.text, choice.value));\r\n        });\r\n        this.subs.add(this.dragulaService.dropModel('sortableChoices')\r\n            .subscribe(({ sourceModel, targetModel, item }) => {\r\n            this.choices.controls = sourceModel;\r\n            this.text = this.elementToString();\r\n        }));\r\n        this.text = this.elementToString();\r\n        /*this.choiceForm = this.formBuilder.group({\r\n            'id': [''],\r\n            'content_choice_id': ['', [\r\n            ]],\r\n            'text': ['', [\r\n                Validators.required,\r\n                Validators.minLength(1),\r\n                Validators.maxLength(2000)\r\n            ]],\r\n            'value': ['', [\r\n                Validators.required,\r\n                Validators.minLength(1),\r\n                Validators.maxLength(2000)\r\n            ]]\r\n        });\r\n        this.route.params.subscribe(result => {\r\n            this.contentChoiceId = result.id;\r\n            this.choiceForm.patchValue({\r\n                'content_choice_id': this.contentChoiceId\r\n            });\r\n            this.loadChoices();\r\n        })*/\r\n    }\r\n    ngOnChanges() {\r\n    }\r\n    ngOnDestroy() {\r\n        /*this.dragulaService.destroy('pages');\r\n        this.dragulaService.destroy('contents');\r\n        this.dragulaService.destroy('columns');\r\n        this.dragulaService.destroy('rowSortable');*/\r\n        this.dragulaService.destroy('sortableElements');\r\n    }\r\n    /*public loadChoices(){\r\n        if(this.contentChoiceId != -1){\r\n            let id = this.contentChoiceId;\r\n            this.contentService.getContentChoicesById(id).subscribe(result => {\r\n                if(result.success){\r\n                    this.choices = result.data;\r\n                    console.log(this.choices);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public onSubmit(){\r\n        switch(this.dbops){\r\n            case DBOperation.create:\r\n                this.contentChoiceItemService.storeContentChoiceItem(this.choiceForm.value)\r\n                .subscribe(result => {\r\n                    console.log(result);\r\n                    if(result.success){\r\n                        this.reset();\r\n                        this.contentChoiceId = result.data.contentChoiceId;\r\n                        this.choiceForm.patchValue({\r\n                            'content_choice_id': result.data.contentChoiceId\r\n                        });\r\n                        this.loadChoices();\r\n                    }\r\n                });\r\n            break;\r\n            case DBOperation.update:\r\n                const id = this.contentChoiceItemIdToUpdate;\r\n                this.contentChoiceItemService.updateContentChoiceItem(id, this.choiceForm.value)\r\n                .subscribe(result => {\r\n                    console.log(result.data);\r\n                    if(result.success){\r\n                        this.reset();\r\n                        this.loadChoices();\r\n                    }\r\n                });\r\n            break;\r\n        }\r\n    }\r\n\r\n    public create(){\r\n        this.dbops = DBOperation.create;\r\n        this.reset();\r\n    }\r\n\r\n    public savePosition(){\r\n        let id = this.contentChoiceId;\r\n        const orderedIds = this.choices.map(item => {\r\n            return item.id;\r\n        });\r\n        this.contentService.updateContentChoicesPosition(id, orderedIds)\r\n        .subscribe(result => {\r\n            if(result.success){\r\n                this.loadChoices();\r\n            }\r\n        });\r\n    }\r\n\r\n    public editContentChoice(id: number) {\r\n        this.contentChoiceItemService.getContentChoiceItemById(id)\r\n        .subscribe(result => {\r\n            if(result.success){\r\n                const content = result.data;\r\n                this.dbops = DBOperation.update;\r\n                this.contentChoiceItemIdToUpdate = content.id;\r\n                this.choiceForm.setValue({\r\n                    'id': content.id,\r\n                    'content_choice_id': content.content_choice_id,\r\n                    'text': content.text,\r\n                    'value': content.value,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    public deleteContentChoiceItem(id: number) {\r\n        this.contentChoiceItemService.deleteContentChoiceItem(id)\r\n        .subscribe(result => {\r\n            if(result.success){\r\n                this.loadChoices();\r\n                this.reset();\r\n            }\r\n        });\r\n    }\r\n\r\n    private reset() {\r\n        this.contentChoiceItemIdToUpdate = null;\r\n        const resetExcept: string[] = ['content_choice_id', 'choices', 'tag', 'category', 'label'];\r\n\r\n        Object.keys(this.choiceForm.controls).forEach(key => {\r\n            if (resetExcept.findIndex(q => q === key) === -1) {\r\n                this.choiceForm.get(key).reset();\r\n            }\r\n        });\r\n    }*/\r\n    choiceChanged() {\r\n        this.text = this.elementToString();\r\n    }\r\n    addChoice() {\r\n        this.choices.push(this.createChoice());\r\n    }\r\n    cancel() {\r\n        this.modal.close();\r\n    }\r\n    save() {\r\n        console.log(this.choices.value);\r\n        this.emitData.emit(this.choiceForm.value);\r\n        this.modal.close();\r\n    }\r\n    stringToElement() {\r\n        this.choices.clear();\r\n        if (this.text.length > 0) {\r\n            const string = this.text.split('\\n');\r\n            for (let i = 0; i < string.length; i++) {\r\n                const str = string[i];\r\n                let firstMatch = str;\r\n                let secondMatch = '';\r\n                if (str.indexOf('|') !== -1) {\r\n                    let match = str.split('|');\r\n                    firstMatch = match[0];\r\n                    secondMatch = str.substring(firstMatch.length + 1); //return '' if '|' was not found\r\n                }\r\n                const text = typeof firstMatch !== 'undefined'\r\n                    ? firstMatch\r\n                    : '';\r\n                const value = typeof secondMatch !== 'undefined'\r\n                    ? secondMatch\r\n                    : '';\r\n                this.choices.push(this.createChoice(text, value));\r\n            }\r\n        }\r\n    }\r\n    removeContent($index) {\r\n        this.choices.removeAt($index);\r\n        this.text = this.elementToString();\r\n    }\r\n    cloneThis(name) {\r\n        const choicesLength = this.choices.value.length;\r\n        if (choicesLength > 0) {\r\n            let cloneThisObjectName = name === 'value'\r\n                ? 'text'\r\n                : 'value';\r\n            for (let i = 0; i < choicesLength; i++) {\r\n                this.choices.value[i][name] = this.choices.value[i][cloneThisObjectName];\r\n            }\r\n            this.text = this.elementToString();\r\n            this.stringToElement();\r\n        }\r\n    }\r\n    elementToString() {\r\n        //let string = '';\r\n        let string = [];\r\n        //fire the `valueChanges` manually\r\n        this.choices.updateValueAndValidity({ onlySelf: false, emitEvent: true });\r\n        let e = this.choices.value;\r\n        if (typeof e !== 'undefined' && e.length > 0) {\r\n            for (let i = 0; i < e.length; i++) {\r\n                let str = e[i];\r\n                let pipe = str.value === ''\r\n                    ? ''\r\n                    : '|';\r\n                let element = {\r\n                    text: typeof str.text !== 'undefined' ? str.text : '',\r\n                    value: typeof str.value !== 'undefined' ? str.value : '',\r\n                };\r\n                string.push(`${element.text}${pipe}${element.value}`);\r\n            }\r\n        }\r\n        return string.join(\"\\n\");\r\n    }\r\n    createChoice(text = '', value = '') {\r\n        return this.formBuilder.group({\r\n            text: [text, [\r\n                    Validators.required,\r\n                    Validators.minLength(1),\r\n                    Validators.maxLength(2000)\r\n                ]],\r\n            value: [value, [\r\n                    Validators.required,\r\n                    Validators.minLength(1),\r\n                    Validators.maxLength(2000)\r\n                ]]\r\n        });\r\n    }\r\n    get f() {\r\n        return this.choiceForm;\r\n    }\r\n    get choices() {\r\n        return this.f.get('choices');\r\n    }\r\n};\r\nConfigChoiceFormComponent.ctorParameters = () => [\r\n    { type: ContentService },\r\n    { type: ContentChoiceItemService },\r\n    { type: ActivatedRoute },\r\n    { type: Location },\r\n    { type: FormBuilder },\r\n    { type: DragulaService },\r\n    { type: NgbActiveModal }\r\n];\r\nConfigChoiceFormComponent.propDecorators = {\r\n    content: [{ type: Input }],\r\n    parentFormGroup: [{ type: Input }],\r\n    emitData: [{ type: Output }]\r\n};\r\nConfigChoiceFormComponent = __decorate([\r\n    Component({\r\n        selector: 'app-config-choice-form',\r\n        template: __NG_CLI_RESOURCE__0,\r\n        styles: [__NG_CLI_RESOURCE__1]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ContentService,\r\n        ContentChoiceItemService,\r\n        ActivatedRoute,\r\n        Location,\r\n        FormBuilder,\r\n        DragulaService,\r\n        NgbActiveModal])\r\n], ConfigChoiceFormComponent);\r\nexport { ConfigChoiceFormComponent };\r\n"]},"metadata":{},"sourceType":"module"}