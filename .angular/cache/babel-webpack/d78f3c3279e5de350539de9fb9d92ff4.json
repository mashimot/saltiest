{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\n\nvar BootstrapGridSystemService = /*#__PURE__*/function () {\n  function BootstrapGridSystemService(data) {\n    var grid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '4 4 4';\n\n    _classCallCheck(this, BootstrapGridSystemService);\n\n    this._data = data;\n    this._grid = grid;\n  }\n\n  _createClass(BootstrapGridSystemService, [{\n    key: \"getGrid\",\n    value: function getGrid() {\n      return of([{\n        grid: '6 6',\n        columns: []\n      }, {\n        grid: '4 4 4',\n        columns: []\n      }, {\n        grid: '3 3 3 3',\n        columns: []\n      }, {\n        grid: '2 2 4 2 2',\n        columns: []\n      }, {\n        grid: '12',\n        columns: []\n      }]);\n    }\n  }, {\n    key: \"convert\",\n    value: function convert() {\n      var groups = [];\n\n      var grid = this._grid.replace(/ +/g, ' ').trim();\n\n      var arrGrid = grid.split(' ');\n      var chunkSize = arrGrid.length;\n\n      for (var i = 0; i < this._data.length; i += chunkSize) {\n        groups.push(this._data.slice(i, i + chunkSize));\n      }\n\n      this._page = groups.reduce(function (page, group, index) {\n        if (!page.rows) {\n          page = {\n            rows: [],\n            name: 'Page ' + (index + 1)\n          };\n        }\n\n        page.rows.push({\n          grid: grid,\n          columns: []\n        });\n        group.map(function (data) {\n          return page.rows[index].columns.push({\n            contents: [data]\n          });\n        });\n        return page;\n      }, []);\n      var lastRow = this._page.rows.length;\n      var columns = this._page.rows[lastRow - 1].columns;\n\n      if (columns.length < chunkSize) {\n        for (var k = columns.length; k < chunkSize; k++) {\n          this._page.rows[lastRow - 1].columns.push({\n            contents: []\n          });\n        }\n      }\n    }\n  }, {\n    key: \"getPage\",\n    value: function getPage() {\n      return this._page;\n    }\n  }]);\n\n  return BootstrapGridSystemService;\n}();\n\nBootstrapGridSystemService.ctorParameters = function () {\n  return [{\n    type: Array\n  }, {\n    type: String\n  }];\n};\n\nBootstrapGridSystemService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [Array, String])], BootstrapGridSystemService);\nexport { BootstrapGridSystemService };","map":{"version":3,"sources":["C:/dev/saltiest/src/app/_services/bootstrap-grid-system.service.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","Injectable","of","BootstrapGridSystemService","data","grid","_data","_grid","columns","groups","replace","trim","arrGrid","split","chunkSize","push","slice","_page","reduce","page","group","index","rows","name","map","contents","lastRow","ctorParameters","type","Array","String"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport { of } from 'rxjs';\r\nlet BootstrapGridSystemService = class BootstrapGridSystemService {\r\n    constructor(data, grid = '4 4 4') {\r\n        this._data = data;\r\n        this._grid = grid;\r\n    }\r\n    getGrid() {\r\n        return of([{\r\n                grid: '6 6',\r\n                columns: []\r\n            }, {\r\n                grid: '4 4 4',\r\n                columns: []\r\n            }, {\r\n                grid: '3 3 3 3',\r\n                columns: []\r\n            }, {\r\n                grid: '2 2 4 2 2',\r\n                columns: []\r\n            }, {\r\n                grid: '12',\r\n                columns: []\r\n            }]);\r\n    }\r\n    convert() {\r\n        let groups = [];\r\n        let grid = this._grid.replace(/ +/g, ' ').trim();\r\n        let arrGrid = grid.split(' ');\r\n        let chunkSize = arrGrid.length;\r\n        for (let i = 0; i < this._data.length; i += chunkSize) {\r\n            groups.push(this._data.slice(i, i + chunkSize));\r\n        }\r\n        this._page = groups.reduce((page, group, index) => {\r\n            if (!page.rows) {\r\n                page = {\r\n                    rows: [],\r\n                    name: 'Page ' + (index + 1)\r\n                };\r\n            }\r\n            page.rows.push({\r\n                grid: grid,\r\n                columns: []\r\n            });\r\n            group.map(data => {\r\n                return page.rows[index].columns.push({\r\n                    contents: [data]\r\n                });\r\n            });\r\n            return page;\r\n        }, []);\r\n        let lastRow = this._page.rows.length;\r\n        let columns = this._page.rows[lastRow - 1].columns;\r\n        if (columns.length < chunkSize) {\r\n            for (let k = columns.length; k < chunkSize; k++) {\r\n                this._page.rows[lastRow - 1].columns.push({\r\n                    contents: []\r\n                });\r\n            }\r\n        }\r\n    }\r\n    getPage() {\r\n        return this._page;\r\n    }\r\n};\r\nBootstrapGridSystemService.ctorParameters = () => [\r\n    { type: Array },\r\n    { type: String }\r\n];\r\nBootstrapGridSystemService = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [Array, String])\r\n], BootstrapGridSystemService);\r\nexport { BootstrapGridSystemService };\r\n"]},"metadata":{},"sourceType":"module"}