{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport __NG_CLI_RESOURCE__0 from \"./form-pages.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./form-pages.component.css?ngResource\";\nimport { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { FormConfigService } from './../_services/form-config.service';\nimport { DragulaService } from 'ng2-dragula';\nimport { Subscription } from 'rxjs';\nimport { BootstrapHtmlTemplate } from '../_services/bootstrap-html-template.service';\nimport { PageService } from '../shared/services/page.service';\nimport { ContentService } from '../shared/services/content.service';\nimport { RowService } from '../shared/services/row.service';\nimport { ColumnService } from '../shared/services/column.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { HomeService } from '../shared/services/home.service';\n\nvar FormPagesComponent = /*#__PURE__*/function () {\n  function FormPagesComponent(formConfigService, dragulaService, pageService, cd, contentService, rowService, columnService, route, homeService, ngxLoader) {\n    _classCallCheck(this, FormPagesComponent);\n\n    this.formConfigService = formConfigService;\n    this.dragulaService = dragulaService;\n    this.pageService = pageService;\n    this.cd = cd;\n    this.contentService = contentService;\n    this.rowService = rowService;\n    this.columnService = columnService;\n    this.route = route;\n    this.homeService = homeService;\n    this.ngxLoader = ngxLoader;\n    this.pagesChange = new EventEmitter();\n    this.subs = new Subscription();\n    this.dropModelPageUpdated = false;\n    this.initDragAndDrop();\n  }\n\n  _createClass(FormPagesComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      console.log('changes', changes);\n\n      if (changes.pages) {}\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this.formConfigService.getConfig().subscribe(function (data) {\n        _this.config = Object.assign({}, data);\n      });\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      this.subs.add(this.dragulaService.dropModel(\"pages\").subscribe(function (_ref) {\n        var name = _ref.name,\n            el = _ref.el,\n            target = _ref.target,\n            source = _ref.source,\n            item = _ref.item,\n            sourceModel = _ref.sourceModel,\n            targetModel = _ref.targetModel,\n            sourceIndex = _ref.sourceIndex,\n            targetIndex = _ref.targetIndex;\n        var params = {\n          project_id: _this2.project_id,\n          pagesPos: targetModel.map(function (item) {\n            return item.id;\n          }),\n          pageTargetIndex: targetIndex\n        };\n        _this2.dropModelPageUpdated = true;\n        /*this.pageService.updatePagesPosition(data.project_id, params)\r\n        .subscribe(result => {\r\n            console.log(result);\r\n        });*/\n      }));\n    }\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      this.cd.detectChanges();\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.dropModelPageUpdated) {\n        // this excutes if this.dropModelUpdated is true only\n        this.pagesChange.emit(this.pages);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.dragulaService.destroy('pages');\n      this.dragulaService.destroy('contents');\n      this.dragulaService.destroy('columns');\n      this.dragulaService.destroy('rowSortable');\n      this.dragulaService.destroy('sortableElements');\n      this.subs.unsubscribe();\n    }\n  }, {\n    key: \"deletePage\",\n    value: function deletePage(pageIndex) {\n      this.pages.splice(pageIndex, 1);\n      this.pagesChange.emit(this.pages);\n      this.cd.detectChanges();\n    }\n  }, {\n    key: \"loadFormBuilder\",\n    value: function loadFormBuilder() {\n      var _this3 = this;\n\n      this.ngxLoader.start();\n      this.pageService.getPageByProjectId(this.project_id).subscribe(function (result) {\n        if (result.success) {//this.pages = result.paginate.data;\n        }\n\n        _this3.ngxLoader.stop();\n      });\n    }\n  }, {\n    key: \"initDragAndDrop\",\n    value: function initDragAndDrop() {\n      var _this4 = this;\n\n      this.dragulaService.createGroup('pages', {\n        copy: function copy(el, source) {\n          return source.className === 'menu-page-sortable';\n        },\n        copyItem: function copyItem(el) {\n          return el; //console.log(el);\n        },\n        accepts: function accepts(el, target, source, sibling) {\n          // To avoid dragging from right to left container\n          return target.className !== 'menu-page-sortable';\n        },\n        moves: function moves(el, container, handle) {\n          if (handle.classList) {\n            return handle.classList.contains('page-handle');\n          }\n\n          return false;\n        }\n      });\n      this.dragulaService.createGroup('columns', {\n        accepts: function accepts(el, target, source, sibling) {\n          var currRowIndex = el.getAttribute('data-current-row-index');\n          var currPageIndex = el.getAttribute('data-current-page-index');\n          var currentClass = 'page-' + currPageIndex + '_row-' + currRowIndex;\n          return target.classList.contains(currentClass);\n        },\n        moves: function moves(el, container, handle) {\n          //let currColumnIndex = handle.getAttribute('data-current-column-index');\n          if (handle.classList) {\n            return handle.classList.contains('column-handle');\n          }\n\n          return false;\n        }\n      });\n      this.subs.add(this.dragulaService.dropModel(\"columns\").subscribe(function (_ref2) {\n        var name = _ref2.name,\n            el = _ref2.el,\n            target = _ref2.target,\n            source = _ref2.source,\n            item = _ref2.item,\n            sourceModel = _ref2.sourceModel,\n            targetModel = _ref2.targetModel,\n            sourceIndex = _ref2.sourceIndex,\n            targetIndex = _ref2.targetIndex;\n        var currRowIndex = el.getAttribute('data-current-row-index');\n        var pageIndex = el.getAttribute('data-current-page-index');\n        var currRowId = target.getAttribute('data-current-row-id');\n\n        if (pageIndex != null && currRowIndex != null) {\n          var gridArr = _this4.pages[pageIndex].rows[currRowIndex].grid.split(\" \");\n\n          var aux = gridArr[sourceIndex];\n          gridArr.splice(sourceIndex, 1);\n          gridArr.splice(targetIndex, 0, aux);\n          var newGrid = gridArr.join(\" \").trim();\n          _this4.pages[pageIndex].rows[currRowIndex].grid = newGrid;\n          /*const params = {\r\n              project_id: this.project_id,\r\n              page: {\r\n                  currRowId: parseInt(currRowId)\r\n              },\r\n              newGrid: newGrid,\r\n              columnPos: targetModel.map(item => {\r\n                  return item.id? item.id: null;\r\n              })\r\n          }\r\n          this.columnService.updateColumn(params.page.currRowId, params)\r\n              .subscribe(result => {\r\n                  if(result.success){\r\n                      this.loadFormBuilder();\r\n                      this.dropModelPageUpdated = true;\r\n                  }\r\n              });*/\n        }\n      }));\n      this.dragulaService.createGroup('rowSortable', {\n        copy: function copy(el, source) {\n          return source.className === 'menu-row-sortable';\n        },\n        copyItem: function copyItem(el) {\n          return JSON.parse(JSON.stringify(el));\n        },\n        accepts: function accepts(el, target, source, sibling) {\n          // To avoid draggin from right to left container\n          if (target.className !== 'menu-row-sortable') {\n            return true;\n          }\n\n          return false;\n        },\n        moves: function moves(el, container, handle) {\n          if (handle.classList) {\n            return handle.classList.contains('row-handle');\n          }\n\n          return false;\n        }\n      });\n      this.subs.add(this.dragulaService.dropModel(\"rowSortable\").subscribe(function (_ref3) {\n        var name = _ref3.name,\n            el = _ref3.el,\n            target = _ref3.target,\n            source = _ref3.source,\n            item = _ref3.item,\n            sourceModel = _ref3.sourceModel,\n            targetModel = _ref3.targetModel,\n            sourceIndex = _ref3.sourceIndex,\n            targetIndex = _ref3.targetIndex;\n        var targetPageId = target.getAttribute('data-current-page-id');\n        var currRowId = el.getAttribute('data-current-row-id');\n        console.log('item.grid', item.grid);\n\n        if (typeof item.grid != 'undefined' && typeof item.columns == 'undefined') {\n          //gambiarra, mas funciona\n          //let rows = [];\n          var gridsArray = item.grid.trim().split(\"\\n\");\n          delete item.grid;\n          var rows = gridsArray.map(function (line) {\n            return line.replace(/\\s+/g, ' ').trim();\n          }).filter(function (line) {\n            return line;\n          }).map(function (line) {\n            var arrNumbers = line.split(' ');\n            var columns = [];\n\n            if (arrNumbers.length > 0) {\n              for (var j = 0; j < arrNumbers.length; j++) {\n                columns.push({\n                  contents: []\n                });\n              }\n            }\n\n            return {\n              grid: line,\n              columns: columns\n            };\n          });\n          console.log('targetModel', targetModel, 'sourceModel', sourceModel, 'targetIndex', targetIndex);\n          targetModel.splice(targetIndex, 1); //targetIndex: Position \n\n          var totalOfRowsDragged = rows.length;\n\n          for (var i = 0; i < totalOfRowsDragged; i++) {\n            targetModel.splice(targetIndex + i, 0, rows[i]);\n          }\n          /*\r\n          //API\r\n          const params = {\r\n              project_id: this.project_id,\r\n              page: {\r\n                  targetPageId: parseInt(targetPageId)\r\n              },\r\n              rowsPos: targetModel.map(item => {\r\n                  return item.id? item.id: null;\r\n              }),\r\n              rowTargetIndex: targetIndex,\r\n              rows: rows\r\n          };\r\n          console.info('row sorted', params);\r\n          if(rows.length > 0){\r\n              this.rowService.storeRow(params)\r\n                  .subscribe(result => {\r\n                      if(result.success){\r\n                          this.loadFormBuilder();\r\n                          this.dropModelPageUpdated = true;\r\n                      }\r\n                  });\r\n          }*/\n\n        } else {\n          var params = {\n            project_id: _this4.project_id,\n            page: {\n              currRowId: parseInt(currRowId),\n              targetPageId: parseInt(targetPageId)\n            },\n            rowPos: targetModel.map(function (item) {\n              return item.id ? item.id : null;\n            })\n          };\n          /*this.rowService.updateRow(params.page.targetPageId, params)\r\n              .subscribe(result => {\r\n                  if(result.success){\r\n                      this.loadFormBuilder();\r\n                      this.dropModelPageUpdated = true;\r\n                  }\r\n              });*/\n        }\n\n        return item;\n      }));\n      this.dragulaService.createGroup('contents', {\n        copy: function copy(el, source) {\n          return source.classList.contains('menu-content-sortable');\n        },\n        copyItem: function copyItem(el) {\n          console.log(el);\n          return JSON.parse(JSON.stringify(el));\n        },\n        accepts: function accepts(el, target, source, sibling) {\n          // To avoid dragging from right to left container\n          return !target.classList.contains('menu-content-sortable');\n        },\n        moves: function moves(el, container, handle) {\n          if (handle.classList) {\n            return handle.classList.contains('content-handle');\n          }\n\n          return false;\n        }\n      });\n      this.subs.add(this.dragulaService.cloned(\"contents\").subscribe(function (_ref4) {\n        var name = _ref4.name,\n            clone = _ref4.clone,\n            original = _ref4.original,\n            cloneType = _ref4.cloneType;\n\n        if (original.classList.contains('menu-content-sortable')) {\n          var currentDataAttr = JSON.parse(original.getAttribute('data-content'));\n          var r = new BootstrapHtmlTemplate();\n          clone.classList.remove('badge', 'bg-dark', 'col-md-6', 'bg-primary', 'text-white');\n          clone.innerHTML = '';\n          clone.insertAdjacentHTML('afterbegin', '<div class=\"px-1 py-1 bg-white text-dark\" style=\"min-width: 300px;\">' + r.get(currentDataAttr) + '</div>');\n        }\n      }));\n      this.subs.add(this.dragulaService.dropModel(\"contents\").subscribe(function (_ref5) {\n        var name = _ref5.name,\n            el = _ref5.el,\n            target = _ref5.target,\n            source = _ref5.source,\n            item = _ref5.item,\n            sourceModel = _ref5.sourceModel,\n            targetModel = _ref5.targetModel,\n            sourceIndex = _ref5.sourceIndex,\n            targetIndex = _ref5.targetIndex;\n        item.definition = item || {};\n        item.html = item.html || {};\n\n        if (item.definition && item.html) {\n          var currRowId = target.getAttribute('data-current-row-id');\n          var currPageId = target.getAttribute('data-current-page-id');\n          var currcolumnId = target.getAttribute('data-current-column-id');\n\n          if (item.html.category === 'form') {\n            if (!item.name) {\n              item.name = \"name__\".concat(new Date().getUTCMilliseconds());\n            }\n\n            if (!item.options) {\n              item.options = {};\n\n              if (!item.options.nullable) {\n                item.options.nullable = true;\n              }\n            }\n          }\n\n          var params = {\n            project_id: _this4.project_id,\n            page: {\n              currPageId: currPageId,\n              currRowId: currRowId,\n              currColumnId: currcolumnId\n            },\n            contentPos: targetModel.map(function (item) {\n              return item.id ? item.id : null;\n            }),\n            html: item.html,\n            definition: item\n          };\n          console.info('content sorted', params);\n\n          if (typeof item.id != 'undefined') {\n            params['id'] = item.id;\n          }\n          /*this.contentService.storeContent(params)\r\n             .subscribe(result => {\r\n                 if(result.success){\r\n                     this.loadFormBuilder();\r\n                     this.dropModelPageUpdated = true;\r\n                 }\r\n             });\r\n          */\n\n        }\n      }));\n    }\n  }]);\n\n  return FormPagesComponent;\n}();\n\nFormPagesComponent.ctorParameters = function () {\n  return [{\n    type: FormConfigService\n  }, {\n    type: DragulaService\n  }, {\n    type: PageService\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ContentService\n  }, {\n    type: RowService\n  }, {\n    type: ColumnService\n  }, {\n    type: ActivatedRoute\n  }, {\n    type: HomeService\n  }, {\n    type: NgxUiLoaderService\n  }];\n};\n\nFormPagesComponent.propDecorators = {\n  pages: [{\n    type: Input\n  }],\n  pagesChange: [{\n    type: Output\n  }]\n};\nFormPagesComponent = __decorate([Component({\n  selector: 'app-form-pages',\n  template: __NG_CLI_RESOURCE__0,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [__NG_CLI_RESOURCE__1]\n}), __metadata(\"design:paramtypes\", [FormConfigService, DragulaService, PageService, ChangeDetectorRef, ContentService, RowService, ColumnService, ActivatedRoute, HomeService, NgxUiLoaderService])], FormPagesComponent);\nexport { FormPagesComponent };","map":{"version":3,"sources":["C:/dev/saltiest/src/app/form-pages/form-pages.component.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__NG_CLI_RESOURCE__0","__NG_CLI_RESOURCE__1","Component","Input","Output","EventEmitter","ChangeDetectionStrategy","ChangeDetectorRef","FormConfigService","DragulaService","Subscription","BootstrapHtmlTemplate","PageService","ContentService","RowService","ColumnService","ActivatedRoute","NgxUiLoaderService","HomeService","FormPagesComponent","formConfigService","dragulaService","pageService","cd","contentService","rowService","columnService","route","homeService","ngxLoader","pagesChange","subs","dropModelPageUpdated","initDragAndDrop","changes","console","log","pages","getConfig","subscribe","data","config","assign","add","dropModel","name","el","source","item","sourceModel","targetModel","sourceIndex","targetIndex","params","project_id","pagesPos","map","id","pageTargetIndex","detectChanges","emit","destroy","unsubscribe","pageIndex","splice","start","getPageByProjectId","result","success","stop","createGroup","copy","className","copyItem","accepts","sibling","moves","container","handle","classList","contains","currRowIndex","getAttribute","currPageIndex","currentClass","currRowId","gridArr","rows","grid","split","aux","newGrid","join","trim","JSON","parse","stringify","targetPageId","columns","gridsArray","line","replace","filter","arrNumbers","j","push","contents","totalOfRowsDragged","page","parseInt","rowPos","cloned","clone","original","cloneType","currentDataAttr","remove","innerHTML","insertAdjacentHTML","get","definition","html","currPageId","currcolumnId","category","Date","getUTCMilliseconds","options","nullable","currColumnId","contentPos","info","ctorParameters","type","propDecorators","selector","template","changeDetection","OnPush","styles"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport __NG_CLI_RESOURCE__0 from \"./form-pages.component.html?ngResource\";\r\nimport __NG_CLI_RESOURCE__1 from \"./form-pages.component.css?ngResource\";\r\nimport { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { FormConfigService } from './../_services/form-config.service';\r\nimport { DragulaService } from 'ng2-dragula';\r\nimport { Subscription } from 'rxjs';\r\nimport { BootstrapHtmlTemplate } from '../_services/bootstrap-html-template.service';\r\nimport { PageService } from '../shared/services/page.service';\r\nimport { ContentService } from '../shared/services/content.service';\r\nimport { RowService } from '../shared/services/row.service';\r\nimport { ColumnService } from '../shared/services/column.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\r\nimport { HomeService } from '../shared/services/home.service';\r\nlet FormPagesComponent = class FormPagesComponent {\r\n    constructor(formConfigService, dragulaService, pageService, cd, contentService, rowService, columnService, route, homeService, ngxLoader) {\r\n        this.formConfigService = formConfigService;\r\n        this.dragulaService = dragulaService;\r\n        this.pageService = pageService;\r\n        this.cd = cd;\r\n        this.contentService = contentService;\r\n        this.rowService = rowService;\r\n        this.columnService = columnService;\r\n        this.route = route;\r\n        this.homeService = homeService;\r\n        this.ngxLoader = ngxLoader;\r\n        this.pagesChange = new EventEmitter();\r\n        this.subs = new Subscription();\r\n        this.dropModelPageUpdated = false;\r\n        this.initDragAndDrop();\r\n    }\r\n    ngOnChanges(changes) {\r\n        console.log('changes', changes);\r\n        if (changes.pages) {\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.formConfigService.getConfig()\r\n            .subscribe(data => {\r\n            this.config = Object.assign({}, data);\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        this.subs.add(this.dragulaService.dropModel(\"pages\")\r\n            .subscribe(({ name, el, target, source, item, sourceModel, targetModel, sourceIndex, targetIndex }) => {\r\n            const params = {\r\n                project_id: this.project_id,\r\n                pagesPos: targetModel.map(item => {\r\n                    return item.id;\r\n                }),\r\n                pageTargetIndex: targetIndex,\r\n            };\r\n            this.dropModelPageUpdated = true;\r\n            /*this.pageService.updatePagesPosition(data.project_id, params)\r\n            .subscribe(result => {\r\n                console.log(result);\r\n            });*/\r\n        }));\r\n    }\r\n    ngAfterContentChecked() {\r\n        this.cd.detectChanges();\r\n    }\r\n    ngDoCheck() {\r\n        if (this.dropModelPageUpdated) { // this excutes if this.dropModelUpdated is true only\r\n            this.pagesChange.emit(this.pages);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.dragulaService.destroy('pages');\r\n        this.dragulaService.destroy('contents');\r\n        this.dragulaService.destroy('columns');\r\n        this.dragulaService.destroy('rowSortable');\r\n        this.dragulaService.destroy('sortableElements');\r\n        this.subs.unsubscribe();\r\n    }\r\n    deletePage(pageIndex) {\r\n        this.pages.splice(pageIndex, 1);\r\n        this.pagesChange.emit(this.pages);\r\n        this.cd.detectChanges();\r\n    }\r\n    loadFormBuilder() {\r\n        this.ngxLoader.start();\r\n        this.pageService.getPageByProjectId(this.project_id)\r\n            .subscribe(result => {\r\n            if (result.success) {\r\n                //this.pages = result.paginate.data;\r\n            }\r\n            this.ngxLoader.stop();\r\n        });\r\n    }\r\n    initDragAndDrop() {\r\n        this.dragulaService.createGroup('pages', {\r\n            copy: (el, source) => {\r\n                return source.className === 'menu-page-sortable';\r\n            },\r\n            copyItem: (el) => {\r\n                return el;\r\n                //console.log(el);\r\n            },\r\n            accepts: (el, target, source, sibling) => {\r\n                // To avoid dragging from right to left container\r\n                return target.className !== 'menu-page-sortable';\r\n            },\r\n            moves: (el, container, handle) => {\r\n                if (handle.classList) {\r\n                    return handle.classList.contains('page-handle');\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        this.dragulaService.createGroup('columns', {\r\n            accepts: function (el, target, source, sibling) {\r\n                let currRowIndex = el.getAttribute('data-current-row-index');\r\n                let currPageIndex = el.getAttribute('data-current-page-index');\r\n                let currentClass = 'page-' + currPageIndex + '_row-' + currRowIndex;\r\n                return target.classList.contains(currentClass);\r\n            },\r\n            moves: (el, container, handle) => {\r\n                //let currColumnIndex = handle.getAttribute('data-current-column-index');\r\n                if (handle.classList) {\r\n                    return handle.classList.contains('column-handle');\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        this.subs.add(this.dragulaService.dropModel(\"columns\")\r\n            .subscribe(({ name, el, target, source, item, sourceModel, targetModel, sourceIndex, targetIndex }) => {\r\n            let currRowIndex = el.getAttribute('data-current-row-index');\r\n            let pageIndex = el.getAttribute('data-current-page-index');\r\n            let currRowId = target.getAttribute('data-current-row-id');\r\n            if (pageIndex != null && currRowIndex != null) {\r\n                let gridArr = this.pages[pageIndex].rows[currRowIndex].grid.split(\" \");\r\n                let aux = gridArr[sourceIndex];\r\n                gridArr.splice(sourceIndex, 1);\r\n                gridArr.splice(targetIndex, 0, aux);\r\n                let newGrid = gridArr.join(\" \").trim();\r\n                this.pages[pageIndex].rows[currRowIndex].grid = newGrid;\r\n                /*const params = {\r\n                    project_id: this.project_id,\r\n                    page: {\r\n                        currRowId: parseInt(currRowId)\r\n                    },\r\n                    newGrid: newGrid,\r\n                    columnPos: targetModel.map(item => {\r\n                        return item.id? item.id: null;\r\n                    })\r\n                }\r\n                this.columnService.updateColumn(params.page.currRowId, params)\r\n                    .subscribe(result => {\r\n                        if(result.success){\r\n                            this.loadFormBuilder();\r\n                            this.dropModelPageUpdated = true;\r\n                        }\r\n                    });*/\r\n            }\r\n        }));\r\n        this.dragulaService.createGroup('rowSortable', {\r\n            copy: (el, source) => {\r\n                return source.className === 'menu-row-sortable';\r\n            },\r\n            copyItem: (el) => {\r\n                return JSON.parse(JSON.stringify(el));\r\n            },\r\n            accepts: function (el, target, source, sibling) {\r\n                // To avoid draggin from right to left container\r\n                if (target.className !== 'menu-row-sortable') {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            moves: (el, container, handle) => {\r\n                if (handle.classList) {\r\n                    return handle.classList.contains('row-handle');\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        this.subs.add(this.dragulaService.dropModel(\"rowSortable\")\r\n            .subscribe(({ name, el, target, source, item, sourceModel, targetModel, sourceIndex, targetIndex }) => {\r\n            const targetPageId = target.getAttribute('data-current-page-id');\r\n            const currRowId = el.getAttribute('data-current-row-id');\r\n            console.log('item.grid', item.grid);\r\n            if (typeof item.grid != 'undefined' && typeof item.columns == 'undefined') { //gambiarra, mas funciona\r\n                //let rows = [];\r\n                let gridsArray = item.grid.trim().split(\"\\n\");\r\n                delete item.grid;\r\n                let rows = gridsArray.map(line => {\r\n                    return line.replace(/\\s+/g, ' ').trim();\r\n                })\r\n                    .filter(line => line)\r\n                    .map(line => {\r\n                    const arrNumbers = line.split(' ');\r\n                    let columns = [];\r\n                    if (arrNumbers.length > 0) {\r\n                        for (let j = 0; j < arrNumbers.length; j++) {\r\n                            columns.push({\r\n                                contents: []\r\n                            });\r\n                        }\r\n                    }\r\n                    return {\r\n                        grid: line,\r\n                        columns: columns\r\n                    };\r\n                });\r\n                console.log('targetModel', targetModel, 'sourceModel', sourceModel, 'targetIndex', targetIndex);\r\n                targetModel.splice(targetIndex, 1);\r\n                //targetIndex: Position \r\n                const totalOfRowsDragged = rows.length;\r\n                for (let i = 0; i < totalOfRowsDragged; i++) {\r\n                    targetModel.splice(targetIndex + i, 0, rows[i]);\r\n                }\r\n                /*\r\n                //API\r\n                const params = {\r\n                    project_id: this.project_id,\r\n                    page: {\r\n                        targetPageId: parseInt(targetPageId)\r\n                    },\r\n                    rowsPos: targetModel.map(item => {\r\n                        return item.id? item.id: null;\r\n                    }),\r\n                    rowTargetIndex: targetIndex,\r\n                    rows: rows\r\n                };\r\n                console.info('row sorted', params);\r\n                if(rows.length > 0){\r\n                    this.rowService.storeRow(params)\r\n                        .subscribe(result => {\r\n                            if(result.success){\r\n                                this.loadFormBuilder();\r\n                                this.dropModelPageUpdated = true;\r\n                            }\r\n                        });\r\n                }*/\r\n            }\r\n            else {\r\n                const params = {\r\n                    project_id: this.project_id,\r\n                    page: {\r\n                        currRowId: parseInt(currRowId),\r\n                        targetPageId: parseInt(targetPageId)\r\n                    },\r\n                    rowPos: targetModel.map(item => {\r\n                        return item.id ? item.id : null;\r\n                    })\r\n                };\r\n                /*this.rowService.updateRow(params.page.targetPageId, params)\r\n                    .subscribe(result => {\r\n                        if(result.success){\r\n                            this.loadFormBuilder();\r\n                            this.dropModelPageUpdated = true;\r\n                        }\r\n                    });*/\r\n            }\r\n            return item;\r\n        }));\r\n        this.dragulaService.createGroup('contents', {\r\n            copy: (el, source) => {\r\n                return source.classList.contains('menu-content-sortable');\r\n            },\r\n            copyItem: (el) => {\r\n                console.log(el);\r\n                return JSON.parse(JSON.stringify(el));\r\n            },\r\n            accepts: (el, target, source, sibling) => {\r\n                // To avoid dragging from right to left container\r\n                return !target.classList.contains('menu-content-sortable');\r\n            },\r\n            moves: (el, container, handle) => {\r\n                if (handle.classList) {\r\n                    return handle.classList.contains('content-handle');\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        this.subs.add(this.dragulaService.cloned(\"contents\")\r\n            .subscribe(({ name, clone, original, cloneType }) => {\r\n            if (original.classList.contains('menu-content-sortable')) {\r\n                let currentDataAttr = JSON.parse(original.getAttribute('data-content'));\r\n                let r = new BootstrapHtmlTemplate();\r\n                clone.classList.remove('badge', 'bg-dark', 'col-md-6', 'bg-primary', 'text-white');\r\n                clone.innerHTML = '';\r\n                clone.insertAdjacentHTML('afterbegin', '<div class=\"px-1 py-1 bg-white text-dark\" style=\"min-width: 300px;\">' + r.get(currentDataAttr) + '</div>');\r\n            }\r\n        }));\r\n        this.subs.add(this.dragulaService.dropModel(\"contents\")\r\n            .subscribe(({ name, el, target, source, item, sourceModel, targetModel, sourceIndex, targetIndex }) => {\r\n            item.definition = item || {};\r\n            item.html = item.html || {};\r\n            if (item.definition && item.html) {\r\n                const currRowId = target.getAttribute('data-current-row-id');\r\n                const currPageId = target.getAttribute('data-current-page-id');\r\n                const currcolumnId = target.getAttribute('data-current-column-id');\r\n                if (item.html.category === 'form') {\r\n                    if (!item.name) {\r\n                        item.name = `name__${new Date().getUTCMilliseconds()}`;\r\n                    }\r\n                    if (!item.options) {\r\n                        item.options = {};\r\n                        if (!item.options.nullable) {\r\n                            item.options.nullable = true;\r\n                        }\r\n                    }\r\n                }\r\n                const params = {\r\n                    project_id: this.project_id,\r\n                    page: {\r\n                        currPageId: currPageId,\r\n                        currRowId: currRowId,\r\n                        currColumnId: currcolumnId\r\n                    },\r\n                    contentPos: targetModel\r\n                        .map(item => {\r\n                        return item.id\r\n                            ? item.id\r\n                            : null;\r\n                    }),\r\n                    html: item.html,\r\n                    definition: item\r\n                };\r\n                console.info('content sorted', params);\r\n                if (typeof item.id != 'undefined') {\r\n                    params['id'] = item.id;\r\n                }\r\n                /*this.contentService.storeContent(params)\r\n                   .subscribe(result => {\r\n                       if(result.success){\r\n                           this.loadFormBuilder();\r\n                           this.dropModelPageUpdated = true;\r\n                       }\r\n                   });\r\n               */\r\n            }\r\n        }));\r\n    }\r\n};\r\nFormPagesComponent.ctorParameters = () => [\r\n    { type: FormConfigService },\r\n    { type: DragulaService },\r\n    { type: PageService },\r\n    { type: ChangeDetectorRef },\r\n    { type: ContentService },\r\n    { type: RowService },\r\n    { type: ColumnService },\r\n    { type: ActivatedRoute },\r\n    { type: HomeService },\r\n    { type: NgxUiLoaderService }\r\n];\r\nFormPagesComponent.propDecorators = {\r\n    pages: [{ type: Input }],\r\n    pagesChange: [{ type: Output }]\r\n};\r\nFormPagesComponent = __decorate([\r\n    Component({\r\n        selector: 'app-form-pages',\r\n        template: __NG_CLI_RESOURCE__0,\r\n        changeDetection: ChangeDetectionStrategy.OnPush,\r\n        styles: [__NG_CLI_RESOURCE__1]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [FormConfigService,\r\n        DragulaService,\r\n        PageService,\r\n        ChangeDetectorRef,\r\n        ContentService,\r\n        RowService,\r\n        ColumnService,\r\n        ActivatedRoute,\r\n        HomeService,\r\n        NgxUiLoaderService])\r\n], FormPagesComponent);\r\nexport { FormPagesComponent };\r\n"]},"metadata":{},"sourceType":"module"}