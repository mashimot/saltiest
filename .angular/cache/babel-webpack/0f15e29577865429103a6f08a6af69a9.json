{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { EventEmitter, ChangeDetectorRef, SimpleChanges } from '@angular/core';\nimport { FormConfigService } from './../_services/form-config.service';\nimport { DragulaService } from 'ng2-dragula';\nimport { Observable, Subscription } from 'rxjs';\nimport { BootstrapHtmlTemplate } from '../_services/bootstrap-html-template.service';\nimport { PageService } from '../shared/services/page.service';\nimport { ContentService } from '../shared/services/content.service';\nimport { RowService } from '../shared/services/row.service';\nimport { ColumnService } from '../shared/services/column.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { HomeService } from '../shared/services/home.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../_services/form-config.service\";\nimport * as i2 from \"ng2-dragula\";\nimport * as i3 from \"../shared/services/page.service\";\nimport * as i4 from \"../shared/services/content.service\";\nimport * as i5 from \"../shared/services/row.service\";\nimport * as i6 from \"../shared/services/column.service\";\nimport * as i7 from \"@angular/router\";\nimport * as i8 from \"../shared/services/home.service\";\nimport * as i9 from \"ngx-ui-loader\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"ngx-sortablejs\";\nimport * as i12 from \"./form-rows/form-rows.component\";\n\nvar _c0 = function _c0(a0) {\n  return {\n    \"border border-dark bg-white text-dark\": a0\n  };\n};\n\nvar _c1 = function _c1() {\n  return {\n    cursor: \"move\"\n  };\n};\n\nvar _c2 = function _c2() {\n  return {\n    \"cursor\": \"move\"\n  };\n};\n\nvar _c3 = function _c3() {\n  return {\n    cursor: \"pointer\"\n  };\n};\n\nfunction FormPagesComponent_ng_container_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵelementStart(2, \"div\", 6);\n    i0.ɵɵelementStart(3, \"div\", 7);\n    i0.ɵɵelementStart(4, \"small\", 8);\n    i0.ɵɵelement(5, \"i\", 9);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 10);\n    i0.ɵɵelementStart(8, \"small\", 11);\n    i0.ɵɵlistener(\"click\", function FormPagesComponent_ng_container_0_div_5_Template_small_click_8_listener() {\n      var restoredCtx = i0.ɵɵrestoreView(_r7);\n      var pageIndex_r5 = restoredCtx.index;\n      var ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.deletePage(pageIndex_r5);\n    });\n    i0.ɵɵelement(9, \"i\", 12);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"div\", 13);\n    i0.ɵɵelement(12, \"app-form-rows\", 14);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var page_r4 = ctx.$implicit;\n    var pageIndex_r5 = ctx.index;\n    var ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, !(ctx_r3.config == null ? null : ctx_r3.config.previewMode)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r3.config == null ? null : ctx_r3.config.previewMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(13, _c1));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(14, _c2));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" page \", pageIndex_r5 + 1, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(15, _c3));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" page \", pageIndex_r5 + 1, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r3.config == null ? null : ctx_r3.config.previewMode);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"page\", page_r4)(\"pageIndex\", pageIndex_r5)(\"pageId\", page_r4.id);\n  }\n}\n\nvar _c4 = function _c4() {\n  return {\n    animation: 150\n  };\n};\n\nfunction FormPagesComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"pre\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"json\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 2);\n    i0.ɵɵtemplate(5, FormPagesComponent_ng_container_0_div_5_Template, 13, 16, \"div\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 4, ctx_r0.pages));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"sortablejsOptions\", i0.ɵɵpureFunction0(6, _c4))(\"sortablejs\", ctx_r0.pages);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.pages);\n  }\n}\n\nfunction FormPagesComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Add a New Page \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport var FormPagesComponent = /*#__PURE__*/(function () {\n  var FormPagesComponent = /*#__PURE__*/function () {\n    function FormPagesComponent(formConfigService, dragulaService, pageService, cd, contentService, rowService, columnService, route, homeService, ngxLoader) {\n      _classCallCheck(this, FormPagesComponent);\n\n      this.formConfigService = formConfigService;\n      this.dragulaService = dragulaService;\n      this.pageService = pageService;\n      this.cd = cd;\n      this.contentService = contentService;\n      this.rowService = rowService;\n      this.columnService = columnService;\n      this.route = route;\n      this.homeService = homeService;\n      this.ngxLoader = ngxLoader;\n      this.pagesChange = new EventEmitter();\n      this.subs = new Subscription();\n      this.items = [1, 2, 3, 4, 5];\n      this.dropModelPageUpdated = false;\n      this.initDragAndDrop();\n    }\n\n    _createClass(FormPagesComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        console.log('changes', changes);\n\n        if (changes.pages) {}\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        this.formConfigService.getConfig().subscribe(function (data) {\n          _this.config = Object.assign({}, data);\n        });\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this2 = this;\n\n        this.subs.add(this.dragulaService.dropModel(\"pages\").subscribe(function (_ref) {\n          var name = _ref.name,\n              el = _ref.el,\n              target = _ref.target,\n              source = _ref.source,\n              item = _ref.item,\n              sourceModel = _ref.sourceModel,\n              targetModel = _ref.targetModel,\n              sourceIndex = _ref.sourceIndex,\n              targetIndex = _ref.targetIndex;\n          var params = {\n            project_id: _this2.project_id,\n            pagesPos: targetModel.map(function (item) {\n              return item.id;\n            }),\n            pageTargetIndex: targetIndex\n          };\n          _this2.dropModelPageUpdated = true;\n          /*this.pageService.updatePagesPosition(data.project_id, params)\r\n          .subscribe(result => {\r\n              console.log(result);\r\n          });*/\n        }));\n      }\n    }, {\n      key: \"ngAfterContentChecked\",\n      value: function ngAfterContentChecked() {\n        this.cd.detectChanges();\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this.dropModelPageUpdated) {\n          // this excutes if this.dropModelUpdated is true only\n          this.pagesChange.emit(this.pages);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.dragulaService.destroy('pages');\n        this.dragulaService.destroy('contents');\n        this.dragulaService.destroy('columns');\n        this.dragulaService.destroy('rowSortable');\n        this.dragulaService.destroy('sortableElements');\n        this.subs.unsubscribe();\n      }\n    }, {\n      key: \"deletePage\",\n      value: function deletePage(pageIndex) {\n        this.pages.splice(pageIndex, 1);\n        this.pagesChange.emit(this.pages);\n        this.cd.detectChanges();\n      }\n    }, {\n      key: \"loadFormBuilder\",\n      value: function loadFormBuilder() {\n        var _this3 = this;\n\n        this.ngxLoader.start();\n        this.pageService.getPageByProjectId(this.project_id).subscribe(function (result) {\n          if (result.success) {//this.pages = result.paginate.data;\n          }\n\n          _this3.ngxLoader.stop();\n        });\n      }\n    }, {\n      key: \"initDragAndDrop\",\n      value: function initDragAndDrop() {\n        var _this4 = this;\n\n        this.dragulaService.createGroup('pages', {\n          copy: function copy(el, source) {\n            return source.className === 'menu-page-sortable';\n          },\n          copyItem: function copyItem(el) {\n            return el; //console.log(el);\n          },\n          accepts: function accepts(el, target, source, sibling) {\n            // To avoid dragging from right to left container\n            return target.className !== 'menu-page-sortable';\n          },\n          moves: function moves(el, container, handle) {\n            if (handle.classList) {\n              return handle.classList.contains('page-handle');\n            }\n\n            return false;\n          }\n        });\n        this.dragulaService.createGroup('columns', {\n          accepts: function accepts(el, target, source, sibling) {\n            var currRowIndex = el.getAttribute('data-current-row-index');\n            var currPageIndex = el.getAttribute('data-current-page-index');\n            var currentClass = 'page-' + currPageIndex + '_row-' + currRowIndex;\n            return target.classList.contains(currentClass);\n          },\n          moves: function moves(el, container, handle) {\n            //let currColumnIndex = handle.getAttribute('data-current-column-index');\n            if (handle.classList) {\n              return handle.classList.contains('column-handle');\n            }\n\n            return false;\n          }\n        });\n        this.subs.add(this.dragulaService.dropModel(\"columns\").subscribe(function (_ref2) {\n          var name = _ref2.name,\n              el = _ref2.el,\n              target = _ref2.target,\n              source = _ref2.source,\n              item = _ref2.item,\n              sourceModel = _ref2.sourceModel,\n              targetModel = _ref2.targetModel,\n              sourceIndex = _ref2.sourceIndex,\n              targetIndex = _ref2.targetIndex;\n          var currRowIndex = el.getAttribute('data-current-row-index');\n          var pageIndex = el.getAttribute('data-current-page-index');\n          var currRowId = target.getAttribute('data-current-row-id');\n\n          if (pageIndex != null && currRowIndex != null) {\n            var gridArr = _this4.pages[pageIndex].rows[currRowIndex].grid.split(\" \");\n\n            var aux = gridArr[sourceIndex];\n            gridArr.splice(sourceIndex, 1);\n            gridArr.splice(targetIndex, 0, aux);\n            var newGrid = gridArr.join(\" \").trim();\n            _this4.pages[pageIndex].rows[currRowIndex].grid = newGrid;\n            /*const params = {\r\n                project_id: this.project_id,\r\n                page: {\r\n                    currRowId: parseInt(currRowId)\r\n                },\r\n                newGrid: newGrid,\r\n                columnPos: targetModel.map(item => {\r\n                    return item.id? item.id: null;\r\n                })\r\n            }\r\n            this.columnService.updateColumn(params.page.currRowId, params)\r\n                .subscribe(result => {\r\n                    if(result.success){\r\n                        this.loadFormBuilder();\r\n                        this.dropModelPageUpdated = true;\r\n                    }\r\n                });*/\n          }\n        }));\n        this.dragulaService.createGroup('rowSortable', {\n          copy: function copy(el, source) {\n            return source.className === 'menu-row-sortable';\n          },\n          copyItem: function copyItem(el) {\n            return JSON.parse(JSON.stringify(el));\n          },\n          accepts: function accepts(el, target, source, sibling) {\n            // To avoid draggin from right to left container\n            if (target.className !== 'menu-row-sortable') {\n              return true;\n            }\n\n            return false;\n          },\n          moves: function moves(el, container, handle) {\n            if (handle.classList) {\n              return handle.classList.contains('row-handle');\n            }\n\n            return false;\n          }\n        });\n        this.subs.add(this.dragulaService.dropModel(\"rowSortable\").subscribe(function (_ref3) {\n          var name = _ref3.name,\n              el = _ref3.el,\n              target = _ref3.target,\n              source = _ref3.source,\n              item = _ref3.item,\n              sourceModel = _ref3.sourceModel,\n              targetModel = _ref3.targetModel,\n              sourceIndex = _ref3.sourceIndex,\n              targetIndex = _ref3.targetIndex;\n          var targetPageId = target.getAttribute('data-current-page-id');\n          var currRowId = el.getAttribute('data-current-row-id');\n          console.log('item.grid', item.grid);\n\n          if (typeof item.grid != 'undefined' && typeof item.columns == 'undefined') {\n            //gambiarra, mas funciona\n            //let rows = [];\n            var gridsArray = item.grid.trim().split(\"\\n\");\n            delete item.grid;\n            var rows = gridsArray.map(function (line) {\n              return line.replace(/\\s+/g, ' ').trim();\n            }).filter(function (line) {\n              return line;\n            }).map(function (line) {\n              var arrNumbers = line.split(' ');\n              var columns = [];\n\n              if (arrNumbers.length > 0) {\n                for (var j = 0; j < arrNumbers.length; j++) {\n                  columns.push({\n                    contents: []\n                  });\n                }\n              }\n\n              return {\n                grid: line,\n                columns: columns\n              };\n            });\n            console.log('targetModel', targetModel, 'sourceModel', sourceModel, 'targetIndex', targetIndex);\n            targetModel.splice(targetIndex, 1); //targetIndex: Position \n\n            var totalOfRowsDragged = rows.length;\n\n            for (var i = 0; i < totalOfRowsDragged; i++) {\n              targetModel.splice(targetIndex + i, 0, rows[i]);\n            }\n            /*\r\n            //API\r\n            const params = {\r\n                project_id: this.project_id,\r\n                page: {\r\n                    targetPageId: parseInt(targetPageId)\r\n                },\r\n                rowsPos: targetModel.map(item => {\r\n                    return item.id? item.id: null;\r\n                }),\r\n                rowTargetIndex: targetIndex,\r\n                rows: rows\r\n            };\r\n            console.info('row sorted', params);\r\n            if(rows.length > 0){\r\n                this.rowService.storeRow(params)\r\n                    .subscribe(result => {\r\n                        if(result.success){\r\n                            this.loadFormBuilder();\r\n                            this.dropModelPageUpdated = true;\r\n                        }\r\n                    });\r\n            }*/\n\n          } else {\n            var params = {\n              project_id: _this4.project_id,\n              page: {\n                currRowId: parseInt(currRowId),\n                targetPageId: parseInt(targetPageId)\n              },\n              rowPos: targetModel.map(function (item) {\n                return item.id ? item.id : null;\n              })\n            };\n            /*this.rowService.updateRow(params.page.targetPageId, params)\r\n                .subscribe(result => {\r\n                    if(result.success){\r\n                        this.loadFormBuilder();\r\n                        this.dropModelPageUpdated = true;\r\n                    }\r\n                });*/\n          }\n\n          return item;\n        }));\n        this.dragulaService.createGroup('contents', {\n          copy: function copy(el, source) {\n            return source.classList.contains('menu-content-sortable');\n          },\n          copyItem: function copyItem(el) {\n            console.log(el);\n            return JSON.parse(JSON.stringify(el));\n          },\n          accepts: function accepts(el, target, source, sibling) {\n            // To avoid dragging from right to left container\n            return !target.classList.contains('menu-content-sortable');\n          },\n          moves: function moves(el, container, handle) {\n            if (handle.classList) {\n              return handle.classList.contains('content-handle');\n            }\n\n            return false;\n          }\n        });\n        this.subs.add(this.dragulaService.cloned(\"contents\").subscribe(function (_ref4) {\n          var name = _ref4.name,\n              clone = _ref4.clone,\n              original = _ref4.original,\n              cloneType = _ref4.cloneType;\n\n          if (original.classList.contains('menu-content-sortable')) {\n            var currentDataAttr = JSON.parse(original.getAttribute('data-content'));\n            var r = new BootstrapHtmlTemplate();\n            clone.classList.remove('badge', 'bg-dark', 'col-md-6', 'bg-primary', 'text-white');\n            clone.innerHTML = '';\n            clone.insertAdjacentHTML('afterbegin', '<div class=\"px-1 py-1 bg-white text-dark\" style=\"min-width: 300px;\">' + r.get(currentDataAttr) + '</div>');\n          }\n        }));\n        this.subs.add(this.dragulaService.dropModel(\"contents\").subscribe(function (_ref5) {\n          var name = _ref5.name,\n              el = _ref5.el,\n              target = _ref5.target,\n              source = _ref5.source,\n              item = _ref5.item,\n              sourceModel = _ref5.sourceModel,\n              targetModel = _ref5.targetModel,\n              sourceIndex = _ref5.sourceIndex,\n              targetIndex = _ref5.targetIndex;\n          item.definition = item || {};\n          item.html = item.html || {};\n\n          if (item.definition && item.html) {\n            var currRowId = target.getAttribute('data-current-row-id');\n            var currPageId = target.getAttribute('data-current-page-id');\n            var currcolumnId = target.getAttribute('data-current-column-id');\n\n            if (item.html.category === 'form') {\n              if (!item.name) {\n                item.name = \"name__\".concat(new Date().getUTCMilliseconds());\n              }\n\n              if (!item.options) {\n                item.options = {};\n\n                if (!item.options.nullable) {\n                  item.options.nullable = true;\n                }\n              }\n            }\n\n            var params = {\n              project_id: _this4.project_id,\n              page: {\n                currPageId: currPageId,\n                currRowId: currRowId,\n                currColumnId: currcolumnId\n              },\n              contentPos: targetModel.map(function (item) {\n                return item.id ? item.id : null;\n              }),\n              html: item.html,\n              definition: item\n            };\n            console.info('content sorted', params);\n\n            if (typeof item.id != 'undefined') {\n              params['id'] = item.id;\n            }\n            /*this.contentService.storeContent(params)\r\n               .subscribe(result => {\r\n                   if(result.success){\r\n                       this.loadFormBuilder();\r\n                       this.dropModelPageUpdated = true;\r\n                   }\r\n               });\r\n            */\n\n          }\n        }));\n      }\n    }]);\n\n    return FormPagesComponent;\n  }();\n\n  FormPagesComponent.ɵfac = function FormPagesComponent_Factory(t) {\n    return new (t || FormPagesComponent)(i0.ɵɵdirectiveInject(i1.FormConfigService), i0.ɵɵdirectiveInject(i2.DragulaService), i0.ɵɵdirectiveInject(i3.PageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.ContentService), i0.ɵɵdirectiveInject(i5.RowService), i0.ɵɵdirectiveInject(i6.ColumnService), i0.ɵɵdirectiveInject(i7.ActivatedRoute), i0.ɵɵdirectiveInject(i8.HomeService), i0.ɵɵdirectiveInject(i9.NgxUiLoaderService));\n  };\n\n  FormPagesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormPagesComponent,\n    selectors: [[\"app-form-pages\"]],\n    inputs: {\n      pages: \"pages\"\n    },\n    outputs: {\n      pagesChange: \"pagesChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[4, \"ngIf\", \"ngIfElse\"], [\"pagesEmpty\", \"\"], [3, \"sortablejsOptions\", \"sortablejs\"], [\"class\", \"p-2\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"p-2\", 3, \"ngClass\"], [1, \"row\", 3, \"hidden\"], [1, \"col-md-12\", \"page-handle\", 3, \"ngStyle\"], [1, \"float-left\"], [1, \"page-handle\", 3, \"ngStyle\"], [1, \"fa\", \"fa-arrows-alt\"], [1, \"float-right\"], [1, \"badge\", \"btn-outline-danger\", 3, \"ngStyle\", \"click\"], [1, \"fas\", \"fa-window-close\"], [1, \"border-bottom\", \"border-secondary\", 3, \"hidden\"], [3, \"page\", \"pageIndex\", \"pageId\"], [1, \"alert\", \"alert-danger\"]],\n    template: function FormPagesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FormPagesComponent_ng_container_0_Template, 6, 7, \"ng-container\", 0);\n        i0.ɵɵtemplate(1, FormPagesComponent_ng_template_1_Template, 2, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        var _r1 = i0.ɵɵreference(2);\n\n        i0.ɵɵproperty(\"ngIf\", ctx.pages && ctx.pages.length > 0)(\"ngIfElse\", _r1);\n      }\n    },\n    directives: [i10.NgIf, i11.SortablejsDirective, i10.NgForOf, i10.NgClass, i10.NgStyle, i12.FormRowsComponent],\n    pipes: [i10.JsonPipe],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  return FormPagesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}