{"ast":null,"code":"'use strict';\n\nvar emitter = require('contra/emitter');\n\nvar crossvent = require('crossvent');\n\nvar classes = require('./classes');\n\nvar doc = document;\nvar documentElement = doc.documentElement;\n\nfunction dragula(initialContainers, options) {\n  var len = arguments.length;\n\n  if (len === 1 && Array.isArray(initialContainers) === false) {\n    options = initialContainers;\n    initialContainers = [];\n  }\n\n  var _mirror; // mirror image\n\n\n  var _source; // source container\n\n\n  var _item; // item being dragged\n\n\n  var _offsetX; // reference x\n\n\n  var _offsetY; // reference y\n\n\n  var _moveX; // reference move x\n\n\n  var _moveY; // reference move y\n\n\n  var _initialSibling; // reference sibling when grabbed\n\n\n  var _currentSibling; // reference sibling now\n\n\n  var _copy; // item used for copying\n\n\n  var _renderTimer; // timer for setTimeout renderMirrorImage\n\n\n  var _lastDropTarget = null; // last container item was over\n\n  var _grabbed; // holds mousedown context until first mousemove\n\n\n  var o = options || {};\n\n  if (o.moves === void 0) {\n    o.moves = always;\n  }\n\n  if (o.accepts === void 0) {\n    o.accepts = always;\n  }\n\n  if (o.invalid === void 0) {\n    o.invalid = invalidTarget;\n  }\n\n  if (o.containers === void 0) {\n    o.containers = initialContainers || [];\n  }\n\n  if (o.isContainer === void 0) {\n    o.isContainer = never;\n  }\n\n  if (o.copy === void 0) {\n    o.copy = false;\n  }\n\n  if (o.copySortSource === void 0) {\n    o.copySortSource = false;\n  }\n\n  if (o.revertOnSpill === void 0) {\n    o.revertOnSpill = false;\n  }\n\n  if (o.removeOnSpill === void 0) {\n    o.removeOnSpill = false;\n  }\n\n  if (o.direction === void 0) {\n    o.direction = 'vertical';\n  }\n\n  if (o.ignoreInputTextSelection === void 0) {\n    o.ignoreInputTextSelection = true;\n  }\n\n  if (o.mirrorContainer === void 0) {\n    o.mirrorContainer = doc.body;\n  }\n\n  var drake = emitter({\n    containers: o.containers,\n    start: manualStart,\n    end: end,\n    cancel: cancel,\n    remove: remove,\n    destroy: destroy,\n    canMove: canMove,\n    dragging: false\n  });\n\n  if (o.removeOnSpill === true) {\n    drake.on('over', spillOver).on('out', spillOut);\n  }\n\n  events();\n  return drake;\n\n  function isContainer(el) {\n    return drake.containers.indexOf(el) !== -1 || o.isContainer(el);\n  }\n\n  function events(remove) {\n    var op = remove ? 'remove' : 'add';\n    touchy(documentElement, op, 'mousedown', grab);\n    touchy(documentElement, op, 'mouseup', release);\n  }\n\n  function eventualMovements(remove) {\n    var op = remove ? 'remove' : 'add';\n    touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);\n  }\n\n  function movements(remove) {\n    var op = remove ? 'remove' : 'add';\n    crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8\n\n    crossvent[op](documentElement, 'click', preventGrabbed);\n  }\n\n  function destroy() {\n    events(true);\n    release({});\n  }\n\n  function preventGrabbed(e) {\n    if (_grabbed) {\n      e.preventDefault();\n    }\n  }\n\n  function grab(e) {\n    _moveX = e.clientX;\n    _moveY = e.clientY;\n    var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;\n\n    if (ignore) {\n      return; // we only care about honest-to-god left clicks and touch events\n    }\n\n    var item = e.target;\n    var context = canStart(item);\n\n    if (!context) {\n      return;\n    }\n\n    _grabbed = context;\n    eventualMovements();\n\n    if (e.type === 'mousedown') {\n      if (isInput(item)) {\n        // see also: https://github.com/bevacqua/dragula/issues/208\n        item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176\n      } else {\n        e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155\n      }\n    }\n  }\n\n  function startBecauseMouseMoved(e) {\n    if (!_grabbed) {\n      return;\n    }\n\n    if (whichMouseButton(e) === 0) {\n      release({});\n      return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope\n    } // truthy check fixes #239, equality fixes #207\n\n\n    if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {\n      return;\n    }\n\n    if (o.ignoreInputTextSelection) {\n      var clientX = getCoord('clientX', e);\n      var clientY = getCoord('clientY', e);\n      var elementBehindCursor = doc.elementFromPoint(clientX, clientY);\n\n      if (isInput(elementBehindCursor)) {\n        return;\n      }\n    }\n\n    var grabbed = _grabbed; // call to end() unsets _grabbed\n\n    eventualMovements(true);\n    movements();\n    end();\n    start(grabbed);\n    var offset = getOffset(_item);\n    _offsetX = getCoord('pageX', e) - offset.left;\n    _offsetY = getCoord('pageY', e) - offset.top;\n    classes.add(_copy || _item, 'gu-transit');\n    renderMirrorImage();\n    drag(e);\n  }\n\n  function canStart(item) {\n    if (drake.dragging && _mirror) {\n      return;\n    }\n\n    if (isContainer(item)) {\n      return; // don't drag container itself\n    }\n\n    var handle = item;\n\n    while (getParent(item) && isContainer(getParent(item)) === false) {\n      if (o.invalid(item, handle)) {\n        return;\n      }\n\n      item = getParent(item); // drag target should be a top element\n\n      if (!item) {\n        return;\n      }\n    }\n\n    var source = getParent(item);\n\n    if (!source) {\n      return;\n    }\n\n    if (o.invalid(item, handle)) {\n      return;\n    }\n\n    var movable = o.moves(item, source, handle, nextEl(item));\n\n    if (!movable) {\n      return;\n    }\n\n    return {\n      item: item,\n      source: source\n    };\n  }\n\n  function canMove(item) {\n    return !!canStart(item);\n  }\n\n  function manualStart(item) {\n    var context = canStart(item);\n\n    if (context) {\n      start(context);\n    }\n  }\n\n  function start(context) {\n    if (isCopy(context.item, context.source)) {\n      _copy = context.item.cloneNode(true);\n      drake.emit('cloned', _copy, context.item, 'copy');\n    }\n\n    _source = context.source;\n    _item = context.item;\n    _initialSibling = _currentSibling = nextEl(context.item);\n    drake.dragging = true;\n    drake.emit('drag', _item, _source);\n  }\n\n  function invalidTarget() {\n    return false;\n  }\n\n  function end() {\n    if (!drake.dragging) {\n      return;\n    }\n\n    var item = _copy || _item;\n    drop(item, getParent(item));\n  }\n\n  function ungrab() {\n    _grabbed = false;\n    eventualMovements(true);\n    movements(true);\n  }\n\n  function release(e) {\n    ungrab();\n\n    if (!drake.dragging) {\n      return;\n    }\n\n    var item = _copy || _item;\n    var clientX = getCoord('clientX', e);\n    var clientY = getCoord('clientY', e);\n    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);\n    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);\n\n    if (dropTarget && (_copy && o.copySortSource || !_copy || dropTarget !== _source)) {\n      drop(item, dropTarget);\n    } else if (o.removeOnSpill) {\n      remove();\n    } else {\n      cancel();\n    }\n  }\n\n  function drop(item, target) {\n    var parent = getParent(item);\n\n    if (_copy && o.copySortSource && target === _source) {\n      parent.removeChild(_item);\n    }\n\n    if (isInitialPlacement(target)) {\n      drake.emit('cancel', item, _source, _source);\n    } else {\n      drake.emit('drop', item, target, _source, _currentSibling);\n    }\n\n    cleanup();\n  }\n\n  function remove() {\n    if (!drake.dragging) {\n      return;\n    }\n\n    var item = _copy || _item;\n    var parent = getParent(item);\n\n    if (parent) {\n      parent.removeChild(item);\n    }\n\n    drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);\n    cleanup();\n  }\n\n  function cancel(revert) {\n    if (!drake.dragging) {\n      return;\n    }\n\n    var reverts = arguments.length > 0 ? revert : o.revertOnSpill;\n    var item = _copy || _item;\n    var parent = getParent(item);\n    var initial = isInitialPlacement(parent);\n\n    if (initial === false && reverts) {\n      if (_copy) {\n        if (parent) {\n          parent.removeChild(_copy);\n        }\n      } else {\n        _source.insertBefore(item, _initialSibling);\n      }\n    }\n\n    if (initial || reverts) {\n      drake.emit('cancel', item, _source, _source);\n    } else {\n      drake.emit('drop', item, parent, _source, _currentSibling);\n    }\n\n    cleanup();\n  }\n\n  function cleanup() {\n    var item = _copy || _item;\n    ungrab();\n    removeMirrorImage();\n\n    if (item) {\n      classes.rm(item, 'gu-transit');\n    }\n\n    if (_renderTimer) {\n      clearTimeout(_renderTimer);\n    }\n\n    drake.dragging = false;\n\n    if (_lastDropTarget) {\n      drake.emit('out', item, _lastDropTarget, _source);\n    }\n\n    drake.emit('dragend', item);\n    _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;\n  }\n\n  function isInitialPlacement(target, s) {\n    var sibling;\n\n    if (s !== void 0) {\n      sibling = s;\n    } else if (_mirror) {\n      sibling = _currentSibling;\n    } else {\n      sibling = nextEl(_copy || _item);\n    }\n\n    return target === _source && sibling === _initialSibling;\n  }\n\n  function findDropTarget(elementBehindCursor, clientX, clientY) {\n    var target = elementBehindCursor;\n\n    while (target && !accepted()) {\n      target = getParent(target);\n    }\n\n    return target;\n\n    function accepted() {\n      var droppable = isContainer(target);\n\n      if (droppable === false) {\n        return false;\n      }\n\n      var immediate = getImmediateChild(target, elementBehindCursor);\n      var reference = getReference(target, immediate, clientX, clientY);\n      var initial = isInitialPlacement(target, reference);\n\n      if (initial) {\n        return true; // should always be able to drop it right back where it was\n      }\n\n      return o.accepts(_item, target, _source, reference);\n    }\n  }\n\n  function drag(e) {\n    if (!_mirror) {\n      return;\n    }\n\n    e.preventDefault();\n    var clientX = getCoord('clientX', e);\n    var clientY = getCoord('clientY', e);\n    var x = clientX - _offsetX;\n    var y = clientY - _offsetY;\n    _mirror.style.left = x + 'px';\n    _mirror.style.top = y + 'px';\n    var item = _copy || _item;\n    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);\n    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);\n    var changed = dropTarget !== null && dropTarget !== _lastDropTarget;\n\n    if (changed || dropTarget === null) {\n      out();\n      _lastDropTarget = dropTarget;\n      over();\n    }\n\n    var parent = getParent(item);\n\n    if (dropTarget === _source && _copy && !o.copySortSource) {\n      if (parent) {\n        parent.removeChild(item);\n      }\n\n      return;\n    }\n\n    var reference;\n    var immediate = getImmediateChild(dropTarget, elementBehindCursor);\n\n    if (immediate !== null) {\n      reference = getReference(dropTarget, immediate, clientX, clientY);\n    } else if (o.revertOnSpill === true && !_copy) {\n      reference = _initialSibling;\n      dropTarget = _source;\n    } else {\n      if (_copy && parent) {\n        parent.removeChild(item);\n      }\n\n      return;\n    }\n\n    if (reference === null && changed || reference !== item && reference !== nextEl(item)) {\n      _currentSibling = reference;\n      dropTarget.insertBefore(item, reference);\n      drake.emit('shadow', item, dropTarget, _source);\n    }\n\n    function moved(type) {\n      drake.emit(type, item, _lastDropTarget, _source);\n    }\n\n    function over() {\n      if (changed) {\n        moved('over');\n      }\n    }\n\n    function out() {\n      if (_lastDropTarget) {\n        moved('out');\n      }\n    }\n  }\n\n  function spillOver(el) {\n    classes.rm(el, 'gu-hide');\n  }\n\n  function spillOut(el) {\n    if (drake.dragging) {\n      classes.add(el, 'gu-hide');\n    }\n  }\n\n  function renderMirrorImage() {\n    if (_mirror) {\n      return;\n    }\n\n    var rect = _item.getBoundingClientRect();\n\n    _mirror = _item.cloneNode(true);\n    _mirror.style.width = getRectWidth(rect) + 'px';\n    _mirror.style.height = getRectHeight(rect) + 'px';\n    classes.rm(_mirror, 'gu-transit');\n    classes.add(_mirror, 'gu-mirror');\n    o.mirrorContainer.appendChild(_mirror);\n    touchy(documentElement, 'add', 'mousemove', drag);\n    classes.add(o.mirrorContainer, 'gu-unselectable');\n    drake.emit('cloned', _mirror, _item, 'mirror');\n  }\n\n  function removeMirrorImage() {\n    if (_mirror) {\n      classes.rm(o.mirrorContainer, 'gu-unselectable');\n      touchy(documentElement, 'remove', 'mousemove', drag);\n      getParent(_mirror).removeChild(_mirror);\n      _mirror = null;\n    }\n  }\n\n  function getImmediateChild(dropTarget, target) {\n    var immediate = target;\n\n    while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {\n      immediate = getParent(immediate);\n    }\n\n    if (immediate === documentElement) {\n      return null;\n    }\n\n    return immediate;\n  }\n\n  function getReference(dropTarget, target, x, y) {\n    var horizontal = o.direction === 'horizontal';\n    var reference = target !== dropTarget ? inside() : outside();\n    return reference;\n\n    function outside() {\n      // slower, but able to figure out any position\n      var len = dropTarget.children.length;\n      var i;\n      var el;\n      var rect;\n\n      for (i = 0; i < len; i++) {\n        el = dropTarget.children[i];\n        rect = el.getBoundingClientRect();\n\n        if (horizontal && rect.left + rect.width / 2 > x) {\n          return el;\n        }\n\n        if (!horizontal && rect.top + rect.height / 2 > y) {\n          return el;\n        }\n      }\n\n      return null;\n    }\n\n    function inside() {\n      // faster, but only available if dropped inside a child element\n      var rect = target.getBoundingClientRect();\n\n      if (horizontal) {\n        return resolve(x > rect.left + getRectWidth(rect) / 2);\n      }\n\n      return resolve(y > rect.top + getRectHeight(rect) / 2);\n    }\n\n    function resolve(after) {\n      return after ? nextEl(target) : target;\n    }\n  }\n\n  function isCopy(item, container) {\n    return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);\n  }\n}\n\nfunction touchy(el, op, type, fn) {\n  var touch = {\n    mouseup: 'touchend',\n    mousedown: 'touchstart',\n    mousemove: 'touchmove'\n  };\n  var pointers = {\n    mouseup: 'pointerup',\n    mousedown: 'pointerdown',\n    mousemove: 'pointermove'\n  };\n  var microsoft = {\n    mouseup: 'MSPointerUp',\n    mousedown: 'MSPointerDown',\n    mousemove: 'MSPointerMove'\n  };\n\n  if (global.navigator.pointerEnabled) {\n    crossvent[op](el, pointers[type], fn);\n  } else if (global.navigator.msPointerEnabled) {\n    crossvent[op](el, microsoft[type], fn);\n  } else {\n    crossvent[op](el, touch[type], fn);\n    crossvent[op](el, type, fn);\n  }\n}\n\nfunction whichMouseButton(e) {\n  if (e.touches !== void 0) {\n    return e.touches.length;\n  }\n\n  if (e.which !== void 0 && e.which !== 0) {\n    return e.which;\n  } // see https://github.com/bevacqua/dragula/issues/261\n\n\n  if (e.buttons !== void 0) {\n    return e.buttons;\n  }\n\n  var button = e.button;\n\n  if (button !== void 0) {\n    // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575\n    return button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\n  }\n}\n\nfunction getOffset(el) {\n  var rect = el.getBoundingClientRect();\n  return {\n    left: rect.left + getScroll('scrollLeft', 'pageXOffset'),\n    top: rect.top + getScroll('scrollTop', 'pageYOffset')\n  };\n}\n\nfunction getScroll(scrollProp, offsetProp) {\n  if (typeof global[offsetProp] !== 'undefined') {\n    return global[offsetProp];\n  }\n\n  if (documentElement.clientHeight) {\n    return documentElement[scrollProp];\n  }\n\n  return doc.body[scrollProp];\n}\n\nfunction getElementBehindPoint(point, x, y) {\n  var p = point || {};\n  var state = p.className;\n  var el;\n  p.className += ' gu-hide';\n  el = doc.elementFromPoint(x, y);\n  p.className = state;\n  return el;\n}\n\nfunction never() {\n  return false;\n}\n\nfunction always() {\n  return true;\n}\n\nfunction getRectWidth(rect) {\n  return rect.width || rect.right - rect.left;\n}\n\nfunction getRectHeight(rect) {\n  return rect.height || rect.bottom - rect.top;\n}\n\nfunction getParent(el) {\n  return el.parentNode === doc ? null : el.parentNode;\n}\n\nfunction isInput(el) {\n  return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable(el);\n}\n\nfunction isEditable(el) {\n  if (!el) {\n    return false;\n  } // no parents were editable\n\n\n  if (el.contentEditable === 'false') {\n    return false;\n  } // stop the lookup\n\n\n  if (el.contentEditable === 'true') {\n    return true;\n  } // found a contentEditable element in the chain\n\n\n  return isEditable(getParent(el)); // contentEditable is set to 'inherit'\n}\n\nfunction nextEl(el) {\n  return el.nextElementSibling || manually();\n\n  function manually() {\n    var sibling = el;\n\n    do {\n      sibling = sibling.nextSibling;\n    } while (sibling && sibling.nodeType !== 1);\n\n    return sibling;\n  }\n}\n\nfunction getEventHost(e) {\n  // on touchend event, we have to use `e.changedTouches`\n  // see http://stackoverflow.com/questions/7192563/touchend-event-properties\n  // see https://github.com/bevacqua/dragula/issues/34\n  if (e.targetTouches && e.targetTouches.length) {\n    return e.targetTouches[0];\n  }\n\n  if (e.changedTouches && e.changedTouches.length) {\n    return e.changedTouches[0];\n  }\n\n  return e;\n}\n\nfunction getCoord(coord, e) {\n  var host = getEventHost(e);\n  var missMap = {\n    pageX: 'clientX',\n    // IE8\n    pageY: 'clientY' // IE8\n\n  };\n\n  if (coord in missMap && !(coord in host) && missMap[coord] in host) {\n    coord = missMap[coord];\n  }\n\n  return host[coord];\n}\n\nmodule.exports = dragula;","map":null,"metadata":{},"sourceType":"script"}