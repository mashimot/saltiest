{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport var AuthService = /*#__PURE__*/(function () {\n  var AuthService = /*#__PURE__*/function () {\n    function AuthService(http, router) {\n      _classCallCheck(this, AuthService);\n\n      this.http = http;\n      this.router = router;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        })\n      }; //private API_URL: string = 'http://localhost:8000/api';\n\n      this.API_URL = '/api';\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    _createClass(AuthService, [{\n      key: \"currentUserValue\",\n      get: function get() {\n        return this.currentUserSubject.getValue();\n      }\n    }, {\n      key: \"isLogged\",\n      value: function isLogged() {\n        return localStorage.getItem('currentUser') ? true : false;\n      }\n    }, {\n      key: \"login\",\n      value: function login(user) {\n        var _this = this;\n\n        /*return this.http.post<any>(`${this.API_URL}/auth/login`, {\r\n            username: user.username,\r\n            password: user.password\r\n        }, this.httpOptions)*/\n        return this.http.post(\"\".concat(this.API_URL, \"/auth/login\"), user, this.httpOptions).pipe(map(function (user) {\n          if (user && user.token) {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('currentUser', JSON.stringify(user));\n\n            _this.currentUserSubject.next(user);\n\n            _this.router.navigate(['/home']);\n          }\n\n          return user;\n        }), tap(function (user) {\n          console.log('user', user);\n        }));\n      }\n    }, {\n      key: \"getUser\",\n      value: function getUser() {\n        return JSON.parse(localStorage.getItem('currentUser'));\n      }\n    }, {\n      key: \"logout\",\n      value: function logout() {\n        // remove user from local storage to log user out\n        //localStorage.removeItem('currentUser');\n        localStorage.clear();\n        this.currentUserSubject.next(null);\n        this.router.navigate(['/login']);\n      }\n    }]);\n\n    return AuthService;\n  }();\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}