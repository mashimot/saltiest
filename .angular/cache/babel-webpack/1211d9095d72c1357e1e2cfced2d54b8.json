{"ast":null,"code":"import _classCallCheck from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\dev\\\\saltiest\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var PageService = /*#__PURE__*/(function () {\n  var PageService = /*#__PURE__*/function () {\n    function PageService(http) {\n      _classCallCheck(this, PageService);\n\n      this.http = http;\n      this.API_URL = 'https://salty-suite.herokuapp.com/api/pages';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    _createClass(PageService, [{\n      key: \"getPages\",\n      value: function getPages() {\n        return this.http.get(\"\".concat(this.API_URL));\n      }\n    }, {\n      key: \"getPageByUrl\",\n      value: function getPageByUrl(url) {\n        return this.http.get(url);\n      }\n    }, {\n      key: \"getPageByProjectId\",\n      value: function getPageByProjectId(projectId) {\n        return this.http.get(\"\".concat(this.API_URL, \"/\").concat(projectId, \"/project\"));\n      }\n    }, {\n      key: \"getPageById\",\n      value: function getPageById(id) {\n        return this.http.get(\"\".concat(this.API_URL, \"/\").concat(id));\n      }\n    }, {\n      key: \"createPage\",\n      value: function createPage(data) {\n        return this.http.post(this.API_URL, data, this.httpOptions);\n      }\n    }, {\n      key: \"updatePagesPosition\",\n      value: function updatePagesPosition(id, data) {\n        return this.http.put(\"\".concat(this.API_URL, \"/\").concat(id, \"/updatePosition\"), data, this.httpOptions);\n      }\n    }, {\n      key: \"deletePage\",\n      value: function deletePage(id) {\n        return this.http.delete(\"\".concat(this.API_URL, \"/\").concat(id));\n      }\n    }]);\n\n    return PageService;\n  }();\n\n  PageService.ɵfac = function PageService_Factory(t) {\n    return new (t || PageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PageService,\n    factory: PageService.ɵfac,\n    providedIn: 'root'\n  });\n  return PageService;\n})();","map":null,"metadata":{},"sourceType":"module"}